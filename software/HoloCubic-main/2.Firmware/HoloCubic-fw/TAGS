
include/lv_port_fatfs.h,53
#define LV_PORT_FS_TEMPL_HLV_PORT_FS_TEMPL_H10,156

include/lv_cubic_gui.h,43
#define LV_CUBIC_GUI_HLV_CUBIC_GUI_H2,23

include/network.h,60
#define NETWORK_HNETWORK_H2,18
class NetworkNetwork8,82

include/rgb_led.h,180
#define RGB_HRGB_H2,14
#define RGB_LED_NUM RGB_LED_NUM6,51
#define RGB_LED_PIN RGB_LED_PIN7,73
class PixelPixel10,98
	CRGB color_buffers[RGB_LED_NUM];color_buffers13,121

include/guider_lv_conf.h,719
#define GUIDER_LV_CONF_HGUIDER_LV_CONF_H2,25
#define LV_HOR_RES_MAX LV_HOR_RES_MAX5,126
#define LV_VER_RES_MAX LV_VER_RES_MAX6,164
#define LV_COLOR_DEPTH LV_COLOR_DEPTH14,299
#define LV_DPI LV_DPI20,519
#define LV_MEM_CUSTOM LV_MEM_CUSTOM23,651
#  define LV_MEM_SIZE LV_MEM_SIZE26,768
#  define LV_MEM_ATTRLV_MEM_ATTR29,897
#  define LV_MEM_ADR LV_MEM_ADR33,1031
#  define LV_MEM_AUTO_DEFRAG LV_MEM_AUTO_DEFRAG36,1148
#  define LV_MEM_CUSTOM_INCLUDE LV_MEM_CUSTOM_INCLUDE38,1210
#  define LV_MEM_CUSTOM_ALLOC LV_MEM_CUSTOM_ALLOC39,1298
#  define LV_MEM_CUSTOM_FREE LV_MEM_CUSTOM_FREE40,1365
#define LV_USE_GPU LV_USE_GPU44,1489
#define LV_USE_GPU_STM32_DMA2D LV_USE_GPU_STM32_DMA2D45,1523

include/gui_guider.h,221
#define GUI_GUIDER_HGUI_GUIDER_H2,21
		lv_obj_t* home;home12,146
		lv_obj_t* home_cpicker0;home_cpicker013,164
		lv_obj_t* scenes;scenes14,191
		lv_obj_t* scenes_canvas;scenes_canvas15,211
	}lv_ui;lv_ui16,238

include/images.h,227
#define IMAGES_HIMAGES_H2,17
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN7,85
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST  uint8_t logo_map[] = {logo_map10,124
const lv_img_dsc_t logo = {logo258,87279

include/imu.h,409
#define IMU_HIMU_H2,14
#define IMU_I2C_SDA IMU_I2C_SDA10,120
#define IMU_I2C_SCL IMU_I2C_SCL11,144
class IMUIMU17,238
	MPU6050 imu;imu20,259
	int flag;flag21,273
	int16_t ax, ay, az;ax22,284
	int16_t ax, ay, az;ay22,284
	int16_t ax, ay, az;az22,284
	int16_t gx, gy, gz;gx23,305
	int16_t gx, gy, gz;gy23,305
	int16_t gx, gy, gz;gz23,305
	long  last_update_time;last_update_time25,327

include/guider_fonts.h,47
    #define GUIDER_FONTS_HGUIDER_FONTS_H3,28

include/sd_card.h,85
#define SD_CARD_HSD_CARD_H2,18
class SdCardSdCard8,88
	char buf[128];buf11,112

include/ambient.h,721
#define AMBIENT_HAMBIENT_H2,18
#define AMB_I2C_SDA AMB_I2C_SDA6,56
#define AMB_I2C_SCL AMB_I2C_SCL7,80
#define ADDRESS_BH1750FVI ADDRESS_BH1750FVI9,104
#define ONE_TIME_H_RESOLUTION_MODE ONE_TIME_H_RESOLUTION_MODE10,165
#define ONE_TIME_H_RESOLUTION_MODE2 ONE_TIME_H_RESOLUTION_MODE211,223
#define ONE_TIME_L_RESOLUTION_MODE ONE_TIME_L_RESOLUTION_MODE12,284
class AmbientAmbient14,342
	int mMode;mMode17,367
	unsigned char highByte = 0;highByte18,379
	unsigned char lowByte = 0;lowByte19,408
	unsigned int sensorOut = 0;sensorOut20,436
	unsigned int illuminance = 0;illuminance21,465
	unsigned int lux[5];lux23,497
	long sample_time = 125;sample_time24,519
	long last_time;last_time25,544

include/events_init.h,43
#define EVENTS_INIT_H_EVENTS_INIT_H_2,23

include/lv_port_indev.h,59
#define LV_PORT_INDEV_TEMPL_HLV_PORT_INDEV_TEMPL_H11,161

include/display.h,150
#define DISPLAY_HDISPLAY_H2,18
#define LCD_BL_PIN LCD_BL_PIN6,56
#define LCD_BL_PWM_CHANNEL LCD_BL_PWM_CHANNEL7,77
class DisplayDisplay10,108

lib/lvgl/lv_conf.h,12655
#define LV_CONF_HLV_CONF_H13,189
#define LV_HOR_RES_MAX LV_HOR_RES_MAX23,398
#define LV_VER_RES_MAX LV_VER_RES_MAX24,436
#define LV_COLOR_DEPTH LV_COLOR_DEPTH32,571
#define LV_COLOR_16_SWAP LV_COLOR_16_SWAP36,699
#define LV_COLOR_SCREEN_TRANSP LV_COLOR_SCREEN_TRANSP41,917
#define LV_COLOR_TRANSP LV_COLOR_TRANSP44,1027
#define LV_ANTIALIAS LV_ANTIALIAS47,1173
#define LV_DISP_DEF_REFR_PERIOD LV_DISP_DEF_REFR_PERIOD51,1300
#define LV_DPI LV_DPI56,1543
#define LV_DISP_SMALL_LIMIT LV_DISP_SMALL_LIMIT65,1945
#define LV_DISP_MEDIUM_LIMIT LV_DISP_MEDIUM_LIMIT66,1977
#define LV_DISP_LARGE_LIMIT LV_DISP_LARGE_LIMIT67,2009
typedef int16_t lv_coord_t;lv_coord_t70,2122
#define LV_MEM_CUSTOM LV_MEM_CUSTOM80,2443
#  define LV_MEM_SIZE LV_MEM_SIZE83,2560
#  define LV_MEM_ATTRLV_MEM_ATTR86,2650
#  define LV_MEM_ADR LV_MEM_ADR90,2784
#  define LV_MEM_AUTO_DEFRAG LV_MEM_AUTO_DEFRAG93,2901
#  define LV_MEM_CUSTOM_INCLUDE LV_MEM_CUSTOM_INCLUDE95,2963
#  define LV_MEM_CUSTOM_ALLOC LV_MEM_CUSTOM_ALLOC96,3051
#  define LV_MEM_CUSTOM_FREE LV_MEM_CUSTOM_FREE97,3118
#define LV_MEMCPY_MEMSET_STD LV_MEMCPY_MEMSET_STD102,3377
#define LV_ENABLE_GC LV_ENABLE_GC106,3539
#  define LV_GC_INCLUDE LV_GC_INCLUDE108,3584
#  define LV_MEM_CUSTOM_REALLOC LV_MEM_CUSTOM_REALLOC109,3686
#  define LV_MEM_CUSTOM_GET_SIZE LV_MEM_CUSTOM_GET_SIZE110,3766
#define LV_INDEV_DEF_READ_PERIOD LV_INDEV_DEF_READ_PERIOD121,4109
#define LV_INDEV_DEF_DRAG_LIMIT LV_INDEV_DEF_DRAG_LIMIT124,4186
#define LV_INDEV_DEF_DRAG_THROW LV_INDEV_DEF_DRAG_THROW127,4301
#define LV_INDEV_DEF_LONG_PRESS_TIME LV_INDEV_DEF_LONG_PRESS_TIME131,4427
#define LV_INDEV_DEF_LONG_PRESS_REP_TIME LV_INDEV_DEF_LONG_PRESS_REP_TIME135,4569
#define LV_INDEV_DEF_GESTURE_LIMIT LV_INDEV_DEF_GESTURE_LIMIT139,4651
#define LV_INDEV_DEF_GESTURE_MIN_VELOCITY LV_INDEV_DEF_GESTURE_MIN_VELOCITY142,4756
#define LV_USE_ANIMATION LV_USE_ANIMATION149,4893
typedef void * lv_anim_user_data_t;lv_anim_user_data_t153,5041
#define LV_USE_SHADOW LV_USE_SHADOW158,5130
#define LV_SHADOW_CACHE_SIZE LV_SHADOW_CACHE_SIZE164,5381
#define LV_USE_OUTLINE LV_USE_OUTLINE168,5467
#define LV_USE_PATTERN LV_USE_PATTERN171,5538
#define LV_USE_VALUE_STR LV_USE_VALUE_STR174,5614
#define LV_USE_BLEND_MODES LV_USE_BLEND_MODES177,5709
#define LV_USE_OPA_SCALE LV_USE_OPA_SCALE180,5844
#define LV_USE_IMG_TRANSFORM LV_USE_IMG_TRANSFORM183,5915
#define LV_USE_GROUP LV_USE_GROUP186,6014
typedef void * lv_group_user_data_t;lv_group_user_data_t188,6065
#define LV_USE_GPU LV_USE_GPU192,6157
#define LV_USE_GPU_STM32_DMA2D LV_USE_GPU_STM32_DMA2D193,6262
#define LV_GPU_DMA2D_CMSIS_INCLUDELV_GPU_DMA2D_CMSIS_INCLUDE196,6472
#define LV_USE_GPU_NXP_PXP LV_USE_GPU_NXP_PXP199,6564
#define LV_USE_GPU_NXP_PXP_AUTO_INIT LV_USE_GPU_NXP_PXP_AUTO_INIT206,6981
#define LV_USE_GPU_NXP_VG_LITE LV_USE_GPU_NXP_VG_LITE209,7080
#define LV_USE_FILESYSTEM LV_USE_FILESYSTEM212,7174
typedef void * lv_fs_drv_user_data_t;lv_fs_drv_user_data_t215,7331
#define LV_USE_USER_DATA LV_USE_USER_DATA219,7425
#define LV_USE_PERF_MONITOR LV_USE_PERF_MONITOR222,7523
#define LV_USE_API_EXTENSION_V6 LV_USE_API_EXTENSION_V6225,7625
#define LV_USE_API_EXTENSION_V7 LV_USE_API_EXTENSION_V7226,7660
#define LV_IMG_CF_INDEXED LV_IMG_CF_INDEXED233,7821
#define LV_IMG_CF_ALPHA LV_IMG_CF_ALPHA236,7893
#define LV_IMG_CACHE_DEF_SIZE LV_IMG_CACHE_DEF_SIZE244,8322
typedef void * lv_img_decoder_user_data_t;lv_img_decoder_user_data_t247,8456
#define LV_BIG_ENDIAN_SYSTEM LV_BIG_ENDIAN_SYSTEM254,8610
#define LV_ATTRIBUTE_TICK_INCLV_ATTRIBUTE_TICK_INC257,8703
#define LV_ATTRIBUTE_TASK_HANDLERLV_ATTRIBUTE_TASK_HANDLER260,8796
#define LV_ATTRIBUTE_FLUSH_READYLV_ATTRIBUTE_FLUSH_READY263,8897
#define LV_ATTRIBUTE_MEM_ALIGN_SIZELV_ATTRIBUTE_MEM_ALIGN_SIZE266,8973
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN273,9344
#define LV_ATTRIBUTE_LARGE_CONSTLV_ATTRIBUTE_LARGE_CONST277,9452
#define LV_ATTRIBUTE_FAST_MEMLV_ATTRIBUTE_FAST_MEM281,9605
#define LV_EXPORT_CONST_INT(LV_EXPORT_CONST_INT289,9862
#define LV_ATTRIBUTE_DMALV_ATTRIBUTE_DMA293,10071
#define LV_TICK_CUSTOM LV_TICK_CUSTOM301,10266
#define LV_TICK_CUSTOM_INCLUDE LV_TICK_CUSTOM_INCLUDE303,10319
#define LV_TICK_CUSTOM_SYS_TIME_EXPR LV_TICK_CUSTOM_SYS_TIME_EXPR304,10411
typedef void * lv_disp_drv_user_data_t;             /*Type of user data in the display driver*/lv_disp_drv_user_data_t307,10547
typedef void * lv_indev_drv_user_data_t;            /*Type of user data in the input device driver*/lv_indev_drv_user_data_t308,10643
#define LV_USE_LOG LV_USE_LOG315,10830
#  define LV_LOG_LEVEL LV_LOG_LEVEL324,11245
#  define LV_LOG_PRINTF LV_LOG_PRINTF328,11398
#define LV_USE_DEBUG LV_USE_DEBUG344,11949
#define LV_USE_ASSERT_NULL LV_USE_ASSERT_NULL348,12047
#define LV_USE_ASSERT_MEM LV_USE_ASSERT_MEM351,12153
#define LV_USE_ASSERT_MEM_INTEGRITY LV_USE_ASSERT_MEM_INTEGRITY354,12258
#define LV_USE_ASSERT_STR LV_USE_ASSERT_STR359,12501
#define LV_USE_ASSERT_OBJ LV_USE_ASSERT_OBJ363,12699
#define LV_USE_ASSERT_STYLE LV_USE_ASSERT_STYLE366,12791
#define LV_FONT_MONTSERRAT_8 LV_FONT_MONTSERRAT_8382,13293
#define LV_FONT_MONTSERRAT_10 LV_FONT_MONTSERRAT_10383,13328
#define LV_FONT_MONTSERRAT_12 LV_FONT_MONTSERRAT_12384,13363
#define LV_FONT_MONTSERRAT_14 LV_FONT_MONTSERRAT_14385,13398
#define LV_FONT_MONTSERRAT_16 LV_FONT_MONTSERRAT_16386,13433
#define LV_FONT_MONTSERRAT_18 LV_FONT_MONTSERRAT_18387,13468
#define LV_FONT_MONTSERRAT_20 LV_FONT_MONTSERRAT_20388,13503
#define LV_FONT_MONTSERRAT_22 LV_FONT_MONTSERRAT_22389,13538
#define LV_FONT_MONTSERRAT_24 LV_FONT_MONTSERRAT_24390,13573
#define LV_FONT_MONTSERRAT_26 LV_FONT_MONTSERRAT_26391,13608
#define LV_FONT_MONTSERRAT_28 LV_FONT_MONTSERRAT_28392,13643
#define LV_FONT_MONTSERRAT_30 LV_FONT_MONTSERRAT_30393,13678
#define LV_FONT_MONTSERRAT_32 LV_FONT_MONTSERRAT_32394,13713
#define LV_FONT_MONTSERRAT_34 LV_FONT_MONTSERRAT_34395,13748
#define LV_FONT_MONTSERRAT_36 LV_FONT_MONTSERRAT_36396,13783
#define LV_FONT_MONTSERRAT_38 LV_FONT_MONTSERRAT_38397,13818
#define LV_FONT_MONTSERRAT_40 LV_FONT_MONTSERRAT_40398,13853
#define LV_FONT_MONTSERRAT_42 LV_FONT_MONTSERRAT_42399,13888
#define LV_FONT_MONTSERRAT_44 LV_FONT_MONTSERRAT_44400,13923
#define LV_FONT_MONTSERRAT_46 LV_FONT_MONTSERRAT_46401,13958
#define LV_FONT_MONTSERRAT_48 LV_FONT_MONTSERRAT_48402,13993
#define LV_FONT_MONTSERRAT_12_SUBPX LV_FONT_MONTSERRAT_12_SUBPX405,14064
#define LV_FONT_MONTSERRAT_28_COMPRESSED LV_FONT_MONTSERRAT_28_COMPRESSED406,14107
#define LV_FONT_DEJAVU_16_PERSIAN_HEBREW LV_FONT_DEJAVU_16_PERSIAN_HEBREW407,14163
#define LV_FONT_SIMSUN_16_CJK LV_FONT_SIMSUN_16_CJK408,14263
#define LV_FONT_UNSCII_8 LV_FONT_UNSCII_8412,14407
#define LV_FONT_UNSCII_16 LV_FONT_UNSCII_16413,14438
#define LV_FONT_CUSTOM_DECLARELV_FONT_CUSTOM_DECLARE421,14737
#define LV_FONT_FMT_TXT_LARGE LV_FONT_FMT_TXT_LARGE426,14967
#define LV_USE_FONT_COMPRESSED LV_USE_FONT_COMPRESSED431,15153
#define LV_USE_FONT_SUBPX LV_USE_FONT_SUBPX434,15219
#define LV_FONT_SUBPX_BGR LV_FONT_SUBPX_BGR440,15398
typedef void * lv_font_user_data_t;lv_font_user_data_t444,15524
#define LV_USE_THEME_EMPTY LV_USE_THEME_EMPTY454,15750
#define LV_USE_THEME_TEMPLATE LV_USE_THEME_TEMPLATE458,15876
#define LV_USE_THEME_MATERIAL LV_USE_THEME_MATERIAL467,16208
#define LV_USE_THEME_MONO LV_USE_THEME_MONO474,16494
#define LV_THEME_DEFAULT_INCLUDE LV_THEME_DEFAULT_INCLUDE476,16530
#define LV_THEME_DEFAULT_INIT LV_THEME_DEFAULT_INIT477,16634
#define LV_THEME_DEFAULT_COLOR_PRIMARY LV_THEME_DEFAULT_COLOR_PRIMARY478,16701
#define LV_THEME_DEFAULT_COLOR_SECONDARY LV_THEME_DEFAULT_COLOR_SECONDARY479,16768
#define LV_THEME_DEFAULT_FLAG LV_THEME_DEFAULT_FLAG480,16835
#define LV_THEME_DEFAULT_FONT_SMALL LV_THEME_DEFAULT_FONT_SMALL481,16908
#define LV_THEME_DEFAULT_FONT_NORMAL LV_THEME_DEFAULT_FONT_NORMAL482,16975
#define LV_THEME_DEFAULT_FONT_SUBTITLE LV_THEME_DEFAULT_FONT_SUBTITLE483,17042
#define LV_THEME_DEFAULT_FONT_TITLE LV_THEME_DEFAULT_FONT_TITLE484,17109
#define LV_TXT_ENC LV_TXT_ENC495,17393
#define LV_TXT_BREAK_CHARS LV_TXT_BREAK_CHARS498,17472
#define LV_TXT_LINE_BREAK_LONG_LEN LV_TXT_LINE_BREAK_LONG_LEN502,17633
#define LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN506,17805
#define LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN510,17976
#define LV_TXT_COLOR_CMD LV_TXT_COLOR_CMD513,18090
#define LV_USE_BIDI LV_USE_BIDI519,18370
#define LV_BIDI_BASE_DIR_DEF LV_BIDI_BASE_DIR_DEF525,18583
#define LV_USE_ARABIC_PERSIAN_CHARS LV_USE_ARABIC_PERSIAN_CHARS531,18787
#define LV_SPRINTF_CUSTOM LV_SPRINTF_CUSTOM534,18872
#  define LV_SPRINTF_INCLUDE LV_SPRINTF_INCLUDE536,18924
#  define lv_snprintf lv_snprintf537,18963
#  define lv_vsnprintf lv_vsnprintf538,18998
#  define LV_SPRINTF_DISABLE_FLOAT LV_SPRINTF_DISABLE_FLOAT540,19065
typedef void * lv_obj_user_data_t;lv_obj_user_data_t549,19308
#define LV_USE_USER_DATA_FREE LV_USE_USER_DATA_FREE551,19384
#  define LV_USER_DATA_FREE_INCLUDE LV_USER_DATA_FREE_INCLUDE553,19442
#  define LV_USER_DATA_FREE LV_USER_DATA_FREE555,19597
#define LV_USE_OBJ_REALIGN LV_USE_OBJ_REALIGN560,19775
#define LV_USE_EXT_CLICK_AREA LV_USE_EXT_CLICK_AREA567,20119
#define LV_USE_ARC LV_USE_ARC577,20343
#define LV_USE_BAR LV_USE_BAR580,20396
#define LV_USE_BTN LV_USE_BTN583,20457
#define LV_USE_BTNMATRIX LV_USE_BTNMATRIX586,20520
#define LV_USE_CALENDAR LV_USE_CALENDAR589,20583
#  define LV_CALENDAR_WEEK_STARTS_MONDAY LV_CALENDAR_WEEK_STARTS_MONDAY591,20629
#define LV_USE_CANVAS LV_USE_CANVAS595,20717
#define LV_USE_CHECKBOX LV_USE_CHECKBOX598,20791
#define LV_USE_CHART LV_USE_CHART601,20852
#  define LV_CHART_AXIS_TICK_LABEL_MAX_LEN LV_CHART_AXIS_TICK_LABEL_MAX_LEN603,20895
#define LV_USE_CONT LV_USE_CONT607,20984
#define LV_USE_CPICKER LV_USE_CPICKER610,21045
#define LV_USE_DROPDOWN LV_USE_DROPDOWN613,21143
#  define LV_DROPDOWN_DEF_ANIM_TIME LV_DROPDOWN_DEF_ANIM_TIME616,21262
#define LV_USE_GAUGE LV_USE_GAUGE620,21360
#define LV_USE_IMG LV_USE_IMG623,21421
#define LV_USE_IMGBTN LV_USE_IMGBTN626,21487
#  define LV_IMGBTN_TILED LV_IMGBTN_TILED629,21616
#define LV_USE_KEYBOARD LV_USE_KEYBOARD633,21689
#define LV_USE_LABEL LV_USE_LABEL636,21749
#  define LV_LABEL_DEF_SCROLL_SPEED LV_LABEL_DEF_SCROLL_SPEED639,21875
#  define LV_LABEL_WAIT_CHAR_COUNT LV_LABEL_WAIT_CHAR_COUNT642,21978
#  define LV_LABEL_TEXT_SEL LV_LABEL_TEXT_SEL645,22063
#  define LV_LABEL_LONG_TXT_HINT LV_LABEL_LONG_TXT_HINT648,22194
#define LV_USE_LED LV_USE_LED652,22272
#  define LV_LED_BRIGHT_MIN LV_LED_BRIGHT_MIN654,22313
#  define LV_LED_BRIGHT_MAX LV_LED_BRIGHT_MAX655,22374
#define LV_USE_LINE LV_USE_LINE659,22468
#define LV_USE_LIST LV_USE_LIST662,22578
#  define LV_LIST_DEF_ANIM_TIME LV_LIST_DEF_ANIM_TIME665,22707
#define LV_USE_LINEMETER LV_USE_LINEMETER669,22786
#  define LV_LINEMETER_PRECISE LV_LINEMETER_PRECISE677,23023
#define LV_USE_OBJMASK LV_USE_OBJMASK681,23094
#define LV_USE_MSGBOX LV_USE_MSGBOX684,23180
#define LV_USE_PAGE LV_USE_PAGE687,23242
#  define LV_PAGE_DEF_ANIM_TIME LV_PAGE_DEF_ANIM_TIME690,23345
#define LV_USE_SPINNER LV_USE_SPINNER694,23437
#  define LV_SPINNER_DEF_ARC_LENGTH LV_SPINNER_DEF_ARC_LENGTH696,23491
#  define LV_SPINNER_DEF_SPIN_TIME LV_SPINNER_DEF_SPIN_TIME697,23547
#  define LV_SPINNER_DEF_ANIM LV_SPINNER_DEF_ANIM698,23602
#define LV_USE_ROLLER LV_USE_ROLLER702,23714
#  define LV_ROLLER_DEF_ANIM_TIME LV_ROLLER_DEF_ANIM_TIME705,23812
#  define LV_ROLLER_INF_PAGES LV_ROLLER_INF_PAGES708,23911
#define LV_USE_SLIDER LV_USE_SLIDER712,23993
#define LV_USE_SPINBOX LV_USE_SPINBOX715,24055
#define LV_USE_SWITCH LV_USE_SWITCH718,24124
#define LV_USE_TEXTAREA LV_USE_TEXTAREA721,24203
#  define LV_TEXTAREA_DEF_CURSOR_BLINK_TIME LV_TEXTAREA_DEF_CURSOR_BLINK_TIME723,24260
#  define LV_TEXTAREA_DEF_PWD_SHOW_TIME LV_TEXTAREA_DEF_PWD_SHOW_TIME724,24319
#define LV_USE_TABLE LV_USE_TABLE728,24421
#  define LV_TABLE_COL_MAX LV_TABLE_COL_MAX730,24464
#  define LV_TABLE_CELL_STYLE_CNT LV_TABLE_CELL_STYLE_CNT731,24497
#define LV_USE_TABVIEW LV_USE_TABVIEW736,24583
#  define LV_TABVIEW_DEF_ANIM_TIME LV_TABVIEW_DEF_ANIM_TIME739,24690
#define LV_USE_TILEVIEW LV_USE_TILEVIEW743,24778
#  define LV_TILEVIEW_DEF_ANIM_TIME LV_TILEVIEW_DEF_ANIM_TIME746,24879
#define LV_USE_WIN LV_USE_WIN750,24999
#  define _CRT_SECURE_NO_WARNINGS_CRT_SECURE_NO_WARNINGS757,25193

lib/lvgl/lvgl/lvgl.h,0

lib/lvgl/lvgl.mk,0

lib/lvgl/lvgl.h,293
#define LVGL_HLVGL_H7,83
#define LVGL_VERSION_MAJOR LVGL_VERSION_MAJOR17,226
#define LVGL_VERSION_MINOR LVGL_VERSION_MINOR18,255
#define LVGL_VERSION_PATCH LVGL_VERSION_PATCH19,284
#define LVGL_VERSION_INFO LVGL_VERSION_INFO20,313
#define LV_VERSION_CHECK(LV_VERSION_CHECK122,2890

lib/lvgl/examples/lvgl_display/porting/lv_port_disp_template.h,0

lib/lvgl/examples/lvgl_display/porting/lv_port_fs_template.h,0

lib/lvgl/examples/lvgl_display/porting/lv_port_disp_template.c,62
typedef int keep_pedantic_happy;keep_pedantic_happy197,6878

lib/lvgl/examples/lvgl_display/porting/lv_port_fs_template.c,1752
    uint32_t dummy1;dummy128,641
    uint32_t dummy2;dummy229,662
}file_t;file_t30,683
    uint32_t dummy1;dummy135,840
    uint32_t dummy2;dummy236,861
}dir_t;dir_t37,882
void lv_port_fs_init(void)lv_port_fs_init76,2436
static void fs_init(void)fs_init119,3678
static lv_fs_res_t fs_open (lv_fs_drv_t * drv, void * file_p, const char * path, lv_fs_mode_t mode)fs_open134,4157
static lv_fs_res_t fs_close (lv_fs_drv_t * drv, void * file_p)fs_close168,4947
static lv_fs_res_t fs_read (lv_fs_drv_t * drv, void * file_p, void * buf, uint32_t btr, uint32_t * br)fs_read187,5509
static lv_fs_res_t fs_write(lv_fs_drv_t * drv, void * file_p, const void * buf, uint32_t btw, uint32_t * bw)fs_write205,6066
static lv_fs_res_t fs_seek (lv_fs_drv_t * drv, void * file_p, uint32_t pos)fs_seek222,6630
static lv_fs_res_t fs_size (lv_fs_drv_t * drv, void * file_p, uint32_t * size_p)fs_size238,7061
static lv_fs_res_t fs_tell (lv_fs_drv_t * drv, void * file_p, uint32_t * pos_p)fs_tell254,7539
static lv_fs_res_t fs_remove (lv_fs_drv_t * drv, const char *path)fs_remove269,7900
static lv_fs_res_t fs_trunc (lv_fs_drv_t * drv, void * file_p)fs_trunc285,8380
static lv_fs_res_t fs_rename (lv_fs_drv_t * drv, const char * oldname, const char * newname)fs_rename301,8751
static lv_fs_res_t fs_free (lv_fs_drv_t * drv, uint32_t * total_p, uint32_t * free_p)fs_free318,9257
static lv_fs_res_t fs_dir_open (lv_fs_drv_t * drv, void * rddir_p, const char *path)fs_dir_open334,9714
static lv_fs_res_t fs_dir_read (lv_fs_drv_t * drv, void * rddir_p, char *fn)fs_dir_read351,10237
static lv_fs_res_t fs_dir_close (lv_fs_drv_t * drv, void * rddir_p)fs_dir_close366,10633
typedef int keep_pedantic_happy;keep_pedantic_happy378,10896

lib/lvgl/examples/lvgl_display/porting/lv_port_indev_template.c,1779
lv_indev_t * indev_touchpad;indev_touchpad52,1411
lv_indev_t * indev_mouse;indev_mouse53,1440
lv_indev_t * indev_keypad;indev_keypad54,1466
lv_indev_t * indev_encoder;indev_encoder55,1493
lv_indev_t * indev_button;indev_button56,1521
static int32_t encoder_diff;encoder_diff58,1549
static lv_indev_state_t encoder_state;encoder_state59,1578
void lv_port_indev_init(void)lv_port_indev_init69,1755
static void touchpad_init(void)touchpad_init184,5213
static bool touchpad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)touchpad_read190,5336
static bool touchpad_is_pressed(void)touchpad_is_pressed212,5953
static void touchpad_get_xy(lv_coord_t * x, lv_coord_t * y)touchpad_get_xy220,6103
static void mouse_init(void)mouse_init234,6309
static bool mouse_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)mouse_read240,6426
static bool mouse_is_pressed(void)mouse_is_pressed257,6935
static void mouse_get_xy(lv_coord_t * x, lv_coord_t * y)mouse_get_xy265,7079
static void keypad_init(void)keypad_init278,7283
static bool keypad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)keypad_read284,7401
static uint32_t keypad_get_key(void)keypad_get_key327,8542
static void encoder_init(void)encoder_init339,8713
static bool encoder_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)encoder_read345,8834
static void encoder_handler(void)encoder_handler356,9160
static void button_init(void)button_init370,9378
static bool button_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)button_read376,9497
static int8_t button_get_pressed_id(void)button_get_pressed_id399,10064
static bool button_is_pressed(uint8_t id)button_is_pressed416,10437
typedef int keep_pedantic_happy;keep_pedantic_happy427,10636

lib/lvgl/examples/lvgl_display/porting/lv_port_indev_template.h,0

lib/lvgl/examples/lvgl_fs/porting/lv_port_disp_template.h,0

lib/lvgl/examples/lvgl_fs/porting/lv_port_fs_template.h,0

lib/lvgl/examples/lvgl_fs/porting/lv_port_disp_template.c,62
typedef int keep_pedantic_happy;keep_pedantic_happy197,6878

lib/lvgl/examples/lvgl_fs/porting/lv_port_fs_template.c,1752
    uint32_t dummy1;dummy128,641
    uint32_t dummy2;dummy229,662
}file_t;file_t30,683
    uint32_t dummy1;dummy135,840
    uint32_t dummy2;dummy236,861
}dir_t;dir_t37,882
void lv_port_fs_init(void)lv_port_fs_init76,2436
static void fs_init(void)fs_init119,3678
static lv_fs_res_t fs_open (lv_fs_drv_t * drv, void * file_p, const char * path, lv_fs_mode_t mode)fs_open134,4157
static lv_fs_res_t fs_close (lv_fs_drv_t * drv, void * file_p)fs_close168,4947
static lv_fs_res_t fs_read (lv_fs_drv_t * drv, void * file_p, void * buf, uint32_t btr, uint32_t * br)fs_read187,5509
static lv_fs_res_t fs_write(lv_fs_drv_t * drv, void * file_p, const void * buf, uint32_t btw, uint32_t * bw)fs_write205,6066
static lv_fs_res_t fs_seek (lv_fs_drv_t * drv, void * file_p, uint32_t pos)fs_seek222,6630
static lv_fs_res_t fs_size (lv_fs_drv_t * drv, void * file_p, uint32_t * size_p)fs_size238,7061
static lv_fs_res_t fs_tell (lv_fs_drv_t * drv, void * file_p, uint32_t * pos_p)fs_tell254,7539
static lv_fs_res_t fs_remove (lv_fs_drv_t * drv, const char *path)fs_remove269,7900
static lv_fs_res_t fs_trunc (lv_fs_drv_t * drv, void * file_p)fs_trunc285,8380
static lv_fs_res_t fs_rename (lv_fs_drv_t * drv, const char * oldname, const char * newname)fs_rename301,8751
static lv_fs_res_t fs_free (lv_fs_drv_t * drv, uint32_t * total_p, uint32_t * free_p)fs_free318,9257
static lv_fs_res_t fs_dir_open (lv_fs_drv_t * drv, void * rddir_p, const char *path)fs_dir_open334,9714
static lv_fs_res_t fs_dir_read (lv_fs_drv_t * drv, void * rddir_p, char *fn)fs_dir_read351,10237
static lv_fs_res_t fs_dir_close (lv_fs_drv_t * drv, void * rddir_p)fs_dir_close366,10633
typedef int keep_pedantic_happy;keep_pedantic_happy378,10896

lib/lvgl/examples/lvgl_fs/porting/lv_port_indev_template.c,1779
lv_indev_t * indev_touchpad;indev_touchpad52,1411
lv_indev_t * indev_mouse;indev_mouse53,1440
lv_indev_t * indev_keypad;indev_keypad54,1466
lv_indev_t * indev_encoder;indev_encoder55,1493
lv_indev_t * indev_button;indev_button56,1521
static int32_t encoder_diff;encoder_diff58,1549
static lv_indev_state_t encoder_state;encoder_state59,1578
void lv_port_indev_init(void)lv_port_indev_init69,1755
static void touchpad_init(void)touchpad_init184,5213
static bool touchpad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)touchpad_read190,5336
static bool touchpad_is_pressed(void)touchpad_is_pressed212,5953
static void touchpad_get_xy(lv_coord_t * x, lv_coord_t * y)touchpad_get_xy220,6103
static void mouse_init(void)mouse_init234,6309
static bool mouse_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)mouse_read240,6426
static bool mouse_is_pressed(void)mouse_is_pressed257,6935
static void mouse_get_xy(lv_coord_t * x, lv_coord_t * y)mouse_get_xy265,7079
static void keypad_init(void)keypad_init278,7283
static bool keypad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)keypad_read284,7401
static uint32_t keypad_get_key(void)keypad_get_key327,8542
static void encoder_init(void)encoder_init339,8713
static bool encoder_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)encoder_read345,8834
static void encoder_handler(void)encoder_handler356,9160
static void button_init(void)button_init370,9378
static bool button_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)button_read376,9497
static int8_t button_get_pressed_id(void)button_get_pressed_id399,10064
static bool button_is_pressed(uint8_t id)button_is_pressed416,10437
typedef int keep_pedantic_happy;keep_pedantic_happy427,10636

lib/lvgl/examples/lvgl_fs/porting/lv_port_indev_template.h,0

lib/lvgl/scripts/release/main.py,319
upstream_org_url = "https://github.com/lvgl/"upstream_org_url12,145
workdir = "./release_tmp"workdir13,191
proj_list = [ "lv_sim_eclipse_sdl", "lv_sim_emscripten"]proj_list14,217
def upstream(repo):upstream16,275
def clone(repo):clone19,344
def clone_repos():clone_repos27,597
def cleanup():cleanup40,853

lib/lvgl/scripts/release/proj.py,52
def make(repo_path, auto_push = False):make11,114

lib/lvgl/scripts/release/dev.py,189
def lvgl_update_ver(ver, br):lvgl_update_ver10,125
def docs_update_ver(ver, br):docs_update_ver21,389
def merge_dev_to_master():merge_dev_to_master32,672
def make(mode):make47,1102

lib/lvgl/scripts/release/release.py,378
def update_release_branch(release_br, master_br = "master"):update_release_branch10,117
def lvgl_release(ver):lvgl_release17,416
def lv_examples_release(ver):lv_examples_release82,2032
def lv_drivers_release(ver):lv_drivers_release100,2643
def docs_release(ver):docs_release118,3115
def blog_release(ver, release_note):blog_release141,3721
def make():make164,4312

lib/lvgl/scripts/release/com.py,260
def cmd(c, ask_on_err = True):cmd11,128
def define_set(fn, name, value):    define_set19,325
def ver_format(ver):ver_format39,822
def get_lvgl_version(br):get_lvgl_version44,968
def push(c):push79,1805
def update_version(ver):update_version82,1852

lib/lvgl/scripts/code-format.sh,0

lib/lvgl/scripts/cppcheck_run.sh,0

lib/lvgl/scripts/lv_conf_checker.py,410
fin = open("../lv_conf_template.h", "r")fin15,248
fout = open("../src/lv_conf_internal.h", "w")fout16,289
started = 0started72,1624
      started = 1started77,1722
  r = re.search(r'^ *# *define ([^\s]+).*$', i)r84,1826
    line = re.sub('\(.*?\)', '', r[1], 1)    #remove parentheses from macrosline95,2140
    dr = re.sub('.*# *define', '', i, 1)dr96,2217
    d = "#    define " + drd97,2258

lib/lvgl/scripts/infer_run.sh,0

lib/lvgl/scripts/built_in_font/built_in_font_gen.py,1918
					type=int, type11,465
					metavar = 'px', metavar12,481
					nargs='?', nargs13,503
					help='Size of the font in px')help14,520
					type=int, type16,586
					metavar = '1,2,4', metavar17,602
					nargs='?', nargs18,627
					help='Bit per pixel')help19,644
					nargs='+', nargs21,709
					metavar = 'start-end', metavar22,726
					default=['0x20-0x7F,0xB0,0x2022'], default23,755
					help='Ranges and/or characters to include. Default is 0x20-7F (ASCII). E.g. -r 0x20-0x7F, 0x200, 324')help24,796
					nargs='+', nargs26,938
					metavar = 'sym', metavar27,955
					default=[''],default28,978
					help=u'Symbols to include. E.g. -s ÁÉŐ'.encode('utf-8'))help29,997
					metavar = 'file', metavar31,1093
					nargs='?', nargs32,1117
					default='Montserrat-Medium.ttf', default33,1134
					help='A TTF or WOFF file')help34,1173
					nargs='?', nargs36,1244
					metavar='file', metavar37,1261
					help='Output file name. E.g. my_font_20.c')help38,1283
                    help='Compress the bitmaps')help40,1389
                    help='3 times wider letters for sub pixel rendering')help42,1490
args = parser.parse_args()args44,1585
	compr = "--no-compress --no-prefilter"compr47,1642
	compr = ""compr49,1688
syms = "61441,61448,61451,61452,61452,61453,61457,61459,61461,61465,61468,61473,61478,61479,61480,61502,61512,61515,61516,61517,61521,61522,61523,61524,61543,61544,61550,61552,61553,61556,61559,61560,61561,61563,61587,61589,61636,61637,61639,61671,61674,61683,61724,61732,61787,61931,62016,62017,62018,62019,62020,62087,62099,62212,62189,62810,63426,63650"syms55,1802
cmd = "lv_font_conv {} --bpp {} --size {} --font {} -r {} {} --font FontAwesome5-Solid+Brands+Regular.woff -r {} --format lvgl -o {} --force-fast-kern-format".format(compr, args.bpp, args.size, args.font, args.range[0], args.symbols[0], syms, args.output)cmd58,2209

lib/lvgl/scripts/built_in_font/generate_all.py,0

lib/lvgl/tests/Makefile,644
CC ?= gccCC4,15
LVGL_DIR ?= ${shell pwd}/../..LVGL_DIR5,25
LVGL_DIR_NAME ?= lvglLVGL_DIR_NAME6,56
WARNINGS = -Werror -Wall -Wextra \WARNINGS8,79
OPTIMIZATION ?= -O3 -g0OPTIMIZATION15,503
CFLAGS ?= -I$(LVGL_DIR)/ $(DEFINES) $(WARNINGS) $(OPTIMIZATION) -I$(LVGL_DIR) -I.CFLAGS18,529
LDFLAGS ?=  -lpngLDFLAGS20,612
BIN ?= demoBIN21,630
MAINSRC = ./lv_test_main.cMAINSRC25,674
OBJEXT ?= .oOBJEXT39,1041
AOBJS = $(ASRCS:.S=$(OBJEXT))AOBJS41,1055
COBJS = $(CSRCS:.c=$(OBJEXT))COBJS42,1085
MAINOBJ = $(MAINSRC:.c=$(OBJEXT))MAINOBJ44,1116
SRCS = $(ASRCS) $(CSRCS) $(MAINSRC)SRCS46,1151
OBJS = $(AOBJS) $(COBJS)OBJS47,1187

lib/lvgl/tests/lv_test_fonts/font_2.c,744
#define FONT_2 FONT_210,809
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,936
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc747,22092
static const uint16_t unicode_list_1[] = {unicode_list_1909,36095
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps921,36693
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping939,37251
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping964,37963
static const int8_t kern_class_values[] =kern_class_values989,38668
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes1369,50080
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc1383,50469
lv_font_t font_2 = {font_21401,50836

lib/lvgl/tests/lv_test_fonts/font_1.c,744
#define FONT_1 FONT_110,755
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,882
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc717,20460
static const uint16_t unicode_list_1[] = {unicode_list_1879,34457
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps891,35055
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping909,35613
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping934,36325
static const int8_t kern_class_values[] =kern_class_values959,37030
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes1339,48442
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc1353,48831
lv_font_t font_1 = {font_11371,49198

lib/lvgl/tests/lv_test_fonts/font_3.c,353
#define FONT_3 FONT_310,346
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,473
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc802,29905
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps908,38895
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc923,39257
lv_font_t font_3 = {font_3941,39614

lib/lvgl/tests/lv_test_core/lv_test_obj.h,41
#define LV_TEST_OBJ_HLV_TEST_OBJ_H7,57

lib/lvgl/tests/lv_test_core/lv_test_style.h,45
#define LV_TEST_STYLE_HLV_TEST_STYLE_H7,61

lib/lvgl/tests/lv_test_core/lv_test_font_loader.c,137
void lv_test_font_loader(void)lv_test_font_loader51,915
static int compare_fonts(lv_font_t * f1, lv_font_t * f2)compare_fonts71,1508

lib/lvgl/tests/lv_test_core/lv_test_core.h,43
#define LV_TEST_CORE_HLV_TEST_CORE_H7,59

lib/lvgl/tests/lv_test_core/lv_test_obj.c,123
void lv_test_obj(void)lv_test_obj40,657
static void create_delete_change_parent(void)create_delete_change_parent55,940

lib/lvgl/tests/lv_test_core/lv_test_style.c,333
void lv_test_style(void)lv_test_style45,790
static void empty_style(void)empty_style65,1150
static void add_remove_read_prop(void)add_remove_read_prop95,2124
static void cascade(void)cascade170,5404
static void copy(void)copy267,10133
static void states(void)states316,11875
static void mem_leak(void)mem_leak421,18273

lib/lvgl/tests/lv_test_core/lv_test_core.c,44
void lv_test_core(void)lv_test_core41,673

lib/lvgl/tests/lv_test_core/lv_test_font_loader.h,57
#define LV_TEST_FONT_LOADER_HLV_TEST_FONT_LOADER_H7,68

lib/lvgl/tests/lv_test_assert.h,47
#define LV_TEST_ASSERT_HLV_TEST_ASSERT_H7,63

lib/lvgl/tests/build.py,473
lvgldirname = os.path.abspath('..')lvgldirname5,35
lvgldirname = os.path.basename(lvgldirname)lvgldirname6,71
lvgldirname = '"' + lvgldirname + '"'lvgldirname7,115
optimization = '"-O3 -g0"'optimization10,244
def build(name, defines):build13,273
minimal_monochrome = {minimal_monochrome54,1379
all_obj_minimal_features = {all_obj_minimal_features133,3490
all_obj_all_features = {all_obj_all_features209,5639
advanced_features = {advanced_features288,7797

lib/lvgl/tests/lv_test_conf.h,819
#define LV_TEST_CONF_HLV_TEST_CONF_H7,59
#define LV_TICK_CUSTOM_SYS_TIME_EXPR LV_TICK_CUSTOM_SYS_TIME_EXPR26,351
typedef int16_t lv_coord_t;lv_coord_t28,407
typedef void * lv_disp_drv_user_data_t;             /*Type of user data in the display driver*/lv_disp_drv_user_data_t29,435
typedef void * lv_indev_drv_user_data_t;            /*Type of user data in the input device driver*/lv_indev_drv_user_data_t30,531
typedef void * lv_font_user_data_t;lv_font_user_data_t31,632
typedef void * lv_obj_user_data_t;lv_obj_user_data_t32,668
typedef void * lv_anim_user_data_t;lv_anim_user_data_t33,703
typedef void * lv_group_user_data_t;lv_group_user_data_t34,739
typedef void * lv_fs_drv_user_data_t;lv_fs_drv_user_data_t35,776
typedef void * lv_img_decoder_user_data_t;lv_img_decoder_user_data_t36,814

lib/lvgl/tests/lv_test_main.c,919
lv_color_t test_fb[LV_HOR_RES_MAX * LV_VER_RES_MAX];test_fb13,313
int main(void)main15,367
static lv_fs_res_t open_cb(struct _lv_fs_drv_t * drv, void * file_p, const char * path, lv_fs_mode_t mode)open_cb31,568
static lv_fs_res_t close_cb(struct _lv_fs_drv_t * drv, void * file_p)close_cb42,866
static lv_fs_res_t read_cb(struct _lv_fs_drv_t * drv, void * file_p, void * buf, uint32_t btr, uint32_t * br)read_cb51,1036
static lv_fs_res_t seek_cb(struct _lv_fs_drv_t * drv, void * file_p, uint32_t pos)seek_cb60,1297
static lv_fs_res_t tell_cb(struct _lv_fs_drv_t * drv, void * file_p, uint32_t * pos_p)tell_cb70,1496
static bool ready_cb(struct _lv_fs_drv_t * drv)ready_cb80,1692
static void hal_init(void)hal_init87,1785
static void dummy_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)dummy_flush_cb118,3075
uint32_t custom_tick_get(void)custom_tick_get128,3336

lib/lvgl/tests/lv_test_widgets/lv_test_label.h,45
#define LV_TEST_LABEL_HLV_TEST_LABEL_H7,61

lib/lvgl/tests/lv_test_widgets/lv_test_label.c,96
void lv_test_label(void)lv_test_label40,645
static void create_copy(void)create_copy59,1005

lib/lvgl/tests/lv_test_assert.c,1752
#define PNG_DEBUG PNG_DEBUG24,405
#define REF_IMGS_PATH REF_IMGS_PATH32,562
    int width, height;width38,688
    int width, height;height38,688
    png_byte color_type;color_type39,711
    png_byte bit_depth;bit_depth40,736
    png_structp png_ptr;png_ptr42,761
    png_infop info_ptr;info_ptr43,786
    int number_of_passes;number_of_passes44,810
    png_bytep * row_pointers;row_pointers45,836
}png_img_t;png_img_t46,866
void lv_test_print(const char * s, ...)lv_test_print69,1376
void lv_test_exit(const char * s, ...)lv_test_exit79,1539
void lv_test_error(const char * s, ...)lv_test_error91,1715
void lv_test_assert_true(int32_t expression, const char * s)lv_test_assert_true101,1890
void lv_test_assert_int_eq(int32_t n_ref, int32_t n_act, const char * s)lv_test_assert_int_eq110,2147
void lv_test_assert_int_gt(int32_t n_ref, int32_t n_act, const char * s)lv_test_assert_int_gt119,2417
void lv_test_assert_int_lt(int32_t n_ref, int32_t n_act, const char * s)lv_test_assert_int_lt128,2712
void lv_test_assert_str_eq(const char * s_ref, const char * s_act, const char * s)lv_test_assert_str_eq138,3008
void lv_test_assert_array_eq(const uint8_t *p_ref, const uint8_t *p_act, int32_t size, const char * s)lv_test_assert_array_eq148,3300
void lv_test_assert_ptr_eq(const void * p_ref, const void * p_act, const char * s)lv_test_assert_ptr_eq158,3648
void lv_test_assert_color_eq(lv_color_t c_ref, lv_color_t c_act, const char * s)lv_test_assert_color_eq167,3937
void lv_test_assert_img_eq(const char * fn_ref, const char * s)lv_test_assert_img_eq179,4448
static void read_png_file(png_img_t * p, const char* file_name)read_png_file246,6253
static void png_release(png_img_t * p)png_release352,9704

lib/lvgl/src/lv_themes/lv_theme_mono.h,45
#define LV_THEME_MONO_HLV_THEME_MONO_H7,61

lib/lvgl/src/lv_themes/lv_theme_empty.c,507
    lv_style_t opa_cover;opa_cover28,457
} theme_styles_t;theme_styles_t29,483
static lv_theme_t theme;theme40,775
static theme_styles_t * styles;styles41,800
static bool inited;inited43,833
lv_theme_t * lv_theme_empty_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,lv_theme_empty_init68,1519
static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)theme_apply98,2686
static void style_init_reset(lv_style_t * style)style_init_reset111,3024

lib/lvgl/src/lv_themes/lv_theme_empty.h,47
#define LV_THEME_EMPTY_HLV_THEME_EMPTY_H7,66

lib/lvgl/src/lv_themes/lv_theme.c,1286
static lv_theme_t * act_theme;act_theme28,540
void lv_theme_set_act(lv_theme_t * th)lv_theme_set_act43,899
lv_theme_t * lv_theme_get_act(void)lv_theme_get_act52,1069
void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)lv_theme_apply62,1289
void lv_theme_copy(lv_theme_t * theme, const lv_theme_t * copy)lv_theme_copy78,1746
void lv_theme_set_base(lv_theme_t * new_theme, lv_theme_t * base)lv_theme_set_base104,2644
void lv_theme_set_apply_cb(lv_theme_t * theme, lv_theme_apply_cb_t apply_cb)lv_theme_set_apply_cb115,2940
const lv_font_t * lv_theme_get_font_small(void)lv_theme_get_font_small124,3128
const lv_font_t * lv_theme_get_font_normal(void)lv_theme_get_font_normal133,3290
const lv_font_t * lv_theme_get_font_subtitle(void)lv_theme_get_font_subtitle142,3456
const lv_font_t * lv_theme_get_font_title(void)lv_theme_get_font_title151,3623
lv_color_t lv_theme_get_color_primary(void)lv_theme_get_color_primary160,3777
lv_color_t lv_theme_get_color_secondary(void)lv_theme_get_color_secondary169,3932
uint32_t lv_theme_get_flags(void)lv_theme_get_flags178,4081
static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)apply_theme187,4221
static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)clear_styles202,4570

lib/lvgl/src/lv_themes/lv_theme_template.h,53
#define LV_THEME_TEMPLATE_HLV_THEME_TEMPLATE_H7,69

lib/lvgl/src/lv_themes/lv_theme_material.h,444
#define LV_THEME_MATERIAL_HLV_THEME_MATERIAL_H7,69
    LV_THEME_MATERIAL_FLAG_DARK =  0x01,LV_THEME_MATERIAL_FLAG_DARK24,341
    LV_THEME_MATERIAL_FLAG_LIGHT = 0x02,LV_THEME_MATERIAL_FLAG_LIGHT25,382
    LV_THEME_MATERIAL_FLAG_NO_TRANSITION  = 0x10,LV_THEME_MATERIAL_FLAG_NO_TRANSITION26,423
    LV_THEME_MATERIAL_FLAG_NO_FOCUS  = 0x20,LV_THEME_MATERIAL_FLAG_NO_FOCUS27,473
} lv_theme_material_flag_t;lv_theme_material_flag_t28,518

lib/lvgl/src/lv_themes/lv_theme_mono.c,3424
    lv_style_t scr;scr28,436
    lv_style_t bg;bg29,456
    lv_style_t clip_corner;clip_corner30,475
    lv_style_t btn;btn31,503
    lv_style_t round;round32,523
    lv_style_t no_radius;no_radius33,545
    lv_style_t fg_color;fg_color34,571
    lv_style_t border_none;border_none35,596
    lv_style_t big_line_space;       /*In roller or dropdownlist*/big_line_space36,624
    lv_style_t pad_none;pad_none37,691
    lv_style_t pad_normal;pad_normal38,716
    lv_style_t pad_small;pad_small39,743
    lv_style_t pad_inner;pad_inner40,769
    lv_style_t txt_underline;txt_underline41,795
    lv_style_t arc_bg, arc_indic;arc_bg44,841
    lv_style_t arc_bg, arc_indic;arc_indic44,841
    lv_style_t list_btn;list_btn48,899
    lv_style_t calendar_date;calendar_date52,952
    lv_style_t chart_series;chart_series56,1007
    lv_style_t linemeter;linemeter60,1065
    lv_style_t gauge_needle, gauge_major;gauge_needle64,1116
    lv_style_t gauge_needle, gauge_major;gauge_major64,1116
    lv_style_t sb;sb68,1182
    lv_style_t tick_line;tick_line72,1228
    lv_style_t ta_cursor;ta_cursor76,1282
    lv_style_t tab_bg;tab_bg80,1335
} theme_styles_t;theme_styles_t82,1365
static lv_theme_t theme;theme93,1657
static theme_styles_t * styles;styles95,1683
static bool inited;inited97,1716
#define COLOR_INV(COLOR_INV102,1801
#define BG_COLOR BG_COLOR103,1877
#define FG_COLOR FG_COLOR104,1967
#define RADIUS RADIUS105,2011
#define BORDER_WIDTH BORDER_WIDTH106,2065
static void basic_init(void)basic_init112,2192
static void arc_init(void)arc_init218,8366
static void bar_init(void)bar_init231,8848
static void btn_init(void)btn_init238,8903
static void btnmatrix_init(void)btnmatrix_init246,8964
static void calendar_init(void)calendar_init254,9032
static void chart_init(void)chart_init275,10315
static void cpicker_init(void)cpicker_init287,10667
static void checkbox_init(void)checkbox_init294,10730
static void cont_init(void)cont_init302,10801
static void gauge_init(void)gauge_init310,10864
static void img_init(void)img_init331,11986
static void label_init(void)label_init338,12046
static void linemeter_init(void)linemeter_init346,12111
static void line_init(void)line_init355,12426
static void led_init(void)led_init362,12488
static void page_init(void)page_init369,12548
static void slider_init(void)slider_init376,12605
static void switch_init(void)switch_init383,12671
static void spinbox_init(void)spinbox_init397,13212
static void spinner_init(void)spinner_init405,13276
static void keyboard_init(void)keyboard_init412,13344
static void msgbox_init(void)msgbox_init419,13409
static void textarea_init(void)textarea_init426,13470
static void list_init(void)list_init438,13922
static void ddlist_init(void)ddlist_init450,14408
static void roller_init(void)roller_init457,14476
static void tabview_init(void)tabview_init464,14542
static void tileview_init(void)tileview_init475,14893
static void table_init(void)table_init481,14962
static void win_init(void)win_init488,15026
lv_theme_t * lv_theme_mono_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,lv_theme_mono_init511,15615
static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)theme_apply571,17237
static void style_init_reset(lv_style_t * style)style_init_reset1032,34216

lib/lvgl/src/lv_themes/lv_themes.mk,0

lib/lvgl/src/lv_themes/lv_theme_template.c,2265
    lv_style_t bg;bg28,444
    lv_style_t btn;btn29,463
    lv_style_t round;round30,483
    lv_style_t color;color31,505
    lv_style_t gray;gray32,527
    lv_style_t tick_line;tick_line33,548
    lv_style_t tight;tight34,574
} theme_styles_t;theme_styles_t35,596
static lv_theme_t theme;theme46,839
static theme_styles_t * styles;styles47,864
static bool inited;inited49,897
static void basic_init(void)basic_init61,1106
static void arc_init(void)arc_init113,4120
static void bar_init(void)bar_init120,4180
static void btn_init(void)btn_init127,4235
static void btnmatrix_init(void)btnmatrix_init135,4296
static void calendar_init(void)calendar_init143,4364
static void chart_init(void)chart_init150,4429
static void cpicker_init(void)cpicker_init158,4489
static void checkbox_init(void)checkbox_init165,4552
static void cont_init(void)cont_init173,4623
static void gauge_init(void)gauge_init181,4686
static void img_init(void)img_init188,4750
static void label_init(void)label_init195,4810
static void linemeter_init(void)linemeter_init203,4875
static void line_init(void)line_init210,4947
static void led_init(void)led_init217,5009
static void page_init(void)page_init224,5069
static void slider_init(void)slider_init231,5126
static void switch_init(void)switch_init238,5192
static void spinbox_init(void)spinbox_init246,5259
static void spinner_init(void)spinner_init254,5323
static void keyboard_init(void)keyboard_init261,5391
static void msgbox_init(void)msgbox_init268,5456
static void textarea_init(void)textarea_init275,5517
static void list_init(void)list_init282,5582
static void ddlist_init(void)ddlist_init289,5644
static void roller_init(void)roller_init296,5712
static void tabview_init(void)tabview_init303,5778
static void tileview_init(void)tileview_init310,5846
static void table_init(void)table_init316,5915
static void win_init(void)win_init323,5979
lv_theme_t * lv_theme_template_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,lv_theme_template_init346,6568
void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)theme_apply411,8342
static void style_init_reset(lv_style_t * style)style_init_reset862,24429

lib/lvgl/src/lv_themes/lv_theme_material.c,6729
#define COLOR_SCR COLOR_SCR25,372
#define COLOR_SCR_TEXT COLOR_SCR_TEXT26,458
#define COLOR_BTN COLOR_BTN29,556
#define COLOR_BTN_PR COLOR_BTN_PR30,645
#define COLOR_BTN_CHK COLOR_BTN_CHK32,801
#define COLOR_BTN_CHK_PR COLOR_BTN_CHK_PR33,851
#define COLOR_BTN_DIS COLOR_BTN_DIS34,929
#define COLOR_BTN_BORDER COLOR_BTN_BORDER36,1015
#define COLOR_BTN_BORDER_PR COLOR_BTN_BORDER_PR37,1067
#define COLOR_BTN_BORDER_CHK COLOR_BTN_BORDER_CHK38,1119
#define COLOR_BTN_BORDER_CHK_PR COLOR_BTN_BORDER_CHK_PR39,1171
#define COLOR_BTN_BORDER_INA COLOR_BTN_BORDER_INA40,1223
#define COLOR_BG COLOR_BG43,1330
#define COLOR_BG_PR COLOR_BG_PR44,1419
#define COLOR_BG_CHK COLOR_BG_CHK45,1508
#define COLOR_BG_PR_CHK COLOR_BG_PR_CHK46,1556
#define COLOR_BG_DIS COLOR_BG_DIS47,1632
#define COLOR_BG_BORDER COLOR_BG_BORDER49,1670
#define COLOR_BG_BORDER_PR COLOR_BG_BORDER_PR50,1776
#define COLOR_BG_BORDER_CHK COLOR_BG_BORDER_CHK51,1867
#define COLOR_BG_BORDER_CHK_PR COLOR_BG_BORDER_CHK_PR52,1960
#define COLOR_BG_BORDER_DIS COLOR_BG_BORDER_DIS53,2053
#define COLOR_BG_TEXT COLOR_BG_TEXT55,2147
#define COLOR_BG_TEXT_PR COLOR_BG_TEXT_PR56,2240
#define COLOR_BG_TEXT_CHK COLOR_BG_TEXT_CHK57,2333
#define COLOR_BG_TEXT_CHK_PR COLOR_BG_TEXT_CHK_PR58,2426
#define COLOR_BG_TEXT_DIS COLOR_BG_TEXT_DIS59,2519
#define COLOR_BG_SEC COLOR_BG_SEC62,2634
#define COLOR_BG_SEC_BORDER COLOR_BG_SEC_BORDER63,2727
#define COLOR_BG_SEC_TEXT COLOR_BG_SEC_TEXT64,2820
#define COLOR_BG_SEC_TEXT_DIS COLOR_BG_SEC_TEXT_DIS65,2913
#define TRANSITION_TIME TRANSITION_TIME67,3007
#define BORDER_WIDTH BORDER_WIDTH68,3109
#define OUTLINE_WIDTH OUTLINE_WIDTH69,3151
#define IS_LIGHT IS_LIGHT70,3249
#define PAD_DEF PAD_DEF72,3312
    lv_style_t scr;scr78,3497
    lv_style_t bg;bg79,3517
    lv_style_t bg_click;bg_click80,3536
    lv_style_t bg_sec;bg_sec81,3561
    lv_style_t btn;btn82,3584
    lv_style_t pad_inner;pad_inner83,3604
    lv_style_t pad_small;pad_small84,3630
    lv_style_t arc_indic;arc_indic87,3672
    lv_style_t arc_bg;arc_bg88,3698
    lv_style_t arc_knob;arc_knob89,3721
    lv_style_t bar_bg;bar_bg93,3769
    lv_style_t bar_indic;bar_indic94,3792
    lv_style_t calendar_date_nums, calendar_header, calendar_daynames;calendar_date_nums98,3846
    lv_style_t calendar_date_nums, calendar_header, calendar_daynames;calendar_header98,3846
    lv_style_t calendar_date_nums, calendar_header, calendar_daynames;calendar_daynames98,3846
    lv_style_t cpicker_bg, cpicker_indic;cpicker_bg102,3944
    lv_style_t cpicker_bg, cpicker_indic;cpicker_indic102,3944
    lv_style_t chart_bg, chart_series_bg, chart_series;chart_bg106,4011
    lv_style_t chart_bg, chart_series_bg, chart_series;chart_series_bg106,4011
    lv_style_t chart_bg, chart_series_bg, chart_series;chart_series106,4011
    lv_style_t cb_bg, cb_bullet;cb_bg110,4095
    lv_style_t cb_bg, cb_bullet;cb_bullet110,4095
    lv_style_t ddlist_page, ddlist_sel;ddlist_page114,4156
    lv_style_t ddlist_page, ddlist_sel;ddlist_sel114,4156
    lv_style_t gauge_main, gauge_strong, gauge_needle;gauge_main118,4221
    lv_style_t gauge_main, gauge_strong, gauge_needle;gauge_strong118,4221
    lv_style_t gauge_main, gauge_strong, gauge_needle;gauge_needle118,4221
    lv_style_t kb_bg;kb_bg122,4304
    lv_style_t led;led126,4349
    lv_style_t lmeter;lmeter130,4398
    lv_style_t list_bg, list_btn;list_bg134,4445
    lv_style_t list_bg, list_btn;list_btn134,4445
    lv_style_t mbox_bg;mbox_bg138,4505
    lv_style_t sb;sb142,4553
    lv_style_t edge_flash;edge_flash144,4593
    lv_style_t roller_bg, roller_sel;roller_bg149,4653
    lv_style_t roller_bg, roller_sel;roller_sel149,4653
    lv_style_t slider_knob, slider_bg;slider_knob153,4717
    lv_style_t slider_knob, slider_bg;slider_bg153,4717
    lv_style_t spinbox_cursor;spinbox_cursor157,4783
    lv_style_t sw_knob;sw_knob161,4840
    lv_style_t table_cell;table_cell165,4889
    lv_style_t tabview_btns, tabview_btns_bg, tabview_indic, tabview_page_scrl;tabview_btns169,4957
    lv_style_t tabview_btns, tabview_btns_bg, tabview_indic, tabview_page_scrl;tabview_btns_bg169,4957
    lv_style_t tabview_btns, tabview_btns_bg, tabview_indic, tabview_page_scrl;tabview_indic169,4957
    lv_style_t tabview_btns, tabview_btns_bg, tabview_indic, tabview_page_scrl;tabview_page_scrl169,4957
    lv_style_t ta_cursor, ta_placeholder;ta_cursor173,5065
    lv_style_t ta_cursor, ta_placeholder;ta_placeholder173,5065
} theme_styles_t;theme_styles_t176,5115
static lv_theme_t theme;theme187,5407
static theme_styles_t * styles;styles188,5432
static bool inited;inited190,5465
static void basic_init(void)basic_init200,5623
static void cont_init(void)cont_init330,15312
static void btn_init(void)btn_init337,15374
static void label_init(void)label_init344,15434
static void bar_init(void)bar_init351,15498
static void img_init(void)img_init376,17025
static void line_init(void)line_init383,17085
static void led_init(void)led_init390,17147
static void slider_init(void)slider_init406,17953
static void switch_init(void)switch_init428,19142
static void linemeter_init(void)linemeter_init442,19792
static void gauge_init(void)gauge_init461,20783
static void arc_init(void)arc_init497,23181
static void spinner_init(void)spinner_init520,24224
static void chart_init(void)chart_init526,24291
static void calendar_init(void)calendar_init547,25302
static void cpicker_init(void)cpicker_init590,28186
static void checkbox_init(void)checkbox_init615,29665
static void btnmatrix_init(void)btnmatrix_init645,31514
static void keyboard_init(void)keyboard_init649,31552
static void msgbox_init(void)msgbox_init666,32436
static void page_init(void)page_init676,32734
static void textarea_init(void)textarea_init695,33537
static void spinbox_init(void)spinbox_init710,34179
static void list_init(void)list_init724,34718
static void ddlist_init(void)ddlist_init778,37938
static void roller_init(void)roller_init795,38710
static void tabview_init(void)tabview_init808,39194
static void tileview_init(void)tileview_init814,39261
static void table_init(void)table_init820,39330
static void win_init(void)win_init835,40012
static void tabview_win_shared_init(void)tabview_win_shared_init841,40071
lv_theme_t * lv_theme_material_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,lv_theme_material_init894,42911
static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)theme_apply959,44640
static void style_init_reset(lv_style_t * style)style_init_reset1392,59812

lib/lvgl/src/lv_themes/lv_theme.h,3358
#define LV_THEMES_HLV_THEMES_H7,52
    LV_THEME_NONE = 0,LV_THEME_NONE35,585
    LV_THEME_SCR,LV_THEME_SCR36,608
    LV_THEME_OBJ,LV_THEME_OBJ37,626
    LV_THEME_ARC,LV_THEME_ARC39,659
    LV_THEME_BAR,LV_THEME_BAR42,699
    LV_THEME_BTN,LV_THEME_BTN45,739
    LV_THEME_BTNMATRIX,LV_THEME_BTNMATRIX48,785
    LV_THEME_CALENDAR,LV_THEME_CALENDAR51,836
    LV_THEME_CANVAS,LV_THEME_CANVAS54,884
    LV_THEME_CHECKBOX,LV_THEME_CHECKBOX57,932
    LV_THEME_CHART,LV_THEME_CHART60,979
    LV_THEME_CONT,LV_THEME_CONT63,1022
    LV_THEME_CPICKER,LV_THEME_CPICKER66,1067
    LV_THEME_DROPDOWN,LV_THEME_DROPDOWN69,1116
    LV_THEME_GAUGE,LV_THEME_GAUGE72,1163
    LV_THEME_IMAGE,LV_THEME_IMAGE75,1205
    LV_THEME_IMGBTN,LV_THEME_IMGBTN78,1250
    LV_THEME_KEYBOARD,LV_THEME_KEYBOARD81,1298
    LV_THEME_LABEL,LV_THEME_LABEL84,1345
    LV_THEME_LED,LV_THEME_LED87,1387
    LV_THEME_LINE,LV_THEME_LINE90,1428
    LV_THEME_LIST,LV_THEME_LIST93,1470
    LV_THEME_LIST_BTN,LV_THEME_LIST_BTN94,1489
    LV_THEME_LINEMETER,LV_THEME_LINEMETER97,1540
    LV_THEME_MSGBOX,LV_THEME_MSGBOX100,1589
    LV_THEME_MSGBOX_BTNS,   /*The button matrix of the buttons are initialized separately*/LV_THEME_MSGBOX_BTNS101,1610
    LV_THEME_OBJMASK,LV_THEME_OBJMASK104,1728
    LV_THEME_PAGE,LV_THEME_PAGE107,1773
    LV_THEME_ROLLER,LV_THEME_ROLLER110,1817
    LV_THEME_SLIDER,LV_THEME_SLIDER113,1863
    LV_THEME_SPINBOX,LV_THEME_SPINBOX116,1910
    LV_THEME_SPINBOX_BTN,   /*Control button for the spinbox*/LV_THEME_SPINBOX_BTN117,1932
    LV_THEME_SPINNER,LV_THEME_SPINNER120,2021
    LV_THEME_SWITCH,LV_THEME_SWITCH123,2068
    LV_THEME_TABLE,LV_THEME_TABLE126,2113
    LV_THEME_TABVIEW,LV_THEME_TABVIEW129,2159
    LV_THEME_TABVIEW_PAGE,  /*The tab pages are initialized separately*/LV_THEME_TABVIEW_PAGE130,2181
    LV_THEME_TEXTAREA,LV_THEME_TEXTAREA133,2281
    LV_THEME_TILEVIEW,LV_THEME_TILEVIEW136,2331
    LV_THEME_WIN,LV_THEME_WIN139,2376
    LV_THEME_WIN_BTN,   /*The buttons are initialized separately*/LV_THEME_WIN_BTN140,2394
    _LV_THEME_BUILTIN_LAST,_LV_THEME_BUILTIN_LAST143,2469
    LV_THEME_CUSTOM_START = _LV_THEME_BUILTIN_LAST,LV_THEME_CUSTOM_START144,2497
    _LV_THEME_CUSTOM_LAST = 0xFFFF,_LV_THEME_CUSTOM_LAST145,2549
} lv_theme_style_t;lv_theme_style_t147,2586
typedef void (*lv_theme_apply_cb_t)(struct _lv_theme_t *, lv_obj_t *, lv_theme_style_t);lv_theme_apply_cb_t151,2628
typedef void (*lv_theme_apply_xcb_t)(lv_obj_t *, lv_theme_style_t); /*Deprecated: use `apply_cb` instead*/lv_theme_apply_xcb_t152,2717
typedef struct _lv_theme_t {_lv_theme_t154,2825
    lv_theme_apply_cb_t apply_cb;apply_cb155,2854
    lv_theme_apply_xcb_t apply_xcb; /*Deprecated: use `apply_cb` instead*/apply_xcb156,2888
    struct _lv_theme_t * base;    /**< Apply the current theme's style on top of this theme.*/base157,2963
    lv_color_t color_primary;color_primary158,3058
    lv_color_t color_secondary;color_secondary159,3088
    const lv_font_t * font_small;font_small160,3120
    const lv_font_t * font_normal;font_normal161,3154
    const lv_font_t * font_subtitle;font_subtitle162,3189
    const lv_font_t * font_title;font_title163,3226
    uint32_t flags;flags164,3260
    void * user_data;user_data165,3280
} lv_theme_t;lv_theme_t166,3302

lib/lvgl/src/lv_hal/lv_hal.h,31
#define LV_HAL_HLV_HAL_H7,47

lib/lvgl/src/lv_hal/lv_hal_tick.h,101
#define LV_HAL_TICK_HLV_HAL_TICK_H7,121
#define LV_ATTRIBUTE_TICK_INCLV_ATTRIBUTE_TICK_INC25,417

lib/lvgl/src/lv_hal/lv_hal_disp.c,1740
static lv_disp_t * disp_def;disp_def41,752
void lv_disp_drv_init(lv_disp_drv_t * driver)lv_disp_drv_init57,1149
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)lv_disp_buf_init104,2701
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)lv_disp_drv_register120,3246
void lv_disp_drv_update(lv_disp_t * disp, lv_disp_drv_t * new_drv)lv_disp_drv_update183,5468
void lv_disp_remove(lv_disp_t * disp)lv_disp_remove197,5809
void lv_disp_set_default(lv_disp_t * disp)lv_disp_set_default222,6472
lv_disp_t * lv_disp_get_default(void)lv_disp_get_default231,6618
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)lv_disp_get_hor_res241,6858
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)lv_disp_get_ver_res256,7285
bool lv_disp_get_antialiasing(lv_disp_t * disp)lv_disp_get_antialiasing271,7733
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)lv_disp_get_dpi289,8138
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)lv_disp_get_size_category301,8561
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)lv_disp_flush_ready323,9241
LV_ATTRIBUTE_FLUSH_READY bool lv_disp_flush_is_last(lv_disp_drv_t * disp_drv)lv_disp_flush_is_last343,9983
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)lv_disp_get_next353,10308
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)lv_disp_get_buf366,10639
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)lv_disp_get_inv_buf_size375,10810
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)_lv_disp_pop_from_inv_buf384,11004
bool lv_disp_is_double_buf(lv_disp_t * disp)lv_disp_is_double_buf398,11367
bool lv_disp_is_true_double_buf(lv_disp_t * disp)lv_disp_is_true_double_buf412,11773

lib/lvgl/src/lv_hal/lv_hal_tick.c,298
static uint32_t sys_time = 0;sys_time31,546
static volatile uint8_t tick_irq_flag;tick_irq_flag32,576
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)lv_tick_inc46,879
uint32_t lv_tick_get(void)lv_tick_get56,1088
uint32_t lv_tick_elaps(uint32_t prev_tick)lv_tick_elaps82,1896

lib/lvgl/src/lv_hal/lv_hal_disp.h,4042
#define LV_HAL_DISP_HLV_HAL_DISP_H9,117
#define LV_INV_BUF_SIZE LV_INV_BUF_SIZE30,520
#define LV_ATTRIBUTE_FLUSH_READYLV_ATTRIBUTE_FLUSH_READY34,623
    void * buf1; /**< First display buffer. */buf148,846
    void * buf2; /**< Second display buffer. */buf249,893
    void * buf_act;buf_act52,980
    uint32_t size; /*In pixel count*/size53,1000
    lv_area_t area;area54,1038
    volatile int flushing;flushing56,1191
    volatile int flushing_last;flushing_last58,1358
    volatile uint32_t last_area         : 1; /*1: the last area is being rendered*/last_area59,1390
    volatile uint32_t last_part         : 1; /*1: the last part of the current area is being rendered*/last_part60,1474
} lv_disp_buf_t;lv_disp_buf_t61,1578
typedef struct _disp_drv_t {_disp_drv_t66,1656
    lv_coord_t hor_res; /**< Horizontal resolution. */hor_res68,1686
    lv_coord_t ver_res; /**< Vertical resolution. */ver_res69,1741
    lv_disp_buf_t * buffer;buffer73,1930
    uint32_t antialiasing : 1; /**< 1: antialiasing is enabled on this display. */antialiasing76,1976
    uint32_t rotated : 1; /**< 1: turn the display by 90 degree. @warning Does not update coordinates for you!*/rotated78,2066
    uint32_t screen_transp : 1;screen_transp83,2345
    uint32_t dpi : 10;dpi89,2488
    void (*flush_cb)(struct _disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p);flush_cb93,2644
    void (*rounder_cb)(struct _disp_drv_t * disp_drv, lv_area_t * area);rounder_cb97,2900
    void (*set_px_cb)(struct _disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,set_px_cb102,3232
    void (*monitor_cb)(struct _disp_drv_t * disp_drv, uint32_t time, uint32_t px);monitor_cb107,3534
    void (*wait_cb)(struct _disp_drv_t * disp_drv);wait_cb112,3807
    void (*clean_dcache_cb)(struct _disp_drv_t * disp_drv);clean_dcache_cb115,3955
    void (*gpu_wait_cb)(struct _disp_drv_t * disp_drv);gpu_wait_cb118,4077
    void (*gpu_blend_cb)(struct _disp_drv_t * disp_drv, lv_color_t * dest, const lv_color_t * src, uint32_t length,gpu_blend_cb123,4214
    void (*gpu_fill_cb)(struct _disp_drv_t * disp_drv, lv_color_t * dest_buf, lv_coord_t dest_width,gpu_fill_cb127,4429
    lv_color_t color_chroma_key;color_chroma_key133,4724
    lv_disp_drv_user_data_t user_data; /**< Custom display driver user data */user_data136,4779
} lv_disp_drv_t;lv_disp_drv_t139,4866
typedef struct _disp_t {_disp_t147,5003
    lv_disp_drv_t driver;driver149,5061
    lv_task_t * refr_task;refr_task152,5167
    lv_ll_t scr_ll;scr_ll155,5228
    struct _lv_obj_t * act_scr;         /**< Currently active screen on this display */act_scr156,5248
    struct _lv_obj_t * prev_scr;        /**< Previous screen. Used during screen animations */prev_scr157,5336
    struct _lv_obj_t * scr_to_load;     /**< The screen prepared to load in lv_scr_load_anim*/scr_to_load159,5452
    struct _lv_obj_t * top_layer; /**< @see lv_disp_get_layer_top */top_layer161,5554
    struct _lv_obj_t * sys_layer; /**< @see lv_disp_get_layer_sys */sys_layer162,5623
uint8_t del_prev  :del_prev164,5693
    lv_color_t bg_color;          /**< Default display color when screens are transparent*/bg_color167,5820
    const void * bg_img;       /**< An image source to display as wallpaper*/bg_img168,5912
    lv_opa_t bg_opa;              /**<Opacity of the background color or wallpaper */bg_opa169,5990
    lv_area_t inv_areas[LV_INV_BUF_SIZE];inv_areas172,6124
    uint8_t inv_area_joined[LV_INV_BUF_SIZE];inv_area_joined173,6166
    uint32_t inv_p : 10;inv_p174,6212
    uint32_t last_activity_time; /**< Last time there was activity on this display */last_activity_time177,6265
} lv_disp_t;lv_disp_t178,6351
    LV_DISP_SIZE_SMALL,LV_DISP_SIZE_SMALL182,6381
    LV_DISP_SIZE_MEDIUM,LV_DISP_SIZE_MEDIUM183,6405
    LV_DISP_SIZE_LARGE,LV_DISP_SIZE_LARGE184,6430
    LV_DISP_SIZE_EXTRA_LARGE,LV_DISP_SIZE_EXTRA_LARGE185,6454
} lv_disp_size_t;lv_disp_size_t186,6484

lib/lvgl/src/lv_hal/lv_hal_indev.c,430
void lv_indev_drv_init(lv_indev_drv_t * driver)lv_indev_drv_init52,1060
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)lv_indev_drv_register70,1816
void lv_indev_drv_update(lv_indev_t * indev, lv_indev_drv_t * new_drv)lv_indev_drv_update105,2849
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)lv_indev_get_next116,3208
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)_lv_indev_read130,3632

lib/lvgl/src/lv_hal/lv_hal.mk,0

lib/lvgl/src/lv_hal/lv_hal_indev.h,5431
#define LV_HAL_INDEV_HLV_HAL_INDEV_H9,123
    LV_INDEV_TYPE_NONE,    /**< Uninitialized state*/LV_INDEV_TYPE_NONE40,642
    LV_INDEV_TYPE_POINTER, /**< Touch pad, mouse, external button*/LV_INDEV_TYPE_POINTER41,696
    LV_INDEV_TYPE_KEYPAD,  /**< Keypad or keyboard*/LV_INDEV_TYPE_KEYPAD42,764
    LV_INDEV_TYPE_BUTTON,  /**< External (hardware button) which is assigned to a specific point of theLV_INDEV_TYPE_BUTTON43,817
    LV_INDEV_TYPE_ENCODER, /**< Encoder with only Left, Right turn and a Button*/LV_INDEV_TYPE_ENCODER45,960
typedef uint8_t lv_indev_type_t;lv_indev_type_t47,1045
enum { LV_INDEV_STATE_REL = 0, LV_INDEV_STATE_PR };LV_INDEV_STATE_REL50,1110
enum { LV_INDEV_STATE_REL = 0, LV_INDEV_STATE_PR };LV_INDEV_STATE_PR50,1110
typedef uint8_t lv_indev_state_t;lv_indev_state_t51,1162
    LV_DRAG_DIR_HOR = 0x1, /**< Object can be dragged horizontally. */LV_DRAG_DIR_HOR55,1205
    LV_DRAG_DIR_VER = 0x2, /**< Object can be dragged vertically. */LV_DRAG_DIR_VER56,1276
    LV_DRAG_DIR_BOTH = 0x3, /**< Object can be dragged in all directions. */LV_DRAG_DIR_BOTH57,1345
    LV_DRAG_DIR_ONE = 0x4, /**< Object can be dragged only one direction (the first move). */LV_DRAG_DIR_ONE58,1422
typedef uint8_t lv_drag_dir_t;lv_drag_dir_t61,1520
    LV_GESTURE_DIR_TOP,     /**< Gesture dir up. */LV_GESTURE_DIR_TOP64,1559
    LV_GESTURE_DIR_BOTTOM,  /**< Gesture dir down. */LV_GESTURE_DIR_BOTTOM65,1611
    LV_GESTURE_DIR_LEFT,    /**< Gesture dir left. */LV_GESTURE_DIR_LEFT66,1665
    LV_GESTURE_DIR_RIGHT,   /**< Gesture dir right. */LV_GESTURE_DIR_RIGHT67,1719
typedef uint8_t lv_gesture_dir_t;lv_gesture_dir_t69,1777
    lv_point_t point; /**< For LV_INDEV_TYPE_POINTER the currently pressed point*/point73,1885
    uint32_t key;     /**< For LV_INDEV_TYPE_KEYPAD the currently pressed key*/key74,1968
    uint32_t btn_id;  /**< For LV_INDEV_TYPE_BUTTON the currently pressed button*/btn_id75,2048
    int16_t enc_diff; /**< For LV_INDEV_TYPE_ENCODER number of steps since the previous read*/enc_diff76,2131
    lv_indev_state_t state; /**< LV_INDEV_STATE_REL or LV_INDEV_STATE_PR*/state78,2227
} lv_indev_data_t;lv_indev_data_t79,2302
typedef struct _lv_indev_drv_t {_lv_indev_drv_t83,2388
    lv_indev_type_t type;type86,2451
    bool (*read_cb)(struct _lv_indev_drv_t * indev_drv, lv_indev_data_t * data);read_cb91,2646
    void (*feedback_cb)(struct _lv_indev_drv_t *, uint8_t);feedback_cb95,2849
    lv_indev_drv_user_data_t user_data;user_data98,2931
    struct _disp_t * disp;disp102,3022
    lv_task_t * read_task;read_task105,3113
    uint8_t drag_limit;drag_limit108,3210
    uint8_t drag_throw;drag_throw111,3313
    uint8_t gesture_min_velocity;gesture_min_velocity114,3424
    uint8_t gesture_limit;gesture_limit117,3524
    uint16_t long_press_time;long_press_time120,3595
    uint16_t long_press_rep_time;long_press_rep_time123,3681
} lv_indev_drv_t;lv_indev_drv_t124,3715
typedef struct _lv_indev_proc_t {_lv_indev_proc_t129,3841
    lv_indev_state_t state; /**< Current state of the input device. */state130,3875
            lv_point_t act_point; /**< Current point of input device. */act_point134,4015
            lv_point_t last_point; /**< Last point of input device. */last_point135,4088
            lv_point_t vect; /**< Difference between `act_point` and `last_point`. */vect136,4159
            lv_point_t drag_sum; /*Count the dragged pixels to check LV_INDEV_DEF_DRAG_LIMIT*/drag_sum137,4245
            lv_point_t drag_throw_vect;drag_throw_vect138,4340
            struct _lv_obj_t * act_obj;      /*The object being pressed*/act_obj139,4380
            struct _lv_obj_t * last_obj;     /*The last object which was pressed (used by drag_throw andlast_obj140,4454
            struct _lv_obj_t * last_pressed; /*The lastly pressed object*/last_pressed142,4635
            lv_gesture_dir_t gesture_dir;gesture_dir144,4711
            lv_point_t gesture_sum; /*Count the gesture pixels to check LV_INDEV_DEF_GESTURE_LIMIT*/gesture_sum145,4753
            uint8_t drag_limit_out : 1;drag_limit_out147,4876
            uint8_t drag_in_prog : 1;drag_in_prog148,4916
            lv_drag_dir_t drag_dir  : 3;drag_dir149,4954
            uint8_t gesture_sent : 1;gesture_sent150,4995
        } pointer;pointer151,5033
            lv_indev_state_t last_state;last_state154,5097
            uint32_t last_key;last_key155,5138
        } keypad;keypad156,5169
    } types;types157,5187
    uint32_t pr_timestamp;         /**< Pressed time stamp*/pr_timestamp159,5201
    uint32_t longpr_rep_timestamp; /**< Long press repeat time stamp*/longpr_rep_timestamp160,5262
    uint8_t long_pr_sent : 1;long_pr_sent163,5348
    uint8_t reset_query : 1;reset_query164,5378
    uint8_t disabled : 1;disabled165,5407
    uint8_t wait_until_release : 1;wait_until_release166,5433
} lv_indev_proc_t;lv_indev_proc_t167,5469
typedef struct _lv_indev_t {_lv_indev_t174,5637
    lv_indev_drv_t driver;driver175,5666
    lv_indev_proc_t proc;proc176,5693
    struct _lv_obj_t * cursor;     /**< Cursor for LV_INPUT_TYPE_POINTER*/cursor177,5719
    struct _lv_group_t * group;    /**< Keypad destination group*/group178,5794
    const lv_point_t * btn_points; /**< Array points assigned to the button ()screen will be pressedbtn_points179,5861
} lv_indev_t;lv_indev_t181,6022

lib/lvgl/src/lv_draw/lv_draw_label.h,935
#define LV_DRAW_LABEL_HLV_DRAW_LABEL_H7,61
#define LV_DRAW_LABEL_NO_TXT_SEL LV_DRAW_LABEL_NO_TXT_SEL23,350
    lv_color_t color;color30,477
    lv_color_t sel_color;sel_color31,499
    lv_color_t sel_bg_color;sel_bg_color32,525
    const lv_font_t * font;font33,554
    lv_opa_t opa;opa34,582
    lv_style_int_t line_space;line_space35,600
    lv_style_int_t letter_space;letter_space36,631
    uint32_t sel_start;sel_start37,664
    uint32_t sel_end;sel_end38,688
    lv_coord_t ofs_x;ofs_x39,710
    lv_coord_t ofs_y;ofs_y40,732
    lv_bidi_dir_t bidi_dir;bidi_dir41,754
    lv_txt_flag_t flag;flag42,782
    lv_text_decor_t decor;decor43,806
    lv_blend_mode_t blend_mode;blend_mode44,833
} lv_draw_label_dsc_t;lv_draw_label_dsc_t45,865
    int32_t line_start;line_start54,1307
    int32_t y;y57,1445
    int32_t coord_y;coord_y61,1598
} lv_draw_label_hint_t;lv_draw_label_hint_t62,1619

lib/lvgl/src/lv_draw/lv_draw_blend.h,277
#define LV_DRAW_BLEND_HLV_DRAW_BLEND_H7,61
    LV_BLEND_MODE_NORMAL,LV_BLEND_MODE_NORMAL28,419
    LV_BLEND_MODE_ADDITIVE,LV_BLEND_MODE_ADDITIVE30,468
    LV_BLEND_MODE_SUBTRACTIVE,LV_BLEND_MODE_SUBTRACTIVE31,496
typedef uint8_t lv_blend_mode_t;lv_blend_mode_t35,538

lib/lvgl/src/lv_draw/lv_img_buf.c,1249
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)lv_img_buf_get_px_color52,1059
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)lv_img_buf_get_px_alpha119,3807
void lv_img_buf_set_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_opa_t opa)lv_img_buf_set_px_alpha182,6360
void lv_img_buf_set_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t c)lv_img_buf_set_px_color241,8772
void lv_img_buf_set_palette(lv_img_dsc_t * dsc, uint8_t id, lv_color_t c)lv_img_buf_set_palette310,11734
lv_img_dsc_t * lv_img_buf_alloc(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)lv_img_buf_alloc331,12480
void lv_img_buf_free(lv_img_dsc_t * dsc)lv_img_buf_free367,13354
uint32_t lv_img_buf_get_img_size(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)lv_img_buf_get_img_size384,13699
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)_lv_img_buf_transform_init420,15043
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,_lv_img_buf_get_transformed_area476,17132
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)_lv_img_buf_transform_anti_alias567,19905

lib/lvgl/src/lv_draw/lv_draw_rect.c,2001
#define SHADOW_UPSCALE_SHIFT SHADOW_UPSCALE_SHIFT20,374
#define SHADOW_ENHANCE SHADOW_ENHANCE21,407
#define SPLIT_LIMIT SPLIT_LIMIT22,441
    static uint8_t sh_cache[LV_SHADOW_CACHE_SIZE * LV_SHADOW_CACHE_SIZE];sh_cache62,2347
    static int32_t sh_cache_size = -1;sh_cache_size63,2421
    static int32_t sh_cache_r = -1;sh_cache_r64,2460
LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)lv_draw_rect_dsc_init75,2641
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)lv_draw_rect103,3621
void lv_draw_px(const lv_point_t * point, const lv_area_t * clip_area, const lv_style_t * style)lv_draw_px135,4390
LV_ATTRIBUTE_FAST_MEM static void draw_bg(const lv_area_t * coords, const lv_area_t * clip,draw_bg167,5530
LV_ATTRIBUTE_FAST_MEM static void draw_border(const lv_area_t * coords, const lv_area_t * clip,draw_border389,14183
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)grad_get510,19148
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(const lv_area_t * coords, const lv_area_t * clip,draw_shadow526,19682
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,shadow_draw_corner_buf998,36481
LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)shadow_blur_corner1082,39121
static void draw_outline(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)draw_outline1156,41490
static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)draw_pattern1187,42444
static void draw_value_str(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)draw_value_str1294,46684
static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,draw_full_border1341,48159

lib/lvgl/src/lv_draw/lv_draw_mask.c,2567
int16_t lv_draw_mask_add(void * param, void * custom_id)lv_draw_mask_add74,3444
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,lv_draw_mask_apply104,4684
void * lv_draw_mask_remove_id(int16_t id)lv_draw_mask_remove_id131,5664
void * lv_draw_mask_remove_custom(void * custom_id)lv_draw_mask_remove_custom150,6202
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)lv_draw_mask_get_cnt168,6698
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,lv_draw_mask_line_points_init189,7526
void lv_draw_mask_line_angle_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t py, int16_t angle,lv_draw_mask_line_angle_init278,10432
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,lv_draw_mask_angle_init306,11517
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)lv_draw_mask_radius_init371,13619
void lv_draw_mask_fade_init(lv_draw_mask_fade_param_t * param, const lv_area_t * coords, lv_opa_t opa_top,lv_draw_mask_fade_init398,14635
void lv_draw_mask_map_init(lv_draw_mask_map_param_t * param, const lv_area_t * coords, const lv_opa_t * map)lv_draw_mask_map_init418,15368
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,lv_draw_mask_line431,15730
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,line_mask_flat491,18242
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,line_mask_steep608,21260
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_angle(lv_opa_t * mask_buf, lv_coord_t abs_x,lv_draw_mask_angle751,25391
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,lv_draw_mask_radius891,31959
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_fade(lv_opa_t * mask_buf, lv_coord_t abs_x,lv_draw_mask_fade1143,40566
LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_map(lv_opa_t * mask_buf, lv_coord_t abs_x,lv_draw_mask_map1189,42261
LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)mask_mix1225,43505
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)sqrt_approx1239,43968

lib/lvgl/src/lv_draw/lv_draw_line.c,622
LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)lv_draw_line_dsc_init49,1437
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,lv_draw_line64,1883
LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,draw_line_hor120,3853
LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,draw_line_ver221,7553
LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,draw_line_skew316,10866

lib/lvgl/src/lv_draw/lv_draw_mask.h,3625
#define LV_MASK_HLV_MASK_H7,49
#define LV_MASK_ID_INV LV_MASK_ID_INV23,322
#define _LV_MASK_MAX_NUM _LV_MASK_MAX_NUM24,351
    LV_DRAW_MASK_RES_TRANSP,LV_DRAW_MASK_RES_TRANSP31,458
    LV_DRAW_MASK_RES_FULL_COVER,LV_DRAW_MASK_RES_FULL_COVER32,487
    LV_DRAW_MASK_RES_CHANGED,LV_DRAW_MASK_RES_CHANGED33,520
    LV_DRAW_MASK_RES_UNKNOWNLV_DRAW_MASK_RES_UNKNOWN34,550
typedef uint8_t lv_draw_mask_res_t;lv_draw_mask_res_t37,583
    LV_DRAW_MASK_TYPE_LINE,LV_DRAW_MASK_TYPE_LINE41,628
    LV_DRAW_MASK_TYPE_ANGLE,LV_DRAW_MASK_TYPE_ANGLE42,656
    LV_DRAW_MASK_TYPE_RADIUS,LV_DRAW_MASK_TYPE_RADIUS43,685
    LV_DRAW_MASK_TYPE_FADE,LV_DRAW_MASK_TYPE_FADE44,715
    LV_DRAW_MASK_TYPE_MAP,LV_DRAW_MASK_TYPE_MAP45,743
typedef uint8_t lv_draw_mask_type_t;lv_draw_mask_type_t48,774
    LV_DRAW_MASK_LINE_SIDE_LEFT = 0,LV_DRAW_MASK_LINE_SIDE_LEFT51,819
    LV_DRAW_MASK_LINE_SIDE_RIGHT,LV_DRAW_MASK_LINE_SIDE_RIGHT52,856
    LV_DRAW_MASK_LINE_SIDE_TOP,LV_DRAW_MASK_LINE_SIDE_TOP53,890
    LV_DRAW_MASK_LINE_SIDE_BOTTOM,LV_DRAW_MASK_LINE_SIDE_BOTTOM54,922
typedef lv_draw_mask_res_t (*lv_draw_mask_xcb_t)(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,lv_draw_mask_xcb_t61,1051
typedef uint8_t lv_draw_mask_line_side_t;lv_draw_mask_line_side_t65,1283
    lv_draw_mask_xcb_t cb;cb68,1343
    lv_draw_mask_type_t type;type69,1370
} lv_draw_mask_common_dsc_t;lv_draw_mask_common_dsc_t70,1400
    lv_draw_mask_common_dsc_t dsc;dsc74,1503
        lv_point_t p1;p178,1577
        lv_point_t p2;p281,1626
        lv_draw_mask_line_side_t side : 2;side84,1682
    } cfg;cfg85,1725
    lv_point_t origo;origo88,1765
    int32_t xy_steep;xy_steep91,1877
    int32_t yx_steep;yx_steep94,1989
    int32_t steep;steep97,2105
    int32_t spx;spx100,2194
    uint8_t flat : 1;flat103,2262
    uint8_t inv: 1;inv108,2398
} lv_draw_mask_line_param_t;lv_draw_mask_line_param_t109,2418
    lv_draw_mask_common_dsc_t dsc;dsc113,2521
        lv_point_t vertex_p;vertex_p116,2570
        lv_coord_t start_angle;start_angle117,2599
        lv_coord_t end_angle;end_angle118,2631
    } cfg;cfg119,2661
    lv_draw_mask_line_param_t start_line;start_line121,2673
    lv_draw_mask_line_param_t end_line;end_line122,2715
    uint16_t delta_deg;delta_deg123,2755
} lv_draw_mask_angle_param_t;lv_draw_mask_angle_param_t124,2779
    lv_draw_mask_common_dsc_t dsc;dsc128,2883
        lv_area_t rect;rect131,2932
        lv_coord_t radius;radius132,2956
        uint8_t outer: 1;outer134,3040
    } cfg;cfg135,3066
    int32_t y_prev;y_prev136,3077
    lv_sqrt_res_t y_prev_x;y_prev_x137,3097
} lv_draw_mask_radius_param_t;lv_draw_mask_radius_param_t139,3126
    lv_draw_mask_common_dsc_t dsc;dsc143,3231
        lv_area_t coords;coords146,3280
        lv_coord_t y_top;y_top147,3306
        lv_coord_t y_bottom;y_bottom148,3332
        lv_opa_t opa_top;opa_top149,3361
        lv_opa_t opa_bottom;opa_bottom150,3387
    } cfg;cfg151,3416
} lv_draw_mask_fade_param_t;lv_draw_mask_fade_param_t153,3428
typedef struct _lv_draw_mask_map_param_t {_lv_draw_mask_map_param_t155,3458
    lv_draw_mask_common_dsc_t dsc;dsc157,3557
        lv_area_t coords;coords160,3606
        const lv_opa_t * map;map161,3632
    } cfg;cfg162,3662
} lv_draw_mask_map_param_t;lv_draw_mask_map_param_t163,3673
    void * param;param166,3719
    void * custom_id;custom_id167,3737
} _lv_draw_mask_saved_t;_lv_draw_mask_saved_t168,3759
typedef _lv_draw_mask_saved_t _lv_draw_mask_saved_arr_t[_LV_MASK_MAX_NUM];_lv_draw_mask_saved_arr_t170,3785

lib/lvgl/src/lv_draw/lv_draw_img.c,980
void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)lv_draw_img_dsc_init57,1635
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_draw_img_dsc_t * dsc)lv_draw_img74,2156
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)lv_img_cf_get_px_size99,2800
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)lv_img_cf_is_chroma_keyed144,3962
bool lv_img_cf_has_alpha(lv_img_cf_t cf)lv_img_cf_has_alpha171,4643
lv_img_src_t lv_img_src_get_type(const void * src)lv_img_src_get_type204,5590
LV_ATTRIBUTE_FAST_MEM static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * clip_area,lv_img_draw_core233,6411
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,lv_draw_map338,10519
static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)show_error645,23845
static void draw_cleanup(lv_img_cache_entry_t * cache)draw_cleanup657,24242

lib/lvgl/src/lv_draw/lv_draw_img.h,399
#define LV_DRAW_IMG_HLV_DRAW_IMG_H7,57
    lv_opa_t opa;opa32,450
    uint16_t angle;angle34,469
    lv_point_t pivot;pivot35,489
    uint16_t zoom;zoom36,511
    lv_opa_t recolor_opa;recolor_opa38,531
    lv_color_t recolor;recolor39,557
    lv_blend_mode_t blend_mode;blend_mode41,582
    uint8_t antialias       : 1;antialias43,615
} lv_draw_img_dsc_t;lv_draw_img_dsc_t44,648

lib/lvgl/src/lv_draw/lv_draw_arc.c,1219
#define SPLIT_RADIUS_LIMIT SPLIT_RADIUS_LIMIT17,272
#define SPLIT_ANGLE_GAP_LIMIT SPLIT_ANGLE_GAP_LIMIT18,416
    lv_coord_t center_x;center_x24,627
    lv_coord_t center_y;center_y25,652
    lv_coord_t radius;radius26,677
    uint16_t start_angle;start_angle27,700
    uint16_t end_angle;end_angle28,726
    uint16_t start_quarter;start_quarter29,750
    uint16_t end_quarter;end_quarter30,778
    lv_coord_t width;width31,804
    lv_draw_rect_dsc_t * draw_dsc;draw_dsc32,826
    const lv_area_t * draw_area;draw_area33,861
    const lv_area_t * clip_area;clip_area34,894
} quarter_draw_dsc_t;quarter_draw_dsc_t35,927
void lv_draw_arc(lv_coord_t center_x, lv_coord_t center_y, uint16_t radius,  uint16_t start_angle, uint16_t end_angle,lv_draw_arc71,2093
static void draw_quarter_0(quarter_draw_dsc_t * q)draw_quarter_0175,5499
static void draw_quarter_1(quarter_draw_dsc_t * q)draw_quarter_1228,8166
static void draw_quarter_2(quarter_draw_dsc_t * q)draw_quarter_2281,10845
static void draw_quarter_3(quarter_draw_dsc_t * q)draw_quarter_3335,13531
static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)get_rounded_area389,16211

lib/lvgl/src/lv_draw/lv_draw_rect.h,2434
#define LV_DRAW_RECT_HLV_DRAW_RECT_H7,59
    lv_style_int_t radius;radius27,369
    lv_color_t bg_color;bg_color30,416
    lv_color_t bg_grad_color;bg_grad_color31,441
    lv_grad_dir_t bg_grad_dir;bg_grad_dir32,471
    lv_style_int_t bg_main_color_stop;bg_main_color_stop33,502
    lv_style_int_t bg_grad_color_stop;bg_grad_color_stop34,541
    lv_opa_t bg_opa;bg_opa35,580
    lv_blend_mode_t bg_blend_mode;bg_blend_mode36,601
    lv_color_t border_color;border_color39,652
    lv_style_int_t border_width;border_width40,681
    lv_style_int_t border_side;border_side41,714
    lv_opa_t border_opa;border_opa42,746
    lv_blend_mode_t border_blend_mode;border_blend_mode43,771
    uint8_t border_post : 1;        /*There is a border it will be drawn later. */border_post44,810
    lv_color_t outline_color;outline_color47,910
    lv_style_int_t outline_width;outline_width48,940
    lv_style_int_t outline_pad;outline_pad49,974
    lv_opa_t outline_opa;outline_opa50,1006
    lv_blend_mode_t outline_blend_mode;outline_blend_mode51,1032
    lv_color_t shadow_color;shadow_color54,1088
    lv_style_int_t shadow_width;shadow_width55,1117
    lv_style_int_t shadow_ofs_x;shadow_ofs_x56,1150
    lv_style_int_t shadow_ofs_y;shadow_ofs_y57,1183
    lv_style_int_t shadow_spread;shadow_spread58,1216
    lv_opa_t shadow_opa;shadow_opa59,1250
    lv_blend_mode_t shadow_blend_mode;shadow_blend_mode60,1275
    const void * pattern_image;pattern_image63,1331
    const lv_font_t * pattern_font;pattern_font64,1363
    lv_color_t pattern_recolor;pattern_recolor65,1399
    lv_opa_t pattern_opa;pattern_opa66,1431
    lv_opa_t pattern_recolor_opa;pattern_recolor_opa67,1457
    uint8_t pattern_repeat : 1;pattern_repeat68,1491
    lv_blend_mode_t pattern_blend_mode;pattern_blend_mode69,1523
    const char * value_str;value_str72,1578
    const lv_font_t * value_font;value_font73,1606
    lv_opa_t value_opa;value_opa74,1640
    lv_color_t value_color;value_color75,1664
    lv_style_int_t value_ofs_x;value_ofs_x76,1692
    lv_style_int_t value_ofs_y;value_ofs_y77,1724
    lv_style_int_t value_letter_space;value_letter_space78,1756
    lv_style_int_t value_line_space;value_line_space79,1795
    lv_align_t value_align;value_align80,1832
    lv_blend_mode_t value_blend_mode;value_blend_mode81,1860
} lv_draw_rect_dsc_t;lv_draw_rect_dsc_t82,1898

lib/lvgl/src/lv_draw/lv_img_cache.h,200
#define LV_IMG_CACHE_HLV_IMG_CACHE_H7,59
    lv_img_decoder_dsc_t dec_dsc; /**< Image information */dec_dsc32,533
    int32_t life;life37,805
} lv_img_cache_entry_t;lv_img_cache_entry_t38,823

lib/lvgl/src/lv_draw/lv_draw_blend.c,1689
#define GPU_SIZE_LIMIT GPU_SIZE_LIMIT26,541
    LV_ATTRIBUTE_DMA static lv_color_t blend_buf[LV_HOR_RES_MAX];blend_buf74,2909
#define FILL_NORMAL_MASK_PX(FILL_NORMAL_MASK_PX82,3049
#define FILL_NORMAL_MASK_PX_SCR_TRANSP(FILL_NORMAL_MASK_PX_SCR_TRANSP90,3518
#define MAP_NORMAL_MASK_PX(MAP_NORMAL_MASK_PX100,4294
#define MAP_NORMAL_MASK_PX_SCR_TRANSP(MAP_NORMAL_MASK_PX_SCR_TRANSP107,4759
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,_lv_blend_fill134,6295
LV_ATTRIBUTE_FAST_MEM void _lv_blend_map(const lv_area_t * clip_area, const lv_area_t * map_area,_lv_blend_map201,8947
static void fill_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,fill_set_px260,11023
LV_ATTRIBUTE_FAST_MEM static void fill_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,fill_normal314,13285
static void fill_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,fill_blended574,24028
static void map_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,map_set_px652,27205
LV_ATTRIBUTE_FAST_MEM static void map_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,map_normal716,30027
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,map_blended963,40070
static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)color_blend_true_color_additive1036,43012
static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)color_blend_true_color_subtractive1087,44288

lib/lvgl/src/lv_draw/lv_img_buf.h,7788
#define LV_IMG_BUF_HLV_IMG_BUF_H7,55
#define LV_IMG_PX_SIZE_ALPHA_BYTE LV_IMG_PX_SIZE_ALPHA_BYTE26,455
#define LV_IMG_PX_SIZE_ALPHA_BYTE LV_IMG_PX_SIZE_ALPHA_BYTE28,518
#define LV_IMG_PX_SIZE_ALPHA_BYTE LV_IMG_PX_SIZE_ALPHA_BYTE30,581
#define LV_IMG_BUF_SIZE_TRUE_COLOR(LV_IMG_BUF_SIZE_TRUE_COLOR33,625
#define LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED34,696
#define LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA(LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA35,780
#define LV_IMG_BUF_SIZE_ALPHA_1BIT(LV_IMG_BUF_SIZE_ALPHA_1BIT38,902
#define LV_IMG_BUF_SIZE_ALPHA_2BIT(LV_IMG_BUF_SIZE_ALPHA_2BIT39,965
#define LV_IMG_BUF_SIZE_ALPHA_4BIT(LV_IMG_BUF_SIZE_ALPHA_4BIT40,1028
#define LV_IMG_BUF_SIZE_ALPHA_8BIT(LV_IMG_BUF_SIZE_ALPHA_8BIT41,1091
#define LV_IMG_BUF_SIZE_INDEXED_1BIT(LV_IMG_BUF_SIZE_INDEXED_1BIT44,1166
#define LV_IMG_BUF_SIZE_INDEXED_2BIT(LV_IMG_BUF_SIZE_INDEXED_2BIT45,1252
#define LV_IMG_BUF_SIZE_INDEXED_4BIT(LV_IMG_BUF_SIZE_INDEXED_4BIT46,1338
#define LV_IMG_BUF_SIZE_INDEXED_8BIT(LV_IMG_BUF_SIZE_INDEXED_8BIT47,1425
#define LV_IMG_ZOOM_NONE LV_IMG_ZOOM_NONE49,1514
#define _LV_TRANSFORM_TRIGO_SHIFT _LV_TRANSFORM_TRIGO_SHIFT51,1546
#define _LV_ZOOM_INV_UPSCALE _LV_ZOOM_INV_UPSCALE52,1583
    LV_IMG_CF_UNKNOWN = 0,LV_IMG_CF_UNKNOWN60,1712
    LV_IMG_CF_RAW,              /**< Contains the file as it is. Needs custom decoder function*/LV_IMG_CF_RAW62,1740
    LV_IMG_CF_RAW_ALPHA,        /**< Contains the file as it is. The image has alpha. Needs custom decoderLV_IMG_CF_RAW_ALPHA63,1837
    LV_IMG_CF_RAW_CHROMA_KEYED, /**< Contains the file as it is. The image is chroma keyed. NeedsLV_IMG_CF_RAW_CHROMA_KEYED65,1990
    LV_IMG_CF_TRUE_COLOR,              /**< Color format and depth should match with LV_COLOR settings*/LV_IMG_CF_TRUE_COLOR68,2150
    LV_IMG_CF_TRUE_COLOR_ALPHA,        /**< Same as `LV_IMG_CF_TRUE_COLOR` but every pixel has an alpha byte*/LV_IMG_CF_TRUE_COLOR_ALPHA69,2255
    LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED, /**< Same as `LV_IMG_CF_TRUE_COLOR` but LV_COLOR_TRANSP pixelsLV_IMG_CF_TRUE_COLOR_CHROMA_KEYED70,2366
    LV_IMG_CF_INDEXED_1BIT, /**< Can have 2 different colors in a palette (always chroma keyed)*/LV_IMG_CF_INDEXED_1BIT73,2533
    LV_IMG_CF_INDEXED_2BIT, /**< Can have 4 different colors in a palette (always chroma keyed)*/LV_IMG_CF_INDEXED_2BIT74,2631
    LV_IMG_CF_INDEXED_4BIT, /**< Can have 16 different colors in a palette (always chroma keyed)*/LV_IMG_CF_INDEXED_4BIT75,2729
    LV_IMG_CF_INDEXED_8BIT, /**< Can have 256 different colors in a palette (always chroma keyed)*/LV_IMG_CF_INDEXED_8BIT76,2828
    LV_IMG_CF_ALPHA_1BIT, /**< Can have one color and it can be drawn or not*/LV_IMG_CF_ALPHA_1BIT78,2929
    LV_IMG_CF_ALPHA_2BIT, /**< Can have one color but 4 different alpha value*/LV_IMG_CF_ALPHA_2BIT79,3008
    LV_IMG_CF_ALPHA_4BIT, /**< Can have one color but 16 different alpha value*/LV_IMG_CF_ALPHA_4BIT80,3088
    LV_IMG_CF_ALPHA_8BIT, /**< Can have one color but 256 different alpha value*/LV_IMG_CF_ALPHA_8BIT81,3169
    LV_IMG_CF_RESERVED_15,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_1583,3252
    LV_IMG_CF_RESERVED_16,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_1684,3326
    LV_IMG_CF_RESERVED_17,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_1785,3400
    LV_IMG_CF_RESERVED_18,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_1886,3474
    LV_IMG_CF_RESERVED_19,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_1987,3548
    LV_IMG_CF_RESERVED_20,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_2088,3622
    LV_IMG_CF_RESERVED_21,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_2189,3696
    LV_IMG_CF_RESERVED_22,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_2290,3770
    LV_IMG_CF_RESERVED_23,              /**< Reserved for further use. */LV_IMG_CF_RESERVED_2391,3844
    LV_IMG_CF_USER_ENCODED_0,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_093,3919
    LV_IMG_CF_USER_ENCODED_1,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_194,3995
    LV_IMG_CF_USER_ENCODED_2,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_295,4071
    LV_IMG_CF_USER_ENCODED_3,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_396,4147
    LV_IMG_CF_USER_ENCODED_4,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_497,4223
    LV_IMG_CF_USER_ENCODED_5,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_598,4299
    LV_IMG_CF_USER_ENCODED_6,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_699,4375
    LV_IMG_CF_USER_ENCODED_7,          /**< User holder encoding format. */LV_IMG_CF_USER_ENCODED_7100,4451
typedef uint8_t lv_img_cf_t;lv_img_cf_t102,4530
    uint32_t h : 11; /*Height of     the image map*/h116,4882
    uint32_t w : 11; /*Width of the image map*/w117,4935
    uint32_t reserved : 2; /*Reserved to be used later*/reserved118,4983
    uint32_t always_zero : 3; /*It the upper bits of the first byte. Always zero to look like aalways_zero119,5040
    uint32_t cf : 5;          /* Color format: See `lv_img_color_format_t`*/cf121,5195
} lv_img_header_t;lv_img_header_t124,5274
    uint32_t cf : 5;          /* Color format: See `lv_img_color_format_t`*/cf128,5317
    uint32_t always_zero : 3; /*It the upper bits of the first byte. Always zero to look like aalways_zero129,5394
    uint32_t reserved : 2; /*Reserved to be used later*/reserved132,5550
    uint32_t w : 11; /*Width of the image map*/w134,5608
    uint32_t h : 11; /*Height of     the image map*/h135,5656
} lv_img_header_t;lv_img_header_t136,5709
    lv_img_header_t header;header142,5837
    uint32_t data_size;data_size143,5865
    const uint8_t * data;data144,5889
} lv_img_dsc_t;lv_img_dsc_t145,5915
        const void * src;           /*image source (array of pixels)*/src149,5962
        lv_coord_t src_w;           /*width of the image source*/src_w150,6033
        lv_coord_t src_h;           /*height of the image source*/src_h151,6099
        lv_coord_t pivot_x;         /*pivot x*/pivot_x152,6166
        lv_coord_t pivot_y;         /* pivot y*/pivot_y153,6214
        int16_t angle;              /*angle to rotate*/angle154,6263
        uint16_t zoom;              /*256 no zoom, 128 half size, 512 double size*/zoom155,6319
        lv_color_t color;           /*a color used for `LV_IMG_CF_INDEXED_1/2/4/8BIT` color formats*/color156,6403
        lv_img_cf_t cf;             /*color format of the image to rotate*/cf157,6505
        bool antialias;antialias158,6581
    } cfg;cfg159,6605
        lv_color_t color;color162,6630
        lv_opa_t opa;opa163,6656
    } res;res164,6678
        lv_img_dsc_t img_dsc;img_dsc168,6704
        int32_t pivot_x_256;pivot_x_256169,6734
        int32_t pivot_y_256;pivot_y_256170,6763
        int32_t sinma;sinma171,6792
        int32_t cosma;cosma172,6815
        uint8_t chroma_keyed : 1;chroma_keyed174,6839
        uint8_t has_alpha : 1;has_alpha175,6873
        uint8_t native_color : 1;native_color176,6904
        uint32_t zoom_inv;zoom_inv178,6939
        lv_coord_t xs;xs181,6992
        lv_coord_t ys;ys182,7015
        lv_coord_t xs_int;xs_int183,7038
        lv_coord_t ys_int;ys_int184,7065
        uint32_t pxi;pxi185,7092
        uint8_t px_size;px_size186,7114
    } tmp;tmp187,7139
} lv_img_transform_dsc_t;lv_img_transform_dsc_t188,7150
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)_lv_img_buf_transform295,10810

lib/lvgl/src/lv_draw/lv_img_decoder.h,1877
#define LV_IMG_DECODER_HLV_IMG_DECODER_H7,63
    LV_IMG_SRC_VARIABLE, /** Binary/C variable */LV_IMG_SRC_VARIABLE36,565
    LV_IMG_SRC_FILE, /** File in filesystem */LV_IMG_SRC_FILE37,615
    LV_IMG_SRC_SYMBOL, /** Symbol (@ref lv_symbol_def.h) */LV_IMG_SRC_SYMBOL38,662
    LV_IMG_SRC_UNKNOWN, /** Unknown source */LV_IMG_SRC_UNKNOWN39,722
typedef uint8_t lv_img_src_t;lv_img_src_t42,772
typedef lv_res_t (*lv_img_decoder_info_f_t)(struct _lv_img_decoder * decoder, const void * src,lv_img_decoder_info_f_t56,1184
typedef lv_res_t (*lv_img_decoder_open_f_t)(struct _lv_img_decoder * decoder, struct _lv_img_decoder_dsc * dsc);lv_img_decoder_open_f_t64,1598
typedef lv_res_t (*lv_img_decoder_read_line_f_t)(struct _lv_img_decoder * decoder, struct _lv_img_decoder_dsc * dsc,lv_img_decoder_read_line_f_t77,2215
typedef void (*lv_img_decoder_close_f_t)(struct _lv_img_decoder * decoder, struct _lv_img_decoder_dsc * dsc);lv_img_decoder_close_f_t85,2615
typedef struct _lv_img_decoder {_lv_img_decoder87,2726
    lv_img_decoder_info_f_t info_cb;info_cb88,2759
    lv_img_decoder_open_f_t open_cb;open_cb89,2796
    lv_img_decoder_read_line_f_t read_line_cb;read_line_cb90,2833
    lv_img_decoder_close_f_t close_cb;close_cb91,2880
    lv_img_decoder_user_data_t user_data;user_data94,2941
} lv_img_decoder_t;lv_img_decoder_t96,2990
typedef struct _lv_img_decoder_dsc {_lv_img_decoder_dsc99,3083
    lv_img_decoder_t * decoder;decoder101,3181
    const void * src;src104,3314
    lv_color_t color;color107,3371
    lv_img_src_t src_type;src_type110,3483
    lv_img_header_t header;header113,3605
    const uint8_t * img_data;img_data117,3774
    uint32_t time_to_open;time_to_open121,3937
    const char * error_msg;error_msg125,4096
    void * user_data;user_data128,4173
} lv_img_decoder_dsc_t;lv_img_decoder_dsc_t129,4195

lib/lvgl/src/lv_draw/lv_img_cache.c,566
#define LV_IMG_CACHE_AGING LV_IMG_CACHE_AGING23,470
#define LV_IMG_CACHE_LIFE_GAIN LV_IMG_CACHE_LIFE_GAIN26,570
#define LV_IMG_CACHE_LIFE_LIMIT LV_IMG_CACHE_LIFE_LIMIT30,727
    static lv_img_cache_entry_t cache_temp;cache_temp40,934
    static uint16_t entry_cnt;entry_cnt47,1082
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)_lv_img_cache_open66,1768
void lv_img_cache_set_size(uint16_t new_entry_cnt)lv_img_cache_set_size164,5346
void lv_img_cache_invalidate_src(const void * src)lv_img_cache_invalidate_src199,6564

lib/lvgl/src/lv_draw/lv_draw_triangle.h,51
#define LV_DRAW_TRIANGLE_HLV_DRAW_TRIANGLE_H7,67

lib/lvgl/src/lv_draw/lv_draw_line.h,568
#define LV_DRAW_LINE_HLV_DRAW_LINE_H7,59
    lv_color_t color;color26,368
    lv_style_int_t width;width27,390
    lv_style_int_t dash_width;dash_width28,416
    lv_style_int_t dash_gap;dash_gap29,447
    lv_opa_t opa;opa30,476
    lv_blend_mode_t blend_mode  : 2;blend_mode31,494
    uint8_t round_start : 1;round_start32,531
    uint8_t round_end   : 1;round_end33,560
    uint8_t raw_end     : 1;    /*Do not bother with perpendicular line ending is it's not visible for any reason*/raw_end34,589
} lv_draw_line_dsc_t;lv_draw_line_dsc_t35,705

lib/lvgl/src/lv_draw/lv_draw_arc.h,41
#define LV_DRAW_ARC_HLV_DRAW_ARC_H7,57

lib/lvgl/src/lv_draw/lv_draw.h,33
#define LV_DRAW_HLV_DRAW_H7,49

lib/lvgl/src/lv_draw/lv_draw.mk,0

lib/lvgl/src/lv_draw/lv_draw_triangle.c,260
void lv_draw_triangle(const lv_point_t points[], const lv_area_t * clip_area, const lv_draw_rect_dsc_t * draw_dsc)lv_draw_triangle43,827
void lv_draw_polygon(const lv_point_t points[], uint16_t point_cnt, const lv_area_t * clip_area,lv_draw_polygon55,1270

lib/lvgl/src/lv_draw/lv_img_decoder.c,2551
#define CF_BUILT_IN_FIRST CF_BUILT_IN_FIRST23,437
#define CF_BUILT_IN_LAST CF_BUILT_IN_LAST24,484
    lv_fs_file_t * f;f31,636
    lv_color_t * palette;palette33,665
    lv_opa_t * opa;opa34,691
} lv_img_decoder_built_in_data_t;lv_img_decoder_built_in_data_t35,711
void _lv_img_decoder_init(void)_lv_img_decoder_init62,1659
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)lv_img_decoder_get_info89,2672
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color)lv_img_decoder_open121,3840
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)lv_img_decoder_read_line168,5173
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)lv_img_decoder_close180,5565
lv_img_decoder_t * lv_img_decoder_create(void)lv_img_decoder_create196,5935
void lv_img_decoder_delete(lv_img_decoder_t * decoder)lv_img_decoder_delete212,6305
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)lv_img_decoder_set_info_cb223,6654
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)lv_img_decoder_set_open_cb233,6919
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)lv_img_decoder_set_read_line_cb243,7212
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)lv_img_decoder_set_close_cb253,7569
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)lv_img_decoder_built_in_info265,8053
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)lv_img_decoder_built_in_open319,10110
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,lv_img_decoder_built_in_read_line482,16529
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)lv_img_decoder_built_in_close519,18098
static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,lv_img_decoder_built_in_line_true_color545,18718
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,lv_img_decoder_built_in_line_alpha580,19844
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,lv_img_decoder_built_in_line_indexed690,23934

lib/lvgl/src/lv_draw/lv_draw_label.c,1627
#define LABEL_RECOLOR_PAR_LENGTH LABEL_RECOLOR_PAR_LENGTH19,356
#define LV_LABEL_HINT_UPDATE_TH LV_LABEL_HINT_UPDATE_TH20,391
    CMD_STATE_WAIT,CMD_STATE_WAIT26,581
    CMD_STATE_PAR,CMD_STATE_PAR27,601
    CMD_STATE_IN,CMD_STATE_IN28,620
typedef uint8_t cmd_state_t;cmd_state_t30,641
const uint8_t _lv_bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/_lv_bpp1_opa_table55,1802
const uint8_t _lv_bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/_lv_bpp2_opa_table56,1918
const uint8_t _lv_bpp3_opa_table[8]  = {0, 36,  73, 109,   /*Opacity mapping with bpp = 3*/_lv_bpp3_opa_table58,2010
const uint8_t _lv_bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/_lv_bpp4_opa_table62,2205
const uint8_t _lv_bpp8_opa_table[256] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,_lv_bpp8_opa_table67,2515
LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)lv_draw_label_dsc_init93,4521
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,lv_draw_label115,5334
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,lv_draw_letter402,15605
LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g,draw_letter_normal456,17414
static void draw_letter_subpx(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g, const lv_area_t * clip_area,draw_letter_subpx612,22665
static uint8_t hex_char_to_num(char hex)hex_char_to_num826,30367

lib/lvgl/src/lv_conf_kconfig.h,11606
#define LV_CONF_KCONFIG_HLV_CONF_KCONFIG_H7,132
#define CONFIG_LV_MEM_SIZE CONFIG_LV_MEM_SIZE34,602
#define CONFIG_LV_COLOR_TRANSP CONFIG_LV_COLOR_TRANSP44,810
#define CONFIG_LV_COLOR_TRANSP CONFIG_LV_COLOR_TRANSP46,891
#define CONFIG_LV_THEME_DEFAULT_INIT CONFIG_LV_THEME_DEFAULT_INIT56,1096
#define CONFIG_LV_THEME_DEFAULT_INIT CONFIG_LV_THEME_DEFAULT_INIT58,1221
#define CONFIG_LV_THEME_DEFAULT_INIT CONFIG_LV_THEME_DEFAULT_INIT60,1349
#define LV_THEME_DEFAULT_INIT LV_THEME_DEFAULT_INIT62,1473
#define LV_THEME_DEFAULT_COLOR_PRIMARY LV_THEME_DEFAULT_COLOR_PRIMARY72,1705
#define LV_THEME_DEFAULT_COLOR_SECONDARY LV_THEME_DEFAULT_COLOR_SECONDARY78,1899
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL96,2399
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL98,2529
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL100,2660
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL102,2791
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL104,2922
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL106,3053
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL108,3184
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL110,3315
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL112,3446
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL114,3577
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL116,3708
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL118,3839
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL120,3970
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL122,4101
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL124,4232
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL126,4363
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL128,4494
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL130,4625
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL132,4756
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL134,4887
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL136,5018
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL138,5144
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL140,5266
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL142,5397
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL144,5543
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL146,5696
#define CONFIG_LV_THEME_DEFAULT_FONT_SMALL CONFIG_LV_THEME_DEFAULT_FONT_SMALL148,5838
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL157,6077
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL159,6209
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL161,6342
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL163,6475
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL165,6608
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL167,6741
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL169,6874
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL171,7007
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL173,7140
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL175,7273
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL177,7406
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL179,7539
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL181,7672
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL183,7805
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL185,7938
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL187,8071
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL189,8204
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL191,8337
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL193,8470
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL195,8603
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL197,8736
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL199,8864
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL201,8988
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL203,9121
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL205,9269
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL207,9424
#define CONFIG_LV_THEME_DEFAULT_FONT_NORMAL CONFIG_LV_THEME_DEFAULT_FONT_NORMAL209,9568
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE218,9814
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE220,9950
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE222,10087
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE224,10224
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE226,10361
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE228,10498
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE230,10635
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE232,10772
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE234,10909
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE236,11046
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE238,11183
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE240,11320
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE242,11457
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE244,11594
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE246,11731
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE248,11868
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE250,12005
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE252,12142
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE254,12279
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE256,12416
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE258,12553
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE260,12685
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE262,12813
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE264,12950
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE266,13102
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE268,13261
#define CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE CONFIG_LV_THEME_DEFAULT_FONT_SUBTITLE270,13409
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE279,13648
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE281,13778
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE283,13909
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE285,14040
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE287,14171
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE289,14302
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE291,14433
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE293,14564
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE295,14695
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE297,14826
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE299,14957
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE301,15088
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE303,15219
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE305,15350
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE307,15481
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE309,15612
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE311,15743
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE313,15874
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE315,16005
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE317,16136
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE319,16267
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE321,16393
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE323,16515
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE325,16646
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE327,16792
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE329,16945
#define CONFIG_LV_THEME_DEFAULT_FONT_TITLE CONFIG_LV_THEME_DEFAULT_FONT_TITLE331,17087
#define CONFIG_LV_TXT_ENC CONFIG_LV_TXT_ENC340,17286
#define CONFIG_LV_TXT_ENC CONFIG_LV_TXT_ENC342,17367
#define CONFIG_LV_BIDI_BASE_DIR_DEF CONFIG_LV_BIDI_BASE_DIR_DEF352,17547
#define CONFIG_LV_BIDI_BASE_DIR_DEF CONFIG_LV_BIDI_BASE_DIR_DEF354,17636
#define CONFIG_LV_BIDI_BASE_DIR_DEF CONFIG_LV_BIDI_BASE_DIR_DEF356,17726
#define CONFIG_LV_USE_EXT_CLICK_AREA CONFIG_LV_USE_EXT_CLICK_AREA366,17926
#define CONFIG_LV_USE_EXT_CLICK_AREA CONFIG_LV_USE_EXT_CLICK_AREA368,18034
#define CONFIG_LV_USE_EXT_CLICK_AREA CONFIG_LV_USE_EXT_CLICK_AREA370,18143
#define CONFIG_LV_LINEMETER_PRECISE CONFIG_LV_LINEMETER_PRECISE380,18367
#define CONFIG_LV_LINEMETER_PRECISE CONFIG_LV_LINEMETER_PRECISE382,18470
#define CONFIG_LV_LINEMETER_PRECISE CONFIG_LV_LINEMETER_PRECISE384,18567
#define CONFIG_LV_SPINNER_DEF_ANIM CONFIG_LV_SPINNER_DEF_ANIM395,18758
#define CONFIG_LV_SPINNER_DEF_ANIM CONFIG_LV_SPINNER_DEF_ANIM397,18874
#define CONFIG_LV_SPINNER_DEF_ANIM CONFIG_LV_SPINNER_DEF_ANIM399,18990
#      define LV_SPRINTF_DISABLE_FLOAT LV_SPRINTF_DISABLE_FLOAT410,19277
#      define LV_SPRINTF_DISABLE_FLOAT LV_SPRINTF_DISABLE_FLOAT412,19331

lib/lvgl/src/lv_api_map.h,2600
#define LV_API_MAP_HLV_API_MAP_H7,55
static inline void lv_task_once(lv_task_t * task)lv_task_once35,505
#define lv_checkbox_set_static_text lv_checkbox_set_static_text42,620
#define lv_chart_get_point_cnt lv_chart_get_point_cnt48,711
static inline void lv_dropdown_set_draw_arrow(lv_obj_t * ddlist, bool en)lv_dropdown_set_draw_arrow55,798
static inline bool lv_dropdown_get_draw_arrow(lv_obj_t * ddlist)lv_dropdown_get_draw_arrow61,983
#define lv_dropdown_set_static_options lv_dropdown_set_static_options67,1128
static inline void lv_bar_set_sym(lv_obj_t * bar, bool en)lv_bar_set_sym80,1512
static inline bool lv_bar_get_sym(lv_obj_t * bar)lv_bar_get_sym94,1914
#define lv_label_set_static_text lv_label_set_static_text103,2055
static inline void lv_slider_set_sym(lv_obj_t * slider, bool en)lv_slider_set_sym116,2439
static inline bool lv_slider_get_sym(lv_obj_t * slider)lv_slider_get_sym127,2766
static inline void lv_roller_set_fix_width(lv_obj_t * roller, lv_coord_t w)lv_roller_set_fix_width142,3099
#define lv_scrlbar_mode_t lv_scrlbar_mode_t153,3282
#define LV_SCRLBAR_MODE_OFF LV_SCRLBAR_MODE_OFF155,3329
#define LV_SCRLBAR_MODE_ON LV_SCRLBAR_MODE_ON156,3382
#define LV_SCRLBAR_MODE_DRAG LV_SCRLBAR_MODE_DRAG157,3434
#define LV_SCRLBAR_MODE_AUTO LV_SCRLBAR_MODE_AUTO158,3488
#define LV_SCRLBAR_MODE_HIDE LV_SCRLBAR_MODE_HIDE159,3542
#define LV_SCRLBAR_MODE_UNHIDE LV_SCRLBAR_MODE_UNHIDE160,3596
static inline void lv_page_set_scrlbar_mode(lv_obj_t * page, lv_scrlbar_mode_t sb_mode)lv_page_set_scrlbar_mode163,3654
static inline lv_scrollbar_mode_t lv_page_get_scrlbar_mode(lv_obj_t * page)lv_page_get_scrlbar_mode167,3793
static inline lv_obj_t * lv_page_get_scrl(lv_obj_t * page)lv_page_get_scrl173,3920
#define LV_ROLLER_MODE_INIFINITE LV_ROLLER_MODE_INIFINITE191,4190
static inline lv_obj_t * lv_win_add_btn(lv_obj_t * win, const void * img_src)lv_win_add_btn196,4271
static inline void lv_chart_set_range(lv_obj_t * chart, lv_coord_t ymin, lv_coord_t ymax)lv_chart_set_range204,4426
static inline void lv_chart_clear_serie(lv_obj_t * chart, lv_chart_series_t * series)lv_chart_clear_serie210,4593
static inline void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs,lv_obj_align_origo217,4734
static inline void lv_obj_align_origo_x(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs)lv_obj_align_origo_x223,4962
static inline void lv_obj_align_origo_y(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t y_ofs)lv_obj_align_origo_y228,5131

lib/lvgl/src/lv_examples/lv_examples.h,213
#define LV_EXAMPLES_HLV_EXAMPLES_H7,57
#define __LV_TO_STR_AUX(__LV_TO_STR_AUX23,301
#define __LV_TO_STR(__LV_TO_STR24,331
#undef __LV_TO_STR_AUX__LV_TO_STR_AUX26,411
#undef __LV_TO_STR__LV_TO_STR27,434

lib/lvgl/src/lv_examples/lv_ex_conf.h,552
#define LV_EX_CONF_HLV_EX_CONF_H13,176
#define LV_EX_PRINTF LV_EX_PRINTF20,262
#define LV_EX_KEYBOARD LV_EX_KEYBOARD21,347
#define LV_EX_MOUSEWHEEL LV_EX_MOUSEWHEEL22,465
#define LV_USE_DEMO_WIDGETS LV_USE_DEMO_WIDGETS29,679
#define LV_DEMO_WIDGETS_SLIDESHOW LV_DEMO_WIDGETS_SLIDESHOW31,740
#define LV_USE_DEMO_PRINTER LV_USE_DEMO_PRINTER35,825
#define LV_USE_DEMO_KEYPAD_AND_ENCODER LV_USE_DEMO_KEYPAD_AND_ENCODER38,910
#define LV_USE_DEMO_BENCHMARK LV_USE_DEMO_BENCHMARK41,981
#define LV_USE_DEMO_STRESS LV_USE_DEMO_STRESS44,1041

lib/lvgl/src/lv_examples/lv_examples.mk,0

lib/lvgl/src/lv_examples/lv_ex_conf_template.h,0

lib/lvgl/src/lv_examples/scripts/build_all_examples.sh,0

lib/lvgl/src/lv_examples/scripts/genexamplestxt.sh,0

lib/lvgl/src/lv_examples/assets/img_cogwheel_rgb.c,335
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN4,60
#define LV_ATTRIBUTE_IMG_IMG_COGWHEEL_RGBLV_ATTRIBUTE_IMG_IMG_COGWHEEL_RGB8,141
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_IMG_COGWHEEL_RGB uint8_t img_cogwheel_rgb_map[] = {img_cogwheel_rgb_map11,191
const lv_img_dsc_t img_cogwheel_rgb = {img_cogwheel_rgb426,541970

lib/lvgl/src/lv_examples/assets/lv_font_montserrat_28_compr_az.c,769
#define LV_FONT_MONTSERRAT_28_COMPR_AZ LV_FONT_MONTSERRAT_28_COMPR_AZ10,266
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,441
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc359,14526
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps397,17285
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping415,17827
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping424,18028
static const int8_t kern_class_values[] =kern_class_values433,18217
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes459,18911
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc473,19300
lv_font_t lv_font_montserrat_28_compr_az = {lv_font_montserrat_28_compr_az491,19667

lib/lvgl/src/lv_examples/assets/lv_font_montserrat_12_compr_az.c,762
#define LV_FONT_MONTSERRAT_12_COMPR_AZ LV_FONT_MONTSERRAT_12_COMPR_AZ10,266
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,441
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc171,5100
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps209,7802
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping227,8344
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping236,8545
static const int8_t kern_class_values[] =kern_class_values245,8734
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes271,9423
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc285,9812
lv_font_t lv_font_montserrat_12_compr_az = {lv_font_montserrat_12_compr_az303,10179

lib/lvgl/src/lv_examples/assets/img_cogwheel_indexed16.c,376
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN4,60
#define LV_ATTRIBUTE_IMG_IMG_COGWHEEL_INDEXED16LV_ATTRIBUTE_IMG_IMG_COGWHEEL_INDEXED168,147
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_IMG_COGWHEEL_INDEXED16 uint8_t img_cogwheel_indexed16_map[] = {img_cogwheel_indexed16_map11,203
const lv_img_dsc_t img_cogwheel_indexed16 = {img_cogwheel_indexed16131,31392

lib/lvgl/src/lv_examples/assets/lv_font_montserrat_16_compr_az.c,767
#define LV_FONT_MONTSERRAT_16_COMPR_AZ LV_FONT_MONTSERRAT_16_COMPR_AZ10,266
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,441
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc209,7041
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps247,9757
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping265,10299
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping274,10500
static const int8_t kern_class_values[] =kern_class_values283,10689
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes309,11379
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc323,11768
lv_font_t lv_font_montserrat_16_compr_az = {lv_font_montserrat_16_compr_az341,12135

lib/lvgl/src/lv_examples/assets/img_cogwheel_chroma_keyed.c,398
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN4,60
#define LV_ATTRIBUTE_IMG_IMG_COGWHEEL_CHROMA_KEYEDLV_ATTRIBUTE_IMG_IMG_COGWHEEL_CHROMA_KEYED8,150
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_IMG_COGWHEEL_CHROMA_KEYED uint8_t img_cogwheel_chroma_keyed_map[] = {img_cogwheel_chroma_keyed_map11,209
const lv_img_dsc_t img_cogwheel_chroma_keyed = {img_cogwheel_chroma_keyed426,542006

lib/lvgl/src/lv_examples/assets/img_hand.c,277
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN4,60
#define LV_ATTRIBUTE_IMG_IMG_HANDLV_ATTRIBUTE_IMG_IMG_HAND8,133
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_IMG_HAND uint8_t img_hand_map[] = {img_hand_map11,175
const lv_img_dsc_t img_hand = {img_hand61,65618

lib/lvgl/src/lv_examples/assets/img_cogwheel_argb.c,342
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN4,60
#define LV_ATTRIBUTE_IMG_IMG_COGWHEEL_ARGBLV_ATTRIBUTE_IMG_IMG_COGWHEEL_ARGB8,142
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_IMG_COGWHEEL_ARGB uint8_t img_cogwheel_argb_map[] = {img_cogwheel_argb_map11,193
const lv_img_dsc_t img_cogwheel_argb = {img_cogwheel_argb425,721946

lib/lvgl/src/lv_examples/assets/img_cogwheel_alpha16.c,362
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN4,60
#define LV_ATTRIBUTE_IMG_IMG_COGWHEEL_ALPHA16LV_ATTRIBUTE_IMG_IMG_COGWHEEL_ALPHA168,145
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_IMG_COGWHEEL_ALPHA16 uint8_t img_cogwheel_alpha16_map[] = {img_cogwheel_alpha16_map11,199
const lv_img_dsc_t img_cogwheel_alpha16 = {img_cogwheel_alpha16114,30609

lib/lvgl/src/lv_examples/src/lv_demo_keypad_encoder/lv_demo_keypad_encoder.h,63
#define LV_DEMO_KEYPAD_ENCODER_HLV_DEMO_KEYPAD_ENCODER_H7,79

lib/lvgl/src/lv_examples/src/lv_demo_keypad_encoder/lv_demo_keypad_encoder.c,1314
static lv_group_t*  g;g44,1016
static lv_obj_t * tv;tv45,1039
static lv_obj_t * t1;t146,1061
static lv_obj_t * t2;t247,1083
static lv_obj_t * t3;t348,1105
    lv_obj_t * btn;btn51,1137
    lv_obj_t * cb;cb52,1157
    lv_obj_t * slider;slider53,1176
    lv_obj_t * sw;sw54,1199
    lv_obj_t * spinbox;spinbox55,1218
    lv_obj_t * dropdown;dropdown56,1242
    lv_obj_t * roller;roller57,1267
    lv_obj_t * list;list58,1290
}selector_objs;selector_objs59,1311
    lv_obj_t * ta1;ta162,1337
    lv_obj_t * ta2;ta263,1357
    lv_obj_t * kb;kb64,1377
}textinput_objs;textinput_objs65,1396
LV_EVENT_CB_DECLARE(dd_enc)LV_EVENT_CB_DECLARE75,1551
void lv_demo_keypad_encoder(void)lv_demo_keypad_encoder82,1657
static void selectors_create(lv_obj_t * parent)selectors_create123,2656
static void text_input_create(lv_obj_t * parent)text_input_create159,4069
static void msgbox_create(void)msgbox_create175,4768
static void msgbox_event_cb(lv_obj_t * msgbox, lv_event_t e)msgbox_event_cb197,5542
static void focus_cb(lv_group_t * group)focus_cb210,5953
static void tv_event_cb(lv_obj_t * ta, lv_event_t e)tv_event_cb229,6407
static void ta_event_cb(lv_obj_t * ta, lv_event_t e)ta_event_cb258,7142
static void kb_event_cb(lv_obj_t * kb, lv_event_t e)kb_event_cb292,8387

lib/lvgl/src/lv_examples/src/lv_demo_widgets/lv_demo_widgets.h,49
#define LV_DEMO_WIDGETS_HLV_DEMO_WIDGETS_H7,65

lib/lvgl/src/lv_examples/src/lv_demo_widgets/lv_demo_widgets.c,1376
static lv_obj_t * tv;tv47,1310
static lv_obj_t * t1;t148,1332
static lv_obj_t * t2;t249,1354
static lv_obj_t * t3;t350,1376
static lv_obj_t * kb;kb51,1398
static lv_style_t style_box;style_box53,1421
void lv_demo_widgets(void)lv_demo_widgets63,1588
static void controls_create(lv_obj_t * parent)controls_create108,3254
static void visuals_create(lv_obj_t * parent)visuals_create205,7632
static void selectors_create(lv_obj_t * parent)selectors_create405,16721
static void slider_event_cb(lv_obj_t * slider, lv_event_t e)slider_event_cb545,23186
static void ta_event_cb(lv_obj_t * ta, lv_event_t e)ta_event_cb562,23847
static void kb_event_cb(lv_obj_t * _kb, lv_event_t e)kb_event_cb581,24442
static void bar_anim(lv_task_t * t)bar_anim595,24702
static void arc_anim(lv_obj_t * arc, lv_anim_value_t value)arc_anim609,25093
static void linemeter_anim(lv_obj_t * linemeter, lv_anim_value_t value)linemeter_anim621,25411
static void gauge_anim(lv_obj_t * gauge, lv_anim_value_t value)gauge_anim632,25760
static void table_event_cb(lv_obj_t * table, lv_event_t e)table_event_cb643,26110
static void color_chg_event_cb(lv_obj_t * sw, lv_event_t e)color_chg_event_cb660,26652
static void tab_content_anim_create(lv_obj_t * parent)tab_content_anim_create676,27233
static void tab_changer_task_cb(lv_task_t * task)tab_changer_task_cb695,27998

lib/lvgl/src/lv_examples/src/lv_examples.h,50
#define LV_EXAMPLES_SRC_HLV_EXAMPLES_SRC_H7,133

lib/lvgl/src/lv_examples/src/lv_demo_stress/lv_demo_stress.h,47
#define LV_DEMO_STRESS_HLV_DEMO_STRESS_H7,63

lib/lvgl/src/lv_examples/src/lv_demo_stress/lv_demo_stress.c,498
#define TIME_STEP TIME_STEP15,220
static lv_obj_t * main_page;main_page30,550
static lv_obj_t * ta;ta31,579
static lv_style_t style_slow_trans;style_slow_trans32,601
static const char * mbox_btns[] = {"Ok", "Cancel", ""};mbox_btns33,637
static uint32_t mem_free_start = 0;mem_free_start34,693
void lv_demo_stress(void)lv_demo_stress43,866
static void obj_test_task_cb(lv_task_t * param)obj_test_task_cb62,1507
static void auto_del(lv_obj_t * obj, uint32_t delay)auto_del465,16989

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_msgbox/lv_ex_msgbox_1.py,132
def event_handler(obj, event):event_handler1,0
btns = ["Apply", "Close", ""]btns5,135
mbox1 = lv.mbox(lv.scr_act())mbox17,166

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_msgbox/lv_ex_msgbox_2.c,586
static lv_obj_t *mbox, *info;mbox8,221
static lv_obj_t *mbox, *info;info8,221
static lv_style_t style_modal;style_modal9,251
static const char welcome_info[] = "Welcome to the modal message box demo!\n"welcome_info11,283
static const char in_msg_info[] = "Notice that you cannot touch "in_msg_info14,416
void lv_ex_msgbox_2(void)lv_ex_msgbox_217,542
static void mbox_event_cb(lv_obj_t *obj, lv_event_t evt)mbox_event_cb41,1427
static void btn_event_cb(lv_obj_t *btn, lv_event_t evt)btn_event_cb54,1887
static void opa_anim(void * bg, lv_anim_value_t v)opa_anim89,3172

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_msgbox/lv_ex_msgbox_2.py,732
welcome_info = "Welcome to the modal message box demo!\nPress the button to display a message box."welcome_info1,0
in_msg_info = "Notice that you cannot touch the button again while the message box is open."in_msg_info2,100
class Modal(lv.mbox):Modal4,194
    def __init__(self, parent, *args, **kwargs):__init__6,264
    def set_event_cb(self, callback):set_event_cb33,1372
    def get_event_cb(self):get_event_cb36,1444
    def default_callback(self, obj, evt):default_callback39,1502
def mbox_event_cb(obj, evt):mbox_event_cb50,1916
def btn_event_cb(btn, evt):btn_event_cb54,2013
scr = lv.scr_act()scr69,2437
btn = lv.btn(scr)btn72,2517
label = lv.label(btn)label78,2666
info = lv.label(scr)info82,2774

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_msgbox/lv_ex_msgbox_1.c,127
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,72
void lv_ex_msgbox_1(void)lv_ex_msgbox_112,253

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_btn/lv_ex_btn_1.py,198
def event_handler(obj, event):event_handler1,0
btn1 = lv.btn(lv.scr_act())btn15,91
label = lv.label(btn1)label9,195
btn2 = lv.btn(lv.scr_act())btn212,244
label = lv.label(btn2)label20,517

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_btn/lv_ex_btn_2.c,41
void lv_ex_btn_2(void)lv_ex_btn_28,116

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_btn/lv_ex_btn_1.c,121
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,69
void lv_ex_btn_1(void)lv_ex_btn_115,287

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_list/lv_ex_list_1.py,423
def event_handler(obj, event):event_handler1,0
list1 = lv.list(lv.scr_act())list16,139
list_btn = list1.add_btn(lv.SYMBOL.FILE, "New")list_btn12,263
list_btn = list1.add_btn(lv.SYMBOL.DIRECTORY, "Open")list_btn15,349
list_btn = list1.add_btn(lv.SYMBOL.CLOSE, "Delete")list_btn18,441
list_btn = list1.add_btn(lv.SYMBOL.EDIT, "Edit")list_btn21,531
list_btn = list1.add_btn(lv.SYMBOL.SAVE, "Save")list_btn24,618

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_list/lv_ex_list_1.c,123
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,70
void lv_ex_list_1(void)lv_ex_list_112,237

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_chart/lv_ex_chart_1.py,164
chart = lv.chart(lv.scr_act())chart2,17
ser1 = chart.add_series(lv.color_make(0xFF,0,0))ser112,427
ser2 = chart.add_series(lv.color_make(0,0x80,0))ser213,476

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_chart/lv_ex_chart_1.c,44
void lv_ex_chart_1(void)lv_ex_chart_14,52

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_chart/lv_ex_chart_2.c,45
void lv_ex_chart_2(void)lv_ex_chart_27,105

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_img/lv_ex_img_1.py,225
decoder = lv.img.decoder_create()decoder4,76
  png_data = f.read()png_data11,248
png_img_dsc = lv.img_dsc_t({png_img_dsc13,271
scr = lv.scr_act()scr18,358
img1 = lv.img(scr)img123,454
img2 = lv.img(scr)img227,541

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_img/lv_ex_img_2.c,713
#define SLIDER_WIDTH SLIDER_WIDTH4,50
static lv_obj_t * red_slider, * green_slider, * blue_slider, * intense_slider;red_slider9,176
static lv_obj_t * red_slider, * green_slider, * blue_slider, * intense_slider;green_slider9,176
static lv_obj_t * red_slider, * green_slider, * blue_slider, * intense_slider;blue_slider9,176
static lv_obj_t * red_slider, * green_slider, * blue_slider, * intense_slider;intense_slider9,176
static lv_obj_t * img1;img110,255
LV_IMG_DECLARE(img_cogwheel_argb);img_cogwheel_argb11,279
void lv_ex_img_2(void)lv_ex_img_213,315
static void slider_event_cb(lv_obj_t * slider, lv_event_t event)slider_event_cb24,625
static void create_sliders(void)create_sliders35,1209

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_img/lv_ex_img_1.c,100
LV_IMG_DECLARE(img_cogwheel_argb);img_cogwheel_argb5,132
void lv_ex_img_1(void)lv_ex_img_17,168

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_img/lv_ex_img_3.c,98
LV_IMG_DECLARE(img_cogwheel_argb);img_cogwheel_argb4,50
void lv_ex_img_3(void)lv_ex_img_36,86

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_cpicker/lv_ex_cpicker_2.c,48
void lv_ex_cpicker_2(void)lv_ex_cpicker_24,54

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_cpicker/lv_ex_cpicker_1.c,48
void lv_ex_cpicker_1(void)lv_ex_cpicker_14,54

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_imgbtn/imgbtn_blue.c,109
const uint8_t imgbtn_blue_map[] = {imgbtn_blue_map3,35
lv_img_dsc_t imgbtn_blue = {imgbtn_blue177,361004

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_imgbtn/imgbtn_green.c,113
const uint8_t imgbtn_green_map[] = {imgbtn_green_map3,35
lv_img_dsc_t imgbtn_green = {imgbtn_green177,361005

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_imgbtn/lv_ex_imgbtn_1.c,46
void lv_ex_imgbtn_1(void)lv_ex_imgbtn_14,53

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_linemeter/lv_ex_linemeter_1.c,52
void lv_ex_linemeter_1(void)lv_ex_linemeter_14,56

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_linemeter/lv_ex_linemeter_1.py,93
style_lmeter = lv.style_t()style_lmeter2,36
lmeter = lv.lmeter(lv.scr_act())lmeter11,462

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_templ.c,42
void lv_ex_templ(void)lv_ex_templ36,543

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_calendar/lv_ex_calendar_1.py,186
def event_handler(obj, event):event_handler1,0
calendar = lv.calendar(lv.scr_act())calendar7,170
today = lv.calendar_date_t()today13,336
highlihted_days = [highlihted_days21,480

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_calendar/lv_ex_calendar_1.c,131
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler6,75
void lv_ex_calendar_1(void)lv_ex_calendar_116,376

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_led/lv_ex_led_1.py,175
style_led = lv.style_t()style_led2,29
led1  = lv.led(lv.scr_act())led114,543
led2  = lv.led(lv.scr_act(), led1)led220,716
led3  = lv.led(lv.scr_act(), led1)led325,854

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_led/lv_ex_led_1.c,40
void lv_ex_led_1(void)lv_ex_led_14,50

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_line/lv_ex_line_1.c,42
void lv_ex_line_1(void)lv_ex_line_14,51

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_line/lv_ex_line_1.py,136
line_points = [ {"x":5, "y":5}, line_points2,45
style_line = lv.style_t()style_line9,258
line1 = lv.line(lv.scr_act())line116,486

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_tabview/lv_ex_tabview_1.py,285
tabview = lv.tabview(lv.scr_act())tabview2,27
tab1 = tabview.add_tab("Tab 1")tab15,125
tab2 = tabview.add_tab("Tab 2")tab26,157
tab3 = tabview.add_tab("Tab 3")tab37,189
label = lv.label(tab1)label10,248
label = lv.label(tab2)label21,395
label = lv.label(tab3)label24,448

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_tabview/lv_ex_tabview_1.c,48
void lv_ex_tabview_1(void)lv_ex_tabview_14,54

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_cont/lv_ex_cont_1.py,145
cont = lv.cont(lv.scr_act())cont1,0
label = lv.label(cont)label7,266
label = lv.label(cont)label10,319
label = lv.label(cont)label13,379

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_cont/lv_ex_cont_1.c,42
void lv_ex_cont_1(void)lv_ex_cont_14,51

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_widgets.h,45
#define LV_EX_WIDGETS_HLV_EX_WIDGETS_H7,61

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_switch/lv_ex_switch_1.py,314
def event_handler(obj, event):event_handler1,0
bg_style = lv.style_t()bg_style6,169
indic_style = lv.style_t()indic_style7,193
knob_on_style = lv.style_t()knob_on_style8,220
knob_off_style = lv.style_t()knob_off_style9,249
sw1 = lv.sw(lv.scr_act())sw136,1116
sw2 = lv.sw(lv.scr_act(), sw1)sw245,1443

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_switch/lv_ex_switch_1.c,127
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,72
void lv_ex_switch_1(void)lv_ex_switch_112,257

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_canvas/lv_ex_canvas_1.c,129
#define CANVAS_WIDTH CANVAS_WIDTH5,54
#define CANVAS_HEIGHT CANVAS_HEIGHT6,80
void lv_ex_canvas_1(void)lv_ex_canvas_18,108

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_canvas/lv_ex_canvas_1.py,251
CANVAS_WIDTH  = 200CANVAS_WIDTH1,0
CANVAS_HEIGHT = 150CANVAS_HEIGHT2,20
style = lv.style_t()style4,41
cbuf = bytearray(CANVAS_WIDTH * CANVAS_HEIGHT * 4)cbuf18,533
canvas = lv.canvas(lv.scr_act())canvas20,585
img = lv.img_dsc_t()img31,1063

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_canvas/lv_ex_canvas_2.c,130
#define CANVAS_WIDTH CANVAS_WIDTH4,53
#define CANVAS_HEIGHT CANVAS_HEIGHT5,78
void lv_ex_canvas_2(void)lv_ex_canvas_210,199

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_canvas/lv_ex_canvas_2.py,317
CANVAS_WIDTH  = 50CANVAS_WIDTH3,86
CANVAS_HEIGHT = 50CANVAS_HEIGHT4,105
def bufsize(w, h, bits, indexed=False):bufsize6,125
cbuf = bytearray(bufsize(CANVAS_WIDTH, CANVAS_HEIGHT, 1, indexed=True))cbuf19,497
canvas = lv.canvas(lv.scr_act())canvas22,619
c0 = lv.color_t()c029,969
c1 = lv.color_t()c130,987

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_label/lv_ex_label_3.py,377
labels = []labels2,53
label = lv.label(lv.scr_act())label9,267
label = lv.label(lv.scr_act())label17,526
label = lv.label(lv.scr_act())label24,714
class TextChanger:TextChanger30,884
    def __init__(self, labels, __init__32,954
    def start(self):start40,1205
    def task_cb(self, task):task_cb43,1302
text_changer = TextChanger(labels)text_changer53,1611

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_label/lv_ex_label_1.py,89
label1 = lv.label(lv.scr_act())label11,0
label2 = lv.label(lv.scr_act())label210,456

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_label/lv_ex_label_2.py,155
label_style = lv.style_t()label_style2,32
shadow_label = lv.label(lv.scr_act())shadow_label7,200
main_label = lv.label(lv.scr_act())main_label11,320

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_label/lv_ex_label_2.c,44
void lv_ex_label_2(void)lv_ex_label_24,52

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_label/lv_ex_label_1.c,44
void lv_ex_label_1(void)lv_ex_label_14,52

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_label/lv_ex_label_3.c,141
lv_obj_t * labels[3];labels6,94
void lv_ex_label_3(void)lv_ex_label_311,179
static void text_changer(lv_task_t * t)text_changer40,1311

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_objmask/lv_ex_objmask_2.c,123
#define MASK_WIDTH MASK_WIDTH4,54
#define MASK_HEIGHT MASK_HEIGHT5,77
void lv_ex_objmask_2(void)lv_ex_objmask_27,101

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_objmask/lv_ex_objmask_1.c,48
void lv_ex_objmask_1(void)lv_ex_objmask_14,54

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_bar/lv_ex_bar_1.py,37
bar1 = lv.bar(lv.scr_act())bar11,0

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_bar/lv_ex_bar_1.c,40
void lv_ex_bar_1(void)lv_ex_bar_14,50

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_arc/lv_ex_arc_2.c,97
static void arc_loader(lv_task_t * t)arc_loader8,137
void lv_ex_arc_2(void)lv_ex_arc_225,384

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_arc/lv_ex_arc_1.py,69
style = lv.style_t()style2,28
arc = lv.arc(lv.scr_act())arc8,211

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_arc/lv_ex_arc_2.py,251
class loader_arc(lv.arc):loader_arc2,40
    def __init__(self, parent, color=lv.color_hex(0x000080), __init__4,67
    def spin(self):spin24,625
    def task_cb(self, task):task_cb30,842
loader_arc = loader_arc(lv.scr_act())loader_arc42,1138

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_arc/lv_ex_arc_1.c,41
void lv_ex_arc_1(void) lv_ex_arc_15,51

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_tileview/lv_ex_tileview_1.c,50
void lv_ex_tileview_1(void)lv_ex_tileview_14,55

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_tileview/lv_ex_tileview_1.py,916
valid_pos = [{"x":0, "y": 0}, {"x": 0, "y": 1}, {"x": 1,"y": 1}]valid_pos1,0
HOR_RES = lv.disp_get_hor_res(lv.disp_get_default())HOR_RES4,93
VER_RES = lv.disp_get_ver_res(lv.disp_get_default())VER_RES5,146
tileview = lv.tileview(lv.scr_act())tileview7,200
tile1 = lv.obj(tileview)tile111,324
label = lv.label(tile1)label17,466
lst = lv.list(tileview)lst22,573
list_btn = lst.add_btn(None, "One")list_btn29,744
list_btn = lst.add_btn(None, "Two")list_btn32,812
list_btn = lst.add_btn(None, "Three")list_btn35,880
list_btn = lst.add_btn(None, "Four")list_btn38,950
list_btn = lst.add_btn(None, "Five")list_btn41,1019
list_btn = lst.add_btn(None, "Six")list_btn44,1088
list_btn = lst.add_btn(None, "Seven")list_btn47,1156
list_btn = lst.add_btn(None, "Eight")list_btn50,1226
tile3 = lv.obj(tileview, tile1)tile354,1314
btn = lv.btn(tile3)btn58,1407
label = lv.label(btn)label61,1467

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_spinner/lv_ex_spinner_1.py,82
style = lv.style_t()style2,35
preload = lv.preload(lv.scr_act())preload12,383

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_spinner/lv_ex_spinner_1.c,48
void lv_ex_spinner_1(void)lv_ex_spinner_14,54

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_gauge/lv_ex_gauge_2.c,44
void lv_ex_gauge_2(void)lv_ex_gauge_25,53

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_gauge/lv_ex_gauge_1.c,44
void lv_ex_gauge_1(void)lv_ex_gauge_15,53

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_gauge/lv_ex_gauge_1.py,117
style = lv.style_t()style2,17
needle_colors = [needle_colors14,638
gauge1 = lv.gauge(lv.scr_act())gauge121,786

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_keyboard/lv_ex_keyboard_1.c,50
void lv_ex_keyboard_1(void)lv_ex_keyboard_14,55

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_keyboard/lv_ex_keyboard_1.py,149
rel_style = lv.style_t()rel_style2,33
pr_style  = lv.style_t()pr_style3,58
kb = lv.kb(lv.scr_act())kb14,325
ta = lv.ta(lv.scr_act())ta21,569

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_spinbox/lv_ex_spinbox_1.c,307
static lv_obj_t * spinbox;spinbox5,73
static void lv_spinbox_increment_event_cb(lv_obj_t * btn, lv_event_t e)lv_spinbox_increment_event_cb8,102
static void lv_spinbox_decrement_event_cb(lv_obj_t * btn, lv_event_t e)lv_spinbox_decrement_event_cb15,299
void lv_ex_spinbox_1(void)lv_ex_spinbox_123,497

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_spinbox/lv_ex_spinbox_1.py,98
def event_handler(obj, event):event_handler1,0
spinbox = lv.spinbox(lv.scr_act())spinbox8,245

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_textarea/lv_ex_textarea_3.c,159
static lv_obj_t * kb;kb7,152
void lv_ex_textarea_3(void)lv_ex_textarea_313,269
static void ta_event_cb(lv_obj_t * ta, lv_event_t event)ta_event_cb30,824

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_textarea/lv_ex_textarea_1.py,85
def event_handler(obj, event):event_handler1,0
ta1 = lv.ta(lv.scr_act())ta18,313

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_textarea/lv_ex_textarea_2.c,159
static lv_obj_t * kb;kb7,152
void lv_ex_textarea_2(void)lv_ex_textarea_29,175
static void ta_event_cb(lv_obj_t * ta, lv_event_t event)ta_event_cb46,1708

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_textarea/lv_ex_textarea_1.c,156
lv_obj_t * ta1;ta15,74
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler7,91
void lv_ex_textarea_1(void)lv_ex_textarea_123,613

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_textarea/lv_ex_textarea_2.py,413
HOR_RES = lv.disp_get_hor_res(lv.disp_get_default())HOR_RES1,0
def kb_event_cb(event_kb, event):kb_event_cb3,54
def ta_event_cb(ta, event):ta_event_cb7,164
pwd_ta = lv.ta(lv.scr_act())pwd_ta19,510
pwd_label = lv.label(lv.scr_act())pwd_label28,756
oneline_ta = lv.ta(lv.scr_act(), pwd_ta)oneline_ta33,914
oneline_label = lv.label(lv.scr_act())oneline_label40,1192
kb = lv.kb(lv.scr_act())kb45,1396

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_btnmatrix/lv_ex_btnmatrix_1.c,214
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,75
static const char * btnm_map[] = {"1", "2", "3", "4", "5", "\n",btnm_map15,297
void lv_ex_btnmatrix_1(void)lv_ex_btnmatrix_119,489

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_btnmatrix/lv_ex_btnmatrix_1.py,150
def event_handler(obj, event):event_handler1,0
btnm_map = ["1", "2", "3", "4", "5", "\n",btnm_map6,150
btnm1 = lv.btnm(lv.scr_act())btnm110,275

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_table/lv_ex_table_1.py,133
style_cell1 = lv.style_t()style_cell12,29
style_cell2 = lv.style_t()style_cell28,217
table = lv.table(lv.scr_act())table15,499

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_table/lv_ex_table_1.c,44
void lv_ex_table_1(void)lv_ex_table_14,52

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_roller/lv_ex_roller_1.py,97
def event_handler(obj, event):event_handler1,0
roller1 = lv.roller(lv.scr_act())roller17,199

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_roller/lv_ex_roller_1.c,127
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,72
void lv_ex_roller_1(void)lv_ex_roller_115,312

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_checkbox/lv_ex_checkbox_1.c,131
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,74
void lv_ex_checkbox_1(void)lv_ex_checkbox_112,273

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_checkbox/lv_ex_checkbox_1.py,83
def event_handler(obj, event):event_handler1,0
cb = lv.cb(lv.scr_act())cb5,150

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_obj/lv_ex_obj_1.c,40
void lv_ex_obj_1(void)lv_ex_obj_13,35

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_obj/lv_ex_obj_1.py,176
obj1 = lv.obj(lv.scr_act())obj11,0
obj2 = lv.obj(lv.scr_act(), obj1)obj27,176
style_shadow = lv.style_t()style_shadow12,309
obj3 = lv.obj(lv.scr_act(), obj2)obj318,534

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_page/lv_ex_page_1.c,42
void lv_ex_page_1(void)lv_ex_page_14,51

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_page/lv_ex_page_1.py,115
style_sb = lv.style_t()style_sb2,28
page = lv.page(lv.scr_act())page16,545
label = lv.label(page)label22,747

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_win/lv_ex_win_1.c,40
void lv_ex_win_1(void)lv_ex_win_14,50

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_win/lv_ex_win_1.py,178
win = lv.win(lv.scr_act())win2,18
close_btn = win.add_btn(lv.SYMBOL.CLOSE)      # Add close button and use built-in close actionclose_btn7,144
txt = lv.label(win)txt12,378

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_slider/lv_ex_slider_1.c,127
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler5,72
void lv_ex_slider_1(void)lv_ex_slider_112,242

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_slider/lv_ex_slider_2.py,202
def slider_event_cb(slider, event):slider_event_cb1,0
slider = lv.slider(lv.scr_act())slider6,181
slider_label = lv.label(lv.scr_act())slider_label13,375
info = lv.label(lv.scr_act())info19,566

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_slider/lv_ex_slider_1.py,223
def event_handler(obj, event):event_handler1,0
style_bg = lv.style_t()style_bg6,133
style_indic = lv.style_t()style_indic7,157
style_knob = lv.style_t()style_knob8,184
slider = lv.slider(lv.scr_act())slider32,986

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_slider/lv_ex_slider_2.c,187
static lv_obj_t * slider_label;slider_label6,138
void lv_ex_slider_2(void)lv_ex_slider_28,171
static void slider_event_cb(lv_obj_t * slider, lv_event_t event)slider_event_cb31,1125

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_dropdown/lv_ex_dropdown_1.c,131
static void event_handler(lv_obj_t * obj, lv_event_t event)event_handler6,75
void lv_ex_dropdown_1(void)lv_ex_dropdown_115,308

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_dropdown/lv_ex_dropdown_1.py,95
def event_handler(obj, event):event_handler1,0
ddlist = lv.ddlist(lv.scr_act())ddlist9,309

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_dropdown/lv_ex_dropdown_2.py,45
ddlist = lv.ddlist(lv.scr_act())ddlist4,76

lib/lvgl/src/lv_examples/src/lv_ex_widgets/lv_ex_dropdown/lv_ex_dropdown_2.c,51
void lv_ex_dropdown_2(void)lv_ex_dropdown_29,110

lib/lvgl/src/lv_examples/src/lv_demo_printer/lv_demo_printer_theme.h,1091
#define LV_DEMO_PRINTER_THEME_HLV_DEMO_PRINTER_THEME_H7,77
#define LV_DEMO_PRINTER_WHITE LV_DEMO_PRINTER_WHITE23,342
#define LV_DEMO_PRINTER_LIGHT LV_DEMO_PRINTER_LIGHT24,405
#define LV_DEMO_PRINTER_GRAY LV_DEMO_PRINTER_GRAY25,468
#define LV_DEMO_PRINTER_LIGHT_GRAY LV_DEMO_PRINTER_LIGHT_GRAY26,531
#define LV_DEMO_PRINTER_BLUE LV_DEMO_PRINTER_BLUE27,594
#define LV_DEMO_PRINTER_GREEN LV_DEMO_PRINTER_GREEN28,666
#define LV_DEMO_PRINTER_RED LV_DEMO_PRINTER_RED29,729
    LV_DEMO_PRINTER_THEME_TITLE = _LV_THEME_BUILTIN_LAST,LV_DEMO_PRINTER_THEME_TITLE35,874
    LV_DEMO_PRINTER_THEME_LABEL_WHITE,LV_DEMO_PRINTER_THEME_LABEL_WHITE36,932
    LV_DEMO_PRINTER_THEME_ICON,LV_DEMO_PRINTER_THEME_ICON37,971
    LV_DEMO_PRINTER_THEME_BTN_BORDER,LV_DEMO_PRINTER_THEME_BTN_BORDER38,1003
    LV_DEMO_PRINTER_THEME_BTN_CIRCLE,LV_DEMO_PRINTER_THEME_BTN_CIRCLE39,1041
    LV_DEMO_PRINTER_THEME_BOX_BORDER,LV_DEMO_PRINTER_THEME_BOX_BORDER40,1079
    LV_DEMO_PRINTER_THEME_BTN_BACKLV_DEMO_PRINTER_THEME_BTN_BACK41,1117
}lv_demo_printer_theme_t;lv_demo_printer_theme_t42,1152

lib/lvgl/src/lv_examples/src/lv_demo_printer/lv_demo_printer.c,5189
#define LV_DEMO_PRINTER_BG_NONE LV_DEMO_PRINTER_BG_NONE16,242
#define LV_DEMO_PRINTER_BG_FULL LV_DEMO_PRINTER_BG_FULL17,288
#define LV_DEMO_PRINTER_BG_NORMAL LV_DEMO_PRINTER_BG_NORMAL18,322
#define LV_DEMO_PRINTER_BG_SMALL LV_DEMO_PRINTER_BG_SMALL19,380
#define LV_DEMO_PRINTER_BTN_H LV_DEMO_PRINTER_BTN_H22,448
#define LV_DEMO_PRINTER_BTN_W LV_DEMO_PRINTER_BTN_W23,485
#define LV_DEMO_PRINTER_ANIM_Y LV_DEMO_PRINTER_ANIM_Y26,539
#define LV_DEMO_PRINTER_ANIM_DELAY LV_DEMO_PRINTER_ANIM_DELAY27,588
#define LV_DEMO_PRINTER_ANIM_TIME LV_DEMO_PRINTER_ANIM_TIME28,628
#define LV_DEMO_PRINTER_ANIM_TIME_BG LV_DEMO_PRINTER_ANIM_TIME_BG29,669
#define LV_DEMO_PRINTER_TITLE_PAD LV_DEMO_PRINTER_TITLE_PAD32,726
LV_EVENT_CB_DECLARE(print_open_event_cb);print_open_event_cb45,1028
LV_EVENT_CB_DECLARE(back_to_home_event_cb);back_to_home_event_cb46,1070
LV_EVENT_CB_DECLARE(scan_open_icon_event_cb);scan_open_icon_event_cb49,1116
LV_EVENT_CB_DECLARE(scan_ready_event_cb);scan_ready_event_cb50,1162
LV_EVENT_CB_DECLARE(copy_open_icon_event_cb);copy_open_icon_event_cb52,1205
LV_EVENT_CB_DECLARE(scan_next_event_cb);scan_next_event_cb53,1251
LV_EVENT_CB_DECLARE(scan_save_event_cb);scan_save_event_cb54,1292
LV_EVENT_CB_DECLARE(hue_slider_event_cb);hue_slider_event_cb55,1333
LV_EVENT_CB_DECLARE(lightness_slider_event_cb);lightness_slider_event_cb56,1375
LV_EVENT_CB_DECLARE(usb_icon_event_cb);usb_icon_event_cb57,1423
LV_EVENT_CB_DECLARE(print_cnt_bnt_event_cb);print_cnt_bnt_event_cb58,1463
LV_EVENT_CB_DECLARE(print_start_event_cb);print_start_event_cb59,1508
LV_EVENT_CB_DECLARE(back_to_print_event_cb);back_to_print_event_cb60,1551
LV_EVENT_CB_DECLARE(mobile_icon_event_cb);mobile_icon_event_cb61,1596
LV_EVENT_CB_DECLARE(internet_icon_event_cb);internet_icon_event_cb62,1639
LV_EVENT_CB_DECLARE(setup_icon_event_cb);setup_icon_event_cb63,1684
LV_EVENT_CB_DECLARE(icon_generic_event_cb);icon_generic_event_cb77,2302
static lv_obj_t * bg_top;bg_top87,2803
static lv_obj_t * bg_bottom;bg_bottom88,2829
static lv_obj_t * scan_img;scan_img89,2858
static lv_obj_t * print_cnt_label;print_cnt_label90,2886
static lv_color_t bg_color_prev;bg_color_prev91,2921
static lv_color_t bg_color_act;bg_color_act92,2954
static uint16_t print_cnt;print_cnt93,2986
static uint16_t hue_act;hue_act94,3013
static int16_t lightness_act;lightness_act95,3038
static const char * scan_btn_txt;scan_btn_txt96,3068
void lv_demo_printer(void)lv_demo_printer106,3240
static void home_open(uint32_t delay) {home_open136,4180
static void scan1_open(const char * btn_txt)scan1_open267,9767
LV_EVENT_CB_DECLARE(copy_open_icon_event_cb) {LV_EVENT_CB_DECLARE352,13493
LV_EVENT_CB_DECLARE(scan_open_icon_event_cb)LV_EVENT_CB_DECLARE378,14340
static void scan_anim_ready(lv_anim_t * a)scan_anim_ready400,15148
LV_EVENT_CB_DECLARE(scan_save_event_cb)LV_EVENT_CB_DECLARE407,15278
static void print_open(uint32_t delay)print_open430,15962
LV_EVENT_CB_DECLARE(usb_icon_event_cb)LV_EVENT_CB_DECLARE482,18224
LV_EVENT_CB_DECLARE(print_cnt_bnt_event_cb)LV_EVENT_CB_DECLARE600,24755
LV_EVENT_CB_DECLARE(print_start_event_cb)LV_EVENT_CB_DECLARE614,25188
static void print_start_ready(lv_anim_t * a)print_start_ready635,25964
LV_EVENT_CB_DECLARE(back_to_print_event_cb)LV_EVENT_CB_DECLARE653,26554
LV_EVENT_CB_DECLARE(mobile_icon_event_cb)LV_EVENT_CB_DECLARE662,26723
LV_EVENT_CB_DECLARE(internet_icon_event_cb)LV_EVENT_CB_DECLARE703,28055
LV_EVENT_CB_DECLARE(setup_icon_event_cb)LV_EVENT_CB_DECLARE744,29395
static void info_bottom_create(const char * dsc, const char * btn_txt, lv_event_cb_t btn_event_cb, uint32_t delay)info_bottom_create784,30754
LV_EVENT_CB_DECLARE(print_open_event_cb)LV_EVENT_CB_DECLARE808,31704
LV_EVENT_CB_DECLARE(back_to_home_event_cb)LV_EVENT_CB_DECLARE817,31904
LV_EVENT_CB_DECLARE(scan_next_event_cb)LV_EVENT_CB_DECLARE826,32095
LV_EVENT_CB_DECLARE(hue_slider_event_cb)LV_EVENT_CB_DECLARE934,37880
LV_EVENT_CB_DECLARE(lightness_slider_event_cb)LV_EVENT_CB_DECLARE943,38047
static lv_obj_t * add_icon(lv_obj_t * parent, const void * src_bg, const void * src_icon, const char * txt)add_icon951,38225
static lv_obj_t * add_title(const char * txt)add_title973,38971
static lv_obj_t * add_back(lv_event_cb_t event_cb)add_back983,39303
static lv_obj_t * add_loader(void (*end_cb)(lv_anim_t *))add_loader994,39614
static void loader_anim_cb(void * arc, lv_anim_value_t v)loader_anim_cb1013,40105
static void scan_img_color_refr(void)scan_img_color_refr1023,40400
static lv_anim_value_t anim_path_triangle(const lv_anim_path_t * path, const lv_anim_t * a)anim_path_triangle1040,40916
LV_EVENT_CB_DECLARE(icon_generic_event_cb)LV_EVENT_CB_DECLARE1073,41930
static void lv_demo_printer_anim_bg(uint32_t delay, lv_color_t color, int32_t y_new)lv_demo_printer_anim_bg1133,44016
static void lv_demo_printer_anim_out_all(lv_obj_t * obj, uint32_t delay) {lv_demo_printer_anim_out_all1177,45597
static void lv_demo_printer_anim_in(lv_obj_t * obj, uint32_t delay)lv_demo_printer_anim_in1203,46675
static void anim_bg_color_cb(lv_anim_t * a, lv_anim_value_t v)anim_bg_color_cb1220,47273

lib/lvgl/src/lv_examples/src/lv_demo_printer/lv_demo_printer_theme.c,1524
static lv_theme_t theme;theme29,535
static lv_style_t style_pad;style_pad31,561
static lv_style_t style_circle;style_circle32,590
static lv_style_t style_bg;style_bg34,623
static lv_style_t style_box;style_box35,651
static lv_style_t style_box_border;style_box_border36,680
static lv_style_t style_btn;style_btn37,716
static lv_style_t style_btn_border;style_btn_border38,745
static lv_style_t style_title;style_title39,781
static lv_style_t style_label_white;style_label_white40,812
static lv_style_t style_back;style_back41,849
static lv_style_t style_icon;style_icon42,879
static lv_style_t style_bar_indic;style_bar_indic43,909
static lv_style_t style_slider_knob;style_slider_knob44,944
static lv_style_t style_scrollbar;style_scrollbar45,981
static lv_style_t style_list_btn;style_list_btn46,1016
static lv_style_t style_ddlist_list;style_ddlist_list47,1050
static lv_style_t style_ddlist_selected;style_ddlist_selected48,1087
static lv_style_t style_sw_bg;style_sw_bg49,1128
static lv_style_t style_sw_indic;style_sw_indic50,1159
static lv_style_t style_sw_knob;style_sw_knob51,1193
static lv_style_t style_arc_bg;style_arc_bg52,1226
static lv_style_t style_arc_indic;style_arc_indic53,1258
static void basic_init(void)basic_init64,1432
lv_theme_t * lv_demo_printer_theme_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,lv_demo_printer_theme_init254,12785
static void theme_apply(lv_obj_t * obj, lv_theme_style_t name)theme_apply274,13431

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_icon_wifi.c,398
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_WIFILV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_WIFI9,180
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_WIFI uint8_t lv_demo_printer_icon_wifi_map[] = {lv_demo_printer_icon_wifi_map12,239
const lv_img_dsc_t lv_demo_printer_icon_wifi = {lv_demo_printer_icon_wifi162,118720

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_ready.c,399
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_READYLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_READY9,180
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_READY uint8_t lv_demo_printer_img_ready_map[] = {lv_demo_printer_img_ready_map12,239
const lv_img_dsc_t lv_demo_printer_img_ready = {lv_demo_printer_img_ready658,1800112

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_internet.c,419
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_INTERNETLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_INTERNET9,183
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_INTERNET uint8_t lv_demo_printer_img_internet_map[] = {lv_demo_printer_img_internet_map12,245
const lv_img_dsc_t lv_demo_printer_img_internet = {lv_demo_printer_img_internet282,301108

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_setup.c,398
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SETUPLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SETUP9,180
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SETUP uint8_t lv_demo_printer_img_setup_map[] = {lv_demo_printer_img_setup_map12,239
const lv_img_dsc_t lv_demo_printer_img_setup = {lv_demo_printer_img_setup282,291880

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_icon_tel.c,390
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_TELLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_TEL9,179
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_TEL uint8_t lv_demo_printer_icon_tel_map[] = {lv_demo_printer_icon_tel_map12,237
const lv_img_dsc_t lv_demo_printer_icon_tel = {lv_demo_printer_icon_tel166,89424

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_usb.c,384
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_USBLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_USB9,178
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_USB uint8_t lv_demo_printer_img_usb_map[] = {lv_demo_printer_img_usb_map12,235
const lv_img_dsc_t lv_demo_printer_img_usb = {lv_demo_printer_img_usb270,273836

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_printer2.c,419
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PRINTER2LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PRINTER29,183
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PRINTER2 uint8_t lv_demo_printer_img_printer2_map[] = {lv_demo_printer_img_printer2_map12,245
const lv_img_dsc_t lv_demo_printer_img_printer2 = {lv_demo_printer_img_printer2442,803284

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_mobile.c,405
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_MOBILELV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_MOBILE9,181
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_MOBILE uint8_t lv_demo_printer_img_mobile_map[] = {lv_demo_printer_img_mobile_map12,241
const lv_img_dsc_t lv_demo_printer_img_mobile = {lv_demo_printer_img_mobile266,217532

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_icon_eco.c,390
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_ECOLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_ECO9,179
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_ECO uint8_t lv_demo_printer_icon_eco_map[] = {lv_demo_printer_icon_eco_map12,237
const lv_img_dsc_t lv_demo_printer_icon_eco = {lv_demo_printer_icon_eco162,94236

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_icon_pc.c,383
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_PCLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_PC9,178
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_PC uint8_t lv_demo_printer_icon_pc_map[] = {lv_demo_printer_icon_pc_map12,235
const lv_img_dsc_t lv_demo_printer_icon_pc = {lv_demo_printer_icon_pc158,98612

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_cloud.c,398
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_CLOUDLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_CLOUD9,180
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_CLOUD uint8_t lv_demo_printer_img_cloud_map[] = {lv_demo_printer_img_cloud_map12,239
const lv_img_dsc_t lv_demo_printer_img_cloud = {lv_demo_printer_img_cloud262,396580

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_icon_bright.c,411
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_BRIGHTLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_BRIGHT9,182
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_BRIGHT uint8_t lv_demo_printer_icon_bright_map[] = {lv_demo_printer_icon_bright_map12,243
const lv_img_dsc_t lv_demo_printer_icon_bright = {lv_demo_printer_icon_bright142,61716

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_icon_hue.c,390
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_HUELV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_HUE9,179
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_ICON_HUE uint8_t lv_demo_printer_icon_hue_map[] = {lv_demo_printer_icon_hue_map12,237
const lv_img_dsc_t lv_demo_printer_icon_hue = {lv_demo_printer_icon_hue118,39168

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_btn_bg_4.c,421
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN6,91
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_4LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_410,184
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_4 uint8_t lv_demo_printer_img_btn_bg_4_map[] = {lv_demo_printer_img_btn_bg_4_map13,246
const lv_img_dsc_t lv_demo_printer_img_btn_bg_4 = {lv_demo_printer_img_btn_bg_4888,2023569

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_btn_bg_3.c,421
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN6,91
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_3LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_310,184
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_3 uint8_t lv_demo_printer_img_btn_bg_3_map[] = {lv_demo_printer_img_btn_bg_3_map13,246
const lv_img_dsc_t lv_demo_printer_img_btn_bg_3 = {lv_demo_printer_img_btn_bg_3888,2023569

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_wave.c,390
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_WAVELV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_WAVE9,179
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_WAVE uint8_t lv_demo_printer_img_wave_map[] = {lv_demo_printer_img_wave_map12,237
const lv_img_dsc_t lv_demo_printer_img_wave = {lv_demo_printer_img_wave214,92736

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_btn_bg_1.c,420
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_1LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_19,183
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_1 uint8_t lv_demo_printer_img_btn_bg_1_map[] = {lv_demo_printer_img_btn_bg_1_map12,245
const lv_img_dsc_t lv_demo_printer_img_btn_bg_1 = {lv_demo_printer_img_btn_bg_1887,2023568

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_scan.c,391
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SCANLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SCAN9,179
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SCAN uint8_t lv_demo_printer_img_scan_map[] = {lv_demo_printer_img_scan_map12,237
const lv_img_dsc_t lv_demo_printer_img_scan = {lv_demo_printer_img_scan270,225528

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_btn_bg_2.c,421
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN6,91
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_2LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_210,184
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_BTN_BG_2 uint8_t lv_demo_printer_img_btn_bg_2_map[] = {lv_demo_printer_img_btn_bg_2_map13,246
const lv_img_dsc_t lv_demo_printer_img_btn_bg_2 = {lv_demo_printer_img_btn_bg_2888,2023569

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_copy.c,391
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_COPYLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_COPY9,179
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_COPY uint8_t lv_demo_printer_img_copy_map[] = {lv_demo_printer_img_copy_map12,237
const lv_img_dsc_t lv_demo_printer_img_copy = {lv_demo_printer_img_copy266,221844

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_phone.c,398
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PHONELV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PHONE9,180
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PHONE uint8_t lv_demo_printer_img_phone_map[] = {lv_demo_printer_img_phone_map12,239
const lv_img_dsc_t lv_demo_printer_img_phone = {lv_demo_printer_img_phone422,550852

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_scan_example.c,449
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SCAN_EXAMPLELV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SCAN_EXAMPLE9,187
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_SCAN_EXAMPLE uint8_t lv_demo_printer_img_scan_example_map[] = {lv_demo_printer_img_scan_example_map12,253
const lv_img_dsc_t lv_demo_printer_img_scan_example = {lv_demo_printer_img_scan_example1387,9588864

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_no_internet.c,440
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_NO_INTERNETLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_NO_INTERNET9,186
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_NO_INTERNET uint8_t lv_demo_printer_img_no_internet_map[] = {lv_demo_printer_img_no_internet_map12,251
const lv_img_dsc_t lv_demo_printer_img_no_internet = {lv_demo_printer_img_no_internet194,128344

lib/lvgl/src/lv_examples/src/lv_demo_printer/images/lv_demo_printer_img_print.c,398
#define LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN5,90
#define LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PRINTLV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PRINT9,180
const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_IMG_LV_DEMO_PRINTER_IMG_PRINT uint8_t lv_demo_printer_img_print_map[] = {lv_demo_printer_img_print_map12,239
const lv_img_dsc_t lv_demo_printer_img_print = {lv_demo_printer_img_print282,301096

lib/lvgl/src/lv_examples/src/lv_demo_printer/lv_demo_printer.h,49
#define LV_DEMO_PRINTER_HLV_DEMO_PRINTER_H7,65

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_9.c,44
void lv_ex_style_9(void)lv_ex_style_96,76

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style.h,41
#define LV_EX_STYLE_HLV_EX_STYLE_H7,59

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_8.c,44
void lv_ex_style_8(void)lv_ex_style_86,75

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_4.c,44
void lv_ex_style_4(void)lv_ex_style_46,77

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_5.c,44
void lv_ex_style_5(void)lv_ex_style_56,78

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_11.c,46
void lv_ex_style_11(void)lv_ex_style_116,76

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_7.c,44
void lv_ex_style_7(void)lv_ex_style_76,75

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_10.c,46
void lv_ex_style_10(void)lv_ex_style_106,82

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_3.c,44
void lv_ex_style_3(void)lv_ex_style_36,78

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_1.c,44
void lv_ex_style_1(void)lv_ex_style_16,81

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_6.c,44
void lv_ex_style_6(void)lv_ex_style_66,76

lib/lvgl/src/lv_examples/src/lv_ex_style/lv_ex_style_2.c,44
void lv_ex_style_2(void)lv_ex_style_26,77

lib/lvgl/src/lv_examples/src/lv_demo_benchmark/lv_demo_benchmark.c,6391
#define RND_NUM RND_NUM17,258
#define SCENE_TIME SCENE_TIME18,285
#define ANIM_TIME_MIN ANIM_TIME_MIN19,326
#define ANIM_TIME_MAX ANIM_TIME_MAX20,374
#define OBJ_NUM OBJ_NUM21,411
#define OBJ_SIZE_MIN OBJ_SIZE_MIN22,437
#define OBJ_SIZE_MAX OBJ_SIZE_MAX23,491
#define RADIUS RADIUS24,532
#define BORDER_WIDTH BORDER_WIDTH25,584
#define SHADOW_WIDTH_SMALL SHADOW_WIDTH_SMALL26,636
#define SHADOW_OFS_X_SMALL SHADOW_OFS_X_SMALL27,692
#define SHADOW_OFS_Y_SMALL SHADOW_OFS_Y_SMALL28,748
#define SHADOW_SPREAD_SMALL SHADOW_SPREAD_SMALL29,804
#define SHADOW_WIDTH_LARGE SHADOW_WIDTH_LARGE30,860
#define SHADOW_OFS_X_LARGE SHADOW_OFS_X_LARGE31,917
#define SHADOW_OFS_Y_LARGE SHADOW_OFS_Y_LARGE32,973
#define SHADOW_SPREAD_LARGE SHADOW_SPREAD_LARGE33,1029
#define IMG_WIDH IMG_WIDH34,1085
#define IMG_HEIGHT IMG_HEIGHT35,1113
#define IMG_NUM IMG_NUM36,1141
#define IMG_ZOOM_MIN IMG_ZOOM_MIN37,1235
#define IMG_ZOOM_MAX IMG_ZOOM_MAX38,1263
#define TXT TXT39,1298
#define LINE_WIDTH LINE_WIDTH40,1392
#define LINE_POINT_NUM LINE_POINT_NUM41,1440
#define LINE_POINT_DIFF_MIN LINE_POINT_DIFF_MIN42,1467
#define LINE_POINT_DIFF_MAX LINE_POINT_DIFF_MAX43,1509
#define ARC_WIDTH_THIN ARC_WIDTH_THIN44,1609
#define ARC_WIDTH_THICK ARC_WIDTH_THICK45,1660
    const char * name;name51,1796
    void (*create_cb)(void);create_cb52,1819
    uint32_t time_sum_normal;time_sum_normal53,1848
    uint32_t time_sum_opa;time_sum_opa54,1878
    uint32_t refr_cnt_normal;refr_cnt_normal55,1905
    uint32_t refr_cnt_opa;refr_cnt_opa56,1935
    uint32_t fps_normal;fps_normal57,1962
    uint32_t fps_opa;fps_opa58,1987
    uint8_t weight;weight59,2009
}scene_dsc_t;scene_dsc_t60,2029
static lv_style_t style_common;style_common66,2116
static bool opa_mode = true;opa_mode67,2148
LV_IMG_DECLARE(img_cogwheel_argb);img_cogwheel_argb69,2178
LV_IMG_DECLARE(img_cogwheel_rgb);img_cogwheel_rgb70,2213
LV_IMG_DECLARE(img_cogwheel_chroma_keyed);img_cogwheel_chroma_keyed71,2247
LV_IMG_DECLARE(img_cogwheel_indexed16);img_cogwheel_indexed1672,2290
LV_IMG_DECLARE(img_cogwheel_alpha16);img_cogwheel_alpha1673,2330
LV_FONT_DECLARE(lv_font_montserrat_12_compr_az);lv_font_montserrat_12_compr_az75,2369
LV_FONT_DECLARE(lv_font_montserrat_16_compr_az);lv_font_montserrat_16_compr_az76,2418
LV_FONT_DECLARE(lv_font_montserrat_28_compr_az);lv_font_montserrat_28_compr_az77,2467
static void rectangle_cb(void)rectangle_cb90,3033
static void rectangle_rounded_cb(void)rectangle_rounded_cb97,3231
static void rectangle_circle_cb(void)rectangle_circle_cb105,3503
static void border_cb(void)border_cb113,3784
static void border_rounded_cb(void)border_rounded_cb121,4061
static void border_circle_cb(void)border_circle_cb131,4413
static void border_top_cb(void)border_top_cb140,4773
static void border_left_cb(void)border_left_cb151,5204
static void border_top_left_cb(void)border_top_left_cb161,5636
static void border_left_right_cb(void)border_left_right_cb171,6093
static void border_top_bottom_cb(void)border_top_bottom_cb181,6554
static void shadow_small_cb(void)shadow_small_cb192,7016
static void shadow_small_ofs_cb(void)shadow_small_ofs_cb203,7444
static void shadow_large_cb(void)shadow_large_cb217,8130
static void shadow_large_ofs_cb(void)shadow_large_ofs_cb227,8557
static void img_rgb_cb(void)img_rgb_cb241,9243
static void img_argb_cb(void)img_argb_cb248,9481
static void img_ckey_cb(void)img_ckey_cb256,9722
static void img_index_cb(void)img_index_cb264,9971
static void img_alpha_cb(void)img_alpha_cb272,10218
static void img_rgb_recolor_cb(void)img_rgb_recolor_cb280,10463
static void img_argb_recolor_cb(void)img_argb_recolor_cb289,10790
static void img_ckey_recolor_cb(void)img_ckey_recolor_cb297,11118
static void img_index_recolor_cb(void)img_index_recolor_cb305,11454
static void img_rgb_rot_cb(void)img_rgb_rot_cb314,11789
static void img_rgb_rot_aa_cb(void)img_rgb_rot_aa_cb321,12030
static void img_argb_rot_cb(void)img_argb_rot_cb328,12273
static void img_argb_rot_aa_cb(void)img_argb_rot_aa_cb335,12516
static void img_rgb_zoom_cb(void)img_rgb_zoom_cb342,12761
static void img_rgb_zoom_aa_cb(void)img_rgb_zoom_aa_cb350,13004
static void img_argb_zoom_cb(void)img_argb_zoom_cb359,13250
static void img_argb_zoom_aa_cb(void)img_argb_zoom_aa_cb367,13495
static void txt_small_cb(void)txt_small_cb374,13741
static void txt_medium_cb(void)txt_medium_cb383,14031
static void txt_large_cb(void)txt_large_cb392,14323
static void txt_small_compr_cb(void)txt_small_compr_cb401,14613
static void txt_medium_compr_cb(void)txt_medium_compr_cb410,14913
static void txt_large_compr_cb(void)txt_large_compr_cb419,15214
static void line_cb(void)line_cb429,15515
static void arc_think_cb(void)arc_think_cb438,15785
static void arc_thick_cb(void)arc_thick_cb447,16063
static void sub_rectangle_cb(void)sub_rectangle_cb457,16343
static void sub_border_cb(void)sub_border_cb466,16703
static void sub_shadow_cb(void)sub_shadow_cb477,17147
static void sub_img_cb(void)sub_img_cb490,17754
static void sub_line_cb(void)sub_line_cb498,18088
static void sub_arc_cb(void)sub_arc_cb508,18456
static void sub_text_cb(void)sub_text_cb518,18827
static scene_dsc_t scenes[] = {scenes532,19282
static int32_t scene_act = -1;scene_act594,23835
static lv_obj_t * scene_bg;scene_bg595,23866
static lv_obj_t * title;title596,23894
static lv_obj_t * subtitle;subtitle597,23919
static uint32_t rnd_act;rnd_act598,23947
static uint32_t rnd_map[] = {rnd_map601,23974
void lv_demo_benchmark(void)lv_demo_benchmark628,25041
static void monitor_cb(lv_disp_drv_t * drv, uint32_t time, uint32_t px)monitor_cb658,25992
static void scene_next_task_cb(lv_task_t * task)scene_next_task_cb671,26335
static void rect_create(lv_style_t * style)rect_create865,33572
static void img_create(lv_style_t * style, const void * src, bool rotate, bool zoom, bool aa)img_create883,34344
static void txt_create(lv_style_t * style)txt_create902,35030
static void line_create(lv_style_t * style)line_create918,35490
static void arc_create(lv_style_t * style)arc_create947,36390
static void fall_anim(lv_obj_t * obj)fall_anim977,37447
static void rnd_reset(void)rnd_reset996,38066
static int32_t rnd_next(int32_t min, int32_t max)rnd_next1001,38116

lib/lvgl/src/lv_examples/src/lv_demo_benchmark/lv_demo_benchmark.h,53
#define LV_DEMO_BENCHMARK_HLV_DEMO_BENCHMARK_H7,69

lib/lvgl/src/lv_examples/src/lv_ex_get_started/lv_ex_get_started.h,53
#define LV_EX_GET_STARTED_HLV_EX_GET_STARTED_H7,69

lib/lvgl/src/lv_examples/src/lv_ex_get_started/lv_ex_get_started_3.c,180
static lv_obj_t * label;label3,32
static void slider_event_cb(lv_obj_t * slider, lv_event_t event)slider_event_cb5,58
void lv_ex_get_started_3(void)lv_ex_get_started_316,337

lib/lvgl/src/lv_examples/src/lv_ex_get_started/lv_ex_get_started_1.c,135
static void btn_event_cb(lv_obj_t * btn, lv_event_t event)btn_event_cb3,32
void lv_ex_get_started_1(void)lv_ex_get_started_118,450

lib/lvgl/src/lv_examples/src/lv_ex_get_started/lv_ex_get_started_2.c,56
void lv_ex_get_started_2(void)lv_ex_get_started_27,84

lib/lvgl/src/lvgl.h,36
#define LVGL_SRC_HLVGL_SRC_H7,119

lib/lvgl/src/lv_conf_internal.h,26844
#define LV_CONF_INTERNAL_HLV_CONF_INTERNAL_H8,162
#define LV_CONF_SKIPLV_CONF_SKIP23,447
#    define LV_CONF_INCLUDE_SIMPLELV_CONF_INCLUDE_SIMPLE30,633
#    define __LV_TO_STR_AUX(__LV_TO_STR_AUX38,855
#    define __LV_TO_STR(__LV_TO_STR39,889
#    undef __LV_TO_STR_AUX__LV_TO_STR_AUX41,974
#    undef __LV_TO_STR__LV_TO_STR42,1001
#    define LV_HOR_RES_MAX LV_HOR_RES_MAX61,1508
#    define  LV_HOR_RES_MAX LV_HOR_RES_MAX63,1565
#    define LV_VER_RES_MAX LV_VER_RES_MAX68,1678
#    define  LV_VER_RES_MAX LV_VER_RES_MAX70,1735
#    define LV_COLOR_DEPTH LV_COLOR_DEPTH82,1945
#    define  LV_COLOR_DEPTH LV_COLOR_DEPTH84,2002
#    define LV_COLOR_16_SWAP LV_COLOR_16_SWAP92,2211
#    define  LV_COLOR_16_SWAP LV_COLOR_16_SWAP94,2272
#    define LV_COLOR_SCREEN_TRANSP LV_COLOR_SCREEN_TRANSP103,2587
#    define  LV_COLOR_SCREEN_TRANSP LV_COLOR_SCREEN_TRANSP105,2660
#    define LV_COLOR_TRANSP LV_COLOR_TRANSP112,2850
#    define  LV_COLOR_TRANSP LV_COLOR_TRANSP114,2909
#    define LV_ANTIALIAS LV_ANTIALIAS121,3126
#    define  LV_ANTIALIAS LV_ANTIALIAS123,3179
#    define LV_DISP_DEF_REFR_PERIOD LV_DISP_DEF_REFR_PERIOD131,3399
#    define  LV_DISP_DEF_REFR_PERIOD LV_DISP_DEF_REFR_PERIOD133,3474
#    define LV_DPI LV_DPI142,3779
#    define  LV_DPI LV_DPI144,3820
#    define LV_DISP_SMALL_LIMIT LV_DISP_SMALL_LIMIT157,4321
#    define  LV_DISP_SMALL_LIMIT LV_DISP_SMALL_LIMIT159,4388
#    define LV_DISP_MEDIUM_LIMIT LV_DISP_MEDIUM_LIMIT164,4507
#    define  LV_DISP_MEDIUM_LIMIT LV_DISP_MEDIUM_LIMIT166,4576
#    define LV_DISP_LARGE_LIMIT LV_DISP_LARGE_LIMIT171,4693
#    define  LV_DISP_LARGE_LIMIT LV_DISP_LARGE_LIMIT173,4760
#    define LV_MEM_CUSTOM LV_MEM_CUSTOM189,5264
#    define  LV_MEM_CUSTOM LV_MEM_CUSTOM191,5319
#    define LV_MEM_SIZE LV_MEM_SIZE198,5505
#    define  LV_MEM_SIZE LV_MEM_SIZE200,5556
#    define LV_MEM_ATTR LV_MEM_ATTR207,5713
#    define  LV_MEM_ATTRLV_MEM_ATTR209,5764
#    define LV_MEM_ADR LV_MEM_ADR217,5963
#    define  LV_MEM_ADR LV_MEM_ADR219,6012
#    define LV_MEM_AUTO_DEFRAG LV_MEM_AUTO_DEFRAG226,6211
#    define  LV_MEM_AUTO_DEFRAG LV_MEM_AUTO_DEFRAG228,6276
#    define LV_MEM_CUSTOM_INCLUDE LV_MEM_CUSTOM_INCLUDE234,6425
#    define  LV_MEM_CUSTOM_INCLUDE LV_MEM_CUSTOM_INCLUDE236,6496
#    define LV_MEM_CUSTOM_ALLOC LV_MEM_CUSTOM_ALLOC241,6667
#    define  LV_MEM_CUSTOM_ALLOC LV_MEM_CUSTOM_ALLOC243,6734
#    define LV_MEM_CUSTOM_FREE LV_MEM_CUSTOM_FREE248,6882
#    define  LV_MEM_CUSTOM_FREE LV_MEM_CUSTOM_FREE250,6947
#    define LV_MEMCPY_MEMSET_STD LV_MEMCPY_MEMSET_STD259,7291
#    define  LV_MEMCPY_MEMSET_STD LV_MEMCPY_MEMSET_STD261,7360
#    define LV_ENABLE_GC LV_ENABLE_GC269,7595
#    define  LV_ENABLE_GC LV_ENABLE_GC271,7648
#    define LV_GC_INCLUDE LV_GC_INCLUDE277,7766
#    define  LV_GC_INCLUDE LV_GC_INCLUDE279,7821
#    define LV_MEM_CUSTOM_REALLOC LV_MEM_CUSTOM_REALLOC284,8010
#    define  LV_MEM_CUSTOM_REALLOC LV_MEM_CUSTOM_REALLOC286,8081
#    define LV_MEM_CUSTOM_GET_SIZE LV_MEM_CUSTOM_GET_SIZE291,8250
#    define  LV_MEM_CUSTOM_GET_SIZE LV_MEM_CUSTOM_GET_SIZE293,8323
#    define LV_INDEV_DEF_READ_PERIOD LV_INDEV_DEF_READ_PERIOD308,8775
#    define  LV_INDEV_DEF_READ_PERIOD LV_INDEV_DEF_READ_PERIOD310,8852
#    define LV_INDEV_DEF_DRAG_LIMIT LV_INDEV_DEF_DRAG_LIMIT317,9022
#    define  LV_INDEV_DEF_DRAG_LIMIT LV_INDEV_DEF_DRAG_LIMIT319,9097
#    define LV_INDEV_DEF_DRAG_THROW LV_INDEV_DEF_DRAG_THROW326,9305
#    define  LV_INDEV_DEF_DRAG_THROW LV_INDEV_DEF_DRAG_THROW328,9380
#    define LV_INDEV_DEF_LONG_PRESS_TIME LV_INDEV_DEF_LONG_PRESS_TIME336,9609
#    define  LV_INDEV_DEF_LONG_PRESS_TIME LV_INDEV_DEF_LONG_PRESS_TIME338,9694
#    define LV_INDEV_DEF_LONG_PRESS_REP_TIME LV_INDEV_DEF_LONG_PRESS_REP_TIME346,9949
#    define  LV_INDEV_DEF_LONG_PRESS_REP_TIME LV_INDEV_DEF_LONG_PRESS_REP_TIME348,10042
#    define LV_INDEV_DEF_GESTURE_LIMIT LV_INDEV_DEF_GESTURE_LIMIT356,10225
#    define  LV_INDEV_DEF_GESTURE_LIMIT LV_INDEV_DEF_GESTURE_LIMIT358,10306
#    define LV_INDEV_DEF_GESTURE_MIN_VELOCITY LV_INDEV_DEF_GESTURE_MIN_VELOCITY365,10524
#    define  LV_INDEV_DEF_GESTURE_MIN_VELOCITY LV_INDEV_DEF_GESTURE_MIN_VELOCITY367,10619
#    define LV_USE_ANIMATION LV_USE_ANIMATION378,10836
#    define  LV_USE_ANIMATION LV_USE_ANIMATION380,10897
#    define LV_USE_SHADOW LV_USE_SHADOW392,11171
#    define  LV_USE_SHADOW LV_USE_SHADOW394,11226
#    define LV_SHADOW_CACHE_SIZE LV_SHADOW_CACHE_SIZE404,11564
#    define  LV_SHADOW_CACHE_SIZE LV_SHADOW_CACHE_SIZE406,11633
#    define LV_USE_OUTLINE LV_USE_OUTLINE414,11795
#    define  LV_USE_OUTLINE LV_USE_OUTLINE416,11852
#    define LV_USE_PATTERN LV_USE_PATTERN423,11998
#    define  LV_USE_PATTERN LV_USE_PATTERN425,12055
#    define LV_USE_VALUE_STR LV_USE_VALUE_STR432,12210
#    define  LV_USE_VALUE_STR LV_USE_VALUE_STR434,12271
#    define LV_USE_BLEND_MODES LV_USE_BLEND_MODES441,12449
#    define  LV_USE_BLEND_MODES LV_USE_BLEND_MODES443,12514
#    define LV_USE_OPA_SCALE LV_USE_OPA_SCALE450,12728
#    define  LV_USE_OPA_SCALE LV_USE_OPA_SCALE452,12789
#    define LV_USE_IMG_TRANSFORM LV_USE_IMG_TRANSFORM459,12947
#    define  LV_USE_IMG_TRANSFORM LV_USE_IMG_TRANSFORM461,13016
#    define LV_USE_GROUP LV_USE_GROUP468,13186
#    define  LV_USE_GROUP LV_USE_GROUP470,13239
#    define LV_USE_GPU LV_USE_GPU479,13412
#    define  LV_USE_GPU LV_USE_GPU481,13461
#    define LV_USE_GPU_STM32_DMA2D LV_USE_GPU_STM32_DMA2D486,13657
#    define  LV_USE_GPU_STM32_DMA2D LV_USE_GPU_STM32_DMA2D488,13730
#    define LV_GPU_DMA2D_CMSIS_INCLUDE LV_GPU_DMA2D_CMSIS_INCLUDE495,14039
#    define  LV_GPU_DMA2D_CMSIS_INCLUDELV_GPU_DMA2D_CMSIS_INCLUDE497,14120
#    define LV_USE_GPU_NXP_PXP LV_USE_GPU_NXP_PXP504,14295
#    define  LV_USE_GPU_NXP_PXP LV_USE_GPU_NXP_PXP506,14360
#    define LV_USE_GPU_NXP_PXP_AUTO_INIT LV_USE_GPU_NXP_PXP_AUTO_INIT517,14880
#    define  LV_USE_GPU_NXP_PXP_AUTO_INIT LV_USE_GPU_NXP_PXP_AUTO_INIT519,14965
#    define LV_USE_GPU_NXP_VG_LITE LV_USE_GPU_NXP_VG_LITE526,15156
#    define  LV_USE_GPU_NXP_VG_LITE LV_USE_GPU_NXP_VG_LITE528,15229
#    define LV_USE_FILESYSTEM LV_USE_FILESYSTEM535,15404
#    define  LV_USE_FILESYSTEM LV_USE_FILESYSTEM537,15467
#    define LV_USE_USER_DATA LV_USE_USER_DATA547,15759
#    define  LV_USE_USER_DATA LV_USE_USER_DATA549,15820
#    define LV_USE_PERF_MONITOR LV_USE_PERF_MONITOR556,16003
#    define  LV_USE_PERF_MONITOR LV_USE_PERF_MONITOR558,16070
#    define LV_USE_API_EXTENSION_V6 LV_USE_API_EXTENSION_V6565,16265
#    define  LV_USE_API_EXTENSION_V6 LV_USE_API_EXTENSION_V6567,16340
#    define LV_USE_API_EXTENSION_V7 LV_USE_API_EXTENSION_V7572,16468
#    define  LV_USE_API_EXTENSION_V7 LV_USE_API_EXTENSION_V7574,16543
#    define LV_IMG_CF_INDEXED LV_IMG_CF_INDEXED585,16786
#    define  LV_IMG_CF_INDEXED LV_IMG_CF_INDEXED587,16849
#    define LV_IMG_CF_ALPHA LV_IMG_CF_ALPHA594,16998
#    define  LV_IMG_CF_ALPHA LV_IMG_CF_ALPHA596,17057
#    define LV_IMG_CACHE_DEF_SIZE LV_IMG_CACHE_DEF_SIZE608,17575
#    define  LV_IMG_CACHE_DEF_SIZE LV_IMG_CACHE_DEF_SIZE610,17646
#    define LV_BIG_ENDIAN_SYSTEM LV_BIG_ENDIAN_SYSTEM623,17984
#    define  LV_BIG_ENDIAN_SYSTEM LV_BIG_ENDIAN_SYSTEM625,18053
#    define LV_ATTRIBUTE_TICK_INC LV_ATTRIBUTE_TICK_INC632,18235
#    define  LV_ATTRIBUTE_TICK_INCLV_ATTRIBUTE_TICK_INC634,18306
#    define LV_ATTRIBUTE_TASK_HANDLER LV_ATTRIBUTE_TASK_HANDLER641,18496
#    define  LV_ATTRIBUTE_TASK_HANDLERLV_ATTRIBUTE_TASK_HANDLER643,18575
#    define LV_ATTRIBUTE_FLUSH_READY LV_ATTRIBUTE_FLUSH_READY650,18771
#    define  LV_ATTRIBUTE_FLUSH_READYLV_ATTRIBUTE_FLUSH_READY652,18848
#    define LV_ATTRIBUTE_MEM_ALIGN_SIZE LV_ATTRIBUTE_MEM_ALIGN_SIZE659,19025
#    define  LV_ATTRIBUTE_MEM_ALIGN_SIZELV_ATTRIBUTE_MEM_ALIGN_SIZE661,19108
#    define LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_MEM_ALIGN672,19570
#    define  LV_ATTRIBUTE_MEM_ALIGNLV_ATTRIBUTE_MEM_ALIGN674,19643
#    define LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_LARGE_CONST682,19848
#    define  LV_ATTRIBUTE_LARGE_CONSTLV_ATTRIBUTE_LARGE_CONST684,19925
#    define LV_ATTRIBUTE_FAST_MEM LV_ATTRIBUTE_FAST_MEM692,20171
#    define  LV_ATTRIBUTE_FAST_MEMLV_ATTRIBUTE_FAST_MEM694,20242
#    define LV_EXPORT_CONST_INT LV_EXPORT_CONST_INT706,20602
#    define  LV_EXPORT_CONST_INT(LV_EXPORT_CONST_INT708,20669
#    define LV_ATTRIBUTE_DMA LV_ATTRIBUTE_DMA716,20965
#    define  LV_ATTRIBUTE_DMALV_ATTRIBUTE_DMA718,21026
#    define LV_TICK_CUSTOM LV_TICK_CUSTOM730,21323
#    define  LV_TICK_CUSTOM LV_TICK_CUSTOM732,21380
#    define LV_TICK_CUSTOM_INCLUDE LV_TICK_CUSTOM_INCLUDE738,21524
#    define  LV_TICK_CUSTOM_INCLUDE LV_TICK_CUSTOM_INCLUDE740,21597
#    define LV_TICK_CUSTOM_SYS_TIME_EXPR LV_TICK_CUSTOM_SYS_TIME_EXPR745,21792
#    define  LV_TICK_CUSTOM_SYS_TIME_EXPR LV_TICK_CUSTOM_SYS_TIME_EXPR747,21877
#    define LV_USE_LOG LV_USE_LOG760,22195
#    define  LV_USE_LOG LV_USE_LOG762,22244
#    define LV_LOG_LEVEL LV_LOG_LEVEL775,22730
#    define  LV_LOG_LEVEL LV_LOG_LEVEL777,22783
#    define LV_LOG_PRINTF LV_LOG_PRINTF785,23009
#    define  LV_LOG_PRINTF LV_LOG_PRINTF787,23064
#    define LV_USE_DEBUG LV_USE_DEBUG807,23717
#    define  LV_USE_DEBUG LV_USE_DEBUG809,23770
#    define LV_USE_ASSERT_NULL LV_USE_ASSERT_NULL817,23955
#    define  LV_USE_ASSERT_NULL LV_USE_ASSERT_NULL819,24020
#    define LV_USE_ASSERT_MEM LV_USE_ASSERT_MEM826,24207
#    define  LV_USE_ASSERT_MEM LV_USE_ASSERT_MEM828,24270
#    define LV_USE_ASSERT_MEM_INTEGRITY LV_USE_ASSERT_MEM_INTEGRITY835,24476
#    define  LV_USE_ASSERT_MEM_INTEGRITY LV_USE_ASSERT_MEM_INTEGRITY837,24559
#    define LV_USE_ASSERT_STR LV_USE_ASSERT_STR846,24883
#    define  LV_USE_ASSERT_STR LV_USE_ASSERT_STR848,24946
#    define LV_USE_ASSERT_OBJ LV_USE_ASSERT_OBJ856,25227
#    define  LV_USE_ASSERT_OBJ LV_USE_ASSERT_OBJ858,25290
#    define LV_USE_ASSERT_STYLE LV_USE_ASSERT_STYLE865,25469
#    define  LV_USE_ASSERT_STYLE LV_USE_ASSERT_STYLE867,25536
#    define LV_FONT_MONTSERRAT_8 LV_FONT_MONTSERRAT_8887,26134
#    define  LV_FONT_MONTSERRAT_8 LV_FONT_MONTSERRAT_8889,26203
#    define LV_FONT_MONTSERRAT_10 LV_FONT_MONTSERRAT_10894,26327
#    define  LV_FONT_MONTSERRAT_10 LV_FONT_MONTSERRAT_10896,26398
#    define LV_FONT_MONTSERRAT_12 LV_FONT_MONTSERRAT_12901,26522
#    define  LV_FONT_MONTSERRAT_12 LV_FONT_MONTSERRAT_12903,26593
#    define LV_FONT_MONTSERRAT_14 LV_FONT_MONTSERRAT_14908,26717
#    define  LV_FONT_MONTSERRAT_14 LV_FONT_MONTSERRAT_14910,26788
#    define LV_FONT_MONTSERRAT_16 LV_FONT_MONTSERRAT_16915,26912
#    define  LV_FONT_MONTSERRAT_16 LV_FONT_MONTSERRAT_16917,26983
#    define LV_FONT_MONTSERRAT_18 LV_FONT_MONTSERRAT_18922,27107
#    define  LV_FONT_MONTSERRAT_18 LV_FONT_MONTSERRAT_18924,27178
#    define LV_FONT_MONTSERRAT_20 LV_FONT_MONTSERRAT_20929,27302
#    define  LV_FONT_MONTSERRAT_20 LV_FONT_MONTSERRAT_20931,27373
#    define LV_FONT_MONTSERRAT_22 LV_FONT_MONTSERRAT_22936,27497
#    define  LV_FONT_MONTSERRAT_22 LV_FONT_MONTSERRAT_22938,27568
#    define LV_FONT_MONTSERRAT_24 LV_FONT_MONTSERRAT_24943,27692
#    define  LV_FONT_MONTSERRAT_24 LV_FONT_MONTSERRAT_24945,27763
#    define LV_FONT_MONTSERRAT_26 LV_FONT_MONTSERRAT_26950,27887
#    define  LV_FONT_MONTSERRAT_26 LV_FONT_MONTSERRAT_26952,27958
#    define LV_FONT_MONTSERRAT_28 LV_FONT_MONTSERRAT_28957,28082
#    define  LV_FONT_MONTSERRAT_28 LV_FONT_MONTSERRAT_28959,28153
#    define LV_FONT_MONTSERRAT_30 LV_FONT_MONTSERRAT_30964,28277
#    define  LV_FONT_MONTSERRAT_30 LV_FONT_MONTSERRAT_30966,28348
#    define LV_FONT_MONTSERRAT_32 LV_FONT_MONTSERRAT_32971,28472
#    define  LV_FONT_MONTSERRAT_32 LV_FONT_MONTSERRAT_32973,28543
#    define LV_FONT_MONTSERRAT_34 LV_FONT_MONTSERRAT_34978,28667
#    define  LV_FONT_MONTSERRAT_34 LV_FONT_MONTSERRAT_34980,28738
#    define LV_FONT_MONTSERRAT_36 LV_FONT_MONTSERRAT_36985,28862
#    define  LV_FONT_MONTSERRAT_36 LV_FONT_MONTSERRAT_36987,28933
#    define LV_FONT_MONTSERRAT_38 LV_FONT_MONTSERRAT_38992,29057
#    define  LV_FONT_MONTSERRAT_38 LV_FONT_MONTSERRAT_38994,29128
#    define LV_FONT_MONTSERRAT_40 LV_FONT_MONTSERRAT_40999,29252
#    define  LV_FONT_MONTSERRAT_40 LV_FONT_MONTSERRAT_401001,29323
#    define LV_FONT_MONTSERRAT_42 LV_FONT_MONTSERRAT_421006,29447
#    define  LV_FONT_MONTSERRAT_42 LV_FONT_MONTSERRAT_421008,29518
#    define LV_FONT_MONTSERRAT_44 LV_FONT_MONTSERRAT_441013,29642
#    define  LV_FONT_MONTSERRAT_44 LV_FONT_MONTSERRAT_441015,29713
#    define LV_FONT_MONTSERRAT_46 LV_FONT_MONTSERRAT_461020,29837
#    define  LV_FONT_MONTSERRAT_46 LV_FONT_MONTSERRAT_461022,29908
#    define LV_FONT_MONTSERRAT_48 LV_FONT_MONTSERRAT_481027,30032
#    define  LV_FONT_MONTSERRAT_48 LV_FONT_MONTSERRAT_481029,30103
#    define LV_FONT_MONTSERRAT_12_SUBPX LV_FONT_MONTSERRAT_12_SUBPX1036,30278
#    define  LV_FONT_MONTSERRAT_12_SUBPX LV_FONT_MONTSERRAT_12_SUBPX1038,30361
#    define LV_FONT_MONTSERRAT_28_COMPRESSED LV_FONT_MONTSERRAT_28_COMPRESSED1043,30515
#    define  LV_FONT_MONTSERRAT_28_COMPRESSED LV_FONT_MONTSERRAT_28_COMPRESSED1045,30608
#    define LV_FONT_DEJAVU_16_PERSIAN_HEBREW LV_FONT_DEJAVU_16_PERSIAN_HEBREW1050,30775
#    define  LV_FONT_DEJAVU_16_PERSIAN_HEBREW LV_FONT_DEJAVU_16_PERSIAN_HEBREW1052,30868
#    define LV_FONT_SIMSUN_16_CJK LV_FONT_SIMSUN_16_CJK1057,31057
#    define  LV_FONT_SIMSUN_16_CJK LV_FONT_SIMSUN_16_CJK1059,31128
#    define LV_FONT_UNSCII_8 LV_FONT_UNSCII_81067,31351
#    define  LV_FONT_UNSCII_8 LV_FONT_UNSCII_81069,31412
#    define LV_FONT_UNSCII_16 LV_FONT_UNSCII_161074,31524
#    define  LV_FONT_UNSCII_16 LV_FONT_UNSCII_161076,31587
#    define LV_FONT_CUSTOM_DECLARE LV_FONT_CUSTOM_DECLARE1088,31983
#    define  LV_FONT_CUSTOM_DECLARELV_FONT_CUSTOM_DECLARE1090,32056
#    define LV_FONT_FMT_TXT_LARGE LV_FONT_FMT_TXT_LARGE1099,32381
#    define  LV_FONT_FMT_TXT_LARGE LV_FONT_FMT_TXT_LARGE1101,32452
#    define LV_USE_FONT_COMPRESSED LV_USE_FONT_COMPRESSED1110,32738
#    define  LV_USE_FONT_COMPRESSED LV_USE_FONT_COMPRESSED1112,32811
#    define LV_USE_FONT_SUBPX LV_USE_FONT_SUBPX1119,32962
#    define  LV_USE_FONT_SUBPX LV_USE_FONT_SUBPX1121,33025
#    define LV_FONT_SUBPX_BGR LV_FONT_SUBPX_BGR1131,33285
#    define  LV_FONT_SUBPX_BGR LV_FONT_SUBPX_BGR1133,33348
#    define LV_USE_THEME_EMPTY LV_USE_THEME_EMPTY1150,33757
#    define  LV_USE_THEME_EMPTY LV_USE_THEME_EMPTY1152,33822
#    define LV_USE_THEME_TEMPLATE LV_USE_THEME_TEMPLATE1160,34043
#    define  LV_USE_THEME_TEMPLATE LV_USE_THEME_TEMPLATE1162,34114
#    define LV_USE_THEME_MATERIAL LV_USE_THEME_MATERIAL1175,34563
#    define  LV_USE_THEME_MATERIAL LV_USE_THEME_MATERIAL1177,34634
#    define LV_USE_THEME_MONO LV_USE_THEME_MONO1188,35026
#    define  LV_USE_THEME_MONO LV_USE_THEME_MONO1190,35089
#    define LV_THEME_DEFAULT_INCLUDE LV_THEME_DEFAULT_INCLUDE1196,35220
#    define  LV_THEME_DEFAULT_INCLUDE LV_THEME_DEFAULT_INCLUDE1198,35297
#    define LV_THEME_DEFAULT_INIT LV_THEME_DEFAULT_INIT1203,35490
#    define  LV_THEME_DEFAULT_INIT LV_THEME_DEFAULT_INIT1205,35561
#    define LV_THEME_DEFAULT_COLOR_PRIMARY LV_THEME_DEFAULT_COLOR_PRIMARY1210,35735
#    define  LV_THEME_DEFAULT_COLOR_PRIMARY LV_THEME_DEFAULT_COLOR_PRIMARY1212,35824
#    define LV_THEME_DEFAULT_COLOR_SECONDARY LV_THEME_DEFAULT_COLOR_SECONDARY1217,36002
#    define  LV_THEME_DEFAULT_COLOR_SECONDARY LV_THEME_DEFAULT_COLOR_SECONDARY1219,36095
#    define LV_THEME_DEFAULT_FLAG LV_THEME_DEFAULT_FLAG1224,36251
#    define  LV_THEME_DEFAULT_FLAG LV_THEME_DEFAULT_FLAG1226,36322
#    define LV_THEME_DEFAULT_FONT_SMALL LV_THEME_DEFAULT_FONT_SMALL1231,36496
#    define  LV_THEME_DEFAULT_FONT_SMALL LV_THEME_DEFAULT_FONT_SMALL1233,36579
#    define LV_THEME_DEFAULT_FONT_NORMAL LV_THEME_DEFAULT_FONT_NORMAL1238,36749
#    define  LV_THEME_DEFAULT_FONT_NORMAL LV_THEME_DEFAULT_FONT_NORMAL1240,36834
#    define LV_THEME_DEFAULT_FONT_SUBTITLE LV_THEME_DEFAULT_FONT_SUBTITLE1245,37008
#    define  LV_THEME_DEFAULT_FONT_SUBTITLE LV_THEME_DEFAULT_FONT_SUBTITLE1247,37097
#    define LV_THEME_DEFAULT_FONT_TITLE LV_THEME_DEFAULT_FONT_TITLE1252,37265
#    define  LV_THEME_DEFAULT_FONT_TITLE LV_THEME_DEFAULT_FONT_TITLE1254,37348
#    define LV_TXT_ENC LV_TXT_ENC1269,37752
#    define  LV_TXT_ENC LV_TXT_ENC1271,37801
#    define LV_TXT_BREAK_CHARS LV_TXT_BREAK_CHARS1278,37970
#    define  LV_TXT_BREAK_CHARS LV_TXT_BREAK_CHARS1280,38035
#    define LV_TXT_LINE_BREAK_LONG_LEN LV_TXT_LINE_BREAK_LONG_LEN1288,38295
#    define  LV_TXT_LINE_BREAK_LONG_LEN LV_TXT_LINE_BREAK_LONG_LEN1290,38376
#    define LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN1298,38665
#    define  LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN LV_TXT_LINE_BREAK_LONG_PRE_MIN_LEN1300,38762
#    define LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN1308,39054
#    define  LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN LV_TXT_LINE_BREAK_LONG_POST_MIN_LEN1310,39153
#    define LV_TXT_COLOR_CMD LV_TXT_COLOR_CMD1317,39349
#    define  LV_TXT_COLOR_CMD LV_TXT_COLOR_CMD1319,39410
#    define LV_USE_BIDI LV_USE_BIDI1329,39759
#    define  LV_USE_BIDI LV_USE_BIDI1331,39810
#    define LV_BIDI_BASE_DIR_DEF LV_BIDI_BASE_DIR_DEF1341,40114
#    define  LV_BIDI_BASE_DIR_DEF LV_BIDI_BASE_DIR_DEF1343,40183
#    define LV_USE_ARABIC_PERSIAN_CHARS LV_USE_ARABIC_PERSIAN_CHARS1353,40494
#    define  LV_USE_ARABIC_PERSIAN_CHARS LV_USE_ARABIC_PERSIAN_CHARS1355,40577
#    define LV_SPRINTF_CUSTOM LV_SPRINTF_CUSTOM1362,40746
#    define  LV_SPRINTF_CUSTOM LV_SPRINTF_CUSTOM1364,40809
#    define LV_SPRINTF_INCLUDE LV_SPRINTF_INCLUDE1370,40944
#    define  LV_SPRINTF_INCLUDE LV_SPRINTF_INCLUDE1372,41009
#    define lv_snprintf lv_snprintf1377,41115
#    define  lv_snprintf lv_snprintf1379,41166
#    define lv_vsnprintf lv_vsnprintf1384,41270
#    define  lv_vsnprintf lv_vsnprintf1386,41323
#    define LV_SPRINTF_DISABLE_FLOAT LV_SPRINTF_DISABLE_FLOAT1392,41483
#    define  LV_SPRINTF_DISABLE_FLOAT LV_SPRINTF_DISABLE_FLOAT1394,41560
#    define LV_USE_USER_DATA_FREE LV_USE_USER_DATA_FREE1408,41933
#    define  LV_USE_USER_DATA_FREE LV_USE_USER_DATA_FREE1410,42004
#    define LV_USER_DATA_FREE_INCLUDE LV_USER_DATA_FREE_INCLUDE1416,42159
#    define  LV_USER_DATA_FREE_INCLUDE LV_USER_DATA_FREE_INCLUDE1418,42238
#    define LV_USER_DATA_FREE LV_USER_DATA_FREE1424,42472
#    define  LV_USER_DATA_FREE LV_USER_DATA_FREE1426,42535
#    define LV_USE_OBJ_REALIGN LV_USE_OBJ_REALIGN1435,42794
#    define  LV_USE_OBJ_REALIGN LV_USE_OBJ_REALIGN1437,42859
#    define LV_USE_EXT_CLICK_AREA LV_USE_EXT_CLICK_AREA1448,43292
#    define  LV_USE_EXT_CLICK_AREA LV_USE_EXT_CLICK_AREA1450,43363
#    define LV_USE_ARC LV_USE_ARC1464,43666
#    define  LV_USE_ARC LV_USE_ARC1466,43715
#    define LV_USE_BAR LV_USE_BAR1473,43835
#    define  LV_USE_BAR LV_USE_BAR1475,43884
#    define LV_USE_BTN LV_USE_BTN1482,44012
#    define  LV_USE_BTN LV_USE_BTN1484,44061
#    define LV_USE_BTNMATRIX LV_USE_BTNMATRIX1491,44203
#    define  LV_USE_BTNMATRIX LV_USE_BTNMATRIX1493,44264
#    define LV_USE_CALENDAR LV_USE_CALENDAR1500,44404
#    define  LV_USE_CALENDAR LV_USE_CALENDAR1502,44463
#    define LV_CALENDAR_WEEK_STARTS_MONDAY LV_CALENDAR_WEEK_STARTS_MONDAY1508,44616
#    define  LV_CALENDAR_WEEK_STARTS_MONDAY LV_CALENDAR_WEEK_STARTS_MONDAY1510,44705
#    define LV_USE_CANVAS LV_USE_CANVAS1518,44864
#    define  LV_USE_CANVAS LV_USE_CANVAS1520,44919
#    define LV_USE_CHECKBOX LV_USE_CHECKBOX1527,45070
#    define  LV_USE_CHECKBOX LV_USE_CHECKBOX1529,45129
#    define LV_USE_CHART LV_USE_CHART1536,45261
#    define  LV_USE_CHART LV_USE_CHART1538,45314
#    define LV_CHART_AXIS_TICK_LABEL_MAX_LEN LV_CHART_AXIS_TICK_LABEL_MAX_LEN1544,45468
#    define  LV_CHART_AXIS_TICK_LABEL_MAX_LEN LV_CHART_AXIS_TICK_LABEL_MAX_LEN1546,45561
#    define LV_USE_CONT LV_USE_CONT1554,45717
#    define  LV_USE_CONT LV_USE_CONT1556,45768
#    define LV_USE_CPICKER LV_USE_CPICKER1563,45904
#    define  LV_USE_CPICKER LV_USE_CPICKER1565,45961
#    define LV_USE_DROPDOWN LV_USE_DROPDOWN1572,46136
#    define  LV_USE_DROPDOWN LV_USE_DROPDOWN1574,46195
#    define LV_DROPDOWN_DEF_ANIM_TIME LV_DROPDOWN_DEF_ANIM_TIME1581,46411
#    define  LV_DROPDOWN_DEF_ANIM_TIME LV_DROPDOWN_DEF_ANIM_TIME1583,46490
#    define LV_USE_GAUGE LV_USE_GAUGE1591,46657
#    define  LV_USE_GAUGE LV_USE_GAUGE1593,46710
#    define LV_USE_IMG LV_USE_IMG1600,46838
#    define  LV_USE_IMG LV_USE_IMG1602,46887
#    define LV_USE_IMGBTN LV_USE_IMGBTN1609,47026
#    define  LV_USE_IMGBTN LV_USE_IMGBTN1611,47081
#    define LV_IMGBTN_TILED LV_IMGBTN_TILED1618,47287
#    define  LV_IMGBTN_TILED LV_IMGBTN_TILED1620,47346
#    define LV_USE_KEYBOARD LV_USE_KEYBOARD1628,47494
#    define  LV_USE_KEYBOARD LV_USE_KEYBOARD1630,47553
#    define LV_USE_LABEL LV_USE_LABEL1637,47684
#    define  LV_USE_LABEL LV_USE_LABEL1639,47737
#    define LV_LABEL_DEF_SCROLL_SPEED LV_LABEL_DEF_SCROLL_SPEED1646,47960
#    define  LV_LABEL_DEF_SCROLL_SPEED LV_LABEL_DEF_SCROLL_SPEED1648,48039
#    define LV_LABEL_WAIT_CHAR_COUNT LV_LABEL_WAIT_CHAR_COUNT1655,48235
#    define  LV_LABEL_WAIT_CHAR_COUNT LV_LABEL_WAIT_CHAR_COUNT1657,48312
#    define LV_LABEL_TEXT_SEL LV_LABEL_TEXT_SEL1664,48476
#    define  LV_LABEL_TEXT_SEL LV_LABEL_TEXT_SEL1666,48539
#    define LV_LABEL_LONG_TXT_HINT LV_LABEL_LONG_TXT_HINT1673,48759
#    define  LV_LABEL_LONG_TXT_HINT LV_LABEL_LONG_TXT_HINT1675,48832
#    define LV_USE_LED LV_USE_LED1683,48975
#    define  LV_USE_LED LV_USE_LED1685,49024
#    define LV_LED_BRIGHT_MIN LV_LED_BRIGHT_MIN1691,49146
#    define  LV_LED_BRIGHT_MIN LV_LED_BRIGHT_MIN1693,49209
#    define LV_LED_BRIGHT_MAX LV_LED_BRIGHT_MAX1698,49349
#    define  LV_LED_BRIGHT_MAX LV_LED_BRIGHT_MAX1700,49412
#    define LV_USE_LINE LV_USE_LINE1708,49573
#    define  LV_USE_LINE LV_USE_LINE1710,49624
#    define LV_USE_LIST LV_USE_LIST1717,49803
#    define  LV_USE_LIST LV_USE_LIST1719,49854
#    define LV_LIST_DEF_ANIM_TIME LV_LIST_DEF_ANIM_TIME1726,50072
#    define  LV_LIST_DEF_ANIM_TIME LV_LIST_DEF_ANIM_TIME1728,50143
#    define LV_USE_LINEMETER LV_USE_LINEMETER1736,50299
#    define  LV_USE_LINEMETER LV_USE_LINEMETER1738,50360
#    define LV_LINEMETER_PRECISE LV_LINEMETER_PRECISE1750,50684
#    define  LV_LINEMETER_PRECISE LV_LINEMETER_PRECISE1752,50753
#    define LV_USE_OBJMASK LV_USE_OBJMASK1760,50898
#    define  LV_USE_OBJMASK LV_USE_OBJMASK1762,50955
#    define LV_USE_MSGBOX LV_USE_MSGBOX1769,51114
#    define  LV_USE_MSGBOX LV_USE_MSGBOX1771,51169
#    define LV_USE_PAGE LV_USE_PAGE1778,51300
#    define  LV_USE_PAGE LV_USE_PAGE1780,51351
#    define LV_PAGE_DEF_ANIM_TIME LV_PAGE_DEF_ANIM_TIME1787,51543
#    define  LV_PAGE_DEF_ANIM_TIME LV_PAGE_DEF_ANIM_TIME1789,51614
#    define LV_USE_SPINNER LV_USE_SPINNER1797,51779
#    define  LV_USE_SPINNER LV_USE_SPINNER1799,51836
#    define LV_SPINNER_DEF_ARC_LENGTH LV_SPINNER_DEF_ARC_LENGTH1805,51987
#    define  LV_SPINNER_DEF_ARC_LENGTH LV_SPINNER_DEF_ARC_LENGTH1807,52066
#    define LV_SPINNER_DEF_SPIN_TIME LV_SPINNER_DEF_SPIN_TIME1812,52215
#    define  LV_SPINNER_DEF_SPIN_TIME LV_SPINNER_DEF_SPIN_TIME1814,52292
#    define LV_SPINNER_DEF_ANIM LV_SPINNER_DEF_ANIM1819,52430
#    define  LV_SPINNER_DEF_ANIM LV_SPINNER_DEF_ANIM1821,52497
#    define LV_USE_ROLLER LV_USE_ROLLER1829,52680
#    define  LV_USE_ROLLER LV_USE_ROLLER1831,52735
#    define LV_ROLLER_DEF_ANIM_TIME LV_ROLLER_DEF_ANIM_TIME1838,52926
#    define  LV_ROLLER_DEF_ANIM_TIME LV_ROLLER_DEF_ANIM_TIME1840,53001
#    define LV_ROLLER_INF_PAGES LV_ROLLER_INF_PAGES1847,53183
#    define  LV_ROLLER_INF_PAGES LV_ROLLER_INF_PAGES1849,53250
#    define LV_USE_SLIDER LV_USE_SLIDER1857,53403
#    define  LV_USE_SLIDER LV_USE_SLIDER1859,53458
#    define LV_USE_SPINBOX LV_USE_SPINBOX1866,53595
#    define  LV_USE_SPINBOX LV_USE_SPINBOX1868,53652
#    define LV_USE_SWITCH LV_USE_SWITCH1875,53794
#    define  LV_USE_SWITCH LV_USE_SWITCH1877,53849
#    define LV_USE_TEXTAREA LV_USE_TEXTAREA1884,54005
#    define  LV_USE_TEXTAREA LV_USE_TEXTAREA1886,54064
#    define LV_TEXTAREA_DEF_CURSOR_BLINK_TIME LV_TEXTAREA_DEF_CURSOR_BLINK_TIME1892,54234
#    define  LV_TEXTAREA_DEF_CURSOR_BLINK_TIME LV_TEXTAREA_DEF_CURSOR_BLINK_TIME1894,54329
#    define LV_TEXTAREA_DEF_PWD_SHOW_TIME LV_TEXTAREA_DEF_PWD_SHOW_TIME1899,54491
#    define  LV_TEXTAREA_DEF_PWD_SHOW_TIME LV_TEXTAREA_DEF_PWD_SHOW_TIME1901,54578
#    define LV_USE_TABLE LV_USE_TABLE1909,54749
#    define  LV_USE_TABLE LV_USE_TABLE1911,54802
#    define LV_TABLE_COL_MAX LV_TABLE_COL_MAX1917,54924
#    define  LV_TABLE_COL_MAX LV_TABLE_COL_MAX1919,54985
#    define LV_TABLE_CELL_STYLE_CNT LV_TABLE_CELL_STYLE_CNT1924,55109
#    define  LV_TABLE_CELL_STYLE_CNT LV_TABLE_CELL_STYLE_CNT1926,55184
#    define LV_USE_TABVIEW LV_USE_TABVIEW1935,55343
#    define  LV_USE_TABVIEW LV_USE_TABVIEW1937,55400
#    define LV_TABVIEW_DEF_ANIM_TIME LV_TABVIEW_DEF_ANIM_TIME1944,55602
#    define  LV_TABVIEW_DEF_ANIM_TIME LV_TABVIEW_DEF_ANIM_TIME1946,55679
#    define LV_USE_TILEVIEW LV_USE_TILEVIEW1954,55842
#    define  LV_USE_TILEVIEW LV_USE_TILEVIEW1956,55901
#    define LV_TILEVIEW_DEF_ANIM_TIME LV_TILEVIEW_DEF_ANIM_TIME1963,56099
#    define  LV_TILEVIEW_DEF_ANIM_TIME LV_TILEVIEW_DEF_ANIM_TIME1965,56178
#    define LV_USE_WIN LV_USE_WIN1973,56363
#    define  LV_USE_WIN LV_USE_WIN1975,56412
#    define _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_WARNINGS1986,56699
#    define  _CRT_SECURE_NO_WARNINGS_CRT_SECURE_NO_WARNINGS1988,56774
typedef int16_t lv_coord_t;lv_coord_t1999,57011
typedef void* lv_anim_user_data_t;lv_anim_user_data_t2003,57155
typedef void* lv_group_user_data_t;lv_group_user_data_t2007,57219
typedef void* lv_fs_drv_user_data_t;lv_fs_drv_user_data_t2011,57289
typedef void* lv_img_decoder_user_data_t;lv_img_decoder_user_data_t2014,57336
typedef void* lv_disp_drv_user_data_t;             /*Type of user data in the display driver*/lv_disp_drv_user_data_t2016,57379
typedef void* lv_indev_drv_user_data_t;            /*Type of user data in the input device driver*/lv_indev_drv_user_data_t2017,57474
typedef void* lv_font_user_data_t;lv_font_user_data_t2019,57575
typedef void* lv_obj_user_data_t;lv_obj_user_data_t2022,57634

lib/lvgl/src/lv_font/lv_font_montserrat_14.c,810
#define LV_FONT_MONTSERRAT_14 LV_FONT_MONTSERRAT_1410,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc1478,57259
static const uint16_t unicode_list_1[] = {unicode_list_11640,71558
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps1652,72156
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping1670,72714
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping1695,73426
static const int8_t kern_class_values[] =kern_class_values1720,74131
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes2100,85668
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc2114,86057
lv_font_t lv_font_montserrat_14 = {lv_font_montserrat_142132,86424

lib/lvgl/src/lv_font/lv_font_montserrat_12_subpx.c,834
#define LV_FONT_MONTSERRAT_12_SUBPX LV_FONT_MONTSERRAT_12_SUBPX10,828
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,997
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc1209,44470
static const uint16_t unicode_list_1[] = {unicode_list_11371,58688
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps1383,59286
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping1401,59844
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping1426,60556
static const int8_t kern_class_values[] =kern_class_values1451,61261
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes1831,72769
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc1845,73158
lv_font_t lv_font_montserrat_12_subpx = {lv_font_montserrat_12_subpx1863,73525

lib/lvgl/src/lv_font/lv_font.c,375
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)lv_font_get_glyph_bitmap48,835
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,lv_font_get_glyph_dsc61,1284
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)lv_font_get_glyph_width74,1733

lib/lvgl/src/lv_font/lv_font_montserrat_28.c,819
#define LV_FONT_MONTSERRAT_28 LV_FONT_MONTSERRAT_2810,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc4348,196355
static const uint16_t unicode_list_1[] = {unicode_list_14510,210871
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps4522,211469
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping4540,212027
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping4565,212739
static const int8_t kern_class_values[] =kern_class_values4590,213444
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes4970,225266
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc4984,225655
lv_font_t lv_font_montserrat_28 = {lv_font_montserrat_285002,226022

lib/lvgl/src/lv_font/lv_font_montserrat_34.c,819
#define LV_FONT_MONTSERRAT_34 LV_FONT_MONTSERRAT_3410,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc6168,284207
static const uint16_t unicode_list_1[] = {unicode_list_16330,298763
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps6342,299361
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping6360,299919
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping6385,300631
static const int8_t kern_class_values[] =kern_class_values6410,301336
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes6790,313278
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc6804,313667
lv_font_t lv_font_montserrat_34 = {lv_font_montserrat_346822,314034

lib/lvgl/src/lv_font/lv_font_montserrat_26.c,819
#define LV_FONT_MONTSERRAT_26 LV_FONT_MONTSERRAT_2610,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc3814,170790
static const uint16_t unicode_list_1[] = {unicode_list_13976,185282
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps3988,185880
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping4006,186438
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping4031,187150
static const int8_t kern_class_values[] =kern_class_values4056,187855
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes4436,199649
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc4450,200038
lv_font_t lv_font_montserrat_26 = {lv_font_montserrat_264468,200405

lib/lvgl/src/lv_font/lv_font_montserrat_10.c,823
    #define LV_FONT_MONTSERRAT_10 LV_FONT_MONTSERRAT_1010,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,977
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc955,31881
static const uint16_t unicode_list_1[] = {unicode_list_11117,46001
static const lv_font_fmt_txt_cmap_t cmaps[] = {cmaps1129,46599
static const uint8_t kern_left_class_mapping[] = {kern_left_class_mapping1146,47157
static const uint8_t kern_right_class_mapping[] = {kern_right_class_mapping1170,47869
static const int8_t kern_class_values[] = {kern_class_values1194,48574
static const lv_font_fmt_txt_kern_classes_t kern_classes = {kern_classes1573,60025
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc1586,60414
lv_font_t lv_font_montserrat_10 = {lv_font_montserrat_101604,60781

lib/lvgl/src/lv_font/lv_font_montserrat_44.c,827
#define LV_FONT_MONTSERRAT_44 LV_FONT_MONTSERRAT_4410,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc9968,466641
static const uint16_t unicode_list_1[] = {unicode_list_110130,481220
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps10142,481818
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping10160,482376
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping10185,483088
static const int8_t kern_class_values[] =kern_class_values10210,483793
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes10590,495831
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc10604,496220
lv_font_t lv_font_montserrat_44 = {lv_font_montserrat_4410622,496587

lib/lvgl/src/lv_font/lv_font_montserrat_32.c,819
#define LV_FONT_MONTSERRAT_32 LV_FONT_MONTSERRAT_3210,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc5391,246547
static const uint16_t unicode_list_1[] = {unicode_list_15553,261088
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps5565,261686
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping5583,262244
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping5608,262956
static const int8_t kern_class_values[] =kern_class_values5633,263661
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes6013,275584
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc6027,275973
lv_font_t lv_font_montserrat_32 = {lv_font_montserrat_326045,276340

lib/lvgl/src/lv_font/lv_font_montserrat_20.c,819
#define LV_FONT_MONTSERRAT_20 LV_FONT_MONTSERRAT_2010,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc2476,105233
static const uint16_t unicode_list_1[] = {unicode_list_12638,119670
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps2650,120268
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping2668,120826
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping2693,121538
static const int8_t kern_class_values[] =kern_class_values2718,122243
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes3098,133954
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc3112,134343
lv_font_t lv_font_montserrat_20 = {lv_font_montserrat_203130,134710

lib/lvgl/src/lv_font/lv_font_montserrat_18.c,818
#define LV_FONT_MONTSERRAT_18 LV_FONT_MONTSERRAT_1810,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc2130,89079
static const uint16_t unicode_list_1[] = {unicode_list_12292,103484
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps2304,104082
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping2322,104640
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping2347,105352
static const int8_t kern_class_values[] =kern_class_values2372,106057
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes2752,117697
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc2766,118086
lv_font_t lv_font_montserrat_18 = {lv_font_montserrat_182784,118453

lib/lvgl/src/lv_font/lv_font_fmt_txt.c,1927
    RLE_STATE_SINGLE = 0,RLE_STATE_SINGLE31,595
    RLE_STATE_REPEATE,RLE_STATE_REPEATE32,621
    RLE_STATE_COUNTER,RLE_STATE_COUNTER33,644
} rle_state_t;rle_state_t34,667
    static uint32_t rle_rdp;rle_rdp58,1793
    static const uint8_t * rle_in;rle_in59,1822
    static uint8_t rle_bpp;rle_bpp60,1857
    static uint8_t rle_prev_v;rle_prev_v61,1885
    static uint8_t rle_cnt;rle_cnt62,1916
    static rle_state_t rle_state;rle_state63,1944
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)lv_font_get_bitmap_fmt_txt84,2488
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,lv_font_get_glyph_dsc_fmt_txt148,4849
void _lv_font_clean_up_fmt_txt(void)_lv_font_clean_up_fmt_txt194,6139
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)get_glyph_dsc_id207,6407
static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)get_kern_value266,8855
static int32_t kern_pair_8_compare(const void * ref, const void * element)kern_pair_8_compare324,11370
static int32_t kern_pair_16_compare(const void * ref, const void * element)kern_pair_16_compare335,11742
static void decompress(const uint8_t * in, uint8_t * out, lv_coord_t w, lv_coord_t h, uint8_t bpp, bool prefilter)decompress354,12445
static inline void decompress_line(uint8_t * out, lv_coord_t w)decompress_line409,13723
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)get_bits424,14123
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)bits_write467,15314
static inline void rle_init(const uint8_t * in,  uint8_t bpp)rle_init508,16277
static inline uint8_t rle_next(void)rle_next518,16468
static int32_t unicode_list_compare(const void * ref, const void * element)unicode_list_compare590,18409

lib/lvgl/src/lv_font/lv_font_montserrat_22.c,819
#define LV_FONT_MONTSERRAT_22 LV_FONT_MONTSERRAT_2210,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc2893,126602
static const uint16_t unicode_list_1[] = {unicode_list_13055,141060
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps3067,141658
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping3085,142216
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping3110,142928
static const int8_t kern_class_values[] =kern_class_values3135,143633
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes3515,155393
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc3529,155782
lv_font_t lv_font_montserrat_22 = {lv_font_montserrat_223547,156149

lib/lvgl/src/lv_font/lv_font.mk,0

lib/lvgl/src/lv_font/lv_font.h,2098
#define LV_FONT_HLV_FONT_H7,49
    uint16_t adv_w; /**< The glyph needs this space. Draw the next glyph after this width. 8 bit integer, 4 bit fractional */adv_w38,580
    uint16_t box_w;  /**< Width of the glyph's bounding box*/box_w39,706
    uint16_t box_h;  /**< Height of the glyph's bounding box*/box_h40,768
    int16_t ofs_x;   /**< x offset of the bounding box*/ofs_x41,831
    int16_t ofs_y;  /**< y offset of the bounding box*/ofs_y42,888
    uint8_t bpp;   /**< Bit-per-pixel: 1, 2, 4, 8*/bpp43,944
} lv_font_glyph_dsc_t;lv_font_glyph_dsc_t44,996
    LV_FONT_SUBPX_NONE,LV_FONT_SUBPX_NONE49,1101
    LV_FONT_SUBPX_HOR,LV_FONT_SUBPX_HOR50,1125
    LV_FONT_SUBPX_VER,LV_FONT_SUBPX_VER51,1148
    LV_FONT_SUBPX_BOTH,LV_FONT_SUBPX_BOTH52,1171
typedef uint8_t lv_font_subpx_t;lv_font_subpx_t55,1199
typedef struct _lv_font_struct {_lv_font_struct58,1273
    bool (*get_glyph_dsc)(const struct _lv_font_struct *, lv_font_glyph_dsc_t *, uint32_t letter, uint32_t letter_next);get_glyph_dsc60,1354
    const uint8_t * (*get_glyph_bitmap)(const struct _lv_font_struct *, uint32_t);get_glyph_bitmap63,1519
    lv_coord_t line_height;         /**< The real line height where any text fits*/line_height66,1679
    lv_coord_t base_line;           /**< Base line measured from the top of the line_height*/base_line67,1763
    uint8_t subpx  : 2;             /**< An element of `lv_font_subpx_t`*/subpx68,1857
    int8_t underline_position;      /**< Distance between the top of the underline and base line (< 0 means below the base line)*/underline_position70,1933
    int8_t  underline_thickness;     /**< Thickness of the underline*/underline_thickness71,2064
    void * dsc;                     /**< Store implementation specific or run_time data or caching here*/dsc73,2136
    lv_font_user_data_t user_data;  /**< Custom user data for font. */user_data75,2263
} lv_font_t;lv_font_t79,2343
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)lv_font_get_line_height118,3609
#define LV_FONT_DECLARE(LV_FONT_DECLARE127,3786

lib/lvgl/src/lv_font/lv_font_montserrat_46.c,828
#define LV_FONT_MONTSERRAT_46 LV_FONT_MONTSERRAT_4610,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc10897,511749
static const uint16_t unicode_list_1[] = {unicode_list_111059,526333
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps11071,526931
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping11089,527489
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping11114,528201
static const int8_t kern_class_values[] =kern_class_values11139,528906
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes11519,540985
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc11533,541374
lv_font_t lv_font_montserrat_46 = {lv_font_montserrat_4611551,541741

lib/lvgl/src/lv_font/lv_font_montserrat_48.c,828
#define LV_FONT_MONTSERRAT_48 LV_FONT_MONTSERRAT_4810,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc11579,544394
static const uint16_t unicode_list_1[] = {unicode_list_111741,558977
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps11753,559575
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping11771,560133
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping11796,560845
static const int8_t kern_class_values[] =kern_class_values11821,561550
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes12201,573630
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc12215,574019
lv_font_t lv_font_montserrat_48 = {lv_font_montserrat_4812233,574386

lib/lvgl/src/lv_font/lv_symbol_def.h,6369
#define LV_SYMBOL_DEF_HLV_SYMBOL_DEF_H2,24
#define LV_SYMBOL_AUDIO LV_SYMBOL_AUDIO24,735
#define LV_SYMBOL_VIDEO LV_SYMBOL_VIDEO25,802
#define LV_SYMBOL_LIST LV_SYMBOL_LIST26,869
#define LV_SYMBOL_OK LV_SYMBOL_OK27,936
#define LV_SYMBOL_CLOSE LV_SYMBOL_CLOSE28,1003
#define LV_SYMBOL_POWER LV_SYMBOL_POWER29,1070
#define LV_SYMBOL_SETTINGS LV_SYMBOL_SETTINGS30,1137
#define LV_SYMBOL_HOME LV_SYMBOL_HOME31,1204
#define LV_SYMBOL_DOWNLOAD LV_SYMBOL_DOWNLOAD32,1271
#define LV_SYMBOL_DRIVE LV_SYMBOL_DRIVE33,1338
#define LV_SYMBOL_REFRESH LV_SYMBOL_REFRESH34,1405
#define LV_SYMBOL_MUTE LV_SYMBOL_MUTE35,1472
#define LV_SYMBOL_VOLUME_MID LV_SYMBOL_VOLUME_MID36,1539
#define LV_SYMBOL_VOLUME_MAX LV_SYMBOL_VOLUME_MAX37,1606
#define LV_SYMBOL_IMAGE LV_SYMBOL_IMAGE38,1673
#define LV_SYMBOL_EDIT LV_SYMBOL_EDIT39,1740
#define LV_SYMBOL_PREV LV_SYMBOL_PREV40,1807
#define LV_SYMBOL_PLAY LV_SYMBOL_PLAY41,1874
#define LV_SYMBOL_PAUSE LV_SYMBOL_PAUSE42,1941
#define LV_SYMBOL_STOP LV_SYMBOL_STOP43,2008
#define LV_SYMBOL_NEXT LV_SYMBOL_NEXT44,2075
#define LV_SYMBOL_EJECT LV_SYMBOL_EJECT45,2142
#define LV_SYMBOL_LEFT LV_SYMBOL_LEFT46,2209
#define LV_SYMBOL_RIGHT LV_SYMBOL_RIGHT47,2276
#define LV_SYMBOL_PLUS LV_SYMBOL_PLUS48,2343
#define LV_SYMBOL_MINUS LV_SYMBOL_MINUS49,2410
#define LV_SYMBOL_EYE_OPEN LV_SYMBOL_EYE_OPEN50,2477
#define LV_SYMBOL_EYE_CLOSE LV_SYMBOL_EYE_CLOSE51,2544
#define LV_SYMBOL_WARNING LV_SYMBOL_WARNING52,2611
#define LV_SYMBOL_SHUFFLE LV_SYMBOL_SHUFFLE53,2678
#define LV_SYMBOL_UP LV_SYMBOL_UP54,2745
#define LV_SYMBOL_DOWN LV_SYMBOL_DOWN55,2812
#define LV_SYMBOL_LOOP LV_SYMBOL_LOOP56,2879
#define LV_SYMBOL_DIRECTORY LV_SYMBOL_DIRECTORY57,2946
#define LV_SYMBOL_UPLOAD LV_SYMBOL_UPLOAD58,3013
#define LV_SYMBOL_CALL LV_SYMBOL_CALL59,3080
#define LV_SYMBOL_CUT LV_SYMBOL_CUT60,3147
#define LV_SYMBOL_COPY LV_SYMBOL_COPY61,3214
#define LV_SYMBOL_SAVE LV_SYMBOL_SAVE62,3281
#define LV_SYMBOL_CHARGE LV_SYMBOL_CHARGE63,3348
#define LV_SYMBOL_PASTE LV_SYMBOL_PASTE64,3415
#define LV_SYMBOL_BELL LV_SYMBOL_BELL65,3482
#define LV_SYMBOL_KEYBOARD LV_SYMBOL_KEYBOARD66,3549
#define LV_SYMBOL_GPS LV_SYMBOL_GPS67,3616
#define LV_SYMBOL_FILE LV_SYMBOL_FILE68,3683
#define LV_SYMBOL_WIFI LV_SYMBOL_WIFI69,3750
#define LV_SYMBOL_BATTERY_FULL LV_SYMBOL_BATTERY_FULL70,3817
#define LV_SYMBOL_BATTERY_3 LV_SYMBOL_BATTERY_371,3884
#define LV_SYMBOL_BATTERY_2 LV_SYMBOL_BATTERY_272,3951
#define LV_SYMBOL_BATTERY_1 LV_SYMBOL_BATTERY_173,4018
#define LV_SYMBOL_BATTERY_EMPTY LV_SYMBOL_BATTERY_EMPTY74,4085
#define LV_SYMBOL_USB LV_SYMBOL_USB75,4152
#define LV_SYMBOL_BLUETOOTH LV_SYMBOL_BLUETOOTH76,4219
#define LV_SYMBOL_TRASH LV_SYMBOL_TRASH77,4286
#define LV_SYMBOL_BACKSPACE LV_SYMBOL_BACKSPACE78,4353
#define LV_SYMBOL_SD_CARD LV_SYMBOL_SD_CARD79,4420
#define LV_SYMBOL_NEW_LINE LV_SYMBOL_NEW_LINE80,4487
#define LV_SYMBOL_DUMMY LV_SYMBOL_DUMMY83,4654
#define LV_SYMBOL_BULLET LV_SYMBOL_BULLET88,4802
    _LV_STR_SYMBOL_AUDIO,_LV_STR_SYMBOL_AUDIO95,5027
    _LV_STR_SYMBOL_VIDEO,_LV_STR_SYMBOL_VIDEO96,5053
    _LV_STR_SYMBOL_LIST,_LV_STR_SYMBOL_LIST97,5079
    _LV_STR_SYMBOL_OK,_LV_STR_SYMBOL_OK98,5104
    _LV_STR_SYMBOL_CLOSE,_LV_STR_SYMBOL_CLOSE99,5127
    _LV_STR_SYMBOL_POWER,_LV_STR_SYMBOL_POWER100,5153
    _LV_STR_SYMBOL_SETTINGS,_LV_STR_SYMBOL_SETTINGS101,5179
    _LV_STR_SYMBOL_HOME,_LV_STR_SYMBOL_HOME102,5208
    _LV_STR_SYMBOL_DOWNLOAD,_LV_STR_SYMBOL_DOWNLOAD103,5233
    _LV_STR_SYMBOL_DRIVE,_LV_STR_SYMBOL_DRIVE104,5262
    _LV_STR_SYMBOL_REFRESH,_LV_STR_SYMBOL_REFRESH105,5288
    _LV_STR_SYMBOL_MUTE,_LV_STR_SYMBOL_MUTE106,5316
    _LV_STR_SYMBOL_VOLUME_MID,_LV_STR_SYMBOL_VOLUME_MID107,5341
    _LV_STR_SYMBOL_VOLUME_MAX,_LV_STR_SYMBOL_VOLUME_MAX108,5372
    _LV_STR_SYMBOL_IMAGE,_LV_STR_SYMBOL_IMAGE109,5403
    _LV_STR_SYMBOL_EDIT,_LV_STR_SYMBOL_EDIT110,5429
    _LV_STR_SYMBOL_PREV,_LV_STR_SYMBOL_PREV111,5454
    _LV_STR_SYMBOL_PLAY,_LV_STR_SYMBOL_PLAY112,5479
    _LV_STR_SYMBOL_PAUSE,_LV_STR_SYMBOL_PAUSE113,5504
    _LV_STR_SYMBOL_STOP,_LV_STR_SYMBOL_STOP114,5530
    _LV_STR_SYMBOL_NEXT,_LV_STR_SYMBOL_NEXT115,5555
    _LV_STR_SYMBOL_EJECT,_LV_STR_SYMBOL_EJECT116,5580
    _LV_STR_SYMBOL_LEFT,_LV_STR_SYMBOL_LEFT117,5606
    _LV_STR_SYMBOL_RIGHT,_LV_STR_SYMBOL_RIGHT118,5631
    _LV_STR_SYMBOL_PLUS,_LV_STR_SYMBOL_PLUS119,5657
    _LV_STR_SYMBOL_MINUS,_LV_STR_SYMBOL_MINUS120,5682
    _LV_STR_SYMBOL_EYE_OPEN,_LV_STR_SYMBOL_EYE_OPEN121,5708
    _LV_STR_SYMBOL_EYE_CLOSE,_LV_STR_SYMBOL_EYE_CLOSE122,5737
    _LV_STR_SYMBOL_WARNING,_LV_STR_SYMBOL_WARNING123,5767
    _LV_STR_SYMBOL_SHUFFLE,_LV_STR_SYMBOL_SHUFFLE124,5795
    _LV_STR_SYMBOL_UP,_LV_STR_SYMBOL_UP125,5823
    _LV_STR_SYMBOL_DOWN,_LV_STR_SYMBOL_DOWN126,5846
    _LV_STR_SYMBOL_LOOP,_LV_STR_SYMBOL_LOOP127,5871
    _LV_STR_SYMBOL_DIRECTORY,_LV_STR_SYMBOL_DIRECTORY128,5896
    _LV_STR_SYMBOL_UPLOAD,_LV_STR_SYMBOL_UPLOAD129,5926
    _LV_STR_SYMBOL_CALL,_LV_STR_SYMBOL_CALL130,5953
    _LV_STR_SYMBOL_CUT,_LV_STR_SYMBOL_CUT131,5978
    _LV_STR_SYMBOL_COPY,_LV_STR_SYMBOL_COPY132,6002
    _LV_STR_SYMBOL_SAVE,_LV_STR_SYMBOL_SAVE133,6027
    _LV_STR_SYMBOL_CHARGE,_LV_STR_SYMBOL_CHARGE134,6052
    _LV_STR_SYMBOL_PASTE,_LV_STR_SYMBOL_PASTE135,6079
    _LV_STR_SYMBOL_BELL,_LV_STR_SYMBOL_BELL136,6105
    _LV_STR_SYMBOL_KEYBOARD,_LV_STR_SYMBOL_KEYBOARD137,6130
    _LV_STR_SYMBOL_GPS,_LV_STR_SYMBOL_GPS138,6159
    _LV_STR_SYMBOL_FILE,_LV_STR_SYMBOL_FILE139,6183
    _LV_STR_SYMBOL_WIFI,_LV_STR_SYMBOL_WIFI140,6208
    _LV_STR_SYMBOL_BATTERY_FULL,_LV_STR_SYMBOL_BATTERY_FULL141,6233
    _LV_STR_SYMBOL_BATTERY_3,_LV_STR_SYMBOL_BATTERY_3142,6266
    _LV_STR_SYMBOL_BATTERY_2,_LV_STR_SYMBOL_BATTERY_2143,6296
    _LV_STR_SYMBOL_BATTERY_1,_LV_STR_SYMBOL_BATTERY_1144,6326
    _LV_STR_SYMBOL_BATTERY_EMPTY,_LV_STR_SYMBOL_BATTERY_EMPTY145,6356
    _LV_STR_SYMBOL_USB,_LV_STR_SYMBOL_USB146,6390
    _LV_STR_SYMBOL_BLUETOOTH,_LV_STR_SYMBOL_BLUETOOTH147,6414
    _LV_STR_SYMBOL_TRASH,_LV_STR_SYMBOL_TRASH148,6444
    _LV_STR_SYMBOL_BACKSPACE,_LV_STR_SYMBOL_BACKSPACE149,6470
    _LV_STR_SYMBOL_SD_CARD,_LV_STR_SYMBOL_SD_CARD150,6500
    _LV_STR_SYMBOL_NEW_LINE,_LV_STR_SYMBOL_NEW_LINE151,6528
    _LV_STR_SYMBOL_DUMMY,_LV_STR_SYMBOL_DUMMY152,6557

lib/lvgl/src/lv_font/lv_font_simsun_16_cjk.c,498
#define LV_FONT_SIMSUN_16_CJK LV_FONT_SIMSUN_16_CJK10,5326
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,5483
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc12647,541731
static const uint16_t unicode_list_1[] = {unicode_list_113457,616954
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps13550,622784
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc13569,623362
lv_font_t lv_font_simsun_16_cjk = {lv_font_simsun_16_cjk13587,623719

lib/lvgl/src/lv_font/lv_font_montserrat_38.c,819
#define LV_FONT_MONTSERRAT_38 LV_FONT_MONTSERRAT_3810,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc7518,348954
static const uint16_t unicode_list_1[] = {unicode_list_17680,363518
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps7692,364116
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping7710,364674
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping7735,365386
static const int8_t kern_class_values[] =kern_class_values7760,366091
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes8140,378086
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc8154,378475
lv_font_t lv_font_montserrat_38 = {lv_font_montserrat_388172,378842

lib/lvgl/src/lv_font/lv_font_montserrat_36.c,819
#define LV_FONT_MONTSERRAT_36 LV_FONT_MONTSERRAT_3610,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc6795,314317
static const uint16_t unicode_list_1[] = {unicode_list_16957,328877
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps6969,329475
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping6987,330033
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping7012,330745
static const int8_t kern_class_values[] =kern_class_values7037,331450
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes7417,343437
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc7431,343826
lv_font_t lv_font_montserrat_36 = {lv_font_montserrat_367449,344193

lib/lvgl/src/lv_font/lv_font_montserrat_12.c,810
#define LV_FONT_MONTSERRAT_12 LV_FONT_MONTSERRAT_1210,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc1209,44446
static const uint16_t unicode_list_1[] = {unicode_list_11371,58664
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps1383,59262
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping1401,59820
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping1426,60532
static const int8_t kern_class_values[] =kern_class_values1451,61237
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes1831,72745
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc1845,73134
lv_font_t lv_font_montserrat_12 = {lv_font_montserrat_121863,73501

lib/lvgl/src/lv_font/lv_font_montserrat_42.c,819
#define LV_FONT_MONTSERRAT_42 LV_FONT_MONTSERRAT_4210,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc9168,429013
static const uint16_t unicode_list_1[] = {unicode_list_19330,443591
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps9342,444189
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping9360,444747
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping9385,445459
static const int8_t kern_class_values[] =kern_class_values9410,446164
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes9790,458196
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc9804,458585
lv_font_t lv_font_montserrat_42 = {lv_font_montserrat_429822,458952

lib/lvgl/src/lv_font/lv_font_dejavu_16_persian_hebrew.c,755
#define LV_FONT_DEJAVU_16_PERSIAN_HEBREW LV_FONT_DEJAVU_16_PERSIAN_HEBREW10,871
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,1050
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc5826,225137
static const uint16_t unicode_list_2[] = {unicode_list_26427,280172
static const uint8_t glyph_id_ofs_list_5[] = {glyph_id_ofs_list_56431,280264
static const uint16_t unicode_list_7[] = {unicode_list_76438,280430
static const uint16_t unicode_list_9[] = {unicode_list_96451,281072
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps6459,281372
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc6518,284008
lv_font_t lv_font_dejavu_16_persian_hebrew = {lv_font_dejavu_16_persian_hebrew6536,284366

lib/lvgl/src/lv_font/lv_font_montserrat_30.c,819
#define LV_FONT_MONTSERRAT_30 LV_FONT_MONTSERRAT_3010,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc4914,223606
static const uint16_t unicode_list_1[] = {unicode_list_15076,238140
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps5088,238738
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping5106,239296
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping5131,240008
static const int8_t kern_class_values[] =kern_class_values5156,240713
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes5536,252618
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc5550,253007
lv_font_t lv_font_montserrat_30 = {lv_font_montserrat_305568,253374

lib/lvgl/src/lv_font/lv_font_fmt_txt.h,3410
#define LV_FONT_FMT_TXT_HLV_FONT_FMT_TXT_H7,57
    uint32_t bitmap_index : 20;     /**< Start index of the bitmap. A font can be max 1 MB. */bitmap_index32,481
    uint32_t adv_w : 12;            /**< Draw the next glyph after this width. 8.4 format (real_value * 16 is stored). */adv_w33,576
    uint8_t box_w;                  /**< Width of the glyph's bounding box*/box_w34,698
    uint8_t box_h;                  /**< Height of the glyph's bounding box*/box_h35,775
    int8_t ofs_x;                   /**< x offset of the bounding box*/ofs_x36,853
    int8_t ofs_y;                  /**< y offset of the bounding box. Measured from the top of the line*/ofs_y37,925
} lv_font_fmt_txt_glyph_dsc_t;lv_font_fmt_txt_glyph_dsc_t46,1599
    LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY,LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY51,1676
    LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL,LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL52,1715
    LV_FONT_FMT_TXT_CMAP_SPARSE_TINY,LV_FONT_FMT_TXT_CMAP_SPARSE_TINY53,1754
    LV_FONT_FMT_TXT_CMAP_SPARSE_FULL,LV_FONT_FMT_TXT_CMAP_SPARSE_FULL54,1792
typedef uint8_t lv_font_fmt_txt_cmap_type_t;lv_font_fmt_txt_cmap_type_t57,1834
    uint32_t range_start;range_start66,2119
    uint16_t range_length;range_length70,2271
    uint16_t glyph_id_start;glyph_id_start73,2369
    const uint16_t * unicode_list;unicode_list102,3279
    const void * glyph_id_ofs_list;glyph_id_ofs_list107,3463
    uint16_t list_length;list_length110,3562
    lv_font_fmt_txt_cmap_type_t type;type113,3626
} lv_font_fmt_txt_cmap_t;lv_font_fmt_txt_cmap_t114,3664
    const void * glyph_ids;glyph_ids125,4077
    const int8_t * values;values126,4105
    uint32_t pair_cnt   : 24;pair_cnt127,4132
    uint32_t glyph_ids_size : 2;    /*0: `glyph_ids` is stored as `uint8_t`; 1: as `uint16_t`*/glyph_ids_size128,4162
} lv_font_fmt_txt_kern_pair_t;lv_font_fmt_txt_kern_pair_t129,4258
    const int8_t * class_pair_values;    /*left_class_num * right_class_num value*/class_pair_values141,4825
    const uint8_t * left_class_mapping;   /*Map the glyph_ids to classes: index -> glyph_id -> class_id*/left_class_mapping142,4909
    const uint8_t * right_class_mapping;  /*Map the glyph_ids to classes: index -> glyph_id -> class_id*/right_class_mapping143,5015
    uint8_t left_class_cnt;left_class_cnt144,5121
    uint8_t right_class_cnt;right_class_cnt145,5149
} lv_font_fmt_txt_kern_classes_t;lv_font_fmt_txt_kern_classes_t146,5178
    LV_FONT_FMT_TXT_PLAIN      = 0,LV_FONT_FMT_TXT_PLAIN151,5250
    LV_FONT_FMT_TXT_COMPRESSED = 1,LV_FONT_FMT_TXT_COMPRESSED152,5286
    LV_FONT_FMT_TXT_COMPRESSED_NO_PREFILTER = 1,LV_FONT_FMT_TXT_COMPRESSED_NO_PREFILTER153,5322
} lv_font_fmt_txt_bitmap_format_t;lv_font_fmt_txt_bitmap_format_t154,5371
    const uint8_t * glyph_bitmap;glyph_bitmap160,5505
    const lv_font_fmt_txt_glyph_dsc_t * glyph_dsc;glyph_dsc163,5568
    const lv_font_fmt_txt_cmap_t * cmaps;cmaps167,5718
    const void * kern_dsc;kern_dsc173,5918
    uint16_t kern_scale;kern_scale176,5987
    uint16_t cmap_num       : 10;cmap_num179,6043
    uint16_t bpp            : 4;bpp182,6115
    uint16_t kern_classes   : 1;kern_classes185,6176
    uint16_t bitmap_format  : 2;bitmap_format191,6307
    uint32_t last_letter;last_letter194,6387
    uint32_t last_glyph_id;last_glyph_id195,6413
} lv_font_fmt_txt_dsc_t;lv_font_fmt_txt_dsc_t197,6442

lib/lvgl/src/lv_font/lv_font_montserrat_24.c,819
#define LV_FONT_MONTSERRAT_24 LV_FONT_MONTSERRAT_2410,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc3294,145891
static const uint16_t unicode_list_1[] = {unicode_list_13456,160368
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps3468,160966
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping3486,161524
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping3511,162236
static const int8_t kern_class_values[] =kern_class_values3536,162941
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes3916,174713
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc3930,175102
lv_font_t lv_font_montserrat_24 = {lv_font_montserrat_243948,175469

lib/lvgl/src/lv_font/lv_font_montserrat_8.c,814
    #define LV_FONT_MONTSERRAT_8 LV_FONT_MONTSERRAT_810,812
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,971
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc747,22127
static const uint16_t unicode_list_1[] = {unicode_list_1909,36130
static const lv_font_fmt_txt_cmap_t cmaps[] = {cmaps921,36728
static const uint8_t kern_left_class_mapping[] = {kern_left_class_mapping938,37286
static const uint8_t kern_right_class_mapping[] = {kern_right_class_mapping962,37998
static const int8_t kern_class_values[] = {kern_class_values986,38703
static const lv_font_fmt_txt_kern_classes_t kern_classes = {kern_classes1365,50115
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc1378,50504
lv_font_t lv_font_montserrat_8 = {lv_font_montserrat_81396,50871

lib/lvgl/src/lv_font/lv_font_montserrat_28_compressed.c,863
#define LV_FONT_MONTSERRAT_28_COMPRESSED LV_FONT_MONTSERRAT_28_COMPRESSED10,809
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,988
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc2538,111392
static const uint16_t unicode_list_1[] = {unicode_list_12700,125865
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps2712,126463
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping2730,127021
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping2755,127733
static const int8_t kern_class_values[] =kern_class_values2780,128438
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes3160,140260
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc3174,140649
lv_font_t lv_font_montserrat_28_compressed = {lv_font_montserrat_28_compressed3192,141016

lib/lvgl/src/lv_font/lv_font_unscii_8.c,398
    #define LV_FONT_UNSCII_8 LV_FONT_UNSCII_810,246
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,397
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc315,5700
static const lv_font_fmt_txt_cmap_t cmaps[] = {cmaps422,14509
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc436,14871
lv_font_t lv_font_unscii_8 = {lv_font_unscii_8454,15228

lib/lvgl/src/lv_font/lv_font_montserrat_40.c,819
#define LV_FONT_MONTSERRAT_40 LV_FONT_MONTSERRAT_4010,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc8350,389431
static const uint16_t unicode_list_1[] = {unicode_list_18512,404005
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps8524,404603
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping8542,405161
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping8567,405873
static const int8_t kern_class_values[] =kern_class_values8592,406578
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes8972,418610
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc8986,418999
lv_font_t lv_font_montserrat_40 = {lv_font_montserrat_409004,419366

lib/lvgl/src/lv_font/lv_font_loader.c,2739
    lv_fs_file_t * fp;fp24,332
    int8_t bit_pos;bit_pos25,355
    uint8_t byte_value;byte_value26,375
} bit_iterator_t;bit_iterator_t27,399
typedef struct font_header_bin {font_header_bin29,418
    uint32_t version;version30,451
    uint16_t tables_count;tables_count31,473
    uint16_t font_size;font_size32,500
    uint16_t ascent;ascent33,524
    int16_t descent;descent34,545
    uint16_t typo_ascent;typo_ascent35,566
    int16_t typo_descent;typo_descent36,592
    uint16_t typo_line_gap;typo_line_gap37,618
    int16_t min_y;min_y38,646
    int16_t max_y;max_y39,665
    uint16_t default_advance_width;default_advance_width40,684
    uint16_t kerning_scale;kerning_scale41,720
    uint8_t index_to_loc_format;index_to_loc_format42,748
    uint8_t glyph_id_format;glyph_id_format43,781
    uint8_t advance_width_format;advance_width_format44,810
    uint8_t bits_per_pixel;bits_per_pixel45,844
    uint8_t xy_bits;xy_bits46,872
    uint8_t wh_bits;wh_bits47,893
    uint8_t advance_width_bits;advance_width_bits48,914
    uint8_t compression_id;compression_id49,946
    uint8_t subpixels_mode;subpixels_mode50,974
    uint8_t padding;padding51,1002
} font_header_bin_t;font_header_bin_t52,1023
typedef struct cmap_table_bin {cmap_table_bin54,1045
    uint32_t data_offset;data_offset55,1077
    uint32_t range_start;range_start56,1103
    uint16_t range_length;range_length57,1129
    uint16_t glyph_id_start;glyph_id_start58,1156
    uint16_t data_entries_count;data_entries_count59,1185
    uint8_t format_type;format_type60,1218
    uint8_t padding;padding61,1243
} cmap_table_bin_t;cmap_table_bin_t62,1264
lv_font_t * lv_font_load(const char * font_name)lv_font_load89,2061
void lv_font_free(lv_font_t * font)lv_font_free124,2945
static bit_iterator_t init_bit_iterator(lv_fs_file_t * fp)init_bit_iterator193,5168
static int read_bits(bit_iterator_t * it, int n_bits, lv_fs_res_t * res)read_bits202,5330
static int read_bits_signed(bit_iterator_t * it, int n_bits, lv_fs_res_t * res)read_bits_signed224,5873
static int read_label(lv_fs_file_t * fp, int start, const char * label)read_label235,6156
static bool load_cmaps_tables(lv_fs_file_t * fp, lv_font_fmt_txt_dsc_t * font_dsc,load_cmaps_tables252,6553
static int32_t load_cmaps(lv_fs_file_t * fp, lv_font_fmt_txt_dsc_t * font_dsc, uint32_t cmaps_start)load_cmaps333,9770
static int32_t load_glyph(lv_fs_file_t * fp, lv_font_fmt_txt_dsc_t * font_dsc,load_glyph362,10669
static bool lvgl_load_font(lv_fs_file_t * fp, lv_font_t * font)lvgl_load_font491,14710
int32_t load_kern(lv_fs_file_t * fp, lv_font_fmt_txt_dsc_t * font_dsc, uint8_t format, uint32_t start)load_kern597,17841

lib/lvgl/src/lv_font/lv_font_loader.h,47
#define LV_FONT_LOADER_HLV_FONT_LOADER_H7,63

lib/lvgl/src/lv_font/lv_font_montserrat_16.c,810
#define LV_FONT_MONTSERRAT_16 LV_FONT_MONTSERRAT_1610,816
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,973
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc1741,70484
static const uint16_t unicode_list_1[] = {unicode_list_11903,84829
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps1915,85427
static const uint8_t kern_left_class_mapping[] =kern_left_class_mapping1933,85985
static const uint8_t kern_right_class_mapping[] =kern_right_class_mapping1958,86697
static const int8_t kern_class_values[] =kern_class_values1983,87402
static const lv_font_fmt_txt_kern_classes_t kern_classes =kern_classes2363,98993
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc2377,99382
lv_font_t lv_font_montserrat_16 = {lv_font_montserrat_162395,99749

lib/lvgl/src/lv_font/lv_font_unscii_16.c,403
    #define LV_FONT_UNSCII_16 LV_FONT_UNSCII_1610,248
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,401
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc479,13315
static const lv_font_fmt_txt_cmap_t cmaps[] = {cmaps586,22355
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc600,22717
lv_font_t lv_font_unscii_16 = {lv_font_unscii_16618,23074

lib/lvgl/src/lv_widgets/lv_tabview.c,2502
#define LV_OBJX_NAME LV_OBJX_NAME21,365
        #define LV_TABVIEW_DEF_ANIM_TIME LV_TABVIEW_DEF_ANIM_TIME25,458
    #undef LV_TABVIEW_DEF_ANIM_TIMELV_TABVIEW_DEF_ANIM_TIME28,598
    #define LV_TABVIEW_DEF_ANIM_TIME LV_TABVIEW_DEF_ANIM_TIME29,634
static lv_signal_cb_t ancestor_signal;ancestor_signal53,1482
static lv_signal_cb_t ancestor_scrl_signal;ancestor_scrl_signal54,1521
static lv_signal_cb_t page_signal;page_signal55,1565
static const char * tab_def[] = {""};tab_def56,1600
lv_obj_t * lv_tabview_create(lv_obj_t * par, const lv_obj_t * copy)lv_tabview_create72,2018
lv_obj_t * lv_tabview_add_tab(lv_obj_t * tabview, const char * name)lv_tabview_add_tab207,7750
void lv_tabview_clean_tab(lv_obj_t * tab)lv_tabview_clean_tab292,10994
void lv_tabview_set_tab_act(lv_obj_t * tabview, uint16_t id, lv_anim_enable_t anim)lv_tabview_set_tab_act310,11430
void lv_tabview_set_tab_name(lv_obj_t * tabview, uint16_t id, char * name)lv_tabview_set_tab_name443,16313
void lv_tabview_set_anim_time(lv_obj_t * tabview, uint16_t anim_time)lv_tabview_set_anim_time471,17274
void lv_tabview_set_btns_pos(lv_obj_t * tabview, lv_tabview_btns_pos_t btns_pos)lv_tabview_set_btns_pos489,17703
uint16_t lv_tabview_get_tab_act(const lv_obj_t * tabview)lv_tabview_get_tab_act516,18482
uint16_t lv_tabview_get_tab_count(const lv_obj_t * tabview)lv_tabview_get_tab_count529,18772
lv_obj_t * lv_tabview_get_tab(const lv_obj_t * tabview, uint16_t id)lv_tabview_get_tab543,19138
uint16_t lv_tabview_get_anim_time(const lv_obj_t * tabview)lv_tabview_get_anim_time567,19856
lv_tabview_btns_pos_t lv_tabview_get_btns_pos(const lv_obj_t * tabview)lv_tabview_get_btns_pos584,20209
static lv_res_t lv_tabview_signal(lv_obj_t * tabview, lv_signal_t sign, void * param)lv_tabview_signal603,20780
static lv_res_t tabview_scrl_signal(lv_obj_t * tabview_scrl, lv_signal_t sign, void * param)tabview_scrl_signal717,25641
static lv_style_list_t * lv_tabview_get_style(lv_obj_t * tabview, uint8_t part)lv_tabview_get_style783,28028
static void tab_btnm_event_cb(lv_obj_t * tab_btnm, lv_event_t event)tab_btnm_event_cb819,29156
static void tabview_realign(lv_obj_t * tabview)tabview_realign853,30278
static void refr_indic_size(lv_obj_t * tabview)refr_indic_size866,30573
static void refr_btns_size(lv_obj_t * tabview)refr_btns_size915,32089
static void refr_content_size(lv_obj_t * tabview)refr_content_size961,34081
static void refr_align(lv_obj_t * tabview)refr_align1002,35751

lib/lvgl/src/lv_widgets/lv_btn.h,1827
#define LV_BTN_HLV_BTN_H7,47
    LV_BTN_STATE_RELEASED,LV_BTN_STATE_RELEASED39,660
    LV_BTN_STATE_PRESSED,LV_BTN_STATE_PRESSED40,687
    LV_BTN_STATE_DISABLED,LV_BTN_STATE_DISABLED41,713
    LV_BTN_STATE_CHECKED_RELEASED,LV_BTN_STATE_CHECKED_RELEASED42,740
    LV_BTN_STATE_CHECKED_PRESSED,LV_BTN_STATE_CHECKED_PRESSED43,775
    LV_BTN_STATE_CHECKED_DISABLED,LV_BTN_STATE_CHECKED_DISABLED44,809
    _LV_BTN_STATE_LAST, /* Number of states*/_LV_BTN_STATE_LAST45,844
typedef uint8_t lv_btn_state_t;lv_btn_state_t47,893
    lv_cont_ext_t cont;cont52,1000
    uint8_t checkable : 1;checkable55,1053
} lv_btn_ext_t;lv_btn_ext_t56,1080
    LV_BTN_PART_MAIN = LV_OBJ_PART_MAIN,LV_BTN_PART_MAIN60,1116
    _LV_BTN_PART_VIRTUAL_LAST,_LV_BTN_PART_VIRTUAL_LAST61,1157
    _LV_BTN_PART_REAL_LAST = _LV_OBJ_PART_REAL_LAST,_LV_BTN_PART_REAL_LAST62,1188
typedef uint8_t lv_btn_part_t;lv_btn_part_t64,1244
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)lv_btn_set_layout107,2461
static inline void lv_btn_set_fit4(lv_obj_t * btn, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)lv_btn_set_fit4121,2928
static inline void lv_btn_set_fit2(lv_obj_t * btn, lv_fit_t hor, lv_fit_t ver)lv_btn_set_fit2133,3369
static inline void lv_btn_set_fit(lv_obj_t * btn, lv_fit_t fit)lv_btn_set_fit144,3687
static inline lv_layout_t lv_btn_get_layout(const lv_obj_t * btn)lv_btn_get_layout173,4489
static inline lv_fit_t lv_btn_get_fit_left(const lv_obj_t * btn)lv_btn_get_fit_left183,4706
static inline lv_fit_t lv_btn_get_fit_right(const lv_obj_t * btn)lv_btn_get_fit_right193,4925
static inline lv_fit_t lv_btn_get_fit_top(const lv_obj_t * btn)lv_btn_get_fit_top203,5144
static inline lv_fit_t lv_btn_get_fit_bottom(const lv_obj_t * btn)lv_btn_get_fit_bottom213,5362

lib/lvgl/src/lv_widgets/lv_tileview.h,1398
#define LV_TILEVIEW_HLV_TILEVIEW_H7,57
    lv_page_ext_t page;page32,449
    const lv_point_t * valid_pos;valid_pos34,505
    uint16_t valid_pos_cnt;valid_pos_cnt35,539
    uint16_t anim_time;anim_time37,588
    lv_point_t act_id;act_id39,619
    uint8_t drag_top_en : 1;drag_top_en40,642
    uint8_t drag_bottom_en : 1;drag_bottom_en41,671
    uint8_t drag_left_en : 1;drag_left_en42,703
    uint8_t drag_right_en : 1;drag_right_en43,733
} lv_tileview_ext_t;lv_tileview_ext_t44,764
    LV_TILEVIEW_PART_BG = LV_PAGE_PART_BG,LV_TILEVIEW_PART_BG48,819
    LV_TILEVIEW_PART_SCROLLBAR = LV_PAGE_PART_SCROLLBAR,LV_TILEVIEW_PART_SCROLLBAR49,862
    LV_TILEVIEW_PART_EDGE_FLASH = LV_PAGE_PART_EDGE_FLASH,LV_TILEVIEW_PART_EDGE_FLASH50,919
    _LV_TILEVIEW_PART_VIRTUAL_LAST = _LV_PAGE_PART_VIRTUAL_LAST,_LV_TILEVIEW_PART_VIRTUAL_LAST51,978
    _LV_TILEVIEW_PART_REAL_LAST = _LV_PAGE_PART_REAL_LAST_LV_TILEVIEW_PART_REAL_LAST52,1043
static inline void lv_tileview_set_edge_flash(lv_obj_t * tileview, bool en)lv_tileview_set_edge_flash105,2924
static inline void lv_tileview_set_anim_time(lv_obj_t * tileview, uint16_t anim_time)lv_tileview_set_anim_time115,3194
static inline bool lv_tileview_get_edge_flash(lv_obj_t * tileview)lv_tileview_get_edge_flash135,3746
static inline uint16_t lv_tileview_get_anim_time(lv_obj_t * tileview)lv_tileview_get_anim_time145,4001

lib/lvgl/src/lv_widgets/lv_img.h,1105
#define LV_IMG_HLV_IMG_H7,47
    const void * src; /*Image source: Pointer to an array or a file or a symbol*/src36,623
    lv_point_t offset;offset37,705
    lv_coord_t w;          /*Width of the image (Handled by the library)*/w38,728
    lv_coord_t h;          /*Height of the image (Handled by the library)*/h39,803
    uint16_t angle;    /*rotation angle of the image*/angle40,879
    lv_point_t pivot;     /*rotation center of the image*/pivot41,934
    uint16_t zoom;         /*256 means no zoom, 512 double size, 128 half size*/zoom42,993
    uint8_t src_type : 2;  /*See: lv_img_src_t*/src_type43,1074
    uint8_t auto_size : 1; /*1: automatically set the object size to the image size*/auto_size44,1123
    uint8_t cf : 5;        /*Color format from `lv_img_color_format_t`*/cf45,1209
    uint8_t antialias : 1; /*Apply anti-aliasing in transformations (rotate, zoom)*/antialias46,1282
} lv_img_ext_t;lv_img_ext_t47,1367
    LV_IMG_PART_MAIN,LV_IMG_PART_MAIN51,1407
typedef uint8_t lv_img_part_t;lv_img_part_t53,1432
#define LV_IMG_DECLARE(LV_IMG_DECLARE210,5853

lib/lvgl/src/lv_widgets/lv_table.h,1381
#define LV_TABLE_HLV_TABLE_H7,51
#define LV_TABLE_COL_MAX LV_TABLE_COL_MAX32,515
#  define LV_TABLE_CELL_STYLE_CNT LV_TABLE_CELL_STYLE_CNT41,788
        uint8_t align : 2;align57,1107
        uint8_t right_merge : 1;right_merge58,1134
        uint8_t type : 4; // upto 16 valuestype59,1167
        uint8_t crop : 1;crop60,1211
    } s;s61,1237
    uint8_t format_byte;format_byte62,1246
} lv_table_cell_format_t;lv_table_cell_format_t63,1271
    uint16_t col_cnt;col_cnt68,1365
    uint16_t row_cnt;row_cnt69,1387
    char ** cell_data;cell_data70,1409
    lv_coord_t * row_h;row_h71,1432
    lv_style_list_t cell_style[LV_TABLE_CELL_STYLE_CNT];cell_style72,1456
    lv_coord_t col_w[LV_TABLE_COL_MAX];col_w73,1513
uint16_t cell_types :cell_types74,1553
} lv_table_ext_t;lv_table_ext_t76,1677
    LV_TABLE_PART_BG,     /* Because of this member, LV_PART.*CELL1 has enum value of 1,        */LV_TABLE_PART_BG80,1726
    LV_TABLE_PART_CELL1,  /*   LV_PART.*CELL2 has an enum value of 2 and so on upto the maximum */LV_TABLE_PART_CELL181,1825
    LV_TABLE_PART_CELL2,  /*   number of styles specified by LV_TABLE_CELL_STYLE_CNT            */LV_TABLE_PART_CELL282,1924
    LV_TABLE_PART_CELL3,LV_TABLE_PART_CELL383,2023
    LV_TABLE_PART_CELL4,  /* CELL 5-16 are not needed to be defined, the values in this enumLV_TABLE_PART_CELL484,2048

lib/lvgl/src/lv_widgets/lv_chart.c,7075
#define LV_OBJX_NAME LV_OBJX_NAME21,369
#define LV_CHART_YMIN_DEF LV_CHART_YMIN_DEF23,402
#define LV_CHART_YMAX_DEF LV_CHART_YMAX_DEF24,430
#define LV_CHART_HDIV_DEF LV_CHART_HDIV_DEF25,460
#define LV_CHART_VDIV_DEF LV_CHART_VDIV_DEF26,488
#define LV_CHART_PNUM_DEF LV_CHART_PNUM_DEF27,516
#define LV_CHART_AXIS_MAJOR_TICK_LEN_COE LV_CHART_AXIS_MAJOR_TICK_LEN_COE28,545
#define LV_CHART_AXIS_MINOR_TICK_LEN_COE LV_CHART_AXIS_MINOR_TICK_LEN_COE29,593
#define LV_CHART_LABEL_ITERATOR_FORWARD LV_CHART_LABEL_ITERATOR_FORWARD30,640
#define LV_CHART_LABEL_ITERATOR_REVERSE LV_CHART_LABEL_ITERATOR_REVERSE31,682
    const char * list_start;list_start38,809
    const char * current_pos;current_pos39,838
    uint8_t items_left;items_left40,868
    uint8_t is_reverse_iter;is_reverse_iter41,892
} lv_chart_label_iterator_t;lv_chart_label_iterator_t42,921
static lv_design_cb_t ancestor_design;ancestor_design65,2271
static lv_signal_cb_t ancestor_signal;ancestor_signal66,2310
lv_obj_t * lv_chart_create(lv_obj_t * par, const lv_obj_t * copy)lv_chart_create83,2780
lv_chart_series_t * lv_chart_add_series(lv_obj_t * chart, lv_color_t color)lv_chart_add_series176,6351
void lv_chart_remove_series(lv_obj_t * chart, lv_chart_series_t * series)lv_chart_remove_series216,7389
lv_chart_cursor_t  * lv_chart_add_cursor(lv_obj_t * chart, lv_color_t color, lv_cursor_direction_t axes)lv_chart_add_cursor238,8068
void lv_chart_clear_series(lv_obj_t * chart, lv_chart_series_t * series)lv_chart_clear_series260,8686
void lv_chart_hide_series(lv_obj_t * chart, lv_chart_series_t * series, bool hide)lv_chart_hide_series283,9282
void lv_chart_set_div_line_count(lv_obj_t * chart, uint8_t hdiv, uint8_t vdiv)lv_chart_set_div_line_count303,9795
void lv_chart_set_y_range(lv_obj_t * chart, lv_chart_axis_t axis, lv_coord_t ymin, lv_coord_t ymax)lv_chart_set_y_range323,10368
void lv_chart_set_type(lv_obj_t * chart, lv_chart_type_t type)lv_chart_set_type346,11006
void lv_chart_set_point_count(lv_obj_t * chart, uint16_t point_cnt)lv_chart_set_point_count363,11420
void lv_chart_init_points(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t y)lv_chart_init_points430,13762
void lv_chart_set_points(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t y_array[])lv_chart_set_points450,14336
void lv_chart_set_next(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t y)lv_chart_set_next467,14891
void lv_chart_set_update_mode(lv_obj_t * chart, lv_chart_update_mode_t update_mode)lv_chart_set_update_mode494,15914
void lv_chart_set_x_tick_length(lv_obj_t * chart, uint8_t major_tick_len, uint8_t minor_tick_len)lv_chart_set_x_tick_length513,16622
void lv_chart_set_y_tick_length(lv_obj_t * chart, uint8_t major_tick_len, uint8_t minor_tick_len)lv_chart_set_y_tick_length530,17333
void lv_chart_set_secondary_y_tick_length(lv_obj_t * chart, uint8_t major_tick_len, uint8_t minor_tick_len)lv_chart_set_secondary_y_tick_length547,18054
void lv_chart_set_x_tick_texts(lv_obj_t * chart, const char * list_of_values, uint8_t num_tick_marks,lv_chart_set_x_tick_texts564,18789
void lv_chart_set_y_tick_texts(lv_obj_t * chart, const char * list_of_values, uint8_t num_tick_marks,lv_chart_set_y_tick_texts584,19640
void lv_chart_set_secondary_y_tick_texts(lv_obj_t * chart, const char * list_of_values, uint8_t num_tick_marks,lv_chart_set_secondary_y_tick_texts604,20501
void lv_chart_set_x_start_point(lv_obj_t * chart, lv_chart_series_t * ser, uint16_t id)lv_chart_set_x_start_point622,21258
void lv_chart_set_ext_array(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t array[], uint16_t point_cnt)lv_chart_set_ext_array642,22026
void lv_chart_set_point_id(lv_obj_t * chart, lv_chart_series_t * ser, lv_coord_t value, uint16_t id)lv_chart_set_point_id662,22801
void lv_chart_set_series_axis(lv_obj_t * chart, lv_chart_series_t * ser, lv_chart_axis_t axis)lv_chart_set_series_axis680,23351
void lv_chart_set_cursor_point(lv_obj_t * chart, lv_chart_cursor_t * cursor, lv_point_t * point)lv_chart_set_cursor_point703,23974
lv_chart_type_t lv_chart_get_type(const lv_obj_t * chart)lv_chart_get_type723,24420
uint16_t lv_chart_get_point_count(const lv_obj_t * chart)lv_chart_get_point_count736,24743
uint16_t lv_chart_get_x_start_point(lv_chart_series_t * ser)lv_chart_get_x_start_point749,25155
lv_coord_t lv_chart_get_point_id(lv_obj_t * chart, lv_chart_series_t * ser, uint16_t id)lv_chart_get_point_id763,25609
lv_chart_axis_t lv_chart_get_series_axis(lv_obj_t * chart, lv_chart_series_t * ser)lv_chart_get_series_axis780,26071
lv_point_t lv_chart_get_cursor_point(lv_obj_t * chart, lv_chart_cursor_t * cursor)lv_chart_get_cursor_point795,26462
uint16_t lv_chart_get_nearest_index_from_coord(lv_obj_t * chart, lv_coord_t x)lv_chart_get_nearest_index_from_coord809,26823
lv_coord_t lv_chart_get_x_from_index(lv_obj_t * chart, lv_chart_series_t * ser, uint16_t id)lv_chart_get_x_from_index833,27574
lv_coord_t lv_chart_get_y_from_index(lv_obj_t * chart, lv_chart_series_t * ser, uint16_t id)lv_chart_get_y_from_index882,28962
void lv_chart_get_series_area(lv_obj_t * chart, lv_area_t * series_area)lv_chart_get_series_area910,29760
void lv_chart_refresh(lv_obj_t * chart)lv_chart_refresh927,30352
static lv_design_res_t lv_chart_design(lv_obj_t * chart, const lv_area_t * clip_area, lv_design_mode_t mode)lv_chart_design948,31054
static lv_res_t lv_chart_signal(lv_obj_t * chart, lv_signal_t sign, void * param)lv_chart_signal982,32290
static lv_style_list_t * lv_chart_get_style(lv_obj_t * chart, uint8_t part)lv_chart_get_style1026,33728
static void draw_series_bg(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * clip_area)draw_series_bg1058,34599
static void draw_series_line(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * clip_area)draw_series_line1129,36787
static void draw_series_column(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * clip_area)draw_series_column1283,42427
static void draw_cursors(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * clip_area)draw_cursors1349,44996
static lv_chart_label_iterator_t create_axis_label_iter(const char * list, uint8_t iterator_dir)create_axis_label_iter1438,48016
static void get_next_axis_label(lv_chart_label_iterator_t * iterator, char * buf)get_next_axis_label1469,48873
static inline bool is_tick_with_label(uint8_t tick_num, lv_chart_axis_cfg_t * axis)is_tick_with_label1536,51009
static void draw_y_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask, uint8_t which_axis)draw_y_ticks1541,51172
static void draw_x_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)draw_x_ticks1690,56823
static void draw_axes(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)draw_axes1795,61116
static void invalidate_lines(lv_obj_t * chart, uint16_t i)invalidate_lines1806,61500
static void invalidate_columns(lv_obj_t * chart, uint16_t i)invalidate_columns1844,62851

lib/lvgl/src/lv_widgets/lv_calendar.c,3915
#define LV_OBJX_NAME LV_OBJX_NAME23,436
    DAY_DRAW_PREV_MONTH,DAY_DRAW_PREV_MONTH29,545
    DAY_DRAW_ACT_MONTH,DAY_DRAW_ACT_MONTH30,570
    DAY_DRAW_NEXT_MONTH,DAY_DRAW_NEXT_MONTH31,594
typedef uint8_t day_draw_state_t;day_draw_state_t33,622
static lv_signal_cb_t ancestor_signal;ancestor_signal57,1995
static lv_design_cb_t ancestor_design;ancestor_design58,2034
static const char * day_name[7]    = {"Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"};day_name60,2113
static const char * day_name[7]    = {"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"};day_name62,2200
static const char * month_name[12] = {"January", "February", "March",     "April",   "May",      "June",month_name64,2288
lv_obj_t * lv_calendar_create(lv_obj_t * par, const lv_obj_t * copy)lv_calendar_create82,2936
void lv_calendar_set_today_date(lv_obj_t * calendar, lv_calendar_date_t * today)lv_calendar_set_today_date186,6258
void lv_calendar_set_showed_date(lv_obj_t * calendar, lv_calendar_date_t * showed)lv_calendar_set_showed_date205,6870
void lv_calendar_set_highlighted_dates(lv_obj_t * calendar, lv_calendar_date_t highlighted[], uint16_t date_num)lv_calendar_set_highlighted_dates225,7534
void lv_calendar_set_day_names(lv_obj_t * calendar, const char ** day_names)lv_calendar_set_day_names244,8206
void lv_calendar_set_month_names(lv_obj_t * calendar, const char ** month_names)lv_calendar_set_month_names261,8792
lv_calendar_date_t * lv_calendar_get_today_date(const lv_obj_t * calendar)lv_calendar_get_today_date280,9334
lv_calendar_date_t * lv_calendar_get_showed_date(const lv_obj_t * calendar)lv_calendar_get_showed_date293,9718
lv_calendar_date_t * lv_calendar_get_pressed_date(const lv_obj_t * calendar)lv_calendar_get_pressed_date307,10151
lv_calendar_date_t * lv_calendar_get_highlighted_dates(const lv_obj_t * calendar)lv_calendar_get_highlighted_dates320,10569
uint16_t lv_calendar_get_highlighted_dates_num(const lv_obj_t * calendar)lv_calendar_get_highlighted_dates_num333,10933
const char ** lv_calendar_get_day_names(const lv_obj_t * calendar)lv_calendar_get_day_names346,11285
const char ** lv_calendar_get_month_names(const lv_obj_t * calendar)lv_calendar_get_month_names359,11621
uint8_t lv_calendar_get_day_of_week(uint32_t year, uint32_t month, uint32_t day)lv_calendar_get_day_of_week374,12046
static lv_design_res_t lv_calendar_design(lv_obj_t * calendar, const lv_area_t * clip_area, lv_design_mode_t mode)lv_calendar_design410,13204
static lv_res_t lv_calendar_signal(lv_obj_t * calendar, lv_signal_t sign, void * param)lv_calendar_signal440,14219
static lv_style_list_t * lv_calendar_get_style(lv_obj_t * calendar, uint8_t part)lv_calendar_get_style577,18956
static bool calculate_touched_day(lv_obj_t * calendar, const lv_point_t * touched_point)calculate_touched_day613,20074
static lv_coord_t get_header_height(lv_obj_t * calendar)get_header_height670,23065
static lv_coord_t get_day_names_height(lv_obj_t * calendar)get_day_names_height686,23786
static void draw_header(lv_obj_t * calendar, const lv_area_t * mask)draw_header700,24324
static void draw_day_names(lv_obj_t * calendar, const lv_area_t * mask)draw_day_names774,27494
static void draw_dates(lv_obj_t * calendar, const lv_area_t * clip_area)draw_dates821,29730
static bool is_highlighted(lv_obj_t * calendar, day_draw_state_t draw_state, int32_t year, int32_t month, int32_t day)is_highlighted971,35487
static bool is_pressed(lv_obj_t * calendar, day_draw_state_t draw_state, int32_t year, int32_t month, int32_t day)is_pressed1005,36502
static const char * get_day_name(lv_obj_t * calendar, uint8_t day)get_day_name1028,37213
static const char * get_month_name(lv_obj_t * calendar, int32_t month)get_month_name1045,37648
static uint8_t get_month_length(int32_t year, int32_t month)get_month_length1064,38209
static uint8_t is_leap_year(uint32_t year)is_leap_year1085,38848

lib/lvgl/src/lv_widgets/lv_dropdown.c,4351
#define LV_OBJX_NAME LV_OBJX_NAME27,566
    #undef LV_DROPDOWN_DEF_ANIM_TIMELV_DROPDOWN_DEF_ANIM_TIME30,628
    #define LV_DROPDOWN_DEF_ANIM_TIME LV_DROPDOWN_DEF_ANIM_TIME31,665
#define LV_DROPDOWN_PR_NONE LV_DROPDOWN_PR_NONE34,730
    lv_page_ext_t page;page40,849
    lv_obj_t * ddlist;      /*Pointer to the ddlist where the page belongs*/ddlist41,873
} lv_dropdown_page_ext_t;lv_dropdown_page_ext_t42,950
static lv_signal_cb_t ancestor_signal;ancestor_signal64,2188
static lv_signal_cb_t ancestor_page_signal;ancestor_page_signal65,2227
static lv_signal_cb_t ancestor_page_scrl_signal;ancestor_page_scrl_signal66,2271
static lv_design_cb_t ancestor_design;ancestor_design67,2320
static lv_design_cb_t ancestor_page_design;ancestor_page_design68,2359
lv_obj_t * lv_dropdown_create(lv_obj_t * par, const lv_obj_t * copy)lv_dropdown_create85,2826
void lv_dropdown_set_text(lv_obj_t * ddlist, const char * txt)lv_dropdown_set_text166,5852
void lv_dropdown_clear_options(lv_obj_t * ddlist)lv_dropdown_clear_options181,6227
void lv_dropdown_set_options(lv_obj_t * ddlist, const char * options)lv_dropdown_set_options203,6849
void lv_dropdown_set_options_static(lv_obj_t * ddlist, const char * options)lv_dropdown_set_options_static252,8187
void lv_dropdown_add_option(lv_obj_t * ddlist, const char * option, uint32_t pos)lv_dropdown_add_option284,9183
void lv_dropdown_set_selected(lv_obj_t * ddlist, uint16_t sel_opt)lv_dropdown_set_selected359,11582
void lv_dropdown_set_dir(lv_obj_t * ddlist, lv_dropdown_dir_t dir)lv_dropdown_set_dir377,12117
void lv_dropdown_set_max_height(lv_obj_t * ddlist, lv_coord_t h)lv_dropdown_set_max_height394,12508
void lv_dropdown_set_symbol(lv_obj_t * ddlist, const char * symbol)lv_dropdown_set_symbol419,13199
void lv_dropdown_set_show_selected(lv_obj_t * ddlist, bool show)lv_dropdown_set_show_selected433,13605
const char * lv_dropdown_get_text(lv_obj_t * ddlist)lv_dropdown_get_text454,14119
const char * lv_dropdown_get_options(const lv_obj_t * ddlist)lv_dropdown_get_options467,14475
uint16_t lv_dropdown_get_selected(const lv_obj_t * ddlist)lv_dropdown_get_selected480,14820
uint16_t lv_dropdown_get_option_cnt(const lv_obj_t * ddlist)lv_dropdown_get_option_cnt494,15158
void lv_dropdown_get_selected_str(const lv_obj_t * ddlist, char * buf, uint32_t buf_size)lv_dropdown_get_selected_str509,15565
lv_coord_t lv_dropdown_get_max_height(const lv_obj_t * ddlist)lv_dropdown_get_max_height540,16422
const char * lv_dropdown_get_symbol(lv_obj_t * ddlist)lv_dropdown_get_symbol553,16782
lv_dropdown_dir_t lv_dropdown_get_dir(const lv_obj_t * ddlist)lv_dropdown_get_dir567,17119
bool lv_dropdown_get_show_selected(lv_obj_t * ddlist)lv_dropdown_get_show_selected581,17481
void lv_dropdown_open(lv_obj_t * ddlist)lv_dropdown_open599,17869
void lv_dropdown_close(lv_obj_t * ddlist)lv_dropdown_close707,22529
static lv_design_res_t lv_dropdown_design(lv_obj_t * ddlist, const lv_area_t * clip_area, lv_design_mode_t mode)lv_dropdown_design731,23345
static lv_design_res_t lv_dropdown_page_design(lv_obj_t * page, const lv_area_t * clip_area, lv_design_mode_t mode)lv_dropdown_page_design829,27125
static lv_res_t lv_dropdown_signal(lv_obj_t * ddlist, lv_signal_t sign, void * param)lv_dropdown_signal896,29917
static lv_res_t lv_dropdown_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)lv_dropdown_page_signal1038,35114
static lv_res_t lv_dropdown_page_scrl_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)lv_dropdown_page_scrl_signal1082,36932
static lv_style_list_t * lv_dropdown_get_style(lv_obj_t * ddlist, uint8_t part)lv_dropdown_get_style1127,38670
static void draw_box(lv_obj_t * ddlist, const lv_area_t * clip_area, uint16_t id, lv_state_t state)draw_box1154,39406
static void draw_box_label(lv_obj_t * ddlist, const lv_area_t * clip_area, uint16_t id, lv_state_t state)draw_box_label1192,40706
static lv_res_t page_release_handler(lv_obj_t * page)page_release_handler1243,42615
static void page_press_handler(lv_obj_t * page)page_press_handler1283,43988
static uint16_t get_id_on_point(lv_obj_t * ddlist, lv_coord_t y)get_id_on_point1299,44534
static void position_to_selected(lv_obj_t * ddlist)position_to_selected1321,45194
static lv_obj_t * get_label(const lv_obj_t * ddlist)get_label1342,45969

lib/lvgl/src/lv_widgets/lv_switch.h,956
#define LV_SWITCH_HLV_SWITCH_H7,49
    lv_bar_ext_t bar; /*Ext. of ancestor*/bar37,590
    lv_style_list_t style_knob; /*Style of the knob*/style_knob39,665
} lv_switch_ext_t;lv_switch_ext_t40,719
    LV_SWITCH_PART_BG = LV_BAR_PART_BG,                 /**< Switch background. */LV_SWITCH_PART_BG46,771
    LV_SWITCH_PART_INDIC = LV_BAR_PART_INDIC,           /**< Switch fill area. */LV_SWITCH_PART_INDIC47,854
    LV_SWITCH_PART_KNOB = _LV_BAR_PART_VIRTUAL_LAST,    /**< Switch knob. */LV_SWITCH_PART_KNOB48,936
    _LV_SWITCH_PART_VIRTUAL_LAST_LV_SWITCH_PART_VIRTUAL_LAST49,1013
typedef uint8_t lv_switch_part_t;lv_switch_part_t52,1050
static inline void lv_switch_set_anim_time(lv_obj_t * sw, uint16_t anim_time)lv_switch_set_anim_time98,2458
static inline bool lv_switch_get_state(const lv_obj_t * sw)lv_switch_get_state112,2761
static inline uint16_t lv_switch_get_anim_time(const lv_obj_t * sw)lv_switch_get_anim_time122,3004

lib/lvgl/src/lv_widgets/lv_list.c,2602
#define LV_OBJX_NAME LV_OBJX_NAME21,367
#define LV_LIST_LAYOUT_DEF LV_LIST_LAYOUT_DEF23,399
    #undef LV_LIST_DEF_ANIM_TIMELV_LIST_DEF_ANIM_TIME26,474
    #define LV_LIST_DEF_ANIM_TIME LV_LIST_DEF_ANIM_TIME27,507
    static lv_signal_cb_t img_signal;img_signal48,1179
static lv_signal_cb_t label_signal;label_signal50,1224
static lv_signal_cb_t ancestor_page_signal;ancestor_page_signal51,1260
static lv_signal_cb_t ancestor_btn_signal;ancestor_btn_signal52,1304
lv_obj_t * lv_list_create(lv_obj_t * par, const lv_obj_t * copy)lv_list_create69,1728
void lv_list_clean(lv_obj_t * list)lv_list_clean130,3553
lv_obj_t * lv_list_add_btn(lv_obj_t * list, const void * img_src, const char * txt)lv_list_add_btn148,4071
bool lv_list_remove(const lv_obj_t * list, uint16_t index)lv_list_remove249,7452
void lv_list_focus_btn(lv_obj_t * list, lv_obj_t * btn)lv_list_focus_btn282,8272
void lv_list_set_layout(lv_obj_t * list, lv_layout_t layout)lv_list_set_layout314,9100
const char * lv_list_get_btn_text(const lv_obj_t * btn)lv_list_get_btn_text358,10705
lv_obj_t * lv_list_get_btn_label(const lv_obj_t * btn)lv_list_get_btn_label372,11098
lv_obj_t * lv_list_get_btn_img(const lv_obj_t * btn)lv_list_get_btn_img392,11622
lv_obj_t * lv_list_get_prev_btn(const lv_obj_t * list, lv_obj_t * prev_btn)lv_list_get_prev_btn417,12260
lv_obj_t * lv_list_get_next_btn(const lv_obj_t * list, lv_obj_t * prev_btn)lv_list_get_next_btn444,13084
int32_t lv_list_get_btn_index(const lv_obj_t * list, const lv_obj_t * btn)lv_list_get_btn_index471,13942
uint16_t lv_list_get_size(const lv_obj_t * list)lv_list_get_size498,14616
lv_obj_t * lv_list_get_btn_selected(const lv_obj_t * list)lv_list_get_btn_selected517,15035
lv_layout_t lv_list_get_layout(lv_obj_t * list)lv_list_get_layout531,15337
void lv_list_up(const lv_obj_t * list)lv_list_up546,15625
void lv_list_down(const lv_obj_t * list)lv_list_down587,16990
void lv_list_focus(const lv_obj_t * btn, lv_anim_enable_t anim)lv_list_focus624,18259
static lv_res_t lv_list_signal(lv_obj_t * list, lv_signal_t sign, void * param)lv_list_signal648,18915
static lv_res_t lv_list_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)lv_list_btn_signal795,25416
static lv_style_list_t * lv_list_get_style(lv_obj_t * list, uint8_t part)lv_list_get_style851,27671
static bool lv_list_is_list_btn(lv_obj_t * list_btn)lv_list_is_list_btn884,28531
static bool lv_list_is_list_label(lv_obj_t * list_label)lv_list_is_list_label901,28946
static bool lv_list_is_list_img(lv_obj_t * list_img)lv_list_is_list_img918,29369

lib/lvgl/src/lv_widgets/lv_dropdown.h,1963
#define LV_DROPDOWN_HLV_DROPDOWN_H7,55
#define LV_DROPDOWN_POS_LAST LV_DROPDOWN_POS_LAST35,630
    LV_DROPDOWN_DIR_DOWN,LV_DROPDOWN_DIR_DOWN42,741
    LV_DROPDOWN_DIR_UP,LV_DROPDOWN_DIR_UP43,767
    LV_DROPDOWN_DIR_LEFT,LV_DROPDOWN_DIR_LEFT44,791
    LV_DROPDOWN_DIR_RIGHT,LV_DROPDOWN_DIR_RIGHT45,817
typedef uint8_t lv_dropdown_dir_t;lv_dropdown_dir_t48,848
    lv_obj_t * page;             /*The dropped down list*/page53,960
    const char * text;           /*Text to display on the ddlist's button*/text54,1019
    const char * symbol;         /*Arrow or other icon when the drop-down list is closed*/symbol55,1095
    char * options;options56,1186
    lv_style_list_t style_selected; /*Style of the selected option*/style_selected57,1206
    lv_style_list_t style_page;     /*Style of the dropped down list*/style_page58,1275
    lv_style_list_t style_scrlbar; /*Style of the scroll bar*/style_scrlbar59,1346
    lv_coord_t max_height;        /*Height of the ddlist when opened. (0: auto-size)*/max_height60,1409
    uint16_t option_cnt;          /*Number of options*/option_cnt61,1496
    uint16_t sel_opt_id;          /*Index of the currently selected option*/sel_opt_id62,1552
    uint16_t sel_opt_id_orig;     /*Store the original index on focus*/sel_opt_id_orig63,1629
    uint16_t pr_opt_id;             /*Index of the currently pressed option*/pr_opt_id64,1701
    lv_dropdown_dir_t dir         : 2;dir65,1779
    uint8_t show_selected  : 1;show_selected66,1818
    uint8_t static_txt : 1;static_txt67,1850
} lv_dropdown_ext_t;lv_dropdown_ext_t68,1878
    LV_DROPDOWN_PART_MAIN = LV_OBJ_PART_MAIN,LV_DROPDOWN_PART_MAIN71,1907
    LV_DROPDOWN_PART_LIST = _LV_OBJ_PART_REAL_LAST,LV_DROPDOWN_PART_LIST72,1953
    LV_DROPDOWN_PART_SCROLLBAR,LV_DROPDOWN_PART_SCROLLBAR73,2005
    LV_DROPDOWN_PART_SELECTED,LV_DROPDOWN_PART_SELECTED74,2037
typedef uint8_t lv_dropdown_part_t;lv_dropdown_part_t76,2071

lib/lvgl/src/lv_widgets/lv_objx_templ.h,296
#define LV_TEMPL_HLV_TEMPL_H14,362
    lv_ANCESTOR_ext_t ANCESTOR; /*Ext. of ancestor*/ANCESTOR38,743
} lv_templ_ext_t;lv_templ_ext_t40,828
    LV_TEMPL_STYLE_X,LV_TEMPL_STYLE_X44,865
    LV_TEMPL_STYLE_Y,LV_TEMPL_STYLE_Y45,887
typedef uint8_t lv_templ_style_t;lv_templ_style_t47,912

lib/lvgl/src/lv_widgets/lv_page.c,3606
#define LV_OBJX_NAME LV_OBJX_NAME23,445
#define LV_PAGE_SB_MIN_SIZE LV_PAGE_SB_MIN_SIZE25,477
#define LV_PAGE_SCROLL_ANIM_TIME LV_PAGE_SCROLL_ANIM_TIME28,584
#define LV_PAGE_END_FLASH_SIZE LV_PAGE_END_FLASH_SIZE30,622
#define LV_PAGE_END_ANIM_TIME LV_PAGE_END_ANIM_TIME31,666
#define LV_PAGE_END_ANIM_WAIT_TIME LV_PAGE_END_ANIM_WAIT_TIME32,700
    #undef LV_PAGE_DEF_ANIM_TIMELV_PAGE_DEF_ANIM_TIME35,766
    #define LV_PAGE_DEF_ANIM_TIME LV_PAGE_DEF_ANIM_TIME36,799
static lv_design_cb_t ancestor_design;ancestor_design63,1866
static lv_signal_cb_t ancestor_signal;ancestor_signal64,1905
lv_obj_t * lv_page_create(lv_obj_t * par, const lv_obj_t * copy)lv_page_create80,2324
void lv_page_clean(lv_obj_t * page)lv_page_clean170,5498
void lv_page_set_scrollbar_mode(lv_obj_t * page, lv_scrollbar_mode_t sb_mode)lv_page_set_scrollbar_mode187,5871
void lv_page_set_anim_time(lv_obj_t * page, uint16_t anim_time)lv_page_set_anim_time215,6745
void lv_page_set_scroll_propagation(lv_obj_t * page, bool en)lv_page_set_scroll_propagation236,7513
void lv_page_set_edge_flash(lv_obj_t * page, bool en)lv_page_set_edge_flash252,8002
lv_obj_t * lv_page_get_scrollable(const lv_obj_t * page)lv_page_get_scrollable274,8496
uint16_t lv_page_get_anim_time(const lv_obj_t * page)lv_page_get_anim_time288,8794
lv_scrollbar_mode_t lv_page_get_scrollbar_mode(const lv_obj_t * page)lv_page_get_scrollbar_mode306,9183
bool lv_page_get_scroll_propagation(lv_obj_t * page)lv_page_get_scroll_propagation319,9486
bool lv_page_get_edge_flash(lv_obj_t * page)lv_page_get_edge_flash332,9785
lv_coord_t lv_page_get_width_fit(lv_obj_t * page)lv_page_get_width_fit350,10249
lv_coord_t lv_page_get_height_fit(lv_obj_t * page)lv_page_get_height_fit368,11016
lv_coord_t lv_page_get_width_grid(lv_obj_t * page, uint8_t div, uint8_t span)lv_page_get_width_grid393,12119
lv_coord_t lv_page_get_height_grid(lv_obj_t * page, uint8_t div, uint8_t span)lv_page_get_height_grid416,12982
bool lv_page_on_edge(lv_obj_t * page, lv_page_edge_t edge)lv_page_on_edge437,13565
void lv_page_glue_obj(lv_obj_t * obj, bool glue)lv_page_glue_obj464,14735
void lv_page_focus(lv_obj_t * page, const lv_obj_t * obj, lv_anim_enable_t anim_en)lv_page_focus476,15146
void lv_page_scroll_hor(lv_obj_t * page, lv_coord_t dist)lv_page_scroll_hor576,19375
void lv_page_scroll_ver(lv_obj_t * page, lv_coord_t dist)lv_page_scroll_ver598,20012
void lv_page_start_edge_flash(lv_obj_t * page, lv_page_edge_t edge)lv_page_start_edge_flash621,20716
static lv_design_res_t lv_page_design(lv_obj_t * page, const lv_area_t * clip_area, lv_design_mode_t mode)lv_page_design680,22545
static lv_res_t lv_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)lv_page_signal755,25496
static lv_res_t lv_page_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)lv_page_scrollable_signal907,32152
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)scrl_def_event_cb1061,39111
static lv_style_list_t * lv_page_get_style(lv_obj_t * page, uint8_t part)lv_page_get_style1081,39944
static void scrl_reposition(lv_obj_t * page)scrl_reposition1110,40719
static void scrlbar_refresh(lv_obj_t * page)scrlbar_refresh1180,43430
static void refr_ext_draw_pad(lv_obj_t * page)refr_ext_draw_pad1329,50011
static void edge_flash_anim(void * page, lv_anim_value_t v)edge_flash_anim1340,50483
static void edge_flash_anim_end(lv_anim_t * a)edge_flash_anim_end1350,50776
static void get_edge_flash_area(lv_obj_t * page, lv_area_t * flash_area, lv_coord_t state)get_edge_flash_area1364,51176

lib/lvgl/src/lv_widgets/lv_keyboard.h,1081
#define LV_KEYBOARD_HLV_KEYBOARD_H7,57
#define LV_KEYBOARD_CTRL_BTN_FLAGS LV_KEYBOARD_CTRL_BTN_FLAGS35,623
    LV_KEYBOARD_MODE_TEXT_LOWER,LV_KEYBOARD_MODE_TEXT_LOWER43,824
    LV_KEYBOARD_MODE_TEXT_UPPER,LV_KEYBOARD_MODE_TEXT_UPPER44,857
    LV_KEYBOARD_MODE_SPECIAL,LV_KEYBOARD_MODE_SPECIAL45,890
    LV_KEYBOARD_MODE_NUM,LV_KEYBOARD_MODE_NUM46,920
typedef uint8_t lv_keyboard_mode_t;lv_keyboard_mode_t48,949
    lv_btnmatrix_ext_t btnm; /*Ext. of ancestor*/btnm52,1024
    lv_obj_t * ta;          /*Pointer to the assigned text area*/ta54,1106
    lv_keyboard_mode_t mode;      /*Key map type*/mode55,1172
    uint8_t cursor_mng : 1; /*1: automatically show/hide cursor when a text area is assigned or left*/cursor_mng56,1223
} lv_keyboard_ext_t;lv_keyboard_ext_t57,1326
    LV_KEYBOARD_PART_BG,LV_KEYBOARD_PART_BG60,1355
    LV_KEYBOARD_PART_BTN,LV_KEYBOARD_PART_BTN61,1380
typedef uint8_t lv_keyboard_style_t;lv_keyboard_style_t63,1409
static inline const char ** lv_keyboard_get_map_array(const lv_obj_t * kb)lv_keyboard_get_map_array152,4369

lib/lvgl/src/lv_widgets/lv_spinner.c,1428
#define LV_OBJX_NAME LV_OBJX_NAME21,384
    #define LV_SPINNER_DEF_ARC_LENGTH LV_SPINNER_DEF_ARC_LENGTH24,453
    #define LV_SPINNER_DEF_SPIN_TIME LV_SPINNER_DEF_SPIN_TIME28,545
    #define LV_SPINNER_DEF_ANIM LV_SPINNER_DEF_ANIM32,632
static lv_signal_cb_t ancestor_signal;ancestor_signal47,1016
static lv_design_cb_t ancestor_design;ancestor_design48,1055
lv_obj_t * lv_spinner_create(lv_obj_t * par, const lv_obj_t * copy)lv_spinner_create65,1488
void lv_spinner_set_arc_length(lv_obj_t * spinner, lv_anim_value_t deg)lv_spinner_set_arc_length128,3503
void lv_spinner_set_spin_time(lv_obj_t * spinner, uint16_t time)lv_spinner_set_spin_time142,3845
void lv_spinner_set_type(lv_obj_t * spinner, lv_spinner_type_t type)lv_spinner_set_type160,4299
void lv_spinner_set_dir(lv_obj_t * spinner, lv_spinner_dir_t dir)lv_spinner_set_dir218,6719
lv_anim_value_t lv_spinner_get_arc_length(const lv_obj_t * spinner)lv_spinner_get_arc_length236,7140
uint16_t lv_spinner_get_spin_time(const lv_obj_t * spinner)lv_spinner_get_spin_time248,7444
lv_spinner_type_t lv_spinner_get_type(lv_obj_t * spinner)lv_spinner_get_type261,7754
lv_spinner_dir_t lv_spinner_get_dir(lv_obj_t * spinner)lv_spinner_get_dir269,7946
void lv_spinner_anim_cb(void * ptr, lv_anim_value_t val)lv_spinner_anim_cb284,8313
static lv_res_t lv_spinner_signal(lv_obj_t * spinner, lv_signal_t sign, void * param)lv_spinner_signal310,9122

lib/lvgl/src/lv_widgets/lv_win.c,3563
#define LV_OBJX_NAME LV_OBJX_NAME19,299
#define DEF_TITLE DEF_TITLE20,329
    lv_btn_ext_t btn;btn29,499
    uint8_t alignment_in_header : 1;alignment_in_header33,644
} lv_win_btn_ext_t;lv_win_btn_ext_t34,681
    LV_WIN_BTN_ALIGN_RIGHT = 0,     /**< Align button to right of the header */LV_WIN_BTN_ALIGN_RIGHT37,709
    LV_WIN_BTN_ALIGN_LEFT   /**< Align button to left of the header */LV_WIN_BTN_ALIGN_LEFT38,789
typedef uint8_t lv_win_btn_align_t;lv_win_btn_align_t40,863
static lv_design_cb_t ancestor_header_design;ancestor_header_design56,1597
static lv_signal_cb_t ancestor_signal;ancestor_signal57,1643
lv_obj_t * lv_win_create(lv_obj_t * par, const lv_obj_t * copy)lv_win_create73,2070
void lv_win_clean(lv_obj_t * win)lv_win_clean173,5645
lv_obj_t * lv_win_add_btn_right(lv_obj_t * win, const void * img_src)lv_win_add_btn_right193,6211
lv_obj_t * lv_win_add_btn_left(lv_obj_t * win, const void * img_src)lv_win_add_btn_left214,6809
void lv_win_close_event_cb(lv_obj_t * btn, lv_event_t event)lv_win_close_event_cb238,7406
void lv_win_set_title(lv_obj_t * win, const char * title)lv_win_set_title254,7745
void lv_win_set_header_height(lv_obj_t * win, lv_coord_t height)lv_win_set_header_height283,8490
void lv_win_set_btn_width(lv_obj_t * win, lv_coord_t width)lv_win_set_btn_width298,8906
void lv_win_set_content_size(lv_obj_t * win, lv_coord_t w, lv_coord_t h)lv_win_set_content_size314,9346
void lv_win_set_layout(lv_obj_t * win, lv_layout_t layout)lv_win_set_layout329,9716
void lv_win_set_scrollbar_mode(lv_obj_t * win, lv_scrollbar_mode_t sb_mode)lv_win_set_scrollbar_mode342,10069
void lv_win_set_anim_time(lv_obj_t * win, uint16_t anim_time)lv_win_set_anim_time354,10439
void lv_win_set_drag(lv_obj_t * win, bool en)lv_win_set_drag366,10783
void lv_win_title_set_alignment(lv_obj_t * win, uint8_t alignment)lv_win_title_set_alignment376,11042
const char * lv_win_get_title(const lv_obj_t * win)lv_win_get_title393,11391
lv_obj_t * lv_win_get_content(const lv_obj_t * win)lv_win_get_content406,11760
lv_coord_t lv_win_get_header_height(const lv_obj_t * win)lv_win_get_header_height419,12028
lv_coord_t lv_win_get_btn_width(lv_obj_t * win)lv_win_get_btn_width432,12378
lv_obj_t * lv_win_get_from_btn(const lv_obj_t * ctrl_btn)lv_win_get_from_btn447,12803
lv_layout_t lv_win_get_layout(lv_obj_t * win)lv_win_get_layout462,13163
lv_scrollbar_mode_t lv_win_get_sb_mode(lv_obj_t * win)lv_win_get_sb_mode475,13506
uint16_t lv_win_get_anim_time(const lv_obj_t * win)lv_win_get_anim_time488,13825
lv_coord_t lv_win_get_width(lv_obj_t * win)lv_win_get_width500,14138
uint8_t lv_win_title_get_alignment(lv_obj_t * win)lv_win_title_get_alignment512,14555
void lv_win_focus(lv_obj_t * win, lv_obj_t * obj, lv_anim_enable_t anim_en)lv_win_focus530,15054
static lv_design_res_t lv_win_header_design(lv_obj_t * header, const lv_area_t * clip_area, lv_design_mode_t mode)lv_win_header_design553,15880
static lv_res_t lv_win_signal(lv_obj_t * win, lv_signal_t sign, void * param)lv_win_signal639,19622
static lv_style_list_t * lv_win_get_style(lv_obj_t * win, uint8_t part)lv_win_get_style712,22556
static void lv_win_realign(lv_obj_t * win)lv_win_realign742,23463
static lv_obj_t * lv_win_btn_create(lv_obj_t * par, const void * img_src)lv_win_btn_create807,25912
static void lv_win_btn_set_alignment(lv_obj_t * win_btn, const uint8_t alignment)lv_win_btn_set_alignment843,26881
static uint8_t lv_win_btn_get_alignment(const lv_obj_t * win_btn)lv_win_btn_get_alignment850,27070

lib/lvgl/src/lv_widgets/lv_calendar.h,1694
#define LV_CALENDAR_HLV_CALENDAR_H7,57
    uint16_t year;year34,497
    int8_t month;month35,516
    int8_t day;day36,534
} lv_calendar_date_t;lv_calendar_date_t37,550
    lv_calendar_date_t today;               /*Date of today*/today43,677
    lv_calendar_date_t showed_date;         /*Currently visible month (day is ignored)*/showed_date44,739
    lv_calendar_date_t * highlighted_dates; /*Apply different style on these days (pointer to anhighlighted_dates45,828
    int8_t btn_pressing;                    /*-1: prev month pressing, +1 next month pressing on the header*/btn_pressing47,1001
    uint16_t highlighted_dates_num;          /*Number of elements in `highlighted_days`*/highlighted_dates_num48,1111
    lv_calendar_date_t pressed_date;pressed_date49,1201
    const char ** day_names;   /*Pointer to an array with the name of the days (NULL: use default names)*/day_names50,1238
    const char ** month_names; /*Pointer to an array with the name of the month (NULL. use default names)*/month_names51,1345
    lv_style_list_t style_header;style_header54,1469
    lv_style_list_t style_day_names;style_day_names55,1503
    lv_style_list_t style_date_nums;style_date_nums56,1540
} lv_calendar_ext_t;lv_calendar_ext_t57,1577
    LV_CALENDAR_PART_BG, /**< Background and "normal" date numbers style */LV_CALENDAR_PART_BG61,1627
    LV_CALENDAR_PART_HEADER, /** Calendar header style */LV_CALENDAR_PART_HEADER62,1703
    LV_CALENDAR_PART_DAY_NAMES, /** Day name style */LV_CALENDAR_PART_DAY_NAMES63,1761
    LV_CALENDAR_PART_DATE, /** Day name style */LV_CALENDAR_PART_DATE64,1815
typedef uint8_t lv_calendar_part_t;lv_calendar_part_t66,1867

lib/lvgl/src/lv_widgets/lv_imgbtn.h,1106
#define LV_IMGBTN_HLV_IMGBTN_H7,53
    lv_btn_ext_t btn; /*Ext. of ancestor*/btn38,632
    const void * img_src_mid[_LV_BTN_STATE_LAST];   /*Store center images to each state*/img_src_mid40,707
    const void * img_src_left[_LV_BTN_STATE_LAST];  /*Store left side images to each state*/img_src_left42,817
    const void * img_src_right[_LV_BTN_STATE_LAST]; /*Store right side images to each state*/img_src_right43,910
    lv_img_cf_t act_cf; /*Color format of the currently active image*/act_cf45,1011
    uint8_t tiled   : 1; /*1: the middle src will be repeated to fill the user defined width*/tiled46,1082
} lv_imgbtn_ext_t;lv_imgbtn_ext_t47,1177
    LV_IMGBTN_PART_MAIN = LV_BTN_PART_MAIN,LV_IMGBTN_PART_MAIN51,1234
typedef uint8_t lv_imgbtn_part_t;lv_imgbtn_part_t53,1281
static inline void lv_imgbtn_set_checkable(lv_obj_t * imgbtn, bool tgl)lv_imgbtn_set_checkable119,3543
static inline lv_btn_state_t lv_imgbtn_get_state(const lv_obj_t * imgbtn)lv_imgbtn_get_state170,5232
static inline bool lv_imgbtn_get_checkable(const lv_obj_t * imgbtn)lv_imgbtn_get_checkable180,5510

lib/lvgl/src/lv_widgets/lv_imgbtn.c,1517
#define LV_OBJX_NAME LV_OBJX_NAME21,300
static lv_signal_cb_t ancestor_signal;ancestor_signal38,859
static lv_design_cb_t ancestor_design;ancestor_design39,898
lv_obj_t * lv_imgbtn_create(lv_obj_t * par, const lv_obj_t * copy)lv_imgbtn_create56,1351
void lv_imgbtn_set_src(lv_obj_t * imgbtn, lv_btn_state_t state, const void * src)lv_imgbtn_set_src122,3665
void lv_imgbtn_set_src_tiled(lv_obj_t * imgbtn, lv_btn_state_t state, const void * src_left, const void * src_mid,lv_imgbtn_set_src_tiled149,4582
void lv_imgbtn_set_state(lv_obj_t * imgbtn, lv_btn_state_t state)lv_imgbtn_set_state179,5486
void lv_imgbtn_toggle(lv_obj_t * imgbtn)lv_imgbtn_toggle189,5733
const void * lv_imgbtn_get_src(lv_obj_t * imgbtn, lv_btn_state_t state)lv_imgbtn_get_src204,6135
const void * lv_imgbtn_get_src_left(lv_obj_t * imgbtn, lv_btn_state_t state)lv_imgbtn_get_src_left220,6615
const void * lv_imgbtn_get_src_middle(lv_obj_t * imgbtn, lv_btn_state_t state)lv_imgbtn_get_src_middle235,7085
const void * lv_imgbtn_get_src_right(lv_obj_t * imgbtn, lv_btn_state_t state)lv_imgbtn_get_src_right250,7553
static lv_design_res_t lv_imgbtn_design(lv_obj_t * imgbtn, const lv_area_t * clip_area, lv_design_mode_t mode)lv_imgbtn_design283,8493
static lv_res_t lv_imgbtn_signal(lv_obj_t * imgbtn, lv_signal_t sign, void * param)lv_imgbtn_signal465,16094
static void refr_img(lv_obj_t * imgbtn)refr_img501,17684
static lv_btn_state_t suggest_state(lv_obj_t * imgbtn, lv_btn_state_t state)suggest_state541,19078

lib/lvgl/src/lv_widgets/lv_textarea.h,3826
#define LV_TEXTAREA_HLV_TEXTAREA_H7,51
#define LV_TEXTAREA_CURSOR_LAST LV_TEXTAREA_CURSOR_LAST36,621
LV_EXPORT_CONST_INT(LV_TEXTAREA_CURSOR_LAST);LV_TEXTAREA_CURSOR_LAST38,707
    lv_page_ext_t page; /*Ext. of ancestor*/page46,860
    lv_obj_t * label;            /*Label of the text area*/label48,937
    char * placeholder_txt;      /*Place holder label. only visible if text is an empty string*/placeholder_txt49,997
    lv_style_list_t style_placeholder;style_placeholder50,1094
    char * pwd_tmp;              /*Used to store the original text in password mode*/pwd_tmp51,1133
    const char * accepted_chars; /*Only these characters will be accepted. NULL: accept all*/accepted_chars52,1219
    uint32_t max_length;         /*The max. number of characters. 0: no limit*/max_length53,1313
    uint16_t pwd_show_time;      /*Time to show characters in password mode before change them to '*' */pwd_show_time54,1393
        lv_style_list_t style;  /* Style of the cursor (NULL to use label's style)*/style56,1511
        lv_coord_t valid_x;        /* Used when stepping up/down to a shorter line.valid_x57,1596
        uint32_t pos;              /* The current cursor positionpos59,1742
        uint16_t blink_time;       /*Blink period*/blink_time61,1897
        lv_area_t area;            /* Cursor area relative to the Text Area*/area62,1949
        uint32_t txt_byte_pos;     /* Byte index of the letter after (on) the cursor*/txt_byte_pos63,2027
        uint8_t state : 1;         /*Cursor is visible now or not (Handled by the library)*/state64,2114
        uint8_t hidden : 1;        /*Cursor is hidden by he user */hidden65,2207
        uint8_t click_pos : 1;     /*1: Enable positioning the cursor by clicking the text area*/click_pos66,2275
    } cursor;cursor67,2373
    uint32_t sel_start;  /*Temporary values for text selection*/sel_start69,2409
    uint32_t sel_end;sel_end70,2474
    uint8_t text_sel_in_prog : 1; /*User is in process of selecting */text_sel_in_prog71,2496
    uint8_t text_sel_en : 1;      /*Text can be selected on this text area*/text_sel_en72,2567
    uint8_t pwd_mode : 1; /*Replace characters with '*' */pwd_mode74,2651
    uint8_t one_line : 1; /*One line mode (ignore line breaks)*/one_line75,2710
} lv_textarea_ext_t;lv_textarea_ext_t76,2775
    LV_TEXTAREA_PART_BG = LV_PAGE_PART_BG, /**< Text area background style */LV_TEXTAREA_PART_BG80,2839
    LV_TEXTAREA_PART_SCROLLBAR = LV_PAGE_PART_SCROLLBAR, /**< Scrollbar style */LV_TEXTAREA_PART_SCROLLBAR81,2917
    LV_TEXTAREA_PART_EDGE_FLASH = LV_PAGE_PART_EDGE_FLASH, /**< Edge flash style */LV_TEXTAREA_PART_EDGE_FLASH82,2998
    LV_TEXTAREA_PART_CURSOR = _LV_PAGE_PART_VIRTUAL_LAST, /**< Cursor style */LV_TEXTAREA_PART_CURSOR83,3082
    LV_TEXTAREA_PART_PLACEHOLDER, /**< Placeholder style */LV_TEXTAREA_PART_PLACEHOLDER84,3161
    _LV_TEXTAREA_PART_VIRTUAL_LAST,_LV_TEXTAREA_PART_VIRTUAL_LAST85,3221
    _LV_TEXTAREA_PART_REAL_LAST = _LV_PAGE_PART_REAL_LAST,_LV_TEXTAREA_PART_REAL_LAST87,3258
typedef uint8_t lv_textarea_style_t;lv_textarea_style_t89,3320
static inline void lv_textarea_set_scrollbar_mode(lv_obj_t * ta, lv_scrollbar_mode_t mode)lv_textarea_set_scrollbar_mode227,7760
static inline void lv_textarea_set_scroll_propagation(lv_obj_t * ta, bool en)lv_textarea_set_scroll_propagation238,8139
static inline void lv_textarea_set_edge_flash(lv_obj_t * ta, bool en)lv_textarea_set_edge_flash248,8442
static inline lv_scrollbar_mode_t lv_textarea_get_scrollbar_mode(const lv_obj_t * ta)lv_textarea_get_scrollbar_mode353,11383
static inline bool lv_textarea_get_scroll_propagation(lv_obj_t * ta)lv_textarea_get_scroll_propagation363,11625
static inline bool lv_textarea_get_edge_flash(lv_obj_t * ta)lv_textarea_get_edge_flash373,11854

lib/lvgl/src/lv_widgets/lv_linemeter.h,735
#define LV_LINEMETER_HLV_LINEMETER_H7,59
    uint16_t scale_angle; /*Angle of the scale in deg. (0..360)*/scale_angle33,529
    uint16_t angle_ofs;angle_ofs34,595
    uint16_t line_cnt;     /*Count of lines */line_cnt35,619
    int32_t cur_value;cur_value36,666
    int32_t min_value;min_value37,689
    int32_t max_value;max_value38,712
    uint8_t mirrored : 1;mirrored39,735
} lv_linemeter_ext_t;lv_linemeter_ext_t40,761
    LV_LINEMETER_PART_MAIN,LV_LINEMETER_PART_MAIN44,802
    _LV_LINEMETER_PART_VIRTUAL_LAST,_LV_LINEMETER_PART_VIRTUAL_LAST45,830
    _LV_LINEMETER_PART_REAL_LAST = _LV_OBJ_PART_REAL_LAST,_LV_LINEMETER_PART_REAL_LAST46,867
typedef uint8_t lv_linemeter_part_t;lv_linemeter_part_t48,929

lib/lvgl/src/lv_widgets/lv_spinbox.h,1088
#define LV_SPINBOX_HLV_SPINBOX_H7,55
#define LV_SPINBOX_MAX_DIGIT_COUNT LV_SPINBOX_MAX_DIGIT_COUNT31,520
    lv_textarea_ext_t ta; /*Ext. of ancestor*/ta39,663
    int32_t value;value41,742
    int32_t range_max;range_max42,761
    int32_t range_min;range_min43,784
    int32_t step;step44,807
    uint8_t rollover : 1;   // Set to true for rollover functionalityrollover45,825
    uint16_t digit_count : 4;digit_count46,895
    uint16_t dec_point_pos : 4; /*if 0, there is no separator and the number is an integer*/dec_point_pos47,925
    uint16_t digit_padding_left : 4;digit_padding_left48,1018
} lv_spinbox_ext_t;lv_spinbox_ext_t49,1055
    LV_SPINBOX_PART_BG = LV_TEXTAREA_PART_BG,LV_SPINBOX_PART_BG53,1094
    LV_SPINBOX_PART_CURSOR = LV_TEXTAREA_PART_CURSOR,LV_SPINBOX_PART_CURSOR54,1140
    _LV_SPINBOX_PART_VIRTUAL_LAST = _LV_TEXTAREA_PART_VIRTUAL_LAST,_LV_SPINBOX_PART_VIRTUAL_LAST55,1194
    _LV_SPINBOX_PART_REAL_LAST = _LV_TEXTAREA_PART_REAL_LAST,_LV_SPINBOX_PART_REAL_LAST56,1262
typedef uint8_t lv_spinbox_part_t;lv_spinbox_part_t58,1327

lib/lvgl/src/lv_widgets/lv_led.c,900
#define LV_OBJX_NAME LV_OBJX_NAME19,299
#define LV_LED_WIDTH_DEF LV_LED_WIDTH_DEF21,330
#define LV_LED_HEIGHT_DEF LV_LED_HEIGHT_DEF22,368
static lv_design_cb_t ancestor_design;ancestor_design37,802
static lv_signal_cb_t ancestor_signal;ancestor_signal38,841
lv_obj_t * lv_led_create(lv_obj_t * par, const lv_obj_t * copy)lv_led_create54,1256
void lv_led_set_bright(lv_obj_t * led, uint8_t bright)lv_led_set_bright108,2778
void lv_led_on(lv_obj_t * led)lv_led_on129,3302
void lv_led_off(lv_obj_t * led)lv_led_off140,3489
void lv_led_toggle(lv_obj_t * led)lv_led_toggle151,3687
uint8_t lv_led_get_bright(const lv_obj_t * led)lv_led_get_bright171,4136
static lv_design_res_t lv_led_design(lv_obj_t * led, const lv_area_t * clip_area, lv_design_mode_t mode)lv_led_design193,4874
static lv_res_t lv_led_signal(lv_obj_t * led, lv_signal_t sign, void * param)lv_led_signal232,6797

lib/lvgl/src/lv_widgets/lv_canvas.c,3214
#define LV_OBJX_NAME LV_OBJX_NAME22,392
static lv_signal_cb_t ancestor_signal;ancestor_signal56,1848
static lv_design_cb_t ancestor_design;ancestor_design57,1887
lv_obj_t * lv_canvas_create(lv_obj_t * par, const lv_obj_t * copy)lv_canvas_create73,2313
void lv_canvas_set_buffer(lv_obj_t * canvas, void * buf, lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)lv_canvas_set_buffer139,4476
void lv_canvas_set_px(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_color_t c)lv_canvas_set_px161,5075
void lv_canvas_set_palette(lv_obj_t * canvas, uint8_t id, lv_color_t c)lv_canvas_set_palette181,5714
lv_color_t lv_canvas_get_px(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y)lv_canvas_get_px202,6225
lv_img_dsc_t * lv_canvas_get_img(lv_obj_t * canvas)lv_canvas_get_img217,6723
void lv_canvas_copy_buf(lv_obj_t * canvas, const void * to_copy, lv_coord_t x, lv_coord_t y, lv_coord_t w, lv_coord_t h)lv_canvas_copy_buf240,7339
void lv_canvas_transform(lv_obj_t * canvas, lv_img_dsc_t * img, int16_t angle, uint16_t zoom, lv_coord_t offset_x,lv_canvas_transform277,9127
void lv_canvas_blur_hor(lv_obj_t * canvas, const lv_area_t * area, uint16_t r)lv_canvas_blur_hor387,14007
void lv_canvas_blur_ver(lv_obj_t * canvas, const lv_area_t * area, uint16_t r)lv_canvas_blur_ver523,18082
void lv_canvas_fill_bg(lv_obj_t * canvas, lv_color_t color, lv_opa_t opa)lv_canvas_fill_bg662,22307
void lv_canvas_draw_rect(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_coord_t w, lv_coord_t h,lv_canvas_draw_rect700,23567
void lv_canvas_draw_text(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_coord_t max_w,lv_canvas_draw_text771,25771
void lv_canvas_draw_img(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, const void * src,lv_canvas_draw_img847,28009
void lv_canvas_draw_line(lv_obj_t * canvas, const lv_point_t points[], uint32_t point_cnt,lv_canvas_draw_line912,29925
void lv_canvas_draw_polygon(lv_obj_t * canvas, const lv_point_t points[], uint32_t point_cnt,lv_canvas_draw_polygon975,31909
void lv_canvas_draw_arc(lv_obj_t * canvas, lv_coord_t x, lv_coord_t y, lv_coord_t r, int32_t start_angle,lv_canvas_draw_arc1039,33933
static lv_res_t lv_canvas_signal(lv_obj_t * canvas, lv_signal_t sign, void * param)lv_canvas_signal1104,36007
static void set_set_px_cb(lv_disp_drv_t * disp_drv, lv_img_cf_t cf)set_set_px_cb1120,36475
static void set_px_cb_alpha1(lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,set_px_cb_alpha11143,37171
static void set_px_cb_alpha2(lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,set_px_cb_alpha21157,37571
static void set_px_cb_alpha4(lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,set_px_cb_alpha41171,37971
static void set_px_cb_alpha8(lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,set_px_cb_alpha81185,38371
static void set_px_alpha_generic(lv_img_dsc_t * d, lv_coord_t x, lv_coord_t y, lv_color_t color, lv_opa_t opa)set_px_alpha_generic1199,38771
static void set_px_true_color_alpha(lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x,set_px_true_color_alpha1214,39201

lib/lvgl/src/lv_widgets/lv_arc.c,2895
#define LV_OBJX_NAME LV_OBJX_NAME22,401
static lv_signal_cb_t ancestor_signal;ancestor_signal42,1233
static lv_design_cb_t ancestor_design;ancestor_design43,1272
lv_obj_t * lv_arc_create(lv_obj_t * par, const lv_obj_t * copy)lv_arc_create59,1686
void lv_arc_set_start_angle(lv_obj_t * arc, uint16_t start)lv_arc_set_start_angle158,4852
void lv_arc_set_end_angle(lv_obj_t * arc, uint16_t end)lv_arc_set_end_angle193,6073
void lv_arc_set_angles(lv_obj_t * arc, uint16_t start, uint16_t end)lv_arc_set_angles228,7253
void lv_arc_set_bg_start_angle(lv_obj_t * arc, uint16_t start)lv_arc_set_bg_start_angle250,7888
void lv_arc_set_bg_end_angle(lv_obj_t * arc, uint16_t end)lv_arc_set_bg_end_angle285,9073
void lv_arc_set_bg_angles(lv_obj_t * arc, uint16_t start, uint16_t end)lv_arc_set_bg_angles321,10281
void lv_arc_set_rotation(lv_obj_t * arc, uint16_t rotation_angle)lv_arc_set_rotation345,10902
void lv_arc_set_type(lv_obj_t * arc, lv_arc_type_t type)lv_arc_set_type362,11228
void lv_arc_set_value(lv_obj_t * arc, int16_t value)lv_arc_set_value396,12249
void lv_arc_set_range(lv_obj_t * arc, int16_t min, int16_t max)lv_arc_set_range419,12867
void lv_arc_set_chg_rate(lv_obj_t * arc, uint16_t rate)lv_arc_set_chg_rate445,13510
void lv_arc_set_adjustable(lv_obj_t * arc, bool adjustable)lv_arc_set_adjustable458,13855
uint16_t lv_arc_get_angle_start(lv_obj_t * arc)lv_arc_get_angle_start481,14381
uint16_t lv_arc_get_angle_end(lv_obj_t * arc)lv_arc_get_angle_end495,14671
uint16_t lv_arc_get_bg_angle_start(lv_obj_t * arc)lv_arc_get_bg_angle_start509,14972
uint16_t lv_arc_get_bg_angle_end(lv_obj_t * arc)lv_arc_get_bg_angle_end523,15275
int16_t lv_arc_get_value(const lv_obj_t * arc)lv_arc_get_value538,15555
int16_t lv_arc_get_min_value(const lv_obj_t * arc)lv_arc_get_min_value551,15844
int16_t lv_arc_get_max_value(const lv_obj_t * arc)lv_arc_get_max_value564,16153
bool lv_arc_is_dragged(const lv_obj_t * arc)lv_arc_is_dragged577,16481
lv_arc_type_t lv_arc_get_type(const lv_obj_t * arc)lv_arc_get_type590,16752
bool lv_arc_get_adjustable(lv_obj_t * arc)lv_arc_get_adjustable603,17079
static lv_design_res_t lv_arc_design(lv_obj_t * arc, const lv_area_t * clip_area, lv_design_mode_t mode)lv_arc_design633,17960
static lv_res_t lv_arc_signal(lv_obj_t * arc, lv_signal_t sign, void * param)lv_arc_signal707,20754
static lv_style_list_t * lv_arc_get_style(lv_obj_t * arc, uint8_t part)lv_arc_get_style884,27173
static void inv_arc_area(lv_obj_t * arc, uint16_t start_angle, uint16_t end_angle, lv_arc_part_t part)inv_arc_area909,27756
static void get_center(lv_obj_t * arc, lv_point_t * center, lv_coord_t * arc_r)get_center1033,34055
static void get_knob_area(lv_obj_t * arc, const lv_point_t * center, lv_coord_t r, lv_area_t * knob_area)get_knob_area1052,34810
static void value_update(lv_obj_t * arc)value_update1090,36460

lib/lvgl/src/lv_widgets/lv_led.h,261
#define LV_LED_HLV_LED_H7,47
    uint8_t bright; /*Current brightness of the LED (0..255)*/bright34,478
} lv_led_ext_t;lv_led_ext_t35,541
    LV_LED_PART_MAIN = LV_OBJ_PART_MAIN,LV_LED_PART_MAIN39,582
typedef uint8_t lv_led_part_t;lv_led_part_t41,626

lib/lvgl/src/lv_widgets/lv_bar.h,1708
#define LV_BAR_HLV_BAR_H7,47
#define LV_BAR_ANIM_STATE_START LV_BAR_ANIM_STATE_START31,513
#define LV_BAR_ANIM_STATE_END LV_BAR_ANIM_STATE_END34,645
#define LV_BAR_ANIM_STATE_INV LV_BAR_ANIM_STATE_INV37,720
#define LV_BAR_ANIM_STATE_NORM LV_BAR_ANIM_STATE_NORM40,811
    LV_BAR_TYPE_NORMAL,LV_BAR_TYPE_NORMAL47,919
    LV_BAR_TYPE_SYMMETRICAL,LV_BAR_TYPE_SYMMETRICAL48,943
    LV_BAR_TYPE_CUSTOMLV_BAR_TYPE_CUSTOM49,972
typedef uint8_t lv_bar_type_t;lv_bar_type_t51,998
    lv_obj_t * bar;bar55,1068
    lv_anim_value_t anim_start;anim_start56,1088
    lv_anim_value_t anim_end;anim_end57,1120
    lv_anim_value_t anim_state;anim_state58,1150
} lv_bar_anim_t;lv_bar_anim_t59,1182
    int16_t cur_value; /*Current value of the bar*/cur_value67,1331
    int16_t min_value; /*Minimum value of the bar*/min_value68,1383
    int16_t max_value; /*Maximum value of the bar*/max_value69,1435
    int16_t start_value; /*Start value of the bar*/start_value70,1487
    lv_area_t indic_area;   /*Save the indicator area. MIght be used by derived types*/indic_area71,1539
    lv_anim_value_t anim_time;anim_time73,1648
    lv_bar_anim_t cur_value_anim;cur_value_anim74,1679
    lv_bar_anim_t start_value_anim;start_value_anim75,1713
    uint8_t type : 2;           /*Type of bar*/type77,1756
    lv_style_list_t style_indic; /*Style of the indicator*/style_indic78,1804
} lv_bar_ext_t;lv_bar_ext_t79,1864
    LV_BAR_PART_BG, /** Bar background style. */LV_BAR_PART_BG83,1905
    LV_BAR_PART_INDIC, /** Bar fill area style. */LV_BAR_PART_INDIC84,1954
    _LV_BAR_PART_VIRTUAL_LAST_LV_BAR_PART_VIRTUAL_LAST85,2005
typedef uint8_t lv_bar_part_t;lv_bar_part_t87,2038

lib/lvgl/src/lv_widgets/lv_btnmatrix.c,4116
#define LV_OBJX_NAME LV_OBJX_NAME23,442
#define BTN_EXTRA_CLICK_AREA_MAX BTN_EXTRA_CLICK_AREA_MAX24,478
static const char * lv_btnmatrix_def_map[] = {"Btn1", "Btn2", "Btn3", "\n", "Btn4", "Btn5", ""};lv_btnmatrix_def_map52,1776
static lv_design_cb_t ancestor_design_f;ancestor_design_f54,1874
static lv_signal_cb_t ancestor_signal;ancestor_signal55,1915
lv_obj_t * lv_btnmatrix_create(lv_obj_t * par, const lv_obj_t * copy)lv_btnmatrix_create72,2373
void lv_btnmatrix_set_map(lv_obj_t * btnm, const char * map[])lv_btnmatrix_set_map138,4591
void lv_btnmatrix_set_ctrl_map(lv_obj_t * btnm, const lv_btnmatrix_ctrl_t ctrl_map[])lv_btnmatrix_set_ctrl_map273,10681
void lv_btnmatrix_set_focused_btn(lv_obj_t * btnm, uint16_t id)lv_btnmatrix_set_focused_btn288,11193
void lv_btnmatrix_set_recolor(const lv_obj_t * btnm, bool en)lv_btnmatrix_set_recolor308,11678
void lv_btnmatrix_set_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnmatrix_ctrl_t ctrl)lv_btnmatrix_set_btn_ctrl323,12087
void lv_btnmatrix_clear_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnmatrix_ctrl_t ctrl)lv_btnmatrix_clear_btn_ctrl346,12819
void lv_btnmatrix_set_btn_ctrl_all(lv_obj_t * btnm, lv_btnmatrix_ctrl_t ctrl)lv_btnmatrix_set_btn_ctrl_all363,13339
void lv_btnmatrix_clear_btn_ctrl_all(lv_obj_t * btnm, lv_btnmatrix_ctrl_t ctrl)lv_btnmatrix_clear_btn_ctrl_all380,13897
void lv_btnmatrix_set_btn_width(lv_obj_t * btnm, uint16_t btn_id, uint8_t width)lv_btnmatrix_set_btn_width400,14657
void lv_btnmatrix_set_one_check(lv_obj_t * btnm, bool one_chk)lv_btnmatrix_set_one_check420,15378
void lv_btnmatrix_set_align(lv_obj_t * btnm, lv_label_align_t align)lv_btnmatrix_set_align436,15882
const char ** lv_btnmatrix_get_map_array(const lv_obj_t * btnm)lv_btnmatrix_get_map_array457,16341
bool lv_btnmatrix_get_recolor(const lv_obj_t * btnm)lv_btnmatrix_get_recolor470,16698
uint16_t lv_btnmatrix_get_active_btn(const lv_obj_t * btnm)lv_btnmatrix_get_active_btn485,17185
const char * lv_btnmatrix_get_active_btn_text(const lv_obj_t * btnm)lv_btnmatrix_get_active_btn_text499,17609
uint16_t lv_btnmatrix_get_focused_btn(const lv_obj_t * btnm)lv_btnmatrix_get_focused_btn518,18208
const char * lv_btnmatrix_get_btn_text(const lv_obj_t * btnm, uint16_t btn_id)lv_btnmatrix_get_btn_text533,18651
bool lv_btnmatrix_get_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnmatrix_ctrl_t ctrl)lv_btnmatrix_get_btn_ctrl564,19639
bool lv_btnmatrix_get_one_check(const lv_obj_t * btnm)lv_btnmatrix_get_one_check580,20075
lv_label_align_t lv_btnmatrix_get_align(const lv_obj_t * btnm)lv_btnmatrix_get_align594,20419
static lv_design_res_t lv_btnmatrix_design(lv_obj_t * btnm, const lv_area_t * clip_area, lv_design_mode_t mode)lv_btnmatrix_design629,21524
static lv_res_t lv_btnmatrix_signal(lv_obj_t * btnm, lv_signal_t sign, void * param)lv_btnmatrix_signal842,30685
static lv_style_list_t * lv_btnmatrix_get_style(lv_obj_t * btnm, uint8_t part)lv_btnmatrix_get_style1110,42433
static void allocate_btn_areas_and_controls(const lv_obj_t * btnm, const char ** map)allocate_btn_areas_and_controls1137,43123
static uint8_t get_button_width(lv_btnmatrix_ctrl_t ctrl_bits)get_button_width1180,44412
static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)button_is_hidden1186,44560
static bool button_is_repeat_disabled(lv_btnmatrix_ctrl_t ctrl_bits)button_is_repeat_disabled1191,44691
static bool button_is_inactive(lv_btnmatrix_ctrl_t ctrl_bits)button_is_inactive1196,44834
static bool button_is_click_trig(lv_btnmatrix_ctrl_t ctrl_bits)button_is_click_trig1201,44969
static bool button_is_tgl_enabled(lv_btnmatrix_ctrl_t ctrl_bits)button_is_tgl_enabled1206,45108
static bool button_get_tgl_state(lv_btnmatrix_ctrl_t ctrl_bits)button_get_tgl_state1211,45247
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)get_button_from_point1222,45603
static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)invalidate_button_area1272,47897
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)make_one_button_toggled1298,48679

lib/lvgl/src/lv_widgets/lv_cont.c,1720
#define LV_OBJX_NAME LV_OBJX_NAME28,499
    #define LV_LAYOUT_MAX_RECURSION LV_LAYOUT_MAX_RECURSION31,563
static lv_design_cb_t ancestor_design;ancestor_design54,1328
static lv_signal_cb_t ancestor_signal;ancestor_signal55,1367
lv_obj_t * lv_cont_create(lv_obj_t * par, const lv_obj_t * copy)lv_cont_create71,1806
void lv_cont_set_layout(lv_obj_t * cont, lv_layout_t layout)lv_cont_set_layout136,3634
void lv_cont_set_fit4(lv_obj_t * cont, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)lv_cont_set_fit4158,4320
lv_layout_t lv_cont_get_layout(const lv_obj_t * cont)lv_cont_get_layout186,5095
lv_fit_t lv_cont_get_fit_left(const lv_obj_t * cont)lv_cont_get_fit_left199,5396
lv_fit_t lv_cont_get_fit_right(const lv_obj_t * cont)lv_cont_get_fit_right212,5699
lv_fit_t lv_cont_get_fit_top(const lv_obj_t * cont)lv_cont_get_fit_top225,6002
lv_fit_t lv_cont_get_fit_bottom(const lv_obj_t * cont)lv_cont_get_fit_bottom238,6304
static lv_res_t lv_cont_signal(lv_obj_t * cont, lv_signal_t sign, void * param)lv_cont_signal257,6850
static lv_style_list_t * lv_cont_get_style(lv_obj_t * cont, uint8_t type)lv_cont_get_style296,8170
static void lv_cont_refr_layout(lv_obj_t * cont)lv_cont_refr_layout314,8593
static void lv_cont_layout_col(lv_obj_t * cont)lv_cont_layout_col345,9605
static void lv_cont_layout_row(lv_obj_t * cont)lv_cont_layout_row399,11633
static void lv_cont_layout_center(lv_obj_t * cont)lv_cont_layout_center455,13782
static void lv_cont_layout_pretty(lv_obj_t * cont)lv_cont_layout_pretty493,15080
static void lv_cont_layout_grid(lv_obj_t * cont)lv_cont_layout_grid627,21646
static void lv_cont_refr_autofit(lv_obj_t * cont)lv_cont_refr_autofit661,22932

lib/lvgl/src/lv_widgets/lv_page.h,5341
#define LV_PAGE_HLV_PAGE_H7,49
    LV_SCROLLBAR_MODE_OFF    = 0x0, /**< Never show scroll bars*/LV_SCROLLBAR_MODE_OFF39,657
    LV_SCROLLBAR_MODE_ON     = 0x1, /**< Always show scroll bars*/LV_SCROLLBAR_MODE_ON40,723
    LV_SCROLLBAR_MODE_DRAG   = 0x2, /**< Show scroll bars when page is being dragged*/LV_SCROLLBAR_MODE_DRAG41,790
    LV_SCROLLBAR_MODE_AUTO   = 0x3, /**< Show scroll bars when the scrollable container is large enough to be scrolled*/LV_SCROLLBAR_MODE_AUTO42,877
    LV_SCROLLBAR_MODE_HIDE   = 0x4, /**< Hide the scroll bar temporally*/LV_SCROLLBAR_MODE_HIDE43,998
    LV_SCROLLBAR_MODE_UNHIDE = 0x8, /**< Unhide the previously hidden scroll bar. Recover original mode too*/LV_SCROLLBAR_MODE_UNHIDE44,1072
typedef uint8_t lv_scrollbar_mode_t;lv_scrollbar_mode_t46,1185
enum { LV_PAGE_EDGE_LEFT = 0x1, LV_PAGE_EDGE_TOP = 0x2, LV_PAGE_EDGE_RIGHT = 0x4, LV_PAGE_EDGE_BOTTOM = 0x8 };LV_PAGE_EDGE_LEFT49,1273
enum { LV_PAGE_EDGE_LEFT = 0x1, LV_PAGE_EDGE_TOP = 0x2, LV_PAGE_EDGE_RIGHT = 0x4, LV_PAGE_EDGE_BOTTOM = 0x8 };LV_PAGE_EDGE_TOP49,1273
enum { LV_PAGE_EDGE_LEFT = 0x1, LV_PAGE_EDGE_TOP = 0x2, LV_PAGE_EDGE_RIGHT = 0x4, LV_PAGE_EDGE_BOTTOM = 0x8 };LV_PAGE_EDGE_RIGHT49,1273
enum { LV_PAGE_EDGE_LEFT = 0x1, LV_PAGE_EDGE_TOP = 0x2, LV_PAGE_EDGE_RIGHT = 0x4, LV_PAGE_EDGE_BOTTOM = 0x8 };LV_PAGE_EDGE_BOTTOM49,1273
typedef uint8_t lv_page_edge_t;lv_page_edge_t50,1384
    lv_cont_ext_t bg; /*Ext. of ancestor*/bg54,1451
    lv_obj_t * scrl; /*The scrollable object on the background*/scrl56,1526
        lv_style_list_t style; /*Style of scrollbars*/style58,1604
        lv_area_t hor_area;       /*Horizontal scrollbar area relative to the page. (Handled by the library) */hor_area59,1659
        lv_area_t ver_area;       /*Vertical scrollbar area relative to the page (Handled by the library)*/ver_area60,1771
        uint8_t hor_draw : 1;     /*1: horizontal scrollbar is visible now (Handled by the library)*/hor_draw61,1879
        uint8_t ver_draw : 1;     /*1: vertical scrollbar is visible now (Handled by the library)*/ver_draw62,1981
        lv_scrollbar_mode_t mode : 3;    /*Scrollbar visibility from 'lv_scrollbar_mode_t'*/mode63,2081
    } scrlbar;scrlbar64,2174
        lv_anim_value_t state;    /*Store the current size of the edge flash effect*/state67,2223
        lv_style_list_t style; /*Style of edge flash effect (usually homogeneous circle)*/style68,2309
        uint8_t enabled : 1;      /*1: Show a flash animation on the edge*/enabled69,2400
        uint8_t top_ip : 1;       /*Used internally to show that top most position is reached (flash is Intop_ip70,2476
        uint8_t bottom_ip : 1;    /*Used internally to show that bottom most position is reached (flashbottom_ip72,2632
        uint8_t right_ip : 1;     /*Used internally to show that right most position is reached (flashright_ip74,2791
        uint8_t left_ip : 1;      /*Used internally to show that left most position is reached (flash isleft_ip76,2949
    } edge_flash;edge_flash78,3106
    uint16_t anim_time; /*Scroll animation time*/anim_time80,3125
    lv_obj_t * scroll_prop_obj;          /*Pointer to child page from where the scroll is being propagated */scroll_prop_obj82,3182
    uint8_t scroll_prop : 1;   /*The direction of the scroll propagation*/scroll_prop83,3292
} lv_page_ext_t;lv_page_ext_t84,3367
    LV_PAGE_PART_BG = LV_CONT_PART_MAIN,LV_PAGE_PART_BG87,3392
    LV_PAGE_PART_SCROLLBAR = _LV_OBJ_PART_VIRTUAL_LAST,LV_PAGE_PART_SCROLLBAR88,3433
    LV_PAGE_PART_EDGE_FLASH,LV_PAGE_PART_EDGE_FLASH89,3489
    _LV_PAGE_PART_VIRTUAL_LAST,_LV_PAGE_PART_VIRTUAL_LAST90,3518
    LV_PAGE_PART_SCROLLABLE = _LV_OBJ_PART_REAL_LAST,LV_PAGE_PART_SCROLLABLE92,3551
    _LV_PAGE_PART_REAL_LAST,_LV_PAGE_PART_REAL_LAST93,3605
typedef uint8_t lv_part_style_t;lv_part_style_t95,3637
static inline void lv_page_set_scrollable_fit4(lv_obj_t * page, lv_fit_t left, lv_fit_t right, lv_fit_t top,lv_page_set_scrollable_fit4173,6215
static inline void lv_page_set_scrollable_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)lv_page_set_scrollable_fit2186,6737
static inline void lv_page_set_scrollable_fit(lv_obj_t * page, lv_fit_t fit)lv_page_set_scrollable_fit197,7091
static inline void lv_page_set_scrl_width(lv_obj_t * page, lv_coord_t w)lv_page_set_scrl_width207,7414
static inline void lv_page_set_scrl_height(lv_obj_t * page, lv_coord_t h)lv_page_set_scrl_height217,7732
static inline void lv_page_set_scrl_layout(lv_obj_t * page, lv_layout_t layout)lv_page_set_scrl_layout227,8018
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)lv_page_get_scrl_width302,10612
static inline lv_coord_t lv_page_get_scrl_height(const lv_obj_t * page)lv_page_get_scrl_height312,10882
static inline lv_layout_t lv_page_get_scrl_layout(const lv_obj_t * page)lv_page_get_scrl_layout322,11162
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)lv_page_get_scrl_fit_left332,11410
static inline lv_fit_t lv_page_get_scrl_fit_right(const lv_obj_t * page)lv_page_get_scrl_fit_right342,11660
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)lv_page_get_scrl_fit_top352,11910
static inline lv_fit_t lv_page_get_scrl_fit_bottom(const lv_obj_t * page)lv_page_get_scrl_fit_bottom362,12159

lib/lvgl/src/lv_widgets/lv_spinbox.c,1659
#define LV_OBJX_NAME LV_OBJX_NAME20,344
static lv_signal_cb_t ancestor_signal;ancestor_signal36,807
static lv_design_cb_t ancestor_design;ancestor_design37,846
lv_obj_t * lv_spinbox_create(lv_obj_t * par, const lv_obj_t * copy)lv_spinbox_create53,1276
void lv_spinbox_set_rollover(lv_obj_t * spinbox, bool b)lv_spinbox_set_rollover128,3891
void lv_spinbox_set_value(lv_obj_t * spinbox, int32_t i)lv_spinbox_set_value142,4173
void lv_spinbox_set_digit_format(lv_obj_t * spinbox, uint8_t digit_count, uint8_t separator_position)lv_spinbox_set_digit_format164,4815
void lv_spinbox_set_step(lv_obj_t * spinbox, uint32_t step)lv_spinbox_set_step193,5805
void lv_spinbox_set_range(lv_obj_t * spinbox, int32_t range_min, int32_t range_max)lv_spinbox_set_range211,6223
void lv_spinbox_set_padding_left(lv_obj_t * spinbox, uint8_t padding)lv_spinbox_set_padding_left238,6966
bool lv_spinbox_get_rollover(lv_obj_t * spinbox)lv_spinbox_get_rollover255,7375
int32_t lv_spinbox_get_value(lv_obj_t * spinbox)lv_spinbox_get_value269,7743
void lv_spinbox_step_next(lv_obj_t * spinbox)lv_spinbox_step_next286,8076
void lv_spinbox_step_prev(lv_obj_t * spinbox)lv_spinbox_step_prev305,8477
void lv_spinbox_increment(lv_obj_t * spinbox)lv_spinbox_increment322,8979
void lv_spinbox_decrement(lv_obj_t * spinbox)lv_spinbox_decrement349,9670
static lv_res_t lv_spinbox_signal(lv_obj_t * spinbox, lv_signal_t sign, void * param)lv_spinbox_signal382,10640
static lv_style_list_t * lv_spinbox_get_style(lv_obj_t * ta, uint8_t part)lv_spinbox_get_style506,14792
static void lv_spinbox_updatevalue(lv_obj_t * spinbox)lv_spinbox_updatevalue526,15298

lib/lvgl/src/lv_widgets/lv_roller.c,2834
#define LV_OBJX_NAME LV_OBJX_NAME20,341
    #undef LV_ROLLER_DEF_ANIM_TIMELV_ROLLER_DEF_ANIM_TIME23,401
    #define LV_ROLLER_DEF_ANIM_TIME LV_ROLLER_DEF_ANIM_TIME24,436
static lv_signal_cb_t ancestor_signal;ancestor_signal53,1657
static lv_design_cb_t ancestor_label_design;ancestor_label_design54,1696
static lv_signal_cb_t ancestor_scrl_signal;ancestor_scrl_signal55,1741
lv_obj_t * lv_roller_create(lv_obj_t * par, const lv_obj_t * copy)lv_roller_create71,2172
void lv_roller_set_options(lv_obj_t * roller, const char * options, lv_roller_mode_t mode)lv_roller_set_options155,5255
void lv_roller_set_align(lv_obj_t * roller, lv_label_align_t align)lv_roller_set_align209,6954
void lv_roller_set_selected(lv_obj_t * roller, uint16_t sel_opt, lv_anim_enable_t anim)lv_roller_set_selected226,7536
void lv_roller_set_visible_row_count(lv_obj_t * roller, uint8_t row_cnt)lv_roller_set_visible_row_count266,8927
void lv_roller_set_auto_fit(lv_obj_t * roller, bool auto_fit)lv_roller_set_auto_fit283,9548
uint16_t lv_roller_get_selected(const lv_obj_t * roller)lv_roller_get_selected300,9993
void lv_roller_get_selected_str(const lv_obj_t * roller, char * buf, uint32_t buf_size)lv_roller_get_selected_str321,10584
uint16_t lv_roller_get_option_cnt(const lv_obj_t * roller)lv_roller_get_option_cnt353,11482
lv_label_align_t lv_roller_get_align(const lv_obj_t * roller)lv_roller_get_align371,12016
bool lv_roller_get_auto_fit(lv_obj_t * roller)lv_roller_get_auto_fit383,12318
const char * lv_roller_get_options(const lv_obj_t * roller)lv_roller_get_options395,12668
static lv_design_res_t lv_roller_design(lv_obj_t * roller, const lv_area_t * clip_area, lv_design_mode_t mode)lv_roller_design417,13400
static lv_design_res_t lv_roller_label_design(lv_obj_t * label, const lv_area_t * clip_area, lv_design_mode_t mode)lv_roller_label_design522,18362
static lv_res_t lv_roller_signal(lv_obj_t * roller, lv_signal_t sign, void * param)lv_roller_signal575,20530
static lv_style_list_t * lv_roller_get_style(lv_obj_t * roller, uint8_t part)lv_roller_get_style685,24569
static lv_res_t lv_roller_scrl_signal(lv_obj_t * roller_scrl, lv_signal_t sign, void * param)lv_roller_scrl_signal713,25423
static void draw_bg(lv_obj_t * roller, const lv_area_t * clip_area)draw_bg782,27840
static void refr_position(lv_obj_t * roller, lv_anim_enable_t anim_en)refr_position837,29786
static lv_res_t release_handler(lv_obj_t * roller)release_handler884,31483
static void refr_width(lv_obj_t * roller)refr_width941,33601
static void refr_height(lv_obj_t * roller)refr_height985,35208
static void inf_normalize(void * scrl)inf_normalize1002,35722
static lv_obj_t * get_label(const lv_obj_t * roller)get_label1030,36986
static void scroll_anim_ready_cb(lv_anim_t * a)scroll_anim_ready_cb1038,37263

lib/lvgl/src/lv_widgets/lv_cpicker.h,1406
#define LV_CPICKER_HLV_CPICKER_H7,55
    LV_CPICKER_TYPE_RECT,LV_CPICKER_TYPE_RECT31,410
    LV_CPICKER_TYPE_DISC,LV_CPICKER_TYPE_DISC32,436
typedef uint8_t lv_cpicker_type_t;lv_cpicker_type_t34,465
    LV_CPICKER_COLOR_MODE_HUE,LV_CPICKER_COLOR_MODE_HUE37,508
    LV_CPICKER_COLOR_MODE_SATURATION,LV_CPICKER_COLOR_MODE_SATURATION38,539
    LV_CPICKER_COLOR_MODE_VALUELV_CPICKER_COLOR_MODE_VALUE39,577
typedef uint8_t lv_cpicker_color_mode_t;lv_cpicker_color_mode_t41,612
    lv_color_hsv_t hsv;hsv47,697
        lv_style_list_t style_list;style_list49,734
        lv_point_t pos;pos50,770
        uint8_t colored     : 1;colored51,794
    } knob;knob53,828
    uint32_t last_click_time;last_click_time54,840
    uint32_t last_change_time;last_change_time55,870
    lv_point_t last_press_point;last_press_point56,901
    lv_cpicker_color_mode_t color_mode  : 2;color_mode57,934
    uint8_t color_mode_fixed            : 1;color_mode_fixed58,979
    lv_cpicker_type_t type              : 1;type59,1024
} lv_cpicker_ext_t;lv_cpicker_ext_t60,1069
    LV_CPICKER_PART_MAIN = LV_OBJ_PART_MAIN,LV_CPICKER_PART_MAIN64,1107
    LV_CPICKER_PART_KNOB = _LV_OBJ_PART_VIRTUAL_LAST,LV_CPICKER_PART_KNOB65,1152
    _LV_CPICKER_PART_VIRTUAL_LAST,_LV_CPICKER_PART_VIRTUAL_LAST66,1206
    _LV_CPICKER_PART_REAL_LAST = _LV_OBJ_PART_REAL_LAST,_LV_CPICKER_PART_REAL_LAST67,1241

lib/lvgl/src/lv_widgets/lv_line.c,870
#define LV_OBJX_NAME LV_OBJX_NAME23,395
static lv_signal_cb_t ancestor_signal;ancestor_signal38,825
lv_obj_t * lv_line_create(lv_obj_t * par, const lv_obj_t * copy)lv_line_create53,1148
void lv_line_set_points(lv_obj_t * line, const lv_point_t point_a[], uint16_t point_num)lv_line_set_points117,3140
void lv_line_set_auto_size(lv_obj_t * line, bool en)lv_line_set_auto_size147,4152
void lv_line_set_y_invert(lv_obj_t * line, bool en)lv_line_set_y_invert167,4780
bool lv_line_get_auto_size(const lv_obj_t * line)lv_line_get_auto_size188,5236
bool lv_line_get_y_invert(const lv_obj_t * line)lv_line_get_y_invert202,5570
static lv_design_res_t lv_line_design(lv_obj_t * line, const lv_area_t * clip_area, lv_design_mode_t mode)lv_line_design225,6334
static lv_res_t lv_line_signal(lv_obj_t * line, lv_signal_t sign, void * param)lv_line_signal276,8091

lib/lvgl/src/lv_widgets/lv_tabview.h,1459
#define LV_TABVIEW_HLV_TABVIEW_H7,55
    LV_TABVIEW_TAB_POS_NONE,LV_TABVIEW_TAB_POS_NONE43,777
    LV_TABVIEW_TAB_POS_TOP,LV_TABVIEW_TAB_POS_TOP44,806
    LV_TABVIEW_TAB_POS_BOTTOM,LV_TABVIEW_TAB_POS_BOTTOM45,834
    LV_TABVIEW_TAB_POS_LEFT,LV_TABVIEW_TAB_POS_LEFT46,865
    LV_TABVIEW_TAB_POS_RIGHTLV_TABVIEW_TAB_POS_RIGHT47,894
typedef uint8_t lv_tabview_btns_pos_t;lv_tabview_btns_pos_t49,926
    lv_obj_t * btns;btns55,1056
    lv_obj_t * indic;indic56,1077
    lv_obj_t * content; /*A background page which holds tab's pages*/content57,1099
    const char ** tab_name_ptr;tab_name_ptr58,1169
    lv_point_t point_last;point_last59,1201
    uint16_t tab_cur;tab_cur60,1228
    uint16_t tab_cnt;tab_cnt61,1250
    uint16_t anim_time;anim_time63,1293
    lv_tabview_btns_pos_t btns_pos : 3;btns_pos65,1324
} lv_tabview_ext_t;lv_tabview_ext_t66,1364
    LV_TABVIEW_PART_BG = LV_OBJ_PART_MAIN,LV_TABVIEW_PART_BG69,1392
    _LV_TABVIEW_PART_VIRTUAL_LAST = _LV_OBJ_PART_VIRTUAL_LAST,_LV_TABVIEW_PART_VIRTUAL_LAST70,1435
    LV_TABVIEW_PART_BG_SCROLLABLE = _LV_OBJ_PART_REAL_LAST,LV_TABVIEW_PART_BG_SCROLLABLE72,1499
    LV_TABVIEW_PART_TAB_BG,LV_TABVIEW_PART_TAB_BG73,1559
    LV_TABVIEW_PART_TAB_BTN,LV_TABVIEW_PART_TAB_BTN74,1587
    LV_TABVIEW_PART_INDIC,LV_TABVIEW_PART_INDIC75,1616
    _LV_TABVIEW_PART_REAL_LAST,_LV_TABVIEW_PART_REAL_LAST76,1643
typedef uint8_t lv_tabview_part_t;lv_tabview_part_t78,1678

lib/lvgl/src/lv_widgets/lv_widgets.mk,0

lib/lvgl/src/lv_widgets/lv_bar.c,2348
#define LV_OBJX_NAME LV_OBJX_NAME24,384
#define LV_BAR_SIZE_MIN LV_BAR_SIZE_MIN26,415
    #define LV_BAR_IS_ANIMATING(LV_BAR_IS_ANIMATING29,541
    #define LV_BAR_GET_ANIM_VALUE(LV_BAR_GET_ANIM_VALUE30,640
    #define LV_BAR_GET_ANIM_VALUE(LV_BAR_GET_ANIM_VALUE32,782
static lv_design_cb_t ancestor_design_f;ancestor_design_f59,1863
static lv_signal_cb_t ancestor_signal;ancestor_signal60,1904
lv_obj_t * lv_bar_create(lv_obj_t * par, const lv_obj_t * copy)lv_bar_create76,2319
void lv_bar_set_value(lv_obj_t * bar, int16_t value, lv_anim_enable_t anim)lv_bar_set_value153,4597
void lv_bar_set_start_value(lv_obj_t * bar, int16_t start_value, lv_anim_enable_t anim)lv_bar_set_start_value182,5534
void lv_bar_set_range(lv_obj_t * bar, int16_t min, int16_t max)lv_bar_set_range209,6411
void lv_bar_set_type(lv_obj_t * bar, lv_bar_type_t type)lv_bar_set_type238,7133
void lv_bar_set_anim_time(lv_obj_t * bar, uint16_t anim_time)lv_bar_set_anim_time255,7558
int16_t lv_bar_get_value(const lv_obj_t * bar)lv_bar_get_value277,8023
int16_t lv_bar_get_start_value(const lv_obj_t * bar)lv_bar_get_start_value290,8352
int16_t lv_bar_get_min_value(const lv_obj_t * bar)lv_bar_get_min_value306,8760
int16_t lv_bar_get_max_value(const lv_obj_t * bar)lv_bar_get_max_value319,9053
lv_bar_type_t lv_bar_get_type(lv_obj_t * bar)lv_bar_get_type332,9314
uint16_t lv_bar_get_anim_time(const lv_obj_t * bar)lv_bar_get_anim_time345,9607
static lv_design_res_t lv_bar_design(lv_obj_t * bar, const lv_area_t * clip_area, lv_design_mode_t mode)lv_bar_design373,10433
static void draw_bg(lv_obj_t * bar, const lv_area_t * clip_area)draw_bg412,12007
static void draw_indic(lv_obj_t * bar, const lv_area_t * clip_area)draw_indic429,12555
static lv_res_t lv_bar_signal(lv_obj_t * bar, lv_signal_t sign, void * param)lv_bar_signal647,21273
static lv_style_list_t * lv_bar_get_style(lv_obj_t * bar, uint8_t part)lv_bar_get_style684,22429
static void lv_bar_anim(lv_bar_anim_t * var, lv_anim_value_t value)lv_bar_anim706,22940
static void lv_bar_anim_ready(lv_anim_t * a)lv_bar_anim_ready712,23078
static void lv_bar_set_value_with_anim(lv_obj_t * bar, int16_t new_value, int16_t * value_ptr,lv_bar_set_value_with_anim724,23457
static void lv_bar_init_anim(lv_obj_t * bar, lv_bar_anim_t * bar_anim)lv_bar_init_anim758,24726

lib/lvgl/src/lv_widgets/lv_btnmatrix.h,2446
#define LV_BTNMATRIX_HLV_BTNMATRIX_H7,54
#define LV_BTNMATRIX_WIDTH_MASK LV_BTNMATRIX_WIDTH_MASK27,380
#define LV_BTNMATRIX_BTN_NONE LV_BTNMATRIX_BTN_NONE28,419
LV_EXPORT_CONST_INT(LV_BTNMATRIX_BTN_NONE);LV_BTNMATRIX_BTN_NONE30,457
    LV_BTNMATRIX_CTRL_HIDDEN     = 0x0008, /**< Button hidden */LV_BTNMATRIX_CTRL_HIDDEN39,689
    LV_BTNMATRIX_CTRL_NO_REPEAT  = 0x0010, /**< Do not repeat press this button. */LV_BTNMATRIX_CTRL_NO_REPEAT40,754
    LV_BTNMATRIX_CTRL_DISABLED   = 0x0020, /**< Disable this button. */LV_BTNMATRIX_CTRL_DISABLED41,838
    LV_BTNMATRIX_CTRL_CHECKABLE  = 0x0040, /**< Button *can* be toggled. */LV_BTNMATRIX_CTRL_CHECKABLE42,910
    LV_BTNMATRIX_CTRL_CHECK_STATE  = 0x0080, /**< Button is currently toggled (e.g. checked). */LV_BTNMATRIX_CTRL_CHECK_STATE43,986
    LV_BTNMATRIX_CTRL_CLICK_TRIG = 0x0100, /**< 1: Send LV_EVENT_SELECTED on CLICK, 0: Send LV_EVENT_SELECTED on PRESS*/LV_BTNMATRIX_CTRL_CLICK_TRIG44,1083
typedef uint16_t lv_btnmatrix_ctrl_t;lv_btnmatrix_ctrl_t46,1207
    const char ** map_p;                              /*Pointer to the current map*/map_p52,1368
    lv_area_t * button_areas;                         /*Array of areas of buttons*/button_areas53,1453
    lv_btnmatrix_ctrl_t * ctrl_bits;                       /*Array of control bytes*/ctrl_bits54,1537
    lv_style_list_t style_btn;                     /*Styles of buttons in each state*/style_btn55,1623
    uint16_t btn_cnt;                                 /*Number of button in 'map_p'(Handled by the library)*/btn_cnt56,1710
    uint16_t btn_id_pr;                               /*Index of the currently pressed button or LV_BTNMATRIX_BTN_NONE*/btn_id_pr57,1820
    uint16_t btn_id_focused;                          /*Index of the currently focused button or LV_BTNMATRIX_BTN_NONE*/btn_id_focused58,1941
    uint16_t btn_id_act;    /*Index of the active button (being pressed/released etc) or LV_BTNMATRIX_BTN_NONE */btn_id_act59,2062
    uint8_t recolor : 1;    /*Enable button recoloring*/recolor60,2176
    uint8_t one_check : 1;  /*Single button toggled at once*/one_check61,2233
    uint8_t align : 2;      /*Align type from 'lv_label_align_t'*/align62,2295
} lv_btnmatrix_ext_t;lv_btnmatrix_ext_t63,2362
    LV_BTNMATRIX_PART_BG,LV_BTNMATRIX_PART_BG66,2392
    LV_BTNMATRIX_PART_BTN,LV_BTNMATRIX_PART_BTN67,2418
typedef uint8_t lv_btnmatrix_part_t;lv_btnmatrix_part_t69,2448

lib/lvgl/src/lv_widgets/lv_slider.h,2186
#define LV_SLIDER_HLV_SLIDER_H7,53
    LV_SLIDER_TYPE_NORMAL,LV_SLIDER_TYPE_NORMAL37,562
    LV_SLIDER_TYPE_SYMMETRICAL,LV_SLIDER_TYPE_SYMMETRICAL38,589
    LV_SLIDER_TYPE_RANGELV_SLIDER_TYPE_RANGE39,621
typedef uint8_t lv_slider_type_t;lv_slider_type_t41,649
    lv_bar_ext_t bar; /*Ext. of ancestor*/bar45,720
    lv_style_list_t style_knob; /*Style of the knob*/style_knob47,795
    lv_area_t left_knob_area;left_knob_area48,849
    lv_area_t right_knob_area;right_knob_area49,879
    int16_t * value_to_set; /* Which bar value to set */value_to_set50,910
    uint8_t dragging : 1;       /*1: the slider is being dragged*/dragging51,967
    uint8_t left_knob_focus : 1; /*1: with encoder now the right knob can be adjusted*/left_knob_focus52,1034
} lv_slider_ext_t;lv_slider_ext_t53,1122
    LV_SLIDER_PART_BG, /** Slider background style. */LV_SLIDER_PART_BG57,1181
    LV_SLIDER_PART_INDIC, /** Slider indicator (filled area) style. */LV_SLIDER_PART_INDIC58,1236
    LV_SLIDER_PART_KNOB, /** Slider knob style. */LV_SLIDER_PART_KNOB59,1307
static inline void lv_slider_set_value(lv_obj_t * slider, int16_t value, lv_anim_enable_t anim)lv_slider_set_value84,2035
static inline void lv_slider_set_left_value(lv_obj_t * slider, int16_t left_value, lv_anim_enable_t anim)lv_slider_set_left_value95,2413
static inline void lv_slider_set_range(lv_obj_t * slider, int16_t min, int16_t max)lv_slider_set_range106,2735
static inline void lv_slider_set_anim_time(lv_obj_t * slider, uint16_t anim_time)lv_slider_set_anim_time116,3009
static inline void lv_slider_set_type(lv_obj_t * slider, lv_slider_type_t type)lv_slider_set_type127,3370
static inline int16_t lv_slider_get_left_value(const lv_obj_t * slider)lv_slider_get_left_value153,4172
static inline int16_t lv_slider_get_min_value(const lv_obj_t * slider)lv_slider_get_min_value163,4424
static inline int16_t lv_slider_get_max_value(const lv_obj_t * slider)lv_slider_get_max_value173,4673
static inline uint16_t lv_slider_get_anim_time(lv_obj_t * slider)lv_slider_get_anim_time190,5130
static inline lv_slider_type_t lv_slider_get_type(lv_obj_t * slider)lv_slider_get_type200,5392

lib/lvgl/src/lv_widgets/lv_cont.h,2465
#define LV_CONT_HLV_CONT_H7,49
    LV_LAYOUT_OFF = 0, /**< No layout */LV_LAYOUT_OFF32,429
    LV_LAYOUT_CENTER, /**< Center objects */LV_LAYOUT_CENTER33,470
    LV_LAYOUT_COLUMN_LEFT,      /**< Column left align*/LV_LAYOUT_COLUMN_LEFT41,683
    LV_LAYOUT_COLUMN_MID,       /**< Column middle align*/LV_LAYOUT_COLUMN_MID42,740
    LV_LAYOUT_COLUMN_RIGHT,     /**< Column right align*/LV_LAYOUT_COLUMN_RIGHT43,799
    LV_LAYOUT_ROW_TOP,          /**< Row top align*/LV_LAYOUT_ROW_TOP53,1178
    LV_LAYOUT_ROW_MID,          /**< Row middle align*/LV_LAYOUT_ROW_MID54,1231
    LV_LAYOUT_ROW_BOTTOM,       /**< Row bottom align*/LV_LAYOUT_ROW_BOTTOM55,1287
    LV_LAYOUT_PRETTY_TOP,       /**< Row top align*/LV_LAYOUT_PRETTY_TOP67,1745
    LV_LAYOUT_PRETTY_MID,       /**< Row middle align*/LV_LAYOUT_PRETTY_MID68,1798
    LV_LAYOUT_PRETTY_BOTTOM,    /**< Row bottom align*/LV_LAYOUT_PRETTY_BOTTOM69,1854
    LV_LAYOUT_GRID,   /**< Align same-sized object into a grid*/LV_LAYOUT_GRID81,2414
    _LV_LAYOUT_LAST_LV_LAYOUT_LAST83,2480
typedef uint8_t lv_layout_t;lv_layout_t85,2503
    LV_FIT_NONE,  /**< Do not change the size automatically*/LV_FIT_NONE91,2600
    LV_FIT_TIGHT, /**< Shrink wrap around the children */LV_FIT_TIGHT92,2662
    LV_FIT_PARENT, /**< Align the size to the parent's edge*/LV_FIT_PARENT93,2720
    LV_FIT_MAX,  /**< Align the size to the parent's edge first but if there is an object out of itLV_FIT_MAX94,2782
    _LV_FIT_LAST_LV_FIT_LAST96,2922
typedef uint8_t lv_fit_t;lv_fit_t98,2942
    lv_layout_t layout : 4;     /*A layout from 'lv_layout_t' enum*/layout103,3095
    lv_fit_t fit_left : 2;   /*A fit type from `lv_fit_t` enum */fit_left104,3164
    lv_fit_t fit_right : 2;  /*A fit type from `lv_fit_t` enum */fit_right105,3230
    lv_fit_t fit_top : 2;    /*A fit type from `lv_fit_t` enum */fit_top106,3296
    lv_fit_t fit_bottom : 2; /*A fit type from `lv_fit_t` enum */fit_bottom107,3362
} lv_cont_ext_t;lv_cont_ext_t108,3428
    LV_CONT_PART_MAIN = LV_OBJ_PART_MAIN,LV_CONT_PART_MAIN112,3479
    _LV_CONT_PART_VIRTUAL_LAST = _LV_OBJ_PART_VIRTUAL_LAST,_LV_CONT_PART_VIRTUAL_LAST113,3521
    _LV_CONT_PART_REAL_LAST = _LV_OBJ_PART_REAL_LAST,_LV_CONT_PART_REAL_LAST114,3581
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)lv_cont_set_fit2158,5048
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)lv_cont_set_fit169,5388

lib/lvgl/src/lv_widgets/lv_linemeter.c,1761
#define LV_OBJX_NAME LV_OBJX_NAME21,382
static lv_signal_cb_t ancestor_signal;ancestor_signal36,831
lv_obj_t * lv_linemeter_create(lv_obj_t * par, const lv_obj_t * copy)lv_linemeter_create53,1277
void lv_linemeter_set_value(lv_obj_t * lmeter, int32_t value)lv_linemeter_set_value117,3313
void lv_linemeter_set_range(lv_obj_t * lmeter, int32_t min, int32_t max)lv_linemeter_set_range145,4247
void lv_linemeter_set_scale(lv_obj_t * lmeter, uint16_t angle, uint16_t line_cnt)lv_linemeter_set_scale171,4997
void lv_linemeter_set_angle_offset(lv_obj_t * lmeter, uint16_t angle)lv_linemeter_set_angle_offset189,5547
void lv_linemeter_set_mirror(lv_obj_t * lmeter, bool mirror)lv_linemeter_set_mirror204,5956
int32_t lv_linemeter_get_value(const lv_obj_t * lmeter)lv_linemeter_get_value223,6381
int32_t lv_linemeter_get_min_value(const lv_obj_t * lmeter)lv_linemeter_get_min_value236,6715
int32_t lv_linemeter_get_max_value(const lv_obj_t * lmeter)lv_linemeter_get_max_value249,7053
uint16_t lv_linemeter_get_line_count(const lv_obj_t * lmeter)lv_linemeter_get_line_count262,7380
uint16_t lv_linemeter_get_scale_angle(const lv_obj_t * lmeter)lv_linemeter_get_scale_angle275,7704
uint16_t lv_linemeter_get_angle_offset(lv_obj_t * lmeter)lv_linemeter_get_angle_offset288,8030
bool lv_linemeter_get_mirror(lv_obj_t * lmeter)lv_linemeter_get_mirror300,8316
void lv_linemeter_draw_scale(lv_obj_t * lmeter, const lv_area_t * clip_area, uint8_t part)lv_linemeter_draw_scale307,8456
static lv_design_res_t lv_linemeter_design(lv_obj_t * lmeter, const lv_area_t * clip_area, lv_design_mode_t mode)lv_linemeter_design510,16506
static lv_res_t lv_linemeter_signal(lv_obj_t * lmeter, lv_signal_t sign, void * param)lv_linemeter_signal538,17555

lib/lvgl/src/lv_widgets/lv_msgbox.h,622
#define LV_MSGBOX_HLV_MSGBOX_H7,51
    lv_cont_ext_t bg; /*Ext. of ancestor*/bg48,875
    lv_obj_t * text; /*Text of the message box*/text50,950
    lv_obj_t * btnm; /*Button matrix for the buttons*/btnm51,999
    uint16_t anim_time; /*Duration of close animation [ms] (0: no animation)*/anim_time53,1075
} lv_msgbox_ext_t;lv_msgbox_ext_t55,1161
    LV_MSGBOX_PART_BG = LV_CONT_PART_MAIN,LV_MSGBOX_PART_BG59,1215
    LV_MSGBOX_PART_BTN_BG = _LV_CONT_PART_REAL_LAST,LV_MSGBOX_PART_BTN_BG61,1259
    LV_MSGBOX_PART_BTN,LV_MSGBOX_PART_BTN62,1312
typedef uint8_t lv_msgbox_style_t;lv_msgbox_style_t64,1339

lib/lvgl/src/lv_widgets/lv_checkbox.c,959
#define LV_OBJX_NAME LV_OBJX_NAME19,309
static lv_signal_cb_t ancestor_signal;ancestor_signal34,714
lv_obj_t * lv_checkbox_create(lv_obj_t * par, const lv_obj_t * copy)lv_checkbox_create50,1153
void lv_checkbox_set_text(lv_obj_t * cb, const char * txt)lv_checkbox_set_text113,2952
void lv_checkbox_set_text_static(lv_obj_t * cb, const char * txt)lv_checkbox_set_text_static127,3372
void lv_checkbox_set_checked(lv_obj_t * cb, bool checked)lv_checkbox_set_checked140,3745
void lv_checkbox_set_disabled(lv_obj_t * cb)lv_checkbox_set_disabled168,4579
void lv_checkbox_set_state(lv_obj_t * cb, lv_btn_state_t state)lv_checkbox_set_state187,5145
const char * lv_checkbox_get_text(const lv_obj_t * cb)lv_checkbox_get_text209,5803
static lv_res_t lv_checkbox_signal(lv_obj_t * cb, lv_signal_t sign, void * param)lv_checkbox_signal228,6361
static lv_style_list_t * lv_checkbox_get_style(lv_obj_t * cb, uint8_t type)lv_checkbox_get_style274,8348

lib/lvgl/src/lv_widgets/lv_label.c,3524
#define LV_OBJX_NAME LV_OBJX_NAME25,533
    #define LV_LABEL_DEF_SCROLL_SPEED LV_LABEL_DEF_SCROLL_SPEED29,624
#define LV_LABEL_DOT_END_INV LV_LABEL_DOT_END_INV32,675
#define LV_LABEL_HINT_HEIGHT_LIMIT LV_LABEL_HINT_HEIGHT_LIMIT33,711
static lv_signal_cb_t ancestor_signal;ancestor_signal60,1813
lv_obj_t * lv_label_create(lv_obj_t * par, const lv_obj_t * copy)lv_label_create76,2237
void lv_label_set_text(lv_obj_t * label, const char * text)lv_label_set_text180,5704
void lv_label_set_text_fmt(lv_obj_t * label, const char * fmt, ...)lv_label_set_text_fmt250,7675
void lv_label_set_text_static(lv_obj_t * label, const char * text)lv_label_set_text_static285,8591
void lv_label_set_long_mode(lv_obj_t * label, lv_label_long_mode_t long_mode)lv_label_set_long_mode310,9298
void lv_label_set_align(lv_obj_t * label, lv_label_align_t align)lv_label_set_align345,10423
void lv_label_set_recolor(lv_obj_t * label, bool en)lv_label_set_recolor363,10966
void lv_label_set_anim_speed(lv_obj_t * label, uint16_t anim_speed)lv_label_set_anim_speed381,11536
void lv_label_set_text_sel_start(lv_obj_t * label, uint32_t index)lv_label_set_text_sel_start400,12022
void lv_label_set_text_sel_end(lv_obj_t * label, uint32_t index)lv_label_set_text_sel_end414,12347
char * lv_label_get_text(const lv_obj_t * label)lv_label_get_text437,12850
lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * label)lv_label_get_long_mode451,13130
lv_label_align_t lv_label_get_align(const lv_obj_t * label)lv_label_get_align464,13459
bool lv_label_get_recolor(const lv_obj_t * label)lv_label_get_recolor492,14225
uint16_t lv_label_get_anim_speed(const lv_obj_t * label)lv_label_get_anim_speed505,14590
void lv_label_get_letter_pos(const lv_obj_t * label, uint32_t char_id, lv_point_t * pos)lv_label_get_letter_pos525,15160
uint32_t lv_label_get_letter_on(const lv_obj_t * label, lv_point_t * pos_in)lv_label_get_letter_on647,19590
uint32_t lv_label_get_text_sel_start(const lv_obj_t * label)lv_label_get_text_sel_start778,24542
uint32_t lv_label_get_text_sel_end(const lv_obj_t * label)lv_label_get_text_sel_end797,25001
bool lv_label_is_char_under_pos(const lv_obj_t * label, lv_point_t * pos)lv_label_is_char_under_pos816,25473
lv_style_list_t * lv_label_get_style(lv_obj_t * label, uint8_t type)lv_label_get_style902,28848
void lv_label_ins_text(lv_obj_t * label, uint32_t pos, const char * txt)lv_label_ins_text926,29552
void lv_label_cut_text(lv_obj_t * label, uint32_t pos, uint32_t cnt)lv_label_cut_text972,30893
void lv_label_refr_text(lv_obj_t * label)lv_label_refr_text995,31459
static lv_design_res_t lv_label_design(lv_obj_t * label, const lv_area_t * clip_area, lv_design_mode_t mode)lv_label_design1240,41727
static lv_res_t lv_label_signal(lv_obj_t * label, lv_signal_t sign, void * param)lv_label_signal1347,46403
static void lv_label_revert_dots(lv_obj_t * label)lv_label_revert_dots1400,48128
static void lv_label_set_offset_x(lv_obj_t * label, lv_coord_t x)lv_label_set_offset_x1422,48824
static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)lv_label_set_offset_y1429,49010
static bool lv_label_set_dot_tmp(lv_obj_t * label, char * data, uint32_t len)lv_label_set_dot_tmp1444,49396
static char * lv_label_get_dot_tmp(lv_obj_t * label)lv_label_get_dot_tmp1473,50433
static void lv_label_dot_tmp_free(lv_obj_t * label)lv_label_dot_tmp_free1489,50798
static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)get_txt_coords1499,51067

lib/lvgl/src/lv_widgets/lv_roller.h,1400
#define LV_ROLLER_HLV_ROLLER_H7,53
    LV_ROLLER_MODE_NORMAL, /**< Normal mode (roller ends at the end of the options). */LV_ROLLER_MODE_NORMAL39,607
    LV_ROLLER_MODE_INFINITE, /**< Infinite mode (roller can be scrolled forever). */LV_ROLLER_MODE_INFINITE40,695
typedef uint8_t lv_roller_mode_t;lv_roller_mode_t43,784
    lv_page_ext_t page; /*Ext. of ancestor*/page49,857
    lv_style_list_t style_sel; /*Style of the selected option*/style_sel52,935
    uint16_t option_cnt;          /*Number of options*/option_cnt53,999
    uint16_t sel_opt_id;          /*Index of the current option*/sel_opt_id54,1055
    uint16_t sel_opt_id_ori;      /*Store the original index on focus*/sel_opt_id_ori55,1121
    lv_roller_mode_t mode : 1;mode56,1193
    uint8_t auto_fit : 1;         /*1: Automatically set the width*/auto_fit57,1224
} lv_roller_ext_t;lv_roller_ext_t58,1293
    LV_ROLLER_PART_BG = LV_PAGE_PART_BG,LV_ROLLER_PART_BG61,1320
    LV_ROLLER_PART_SELECTED = _LV_PAGE_PART_VIRTUAL_LAST,LV_ROLLER_PART_SELECTED62,1361
    _LV_ROLLER_PART_VIRTUAL_LAST,_LV_ROLLER_PART_VIRTUAL_LAST63,1419
typedef uint8_t lv_roller_part_t;lv_roller_part_t65,1456
static inline void lv_roller_set_anim_time(lv_obj_t * roller, uint16_t anim_time)lv_roller_set_anim_time125,3472
static inline uint16_t lv_roller_get_anim_time(const lv_obj_t * roller)lv_roller_get_anim_time181,5206

lib/lvgl/src/lv_widgets/lv_tileview.c,1463
#define LV_OBJX_NAME LV_OBJX_NAME21,356
        #define LV_TILEVIEW_DEF_ANIM_TIME LV_TILEVIEW_DEF_ANIM_TIME25,451
    #undef LV_TILEVIEW_DEF_ANIM_TIMELV_TILEVIEW_DEF_ANIM_TIME28,573
    #define LV_TILEVIEW_DEF_ANIM_TIME LV_TILEVIEW_DEF_ANIM_TIME29,610
static lv_signal_cb_t ancestor_signal;ancestor_signal47,1169
static lv_signal_cb_t ancestor_scrl_signal;ancestor_scrl_signal48,1208
static lv_design_cb_t ancestor_design;ancestor_design49,1252
lv_obj_t * lv_tileview_create(lv_obj_t * par, const lv_obj_t * copy)lv_tileview_create65,1686
void lv_tileview_add_element(lv_obj_t * tileview, lv_obj_t * element)lv_tileview_add_element153,4868
void lv_tileview_set_valid_positions(lv_obj_t * tileview, const lv_point_t valid_pos[], uint16_t valid_pos_cnt)lv_tileview_set_valid_positions173,5512
void lv_tileview_set_tile_act(lv_obj_t * tileview, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim)lv_tileview_set_tile_act205,6544
void lv_tileview_get_tile_act(lv_obj_t * tileview, lv_coord_t * x, lv_coord_t * y)lv_tileview_get_tile_act280,8546
static lv_res_t lv_tileview_signal(lv_obj_t * tileview, lv_signal_t sign, void * param)lv_tileview_signal307,9239
static lv_res_t lv_tileview_scrl_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)lv_tileview_scrl_signal330,10044
static void drag_end_handler(lv_obj_t * tileview)drag_end_handler397,12893
static bool set_valid_drag_dirs(lv_obj_t * tileview)set_valid_drag_dirs453,14570

lib/lvgl/src/lv_widgets/lv_chart.h,4334
#define LV_CHART_HLV_CHART_H7,51
#define LV_CHART_POINT_DEF LV_CHART_POINT_DEF28,411
#define LV_CHART_TICK_LENGTH_AUTO LV_CHART_TICK_LENGTH_AUTO31,499
LV_EXPORT_CONST_INT(LV_CHART_POINT_DEF);LV_CHART_POINT_DEF33,538
LV_EXPORT_CONST_INT(LV_CHART_TICK_LENGTH_AUTO);LV_CHART_TICK_LENGTH_AUTO34,579
    LV_CHART_TYPE_NONE     = 0x00, /**< Don't draw the series*/LV_CHART_TYPE_NONE42,720
    LV_CHART_TYPE_LINE     = 0x01, /**< Connect the points with lines*/LV_CHART_TYPE_LINE43,784
    LV_CHART_TYPE_COLUMN   = 0x02, /**< Draw columns*/LV_CHART_TYPE_COLUMN44,856
typedef uint8_t lv_chart_type_t;lv_chart_type_t46,914
    LV_CHART_UPDATE_MODE_SHIFT,     /**< Shift old data to the left and add the new one o the right*/LV_CHART_UPDATE_MODE_SHIFT50,1003
    LV_CHART_UPDATE_MODE_CIRCULAR,  /**< Add the new data in a circular way*/LV_CHART_UPDATE_MODE_CIRCULAR51,1105
typedef uint8_t lv_chart_update_mode_t;lv_chart_update_mode_t53,1186
    LV_CHART_AXIS_PRIMARY_Y,LV_CHART_AXIS_PRIMARY_Y57,1235
    LV_CHART_AXIS_SECONDARY_Y,LV_CHART_AXIS_SECONDARY_Y58,1264
    _LV_CHART_AXIS_LAST,_LV_CHART_AXIS_LAST59,1295
typedef uint8_t lv_chart_axis_t;lv_chart_axis_t61,1323
    LV_CHART_CURSOR_NONE = 0x00,LV_CHART_CURSOR_NONE64,1364
    LV_CHART_CURSOR_RIGHT    = 0x01,LV_CHART_CURSOR_RIGHT65,1397
    LV_CHART_CURSOR_UP    = 0x02,LV_CHART_CURSOR_UP66,1434
    LV_CHART_CURSOR_LEFT    = 0x04,LV_CHART_CURSOR_LEFT67,1468
    LV_CHART_CURSOR_DOWN    = 0x08LV_CHART_CURSOR_DOWN68,1504
typedef uint8_t lv_cursor_direction_t;lv_cursor_direction_t70,1542
    lv_coord_t * points;points73,1599
    lv_color_t color;color74,1624
    uint16_t start_point;start_point75,1646
    uint8_t ext_buf_assigned : 1;ext_buf_assigned76,1672
    uint8_t hidden : 1;hidden77,1706
    lv_chart_axis_t y_axis  : 1;y_axis78,1730
} lv_chart_series_t;lv_chart_series_t79,1763
    lv_point_t point;point82,1802
    lv_color_t color;color83,1824
    lv_cursor_direction_t axes  : 4;axes84,1846
} lv_chart_cursor_t;lv_chart_cursor_t85,1883
    LV_CHART_AXIS_SKIP_LAST_TICK = 0x00,            /**< don't draw the last tick */LV_CHART_AXIS_SKIP_LAST_TICK89,1932
    LV_CHART_AXIS_DRAW_LAST_TICK = 0x01,            /**< draw the last tick */LV_CHART_AXIS_DRAW_LAST_TICK90,2017
    LV_CHART_AXIS_INVERSE_LABELS_ORDER = 0x02       /**< draw tick labels in an inverted order*/LV_CHART_AXIS_INVERSE_LABELS_ORDER91,2096
typedef uint8_t lv_chart_axis_options_t;lv_chart_axis_options_t93,2196
    const char * list_of_values;list_of_values96,2255
    lv_chart_axis_options_t options;options97,2288
    uint8_t num_tick_marks;num_tick_marks98,2325
    uint8_t major_tick_len;major_tick_len99,2353
    uint8_t minor_tick_len;minor_tick_len100,2381
} lv_chart_axis_cfg_t;lv_chart_axis_cfg_t101,2409
    lv_ll_t series_ll;    /*Linked list for the data line pointers (stores lv_chart_series_t)*/series_ll107,2547
    lv_ll_t cursors_ll;    /*Linked list for the cursor pointers (stores lv_chart_cursor_t)*/cursors_ll108,2643
    lv_coord_t ymin[_LV_CHART_AXIS_LAST];      /*y min values for both axis (used to scale the data)*/ymin109,2737
    lv_coord_t ymax[_LV_CHART_AXIS_LAST];      /*y max values for both axis  (used to scale the data)*/ymax110,2840
    uint8_t hdiv_cnt;     /*Number of horizontal division lines*/hdiv_cnt111,2944
    uint8_t vdiv_cnt;     /*Number of vertical division lines*/vdiv_cnt112,3010
    uint16_t point_cnt;   /*Point number in a data line*/point_cnt113,3074
    lv_style_list_t style_series_bg;style_series_bg114,3132
    lv_style_list_t style_series;style_series115,3169
    lv_style_list_t style_cursors;style_cursors116,3203
    lv_chart_type_t type; /*Line, column or point chart (from 'lv_chart_type_t')*/type117,3238
    lv_chart_axis_cfg_t y_axis;y_axis118,3321
    lv_chart_axis_cfg_t x_axis;x_axis119,3353
    lv_chart_axis_cfg_t secondary_y_axis;secondary_y_axis120,3385
    uint8_t update_mode : 1;update_mode121,3427
} lv_chart_ext_t;lv_chart_ext_t122,3456
    LV_CHART_PART_BG = LV_OBJ_PART_MAIN,LV_CHART_PART_BG126,3505
    LV_CHART_PART_SERIES_BG = _LV_OBJ_PART_VIRTUAL_LAST,LV_CHART_PART_SERIES_BG127,3546
    LV_CHART_PART_SERIES,LV_CHART_PART_SERIES128,3603
    LV_CHART_PART_CURSORLV_CHART_PART_CURSOR129,3629

lib/lvgl/src/lv_widgets/lv_objx_templ.c,787
#define LV_OBJX_NAME LV_OBJX_NAME26,759
static lv_signal_cb_t ancestor_signal;ancestor_signal41,1194
static lv_design_cb_t ancestor_design;ancestor_design42,1233
lv_obj_t * lv_templ_create(lv_obj_t * par, const lv_obj_t * copy)lv_templ_create58,1667
void lv_templ_set_style(lv_obj_t * templ, lv_templ_style_t type, const lv_style_t * style)lv_templ_set_style125,3436
lv_style_t * lv_templ_get_style(const lv_obj_t * templ, lv_templ_style_t type)lv_templ_get_style153,4039
static lv_design_res_t lv_templ_design(lv_obj_t * templ, const lv_area_t * clip_area, lv_design_mode_t mode)lv_templ_design194,5245
static lv_res_t lv_templ_signal(lv_obj_t * templ, lv_signal_t sign, void * param)lv_templ_signal218,5999
typedef int keep_pedantic_happy;keep_pedantic_happy237,6567

lib/lvgl/src/lv_widgets/lv_checkbox.h,993
#define LV_CHECKBOX_HLV_CHECKBOX_H7,51
    lv_btn_ext_t bg_btn; /*Ext. of ancestor*/bg_btn43,724
    lv_obj_t * bullet; /*Pointer to button*/bullet45,802
    lv_obj_t * label;  /*Pointer to label*/label46,847
} lv_checkbox_ext_t;lv_checkbox_ext_t47,891
    LV_CHECKBOX_PART_BG = LV_BTN_PART_MAIN,  /**< Style of object background. */LV_CHECKBOX_PART_BG51,944
    _LV_CHECKBOX_PART_VIRTUAL_LAST,_LV_CHECKBOX_PART_VIRTUAL_LAST52,1025
    LV_CHECKBOX_PART_BULLET = _LV_BTN_PART_REAL_LAST, /**< Style of box (released). */LV_CHECKBOX_PART_BULLET53,1061
    _LV_CHECKBOX_PART_REAL_LAST_LV_CHECKBOX_PART_REAL_LAST54,1148
typedef uint8_t lv_checkbox_style_t;lv_checkbox_style_t56,1183
static inline bool lv_checkbox_is_checked(const lv_obj_t * cb)lv_checkbox_is_checked125,3256
static inline bool lv_checkbox_is_inactive(const lv_obj_t * cb)lv_checkbox_is_inactive135,3544
static inline lv_btn_state_t lv_checkbox_get_state(const lv_obj_t * cb)lv_checkbox_get_state145,3842

lib/lvgl/src/lv_widgets/lv_img.c,1886
#define LV_OBJX_NAME LV_OBJX_NAME28,573
static lv_signal_cb_t ancestor_signal;ancestor_signal44,1071
lv_obj_t * lv_img_create(lv_obj_t * par, const lv_obj_t * copy)lv_img_create60,1496
void lv_img_set_src(lv_obj_t * img, const void * src_img)lv_img_set_src141,3895
void lv_img_set_auto_size(lv_obj_t * img, bool en)lv_img_set_auto_size243,7736
void lv_img_set_offset_x(lv_obj_t * img, lv_coord_t x)lv_img_set_offset_x258,8111
void lv_img_set_offset_y(lv_obj_t * img, lv_coord_t y)lv_img_set_offset_y276,8518
void lv_img_set_pivot(lv_obj_t * img, lv_coord_t pivot_x, lv_coord_t pivot_y)lv_img_set_pivot295,8976
void lv_img_set_angle(lv_obj_t * img, int16_t angle)lv_img_set_angle334,10371
void lv_img_set_zoom(lv_obj_t * img, uint16_t zoom)lv_img_set_zoom377,11713
void lv_img_set_antialias(lv_obj_t * img, bool antialias)lv_img_set_antialias415,12998
const void * lv_img_get_src(lv_obj_t * img)lv_img_get_src433,13426
const char * lv_img_get_file_name(const lv_obj_t * img)lv_img_get_file_name447,13695
bool lv_img_get_auto_size(const lv_obj_t * img)lv_img_get_auto_size464,14089
lv_coord_t lv_img_get_offset_x(lv_obj_t * img)lv_img_get_offset_x478,14398
lv_coord_t lv_img_get_offset_y(lv_obj_t * img)lv_img_get_offset_y492,14685
void lv_img_get_pivot(lv_obj_t * img, lv_point_t * pivot)lv_img_get_pivot506,14990
uint16_t lv_img_get_angle(lv_obj_t * img)lv_img_get_angle520,15303
uint16_t lv_img_get_zoom(lv_obj_t * img)lv_img_get_zoom534,15588
bool lv_img_get_antialias(lv_obj_t * img)lv_img_get_antialias548,15925
static lv_design_res_t lv_img_design(lv_obj_t * img, const lv_area_t * clip_area, lv_design_mode_t mode)lv_img_design571,16678
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)lv_img_signal779,26049
static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)lv_img_get_style876,30135

lib/lvgl/src/lv_widgets/lv_list.h,1912
#define LV_LIST_HLV_LIST_H7,49
    lv_page_ext_t page; /*Ext. of ancestor*/page48,862
    lv_obj_t * last_sel_btn;     /* The last selected button. It will be reverted when the list is focused again */last_sel_btn52,957
    lv_obj_t * act_sel_btn; /* The button is currently being selected*/act_sel_btn54,1080
} lv_list_ext_t;lv_list_ext_t55,1152
    LV_LIST_PART_BG = LV_PAGE_PART_BG, /**< List background style */LV_LIST_PART_BG59,1197
    LV_LIST_PART_SCROLLBAR = LV_PAGE_PART_SCROLLBAR, /**< List scrollbar style. */LV_LIST_PART_SCROLLBAR60,1266
    LV_LIST_PART_EDGE_FLASH = LV_PAGE_PART_EDGE_FLASH, /**< List edge flash style. */LV_LIST_PART_EDGE_FLASH61,1349
    _LV_LIST_PART_VIRTUAL_LAST = _LV_PAGE_PART_VIRTUAL_LAST,_LV_LIST_PART_VIRTUAL_LAST62,1435
    LV_LIST_PART_SCROLLABLE = LV_PAGE_PART_SCROLLABLE, /**< List scrollable area style. */LV_LIST_PART_SCROLLABLE63,1496
    _LV_LIST_PART_REAL_LAST = _LV_PAGE_PART_REAL_LAST,_LV_LIST_PART_REAL_LAST64,1587
typedef uint8_t lv_list_style_t;lv_list_style_t66,1645
static inline void lv_list_set_scrollbar_mode(lv_obj_t * list, lv_scrollbar_mode_t mode)lv_list_set_scrollbar_mode125,3401
static inline void lv_list_set_scroll_propagation(lv_obj_t * list, bool en)lv_list_set_scroll_propagation136,3772
static inline void lv_list_set_edge_flash(lv_obj_t * list, bool en)lv_list_set_edge_flash146,4070
static inline void lv_list_set_anim_time(lv_obj_t * list, uint16_t anim_time)lv_list_set_anim_time156,4353
static inline lv_scrollbar_mode_t lv_list_get_scrollbar_mode(const lv_obj_t * list)lv_list_get_scrollbar_mode244,7117
static inline bool lv_list_get_scroll_propagation(lv_obj_t * list)lv_list_get_scroll_propagation254,7356
static inline bool lv_list_get_edge_flash(lv_obj_t * list)lv_list_get_edge_flash264,7582
static inline uint16_t lv_list_get_anim_time(const lv_obj_t * list)lv_list_get_anim_time274,7806

lib/lvgl/src/lv_widgets/lv_objmask.c,925
#define LV_OBJX_NAME LV_OBJX_NAME19,338
static lv_signal_cb_t ancestor_signal;ancestor_signal35,841
static lv_design_cb_t ancestor_design;ancestor_design36,880
lv_obj_t * lv_objmask_create(lv_obj_t * par, const lv_obj_t * copy)lv_objmask_create52,1326
lv_objmask_mask_t * lv_objmask_add_mask(lv_obj_t * objmask, void * param)lv_objmask_add_mask107,2989
void lv_objmask_update_mask(lv_obj_t * objmask, lv_objmask_mask_t * mask, void * param)lv_objmask_update_mask137,3879
void lv_objmask_remove_mask(lv_obj_t * objmask, lv_objmask_mask_t * mask)lv_objmask_remove_mask155,4403
static lv_design_res_t lv_objmask_design(lv_obj_t * objmask, const lv_area_t * clip_area, lv_design_mode_t mode)lv_objmask_design210,5782
static lv_res_t lv_objmask_signal(lv_obj_t * objmask, lv_signal_t sign, void * param)lv_objmask_signal318,10341
static uint16_t get_param_size(lv_draw_mask_type_t type)get_param_size343,11031

lib/lvgl/src/lv_widgets/lv_spinner.h,1297
#define LV_SPINNER_HLV_SPINNER_H7,55
    LV_SPINNER_TYPE_SPINNING_ARC,LV_SPINNER_TYPE_SPINNING_ARC45,753
    LV_SPINNER_TYPE_FILLSPIN_ARC,LV_SPINNER_TYPE_FILLSPIN_ARC46,787
    LV_SPINNER_TYPE_CONSTANT_ARC,LV_SPINNER_TYPE_CONSTANT_ARC47,821
typedef uint8_t lv_spinner_type_t;lv_spinner_type_t49,858
    LV_SPINNER_DIR_FORWARD,LV_SPINNER_DIR_FORWARD55,947
    LV_SPINNER_DIR_BACKWARD,LV_SPINNER_DIR_BACKWARD56,975
typedef uint8_t lv_spinner_dir_t;lv_spinner_dir_t58,1007
    lv_arc_ext_t arc; /*Ext. of ancestor*/arc62,1079
    lv_anim_value_t arc_length;      /*Length of the spinning indicator in degree*/arc_length64,1154
    uint16_t time;                   /*Time of one round*/time65,1238
    lv_spinner_type_t anim_type : 2; /*Type of the arc animation*/anim_type66,1297
    lv_spinner_dir_t anim_dir : 1;   /*Animation Direction*/anim_dir67,1364
} lv_spinner_ext_t;lv_spinner_ext_t68,1425
    LV_SPINNER_PART_BG = LV_ARC_PART_BG,LV_SPINNER_PART_BG72,1478
    LV_SPINNER_PART_INDIC = LV_ARC_PART_INDIC,LV_SPINNER_PART_INDIC73,1519
    _LV_SPINNER_PART_VIRTUAL_LAST,_LV_SPINNER_PART_VIRTUAL_LAST74,1566
    _LV_SPINNER_PART_REAL_LAST = _LV_ARC_PART_REAL_LAST,_LV_SPINNER_PART_REAL_LAST76,1602
typedef uint8_t lv_spinner_style_t;lv_spinner_style_t78,1662

lib/lvgl/src/lv_widgets/lv_objmask.h,398
#define LV_OBJMASK_HLV_OBJMASK_H7,55
    void * param;param32,455
} lv_objmask_mask_t;lv_objmask_mask_t33,473
    lv_cont_ext_t cont; /*Ext. of ancestor*/cont37,536
    lv_ll_t mask_ll;    /*Store the created masks*/mask_ll39,613
} lv_objmask_ext_t;lv_objmask_ext_t41,666
    LV_OBJMASK_PART_MAIN,LV_OBJMASK_PART_MAIN45,718
typedef uint8_t lv_objmask_part_t;lv_objmask_part_t47,747

lib/lvgl/src/lv_widgets/lv_textarea.c,5649
#define LV_OBJX_NAME LV_OBJX_NAME25,488
    #define LV_TEXTAREA_DEF_CURSOR_BLINK_TIME LV_TEXTAREA_DEF_CURSOR_BLINK_TIME29,589
    #define LV_TEXTAREA_DEF_PWD_SHOW_TIME LV_TEXTAREA_DEF_PWD_SHOW_TIME33,692
#define LV_TEXTAREA_DEF_WIDTH LV_TEXTAREA_DEF_WIDTH36,754
#define LV_TEXTAREA_DEF_HEIGHT LV_TEXTAREA_DEF_HEIGHT37,797
#define LV_TEXTAREA_PWD_BULLET_UNICODE LV_TEXTAREA_PWD_BULLET_UNICODE39,842
static lv_design_cb_t ancestor_design;ancestor_design68,2189
static lv_design_cb_t scrl_design;scrl_design69,2228
static lv_signal_cb_t ancestor_signal;ancestor_signal70,2263
static lv_signal_cb_t scrl_signal;scrl_signal71,2302
static const char * ta_insert_replace;ta_insert_replace72,2337
lv_obj_t * lv_textarea_create(lv_obj_t * par, const lv_obj_t * copy)lv_textarea_create88,2776
void lv_textarea_add_char(lv_obj_t * ta, uint32_t c)lv_textarea_add_char229,7687
void lv_textarea_add_text(lv_obj_t * ta, const char * txt)lv_textarea_add_text325,10716
void lv_textarea_del_char(lv_obj_t * ta)lv_textarea_del_char406,13397
void lv_textarea_del_char_forward(lv_obj_t * ta)lv_textarea_del_char_forward461,15170
void lv_textarea_set_text(lv_obj_t * ta, const char * txt)lv_textarea_set_text479,15606
void lv_textarea_set_placeholder_text(lv_obj_t * ta, const char * txt)lv_textarea_set_placeholder_text559,18236
void lv_textarea_set_cursor_pos(lv_obj_t * ta, int32_t pos)lv_textarea_set_cursor_pos602,19479
void lv_textarea_set_cursor_hidden(lv_obj_t * ta, bool hide)lv_textarea_set_cursor_hidden681,22260
void lv_textarea_set_cursor_click_pos(lv_obj_t * ta, bool en)lv_textarea_set_cursor_click_pos697,22686
void lv_textarea_set_pwd_mode(lv_obj_t * ta, bool en)lv_textarea_set_pwd_mode710,23015
void lv_textarea_set_one_line(lv_obj_t * ta, bool en)lv_textarea_set_one_line748,24010
void lv_textarea_set_text_align(lv_obj_t * ta, lv_label_align_t align)lv_textarea_set_text_align791,25883
void lv_textarea_set_accepted_chars(lv_obj_t * ta, const char * list)lv_textarea_set_accepted_chars824,27063
void lv_textarea_set_max_length(lv_obj_t * ta, uint32_t num)lv_textarea_set_max_length838,27437
void lv_textarea_set_insert_replace(lv_obj_t * ta, const char * txt)lv_textarea_set_insert_replace855,28014
void lv_textarea_set_text_sel(lv_obj_t * ta, bool en)lv_textarea_set_text_sel868,28325
void lv_textarea_set_pwd_show_time(lv_obj_t * ta, uint16_t time)lv_textarea_set_pwd_show_time889,28801
void lv_textarea_set_cursor_blink_time(lv_obj_t * ta, uint16_t time)lv_textarea_set_cursor_blink_time906,29170
const char * lv_textarea_get_text(const lv_obj_t * ta)lv_textarea_get_text952,30405
const char * lv_textarea_get_placeholder_text(lv_obj_t * ta)lv_textarea_get_placeholder_text974,30852
lv_obj_t * lv_textarea_get_label(const lv_obj_t * ta)lv_textarea_get_label988,31211
uint32_t lv_textarea_get_cursor_pos(const lv_obj_t * ta)lv_textarea_get_cursor_pos1001,31522
bool lv_textarea_get_cursor_hidden(const lv_obj_t * ta)lv_textarea_get_cursor_hidden1014,31837
bool lv_textarea_get_cursor_click_pos(lv_obj_t * ta)lv_textarea_get_cursor_click_pos1027,32207
bool lv_textarea_get_pwd_mode(const lv_obj_t * ta)lv_textarea_get_pwd_mode1040,32552
bool lv_textarea_get_one_line(const lv_obj_t * ta)lv_textarea_get_one_line1053,32910
const char * lv_textarea_get_accepted_chars(lv_obj_t * ta)lv_textarea_get_accepted_chars1066,33226
uint32_t lv_textarea_get_max_length(lv_obj_t * ta)lv_textarea_get_max_length1080,33547
bool lv_textarea_text_is_selected(const lv_obj_t * ta)lv_textarea_text_is_selected1093,33846
bool lv_textarea_get_text_sel_en(lv_obj_t * ta)lv_textarea_get_text_sel_en1118,34455
uint16_t lv_textarea_get_pwd_show_time(lv_obj_t * ta)lv_textarea_get_pwd_show_time1136,34869
uint16_t lv_textarea_get_cursor_blink_time(lv_obj_t * ta)lv_textarea_get_cursor_blink_time1150,35180
void lv_textarea_clear_selection(lv_obj_t * ta)lv_textarea_clear_selection1166,35519
void lv_textarea_cursor_right(lv_obj_t * ta)lv_textarea_cursor_right1187,36124
void lv_textarea_cursor_left(lv_obj_t * ta)lv_textarea_cursor_left1200,36401
void lv_textarea_cursor_down(lv_obj_t * ta)lv_textarea_cursor_down1215,36703
void lv_textarea_cursor_up(lv_obj_t * ta)lv_textarea_cursor_up1248,37898
static lv_design_res_t lv_textarea_design(lv_obj_t * ta, const lv_area_t * clip_area, lv_design_mode_t mode)lv_textarea_design1286,39482
static lv_design_res_t lv_textarea_scrollable_design(lv_obj_t * scrl, const lv_area_t * clip_area,lv_textarea_scrollable_design1313,40593
static lv_res_t lv_textarea_signal(lv_obj_t * ta, lv_signal_t sign, void * param)lv_textarea_signal1399,43879
static lv_res_t lv_textarea_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)lv_textarea_scrollable_signal1511,48352
static lv_style_list_t * lv_textarea_get_style(lv_obj_t * ta, uint8_t part)lv_textarea_get_style1561,50276
static void cursor_blink_anim(lv_obj_t * ta, lv_anim_value_t show)cursor_blink_anim1600,51295
static void pwd_char_hider_anim(lv_obj_t * ta, lv_anim_value_t x)pwd_char_hider_anim1624,52108
static void pwd_char_hider_anim_ready(lv_anim_t * a)pwd_char_hider_anim_ready1634,52319
static void pwd_char_hider(lv_obj_t * ta)pwd_char_hider1645,52531
static bool char_is_accepted(lv_obj_t * ta, uint32_t c)char_is_accepted1683,53870
static void refr_cursor_area(lv_obj_t * ta)refr_cursor_area1712,54699
static void update_cursor_position_on_click(lv_obj_t * ta, lv_signal_t sign, lv_indev_t * click_source)update_cursor_position_on_click1795,57800
static lv_res_t insert_handler(lv_obj_t * ta, const char * txt)insert_handler1910,62208

lib/lvgl/src/lv_widgets/lv_table.c,2828
#define LV_OBJX_NAME LV_OBJX_NAME24,475
static lv_signal_cb_t ancestor_signal;ancestor_signal44,1362
static lv_design_cb_t ancestor_design;ancestor_design45,1401
lv_obj_t * lv_table_create(lv_obj_t * par, const lv_obj_t * copy)lv_table_create61,1823
void lv_table_set_cell_value(lv_obj_t * table, uint16_t row, uint16_t col, const char * txt)lv_table_set_cell_value135,4085
void lv_table_set_cell_value_fmt(lv_obj_t * table, uint16_t row, uint16_t col, const char * fmt, ...)lv_table_set_cell_value_fmt202,6279
void lv_table_set_row_cnt(lv_obj_t * table, uint16_t row_cnt)lv_table_set_row_cnt295,8993
void lv_table_set_col_cnt(lv_obj_t * table, uint16_t col_cnt)lv_table_set_col_cnt338,10332
void lv_table_set_col_width(lv_obj_t * table, uint16_t col_id, lv_coord_t w)lv_table_set_col_width377,11581
void lv_table_set_cell_align(lv_obj_t * table, uint16_t row, uint16_t col, lv_label_align_t align)lv_table_set_cell_align398,12227
void lv_table_set_cell_type(lv_obj_t * table, uint16_t row, uint16_t col, uint8_t type)lv_table_set_cell_type436,13419
void lv_table_set_cell_crop(lv_obj_t * table, uint16_t row, uint16_t col, bool crop)lv_table_set_cell_crop482,14897
void lv_table_set_cell_merge_right(lv_obj_t * table, uint16_t row, uint16_t col, bool en)lv_table_set_cell_merge_right521,16136
const char * lv_table_get_cell_value(lv_obj_t * table, uint16_t row, uint16_t col)lv_table_get_cell_value565,17382
uint16_t lv_table_get_row_cnt(lv_obj_t * table)lv_table_get_row_cnt586,17983
uint16_t lv_table_get_col_cnt(lv_obj_t * table)lv_table_get_col_cnt599,18273
lv_coord_t lv_table_get_col_width(lv_obj_t * table, uint16_t col_id)lv_table_get_col_width613,18624
lv_label_align_t lv_table_get_cell_align(lv_obj_t * table, uint16_t row, uint16_t col)lv_table_get_cell_align634,19268
lv_label_align_t lv_table_get_cell_type(lv_obj_t * table, uint16_t row, uint16_t col)lv_table_get_cell_type661,20138
lv_label_align_t lv_table_get_cell_crop(lv_obj_t * table, uint16_t row, uint16_t col)lv_table_get_cell_crop688,21056
bool lv_table_get_cell_merge_right(lv_obj_t * table, uint16_t row, uint16_t col)lv_table_get_cell_merge_right715,21941
lv_res_t lv_table_get_pressed_cell(lv_obj_t * table, uint16_t * row, uint16_t * col)lv_table_get_pressed_cell743,22858
static lv_design_res_t lv_table_design(lv_obj_t * table, const lv_area_t * clip_area, lv_design_mode_t mode)lv_table_design801,24549
static lv_res_t lv_table_signal(lv_obj_t * table, lv_signal_t sign, void * param)lv_table_signal1018,34404
static lv_style_list_t * lv_table_get_style(lv_obj_t * table, uint8_t part)lv_table_get_style1065,35898
static void refr_size(lv_obj_t * table)refr_size1083,36466
static lv_coord_t get_row_height(lv_obj_t * table, uint16_t row_id, const lv_font_t ** font,get_row_height1136,38693

lib/lvgl/src/lv_widgets/lv_gauge.c,2262
#define LV_OBJX_NAME LV_OBJX_NAME25,457
#define LV_GAUGE_DEF_NEEDLE_COLOR LV_GAUGE_DEF_NEEDLE_COLOR27,490
#define LV_GAUGE_DEF_LABEL_COUNT LV_GAUGE_DEF_LABEL_COUNT28,537
#define LV_GAUGE_DEF_LINE_COUNT LV_GAUGE_DEF_LINE_COUNT29,572
#define LV_GAUGE_DEF_ANGLE LV_GAUGE_DEF_ANGLE30,661
static lv_design_cb_t ancestor_design;ancestor_design48,1329
static lv_signal_cb_t ancestor_signal;ancestor_signal49,1368
lv_obj_t * lv_gauge_create(lv_obj_t * par, const lv_obj_t * copy)lv_gauge_create65,1791
void lv_gauge_set_needle_count(lv_obj_t * gauge, uint8_t needle_cnt, const lv_color_t colors[])lv_gauge_set_needle_count145,4355
void lv_gauge_set_value(lv_obj_t * gauge, uint8_t needle_id, int32_t value)lv_gauge_set_value180,5303
void lv_gauge_set_scale(lv_obj_t * gauge, uint16_t angle, uint8_t line_cnt, uint8_t label_cnt)lv_gauge_set_scale255,7844
void lv_gauge_set_needle_img(lv_obj_t * gauge, const void * img, lv_coord_t pivot_x, lv_coord_t pivot_y)lv_gauge_set_needle_img275,8576
void lv_gauge_set_formatter_cb(lv_obj_t * gauge, lv_gauge_format_cb_t format_cb)lv_gauge_set_formatter_cb293,9077
int32_t lv_gauge_get_value(const lv_obj_t * gauge, uint8_t needle)lv_gauge_get_value312,9522
uint8_t lv_gauge_get_needle_count(const lv_obj_t * gauge)lv_gauge_get_needle_count329,9938
uint8_t lv_gauge_get_label_count(const lv_obj_t * gauge)lv_gauge_get_label_count342,10260
const void * lv_gauge_get_needle_img(lv_obj_t * gauge)lv_gauge_get_needle_img356,10665
lv_coord_t lv_gauge_get_needle_img_pivot_x(lv_obj_t * gauge)lv_gauge_get_needle_img_pivot_x370,11027
lv_coord_t lv_gauge_get_needle_img_pivot_y(lv_obj_t * gauge)lv_gauge_get_needle_img_pivot_y384,11403
static lv_design_res_t lv_gauge_design(lv_obj_t * gauge, const lv_area_t * clip_area, lv_design_mode_t mode)lv_gauge_design408,12178
static lv_res_t lv_gauge_signal(lv_obj_t * gauge, lv_signal_t sign, void * param)lv_gauge_signal444,13514
static lv_style_list_t * lv_gauge_get_style(lv_obj_t * gauge, uint8_t part)lv_gauge_get_style475,14628
static void lv_gauge_draw_labels(lv_obj_t * gauge, const lv_area_t * mask)lv_gauge_draw_labels503,15344
static void lv_gauge_draw_needle(lv_obj_t * gauge, const lv_area_t * clip_area)lv_gauge_draw_needle562,18013

lib/lvgl/src/lv_widgets/lv_slider.c,1123
#define LV_OBJX_NAME LV_OBJX_NAME24,427
#define LV_SLIDER_KNOB_COORD(LV_SLIDER_KNOB_COORD26,461
static lv_design_cb_t ancestor_design_f;ancestor_design_f44,1284
static lv_signal_cb_t ancestor_signal;ancestor_signal45,1325
lv_obj_t * lv_slider_create(lv_obj_t * par, const lv_obj_t * copy)lv_slider_create61,1752
int16_t lv_slider_get_value(const lv_obj_t * slider)lv_slider_get_value128,3819
bool lv_slider_is_dragged(const lv_obj_t * slider)lv_slider_is_dragged139,4103
static lv_design_res_t lv_slider_design(lv_obj_t * slider, const lv_area_t * clip_area, lv_design_mode_t mode)lv_slider_design161,4876
static lv_res_t lv_slider_signal(lv_obj_t * slider, lv_signal_t sign, void * param)lv_slider_signal247,8078
static lv_style_list_t * lv_slider_get_style(lv_obj_t * slider, uint8_t part)lv_slider_get_style474,17939
static void lv_slider_position_knob(lv_obj_t * slider, lv_area_t * knob_area, lv_coord_t knob_size, bool hor)lv_slider_position_knob498,18554
static void lv_slider_draw_knob(lv_obj_t * slider, const lv_area_t * knob_area, const lv_area_t * clip_area)lv_slider_draw_knob526,19609

lib/lvgl/src/lv_widgets/lv_gauge.h,2356
#define LV_GAUGE_HLV_GAUGE_H7,51
typedef void (*lv_gauge_format_cb_t)(lv_obj_t * gauge, char * buf, int bufsize, int32_t value);lv_gauge_format_cb_t38,617
    lv_linemeter_ext_t lmeter; /*Ext. of ancestor*/lmeter42,749
    int32_t * values;        /*Array of the set values (for needles) */values44,833
    const lv_color_t * needle_colors; /*Color of the needles (lv_color_t my_colors[needle_num])*/needle_colors45,905
    const void * needle_img;needle_img46,1003
    lv_point_t needle_img_pivot;needle_img_pivot47,1032
    lv_style_list_t style_needle;style_needle48,1065
    lv_style_list_t style_strong;style_strong49,1099
    uint8_t needle_count;             /*Number of needles*/needle_count50,1133
    uint8_t label_count;              /*Number of labels on the scale*/label_count51,1193
    lv_gauge_format_cb_t format_cb;format_cb52,1265
} lv_gauge_ext_t;lv_gauge_ext_t53,1301
    LV_GAUGE_PART_MAIN = LV_LINEMETER_PART_MAIN,LV_GAUGE_PART_MAIN57,1338
    LV_GAUGE_PART_MAJOR = _LV_LINEMETER_PART_VIRTUAL_LAST,LV_GAUGE_PART_MAJOR58,1387
    LV_GAUGE_PART_NEEDLE,LV_GAUGE_PART_NEEDLE59,1446
    _LV_GAUGE_PART_VIRTUAL_LAST = _LV_LINEMETER_PART_VIRTUAL_LAST,_LV_GAUGE_PART_VIRTUAL_LAST60,1472
    _LV_GAUGE_PART_REAL_LAST = _LV_LINEMETER_PART_REAL_LAST,_LV_GAUGE_PART_REAL_LAST61,1539
typedef uint8_t lv_gauge_style_t;lv_gauge_style_t63,1603
static inline void lv_gauge_set_range(lv_obj_t * gauge, int32_t min, int32_t max)lv_gauge_set_range103,2757
static inline void lv_gauge_set_critical_value(lv_obj_t * gauge, int32_t value)lv_gauge_set_critical_value113,3068
static inline void lv_gauge_set_angle_offset(lv_obj_t * gauge, uint16_t angle)lv_gauge_set_angle_offset134,3788
static inline int32_t lv_gauge_get_min_value(const lv_obj_t * lmeter)lv_gauge_get_min_value181,5279
static inline int32_t lv_gauge_get_max_value(const lv_obj_t * lmeter)lv_gauge_get_max_value191,5529
static inline int32_t lv_gauge_get_critical_value(const lv_obj_t * gauge)lv_gauge_get_critical_value201,5769
static inline uint16_t lv_gauge_get_line_count(const lv_obj_t * gauge)lv_gauge_get_line_count218,6204
static inline uint16_t lv_gauge_get_scale_angle(const lv_obj_t * gauge)lv_gauge_get_scale_angle228,6441
static inline uint16_t lv_gauge_get_angle_offset(lv_obj_t * gauge)lv_gauge_get_angle_offset238,6682

lib/lvgl/src/lv_widgets/lv_msgbox.c,2171
#define LV_OBJX_NAME LV_OBJX_NAME22,405
        #define LV_MSGBOX_CLOSE_ANIM_TIME LV_MSGBOX_CLOSE_ANIM_TIME26,498
    #undef LV_MSGBOX_CLOSE_ANIM_TIMELV_MSGBOX_CLOSE_ANIM_TIME29,594
    #define LV_MSGBOX_CLOSE_ANIM_TIME LV_MSGBOX_CLOSE_ANIM_TIME30,631
static lv_signal_cb_t ancestor_signal;ancestor_signal52,1341
lv_obj_t * lv_msgbox_create(lv_obj_t * par, const lv_obj_t * copy)lv_msgbox_create69,1791
void lv_msgbox_add_btns(lv_obj_t * mbox, const char * btn_map[])lv_msgbox_add_btns148,4329
void lv_msgbox_set_text(lv_obj_t * mbox, const char * txt)lv_msgbox_set_text190,5562
void lv_msgbox_set_text_fmt(lv_obj_t * mbox, const char * fmt, ...)lv_msgbox_set_text_fmt206,5936
void lv_msgbox_set_anim_time(lv_obj_t * mbox, uint16_t anim_time)lv_msgbox_set_anim_time238,6784
void lv_msgbox_start_auto_close(lv_obj_t * mbox, uint16_t delay)lv_msgbox_start_auto_close257,7280
void lv_msgbox_stop_auto_close(lv_obj_t * mbox)lv_msgbox_stop_auto_close303,8757
void lv_msgbox_set_recolor(lv_obj_t * mbox, bool en)lv_msgbox_set_recolor319,9073
const char * lv_msgbox_get_text(const lv_obj_t * mbox)lv_msgbox_get_text337,9496
uint16_t lv_msgbox_get_active_btn(lv_obj_t * mbox)lv_msgbox_get_active_btn352,9945
const char * lv_msgbox_get_active_btn_text(lv_obj_t * mbox)lv_msgbox_get_active_btn_text373,10557
uint16_t lv_msgbox_get_anim_time(const lv_obj_t * mbox)lv_msgbox_get_anim_time389,10996
bool lv_msgbox_get_recolor(const lv_obj_t * mbox)lv_msgbox_get_recolor407,11376
lv_obj_t * lv_msgbox_get_btnmatrix(lv_obj_t * mbox)lv_msgbox_get_btnmatrix424,11830
static lv_res_t lv_msgbox_signal(lv_obj_t * mbox, lv_signal_t sign, void * param)lv_msgbox_signal443,12373
static lv_style_list_t * lv_msgbox_get_style(lv_obj_t * mbox, uint8_t part)lv_msgbox_get_style548,16164
static void mbox_realign(lv_obj_t * mbox)mbox_realign576,16969
static void lv_msgbox_close_ready_cb(lv_anim_t * a)lv_msgbox_close_ready_cb608,18235
static void lv_msgbox_default_event_cb(lv_obj_t * mbox, lv_event_t event)lv_msgbox_default_event_cb614,18323
static void lv_msgbox_btnm_event_cb(lv_obj_t * btnm, lv_event_t event)lv_msgbox_btnm_event_cb624,18595

lib/lvgl/src/lv_widgets/lv_line.h,698
#define LV_LINE_HLV_LINE_H7,49
    const lv_point_t * point_array;                    /*Pointer to an array with the points of the line*/point_array33,501
    uint16_t point_num;                                /*Number of points in 'point_array' */point_num34,608
    uint8_t auto_size : 1;                             /*1: set obj. width to x max and obj. height to y max */auto_size35,702
    uint8_t y_inv : 1;                                 /*1: y == 0 will be on the bottom*/y_inv36,814
} lv_line_ext_t;lv_line_ext_t37,905
    LV_LINE_PART_MAIN,LV_LINE_PART_MAIN41,941
typedef uint8_t lv_line_style_t;lv_line_style_t43,967
#define lv_line_set_y_inv lv_line_set_y_inv86,2408

lib/lvgl/src/lv_widgets/lv_label.h,3154
#define LV_LABEL_HLV_LABEL_H7,51
#define LV_LABEL_DOT_NUM LV_LABEL_DOT_NUM30,480
#define LV_LABEL_POS_LAST LV_LABEL_POS_LAST31,507
#define LV_LABEL_TEXT_SEL_OFF LV_LABEL_TEXT_SEL_OFF32,540
LV_EXPORT_CONST_INT(LV_LABEL_DOT_NUM);LV_LABEL_DOT_NUM34,596
LV_EXPORT_CONST_INT(LV_LABEL_POS_LAST);LV_LABEL_POS_LAST35,635
LV_EXPORT_CONST_INT(LV_LABEL_TEXT_SEL_OFF);LV_LABEL_TEXT_SEL_OFF36,675
    LV_LABEL_LONG_EXPAND,    /**< Expand the object size to the text size*/LV_LABEL_LONG_EXPAND44,847
    LV_LABEL_LONG_BREAK,     /**< Keep the object width, break the too long lines and expand the objectLV_LABEL_LONG_BREAK45,923
    LV_LABEL_LONG_DOT,       /**< Keep the size and write dots at the end if the text is too long*/LV_LABEL_LONG_DOT47,1068
    LV_LABEL_LONG_SROLL,      /**< Keep the size and roll the text back and forth*/LV_LABEL_LONG_SROLL48,1168
    LV_LABEL_LONG_SROLL_CIRC, /**< Keep the size and roll the text circularly*/LV_LABEL_LONG_SROLL_CIRC49,1252
    LV_LABEL_LONG_CROP,      /**< Keep the size and crop the text out of it*/LV_LABEL_LONG_CROP50,1332
typedef uint8_t lv_label_long_mode_t;lv_label_long_mode_t52,1413
    LV_LABEL_ALIGN_LEFT, /**< Align text to left */LV_LABEL_ALIGN_LEFT56,1484
    LV_LABEL_ALIGN_CENTER, /**< Align text to center */LV_LABEL_ALIGN_CENTER57,1536
    LV_LABEL_ALIGN_RIGHT, /**< Align text to right */LV_LABEL_ALIGN_RIGHT58,1592
    LV_LABEL_ALIGN_AUTO, /**< Use LEFT or RIGHT depending on the direction of the text (LTR/RTL)*/LV_LABEL_ALIGN_AUTO59,1646
typedef uint8_t lv_label_align_t;lv_label_align_t61,1748
    char * text;        /*Text of the label*/text67,1928
        char * tmp_ptr; /* Pointer to the allocated memory containing the character which are replaced by dots (Handledtmp_ptr70,1987
        char tmp[LV_LABEL_DOT_NUM + 1]; /* Directly store the characters if <=4 characters */tmp72,2152
    } dot;dot73,2246
    uint32_t dot_end;  /*The text end position in dot mode (Handled by the library)*/dot_end75,2258
    uint16_t anim_speed; /*Speed of scroll and roll animation in px/sec unit*/anim_speed78,2366
    lv_point_t offset; /*Text draw position offset*/offset81,2453
    lv_draw_label_hint_t hint; /*Used to buffer info about large text*/hint84,2534
    uint32_t sel_start;sel_start88,2636
    uint32_t sel_end;sel_end89,2660
    lv_label_long_mode_t long_mode : 3; /*Determinate what to do with the long texts*/long_mode92,2690
    uint8_t static_txt : 1;             /*Flag to indicate the text is static*/static_txt93,2777
    uint8_t align : 2;                  /*Align type from 'lv_label_align_t'*/align94,2857
    uint8_t recolor : 1;                /*Enable in-line letter re-coloring*/recolor95,2936
    uint8_t expand : 1;                 /*Ignore real width (used by the library with LV_LABEL_LONG_SROLL)*/expand96,3014
    uint8_t dot_tmp_alloc : 1; /*True if dot_tmp has been allocated. False if dot_tmp directly holds up to 4 bytes ofdot_tmp_alloc97,3123
} lv_label_ext_t;lv_label_ext_t99,3289
    LV_LABEL_PART_MAIN,LV_LABEL_PART_MAIN103,3334
typedef uint8_t lv_label_part_t;lv_label_part_t106,3362

lib/lvgl/src/lv_widgets/lv_keyboard.c,2398
#define LV_OBJX_NAME LV_OBJX_NAME20,302
static lv_signal_cb_t ancestor_signal;ancestor_signal35,681
static const char * const default_kb_map_lc[] = {"1#", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", LV_SYMBOL_BACKSPACE, "\n",default_kb_map_lc37,743
static const lv_btnmatrix_ctrl_t default_kb_ctrl_lc_map[] = {default_kb_ctrl_lc_map43,1290
static const char * const default_kb_map_uc[] = {"1#", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", LV_SYMBOL_BACKSPACE, "\n",default_kb_map_uc50,1607
static const lv_btnmatrix_ctrl_t default_kb_ctrl_uc_map[] = {default_kb_ctrl_uc_map56,2154
static const char * const default_kb_map_spec[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", LV_SYMBOL_BACKSPACE, "\n",default_kb_map_spec63,2471
static const lv_btnmatrix_ctrl_t default_kb_ctrl_spec_map[] = {default_kb_ctrl_spec_map69,3015
static const char * const default_kb_map_num[] = {"1", "2", "3", LV_SYMBOL_CLOSE, "\n",default_kb_map_num76,3305
static const lv_btnmatrix_ctrl_t default_kb_ctrl_num_map[] = {default_kb_ctrl_num_map82,3726
static const char * * kb_map[4] = {kb_map90,3939
static const lv_btnmatrix_ctrl_t * kb_ctrl[4] = {kb_ctrl96,4136
lv_obj_t * lv_keyboard_create(lv_obj_t * par, const lv_obj_t * copy)lv_keyboard_create117,4699
void lv_keyboard_set_textarea(lv_obj_t * kb, lv_obj_t * ta)lv_keyboard_set_textarea189,7156
void lv_keyboard_set_mode(lv_obj_t * kb, lv_keyboard_mode_t mode)lv_keyboard_set_mode216,7886
void lv_keyboard_set_cursor_manage(lv_obj_t * kb, bool en)lv_keyboard_set_cursor_manage233,8381
void lv_keyboard_set_map(lv_obj_t * kb, lv_keyboard_mode_t mode, const char * map[])lv_keyboard_set_map260,9089
void lv_keyboard_set_ctrl_map(lv_obj_t * kb, lv_keyboard_mode_t mode, const lv_btnmatrix_ctrl_t ctrl_map[])lv_keyboard_set_ctrl_map275,9661
lv_obj_t * lv_keyboard_get_textarea(const lv_obj_t * kb)lv_keyboard_get_textarea290,10089
lv_keyboard_mode_t lv_keyboard_get_mode(const lv_obj_t * kb)lv_keyboard_get_mode303,10409
bool lv_keyboard_get_cursor_manage(const lv_obj_t * kb)lv_keyboard_get_cursor_manage316,10753
void lv_keyboard_def_event_cb(lv_obj_t * kb, lv_event_t event)lv_keyboard_def_event_cb335,11300
static lv_res_t lv_keyboard_signal(lv_obj_t * kb, lv_signal_t sign, void * param)lv_keyboard_signal440,15296
static void lv_keyboard_update_map(lv_obj_t * kb)lv_keyboard_update_map474,16434

lib/lvgl/src/lv_widgets/lv_cpicker.c,3603
#define LV_OBJX_NAME LV_OBJX_NAME23,445
    #define LV_CPICKER_DEF_TYPE LV_CPICKER_DEF_TYPE26,508
    #define LV_CPICKER_DEF_HUE LV_CPICKER_DEF_HUE30,596
    #define LV_CPICKER_DEF_SATURATION LV_CPICKER_DEF_SATURATION34,671
    #define LV_CPICKER_DEF_VALUE LV_CPICKER_DEF_VALUE38,750
    #define LV_CPICKER_DEF_HSV LV_CPICKER_DEF_HSV42,822
    #define LV_CPICKER_DEF_QF LV_CPICKER_DEF_QF46,999
#define TRI_OFFSET TRI_OFFSET49,1039
#define OUTER_MASK_WIDTH OUTER_MASK_WIDTH56,1456
static lv_signal_cb_t ancestor_signal;ancestor_signal85,2633
static lv_design_cb_t ancestor_design;ancestor_design86,2672
lv_obj_t * lv_cpicker_create(lv_obj_t * par, const lv_obj_t * copy)lv_cpicker_create102,3122
void lv_cpicker_set_type(lv_obj_t * cpicker, lv_cpicker_type_t type)lv_cpicker_set_type172,5415
bool lv_cpicker_set_hue(lv_obj_t * cpicker, uint16_t hue)lv_cpicker_set_hue192,5936
bool lv_cpicker_set_saturation(lv_obj_t * cpicker, uint8_t saturation)lv_cpicker_set_saturation205,6321
bool lv_cpicker_set_value(lv_obj_t * cpicker, uint8_t val)lv_cpicker_set_value218,6709
bool lv_cpicker_set_hsv(lv_obj_t * cpicker, lv_color_hsv_t hsv)lv_cpicker_set_hsv231,7067
bool lv_cpicker_set_color(lv_obj_t * cpicker, lv_color_t color)lv_cpicker_set_color258,7711
void lv_cpicker_set_color_mode(lv_obj_t * cpicker, lv_cpicker_color_mode_t mode)lv_cpicker_set_color_mode274,8140
void lv_cpicker_set_color_mode_fixed(lv_obj_t * cpicker, bool fixed)lv_cpicker_set_color_mode_fixed290,8592
void lv_cpicker_set_knob_colored(lv_obj_t * cpicker, bool en)lv_cpicker_set_knob_colored304,8973
lv_cpicker_color_mode_t lv_cpicker_get_color_mode(lv_obj_t * cpicker)lv_cpicker_get_color_mode322,9401
bool lv_cpicker_get_color_mode_fixed(lv_obj_t * cpicker)lv_cpicker_get_color_mode_fixed336,9771
uint16_t lv_cpicker_get_hue(lv_obj_t * cpicker)lv_cpicker_get_hue350,10112
uint8_t lv_cpicker_get_saturation(lv_obj_t * cpicker)lv_cpicker_get_saturation364,10443
uint8_t lv_cpicker_get_value(lv_obj_t * cpicker)lv_cpicker_get_value378,10768
lv_color_hsv_t lv_cpicker_get_hsv(lv_obj_t * cpicker)lv_cpicker_get_hsv392,11086
lv_color_t lv_cpicker_get_color(lv_obj_t * cpicker)lv_cpicker_get_color406,11417
bool lv_cpicker_get_knob_colored(lv_obj_t * cpicker)lv_cpicker_get_knob_colored420,11820
static lv_design_res_t lv_cpicker_design(lv_obj_t * cpicker, const lv_area_t * clip_area, lv_design_mode_t mode)lv_cpicker_design448,12675
static void draw_disc_grad(lv_obj_t * cpicker, const lv_area_t * mask)draw_disc_grad474,13462
static void draw_rect_grad(lv_obj_t * cpicker, const lv_area_t * mask)draw_rect_grad546,16162
static void draw_knob(lv_obj_t * cpicker, const lv_area_t * mask)draw_knob607,18236
static void invalidate_knob(lv_obj_t * cpicker)invalidate_knob626,18739
static lv_area_t get_knob_area(lv_obj_t * cpicker)get_knob_area633,18892
static lv_res_t lv_cpicker_signal(lv_obj_t * cpicker, lv_signal_t sign, void * param)lv_cpicker_signal668,20272
static lv_style_list_t * lv_cpicker_get_style(lv_obj_t * cpicker, uint8_t part)lv_cpicker_get_style885,28278
static bool lv_cpicker_hit(lv_obj_t * cpicker, const lv_point_t * p)lv_cpicker_hit906,28806
static void next_color_mode(lv_obj_t * cpicker)next_color_mode922,29295
static void refr_knob_pos(lv_obj_t * cpicker)refr_knob_pos930,29516
static lv_res_t double_click_reset(lv_obj_t * cpicker)double_click_reset968,30849
static lv_color_t angle_to_mode_color(lv_obj_t * cpicker, uint16_t angle)angle_to_mode_color1001,31926
static uint16_t get_angle(lv_obj_t * cpicker)get_angle1020,32609

lib/lvgl/src/lv_widgets/lv_btn.c,993
#define LV_OBJX_NAME LV_OBJX_NAME25,450
#define LV_BTN_INK_VALUE_MAX LV_BTN_INK_VALUE_MAX26,480
#define LV_BTN_INK_VALUE_MAX_SHIFT LV_BTN_INK_VALUE_MAX_SHIFT27,513
static lv_signal_cb_t ancestor_signal;ancestor_signal42,945
static lv_design_cb_t ancestor_design;ancestor_design43,984
lv_obj_t * lv_btn_create(lv_obj_t * par, const lv_obj_t * copy)lv_btn_create59,1410
void lv_btn_set_checkable(lv_obj_t * btn, bool tgl)lv_btn_set_checkable120,3049
void lv_btn_set_state(lv_obj_t * btn, lv_btn_state_t state)lv_btn_set_state134,3391
void lv_btn_toggle(lv_obj_t * btn)lv_btn_toggle169,4709
lv_btn_state_t lv_btn_get_state(const lv_obj_t * btn)lv_btn_get_state191,5304
bool lv_btn_get_checkable(const lv_obj_t * btn)lv_btn_get_checkable217,6091
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)lv_btn_design240,6859
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)lv_btn_signal262,7575

lib/lvgl/src/lv_widgets/lv_switch.c,847
#define LV_OBJX_NAME LV_OBJX_NAME28,535
static lv_signal_cb_t ancestor_signal;ancestor_signal44,1042
static lv_design_cb_t ancestor_design;ancestor_design45,1081
lv_obj_t * lv_switch_create(lv_obj_t * par, const lv_obj_t * copy)lv_switch_create61,1508
void lv_switch_on(lv_obj_t * sw, lv_anim_enable_t anim)lv_switch_on121,3256
void lv_switch_off(lv_obj_t * sw, lv_anim_enable_t anim)lv_switch_off139,3714
bool lv_switch_toggle(lv_obj_t * sw, lv_anim_enable_t anim)lv_switch_toggle158,4231
static lv_design_res_t lv_switch_design(lv_obj_t * sw, const lv_area_t * clip_area, lv_design_mode_t mode)lv_switch_design193,5189
static lv_res_t lv_switch_signal(lv_obj_t * sw, lv_signal_t sign, void * param)lv_switch_signal265,7979
static lv_style_list_t * lv_switch_get_style(lv_obj_t * sw, uint8_t part)lv_switch_get_style333,10542

lib/lvgl/src/lv_widgets/lv_win.h,1374
#define LV_WIN_HLV_WIN_H7,47
    lv_obj_t * page;                  /*Pointer to a page which holds the content*/page56,1041
    lv_obj_t * header;                /*Pointer to the header container of the window*/header57,1125
    char * title_txt;                 /*Pointer to the title label of the window*/title_txt58,1213
    lv_coord_t btn_w;                 /*Width of the control buttons*/btn_w59,1296
    uint8_t title_txt_align;          /*Control the alignment of the header text*/title_txt_align60,1367
} lv_win_ext_t;lv_win_ext_t61,1450
    LV_WIN_PART_BG = LV_OBJ_PART_MAIN, /**< Window object background style. */LV_WIN_PART_BG65,1495
    _LV_WIN_PART_VIRTUAL_LAST,_LV_WIN_PART_VIRTUAL_LAST66,1574
    LV_WIN_PART_HEADER = _LV_OBJ_PART_REAL_LAST, /**< Window titlebar background style. */LV_WIN_PART_HEADER67,1605
    LV_WIN_PART_CONTENT_SCROLLABLE, /**< Window content style. */LV_WIN_PART_CONTENT_SCROLLABLE68,1696
    LV_WIN_PART_SCROLLBAR, /**< Window scrollbar style. */LV_WIN_PART_SCROLLBAR69,1762
    _LV_WIN_PART_REAL_LAST_LV_WIN_PART_REAL_LAST70,1821
static inline bool lv_win_get_drag(const lv_obj_t * win)lv_win_get_drag260,7466
static inline void lv_win_scroll_hor(lv_obj_t * win, lv_coord_t dist)lv_win_scroll_hor288,8317
static inline void lv_win_scroll_ver(lv_obj_t * win, lv_coord_t dist)lv_win_scroll_ver298,8652

lib/lvgl/src/lv_widgets/lv_arc.h,1719
#define LV_ARC_HLV_ARC_H7,47
    LV_ARC_TYPE_NORMAL,LV_ARC_TYPE_NORMAL31,394
    LV_ARC_TYPE_SYMMETRIC,LV_ARC_TYPE_SYMMETRIC32,418
    LV_ARC_TYPE_REVERSELV_ARC_TYPE_REVERSE33,445
typedef uint8_t lv_arc_type_t;lv_arc_type_t35,472
    uint16_t rotation_angle;rotation_angle40,569
    uint16_t arc_angle_start;arc_angle_start41,598
    uint16_t arc_angle_end;arc_angle_end42,628
    uint16_t bg_angle_start;bg_angle_start43,656
    uint16_t bg_angle_end;bg_angle_end44,685
    lv_style_list_t style_arc;style_arc45,712
    lv_style_list_t style_knob; /* Style of the knob */style_knob46,743
    int16_t cur_value; /*Current value of the arc*/cur_value48,800
    int16_t min_value; /*Minimum value of the arc*/min_value49,852
    int16_t max_value; /*Maximum value of the arc*/max_value50,904
    uint16_t dragging    : 1;dragging51,956
    uint16_t type        : 2;type52,986
    uint16_t adjustable  : 1;adjustable53,1016
    uint16_t min_close   : 1;  /*1: the last pressed angle was closer to minimum end*/min_close54,1046
    uint16_t chg_rate; /*Drag angle rate of change of the arc (degrees/sec)*/chg_rate55,1133
    uint32_t last_tick; /*Last dragging event timestamp of the arc*/last_tick56,1211
    int16_t last_angle; /*Last dragging angle of the arc*/last_angle57,1280
} lv_arc_ext_t;lv_arc_ext_t58,1339
    LV_ARC_PART_BG = LV_OBJ_PART_MAIN,LV_ARC_PART_BG62,1384
    LV_ARC_PART_INDIC,LV_ARC_PART_INDIC63,1423
    LV_ARC_PART_KNOB,LV_ARC_PART_KNOB64,1446
    _LV_ARC_PART_VIRTUAL_LAST,_LV_ARC_PART_VIRTUAL_LAST65,1468
    _LV_ARC_PART_REAL_LAST = _LV_OBJ_PART_REAL_LAST,_LV_ARC_PART_REAL_LAST66,1499
typedef uint8_t lv_arc_part_t;lv_arc_part_t68,1555

lib/lvgl/src/lv_widgets/lv_canvas.h,1188
#define LV_CANVAS_HLV_CANVAS_H7,53
    lv_img_ext_t img; /*Ext. of ancestor*/img33,504
    lv_img_dsc_t dsc;dsc35,579
} lv_canvas_ext_t;lv_canvas_ext_t36,601
    LV_CANVAS_PART_MAIN,LV_CANVAS_PART_MAIN40,644
typedef uint8_t lv_canvas_part_t;lv_canvas_part_t42,672
#define LV_CANVAS_BUF_SIZE_TRUE_COLOR(LV_CANVAS_BUF_SIZE_TRUE_COLOR250,8611
#define LV_CANVAS_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(LV_CANVAS_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED251,8688
#define LV_CANVAS_BUF_SIZE_TRUE_COLOR_ALPHA(LV_CANVAS_BUF_SIZE_TRUE_COLOR_ALPHA252,8791
#define LV_CANVAS_BUF_SIZE_ALPHA_1BIT(LV_CANVAS_BUF_SIZE_ALPHA_1BIT255,8919
#define LV_CANVAS_BUF_SIZE_ALPHA_2BIT(LV_CANVAS_BUF_SIZE_ALPHA_2BIT256,8996
#define LV_CANVAS_BUF_SIZE_ALPHA_4BIT(LV_CANVAS_BUF_SIZE_ALPHA_4BIT257,9073
#define LV_CANVAS_BUF_SIZE_ALPHA_8BIT(LV_CANVAS_BUF_SIZE_ALPHA_8BIT258,9150
#define LV_CANVAS_BUF_SIZE_INDEXED_1BIT(LV_CANVAS_BUF_SIZE_INDEXED_1BIT261,9251
#define LV_CANVAS_BUF_SIZE_INDEXED_2BIT(LV_CANVAS_BUF_SIZE_INDEXED_2BIT262,9332
#define LV_CANVAS_BUF_SIZE_INDEXED_4BIT(LV_CANVAS_BUF_SIZE_INDEXED_4BIT263,9413
#define LV_CANVAS_BUF_SIZE_INDEXED_8BIT(LV_CANVAS_BUF_SIZE_INDEXED_8BIT264,9494

lib/lvgl/src/lv_misc/lv_anim.h,4584
#define ANIM_HANIM_H7,43
    LV_ANIM_OFF,LV_ANIM_OFF33,495
    LV_ANIM_ON,LV_ANIM_ON34,512
typedef uint8_t lv_anim_enable_t;lv_anim_enable_t37,532
typedef lv_coord_t lv_anim_value_t;lv_anim_value_t40,600
#define LV_ANIM_REPEAT_INFINITE LV_ANIM_REPEAT_INFINITE44,659
typedef lv_anim_value_t (*lv_anim_path_cb_t)(const struct _lv_anim_path_t *, const struct _lv_anim_t *);lv_anim_path_cb_t50,796
typedef struct _lv_anim_path_t {_lv_anim_path_t52,902
    lv_anim_path_cb_t cb;cb53,935
    void * user_data;user_data54,961
} lv_anim_path_t;lv_anim_path_t55,983
typedef void (*lv_anim_exec_xcb_t)(void *, lv_anim_value_t);lv_anim_exec_xcb_t65,1328
typedef void (*lv_anim_custom_exec_cb_t)(struct _lv_anim_t *, lv_anim_value_t);lv_anim_custom_exec_cb_t69,1567
typedef void (*lv_anim_ready_cb_t)(struct _lv_anim_t *);lv_anim_ready_cb_t72,1699
typedef void (*lv_anim_start_cb_t)(struct _lv_anim_t *);lv_anim_start_cb_t75,1834
typedef struct _lv_anim_t {_lv_anim_t78,1921
    void * var;                  /**<Variable to animate*/var79,1949
    lv_anim_exec_xcb_t exec_cb;   /**< Function to execute to animate*/exec_cb80,2008
    lv_anim_start_cb_t start_cb; /**< Call it when the animation is starts (considering `delay`)*/start_cb81,2080
    lv_anim_ready_cb_t ready_cb; /**< Call it when the animation is ready*/ready_cb82,2179
    lv_anim_path_t path;         /**< Describe the path (curve) of animations*/path83,2255
    int32_t start;               /**< Start value*/start84,2335
    int32_t current;             /**< Current value */current85,2387
    int32_t end;                 /**< End value*/end86,2442
    int32_t time;               /**< Animation time in ms*/time87,2492
    int32_t act_time;            /**< Current time in animation. Set to negative to make delay.*/act_time88,2552
    uint32_t playback_delay;     /**< Wait before play back*/playback_delay89,2650
    uint32_t playback_time;      /**< Duration of playback animation*/playback_time90,2712
    uint32_t repeat_delay;       /**< Wait before repeat*/repeat_delay91,2783
    uint16_t repeat_cnt;         /**< Repeat count for the animation*/repeat_cnt92,2842
    uint8_t early_apply  : 1;    /**< 1: Apply start value immediately even is there is `delay` */early_apply93,2913
    lv_anim_user_data_t user_data; /**< Custom user data*/user_data95,3033
    uint32_t time_orig;time_orig99,3156
    uint8_t playback_now : 1; /**< Play back is in progress*/playback_now100,3180
    uint32_t has_run : 1;     /**< Indicates the animation has run in this round*/has_run101,3242
} lv_anim_t;lv_anim_t102,3325
static inline void lv_anim_set_var(lv_anim_t * a, void * var)lv_anim_set_var129,3835
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)lv_anim_set_exec_cb141,4181
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)lv_anim_set_time151,4458
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)lv_anim_set_delay161,4732
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)lv_anim_set_values172,5017
static inline void lv_anim_set_custom_exec_cb(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)lv_anim_set_custom_exec_cb188,5647
static inline void lv_anim_set_path(lv_anim_t * a, const lv_anim_path_t * path)lv_anim_set_path200,6067
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)lv_anim_set_start_cb211,6421
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)lv_anim_set_ready_cb221,6719
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint16_t time)lv_anim_set_playback_time231,7071
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint16_t delay)lv_anim_set_playback_delay241,7399
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)lv_anim_set_repeat_count251,7723
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)lv_anim_set_repeat_delay261,8016
static inline void lv_anim_path_init(lv_anim_path_t * path)lv_anim_path_init276,8334
static inline void lv_anim_path_set_cb(lv_anim_path_t * path, lv_anim_path_cb_t cb)lv_anim_path_set_cb286,8557
static inline void lv_anim_path_set_user_data(lv_anim_path_t * path, void * user_data)lv_anim_path_set_user_data296,8794
static inline int32_t lv_anim_get_delay(lv_anim_t * a)lv_anim_get_delay306,9085
static inline bool lv_anim_custom_del(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)lv_anim_custom_del341,10483

lib/lvgl/src/lv_misc/lv_task.h,1150
#define LV_TASK_HLV_TASK_H8,206
#define LV_ATTRIBUTE_TASK_HANDLERLV_ATTRIBUTE_TASK_HANDLER28,541
#define LV_NO_TASK_READY LV_NO_TASK_READY31,583
typedef void (*lv_task_cb_t)(struct _lv_task_t *);lv_task_cb_t41,760
    LV_TASK_PRIO_OFF = 0,LV_TASK_PRIO_OFF47,863
    LV_TASK_PRIO_LOWEST,LV_TASK_PRIO_LOWEST48,889
    LV_TASK_PRIO_LOW,LV_TASK_PRIO_LOW49,914
    LV_TASK_PRIO_MID,LV_TASK_PRIO_MID50,936
    LV_TASK_PRIO_HIGH,LV_TASK_PRIO_HIGH51,958
    LV_TASK_PRIO_HIGHEST,LV_TASK_PRIO_HIGHEST52,981
    _LV_TASK_PRIO_NUM,_LV_TASK_PRIO_NUM53,1007
typedef uint8_t lv_task_prio_t;lv_task_prio_t55,1033
typedef struct _lv_task_t {_lv_task_t60,1101
    uint32_t period; /**< How often the task should run */period61,1129
    uint32_t last_run; /**< Last time the task ran */last_run62,1188
    lv_task_cb_t task_cb; /**< Task function */task_cb63,1242
    void * user_data; /**< Custom user data */user_data65,1291
    int32_t repeat_count; /**< 1: Task times;  -1 : infinity;  0 : stop ;  n>0: residual times */repeat_count67,1339
    uint8_t prio : 3; /**< Task priority */prio68,1437
} lv_task_t;lv_task_t69,1481

lib/lvgl/src/lv_misc/lv_types.h,593
#define LV_TYPES_HLV_TYPES_H7,51
#define LV_ARCH_64LV_ARCH_6428,527
#define LV_ARCH_64LV_ARCH_6431,602
#define LV_ARCH_64LV_ARCH_6435,779
    LV_RES_INV = 0, /*Typically indicates that the object is deleted (become invalid) in the actionLV_RES_INV48,911
    LV_RES_OK,      /*The object is valid (no deleted) after the action*/LV_RES_OK50,1072
typedef uint8_t lv_res_t;lv_res_t52,1149
typedef uintptr_t lv_uintptr_t;lv_uintptr_t58,1312
typedef uint64_t lv_uintptr_t;lv_uintptr_t64,1416
typedef uint32_t lv_uintptr_t;lv_uintptr_t66,1453
#define LV_UNUSED(LV_UNUSED80,1637

lib/lvgl/src/lv_misc/lv_debug.h,1030
#define LV_DEBUG_HLV_DEBUG_H7,51
#define LV_DEBUG_ASSERT(LV_DEBUG_ASSERT45,727
#define LV_DEBUG_IS_NULL(LV_DEBUG_IS_NULL60,1223
#define LV_DEBUG_CHECK_MEM_INTEGRITY(LV_DEBUG_CHECK_MEM_INTEGRITY65,1325
#define LV_DEBUG_IS_STR(LV_DEBUG_IS_STR69,1432
#  define LV_ASSERT_NULL(LV_ASSERT_NULL81,1687
# define LV_ASSERT_NULL(LV_ASSERT_NULL84,1786
#  define LV_ASSERT_MEM(LV_ASSERT_MEM89,1866
# define LV_ASSERT_MEM(LV_ASSERT_MEM92,1965
#  define LV_ASSERT_MEM_INTEGRITY(LV_ASSERT_MEM_INTEGRITY97,2064
# define LV_ASSERT_MEM_INTEGRITY(LV_ASSERT_MEM_INTEGRITY100,2192
#  define LV_ASSERT_STR(LV_ASSERT_STR105,2280
#   define LV_ASSERT_STR(LV_ASSERT_STR109,2492
#   define LV_ASSERT_STR(LV_ASSERT_STR111,2549
#define LV_DEBUG_ASSERT(LV_DEBUG_ASSERT118,2627
#define LV_ASSERT_NULL(LV_ASSERT_NULL120,2683
#define LV_ASSERT_MEM(LV_ASSERT_MEM121,2709
#define LV_ASSERT_MEM_INTEGRITY(LV_ASSERT_MEM_INTEGRITY122,2734
#define LV_ASSERT_STR(LV_ASSERT_STR123,2768
#define LV_ASSERT_OBJ(LV_ASSERT_OBJ124,2793

lib/lvgl/src/lv_misc/lv_color.h,8846
#define LV_COLOR_HLV_COLOR_H7,51
#define LV_COLOR_WHITE LV_COLOR_WHITE37,734
#define LV_COLOR_SILVER LV_COLOR_SILVER38,789
#define LV_COLOR_GRAY LV_COLOR_GRAY39,845
#define LV_COLOR_BLACK LV_COLOR_BLACK40,899
#define LV_COLOR_RED LV_COLOR_RED41,954
#define LV_COLOR_MAROON LV_COLOR_MAROON42,1007
#define LV_COLOR_YELLOW LV_COLOR_YELLOW43,1063
#define LV_COLOR_OLIVE LV_COLOR_OLIVE44,1119
#define LV_COLOR_LIME LV_COLOR_LIME45,1174
#define LV_COLOR_GREEN LV_COLOR_GREEN46,1228
#define LV_COLOR_CYAN LV_COLOR_CYAN47,1283
#define LV_COLOR_AQUA LV_COLOR_AQUA48,1337
#define LV_COLOR_TEAL LV_COLOR_TEAL49,1373
#define LV_COLOR_BLUE LV_COLOR_BLUE50,1427
#define LV_COLOR_NAVY LV_COLOR_NAVY51,1481
#define LV_COLOR_MAGENTA LV_COLOR_MAGENTA52,1535
#define LV_COLOR_PURPLE LV_COLOR_PURPLE53,1592
#define LV_COLOR_ORANGE LV_COLOR_ORANGE54,1648
    LV_OPA_TRANSP = 0,LV_OPA_TRANSP60,1744
    LV_OPA_0      = 0,LV_OPA_061,1767
    LV_OPA_10     = 25,LV_OPA_1062,1790
    LV_OPA_20     = 51,LV_OPA_2063,1814
    LV_OPA_30     = 76,LV_OPA_3064,1838
    LV_OPA_40     = 102,LV_OPA_4065,1862
    LV_OPA_50     = 127,LV_OPA_5066,1887
    LV_OPA_60     = 153,LV_OPA_6067,1912
    LV_OPA_70     = 178,LV_OPA_7068,1937
    LV_OPA_80     = 204,LV_OPA_8069,1962
    LV_OPA_90     = 229,LV_OPA_9070,1987
    LV_OPA_100    = 255,LV_OPA_10071,2012
    LV_OPA_COVER  = 255,LV_OPA_COVER72,2037
#define LV_OPA_MIN LV_OPA_MIN75,2066
#define LV_OPA_MAX LV_OPA_MAX76,2135
#define LV_COLOR_SIZE LV_COLOR_SIZE79,2226
#define LV_COLOR_SIZE LV_COLOR_SIZE81,2276
#define LV_COLOR_SIZE LV_COLOR_SIZE83,2327
#define LV_COLOR_SIZE LV_COLOR_SIZE85,2379
#define LV_COLOR_MIX_ROUND_OFS LV_COLOR_MIX_ROUND_OFS101,2846
#define LV_COLOR_MIX_ROUND_OFS LV_COLOR_MIX_ROUND_OFS103,2885
# define LV_COLOR_SET_R1(LV_COLOR_SET_R1111,3108
# define LV_COLOR_SET_G1(LV_COLOR_SET_G1112,3173
# define LV_COLOR_SET_B1(LV_COLOR_SET_B1113,3240
# define LV_COLOR_SET_A1(LV_COLOR_SET_A1114,3306
# define LV_COLOR_GET_R1(LV_COLOR_GET_R1116,3338
# define LV_COLOR_GET_G1(LV_COLOR_GET_G1117,3377
# define LV_COLOR_GET_B1(LV_COLOR_GET_B1118,3418
# define LV_COLOR_GET_A1(LV_COLOR_GET_A1119,3458
# define LV_COLOR_SET_R8(LV_COLOR_SET_R8121,3489
# define LV_COLOR_SET_G8(LV_COLOR_SET_G8122,3553
# define LV_COLOR_SET_B8(LV_COLOR_SET_B8123,3619
# define LV_COLOR_SET_A8(LV_COLOR_SET_A8124,3684
# define LV_COLOR_GET_R8(LV_COLOR_GET_R8126,3731
# define LV_COLOR_GET_G8(LV_COLOR_GET_G8127,3770
# define LV_COLOR_GET_B8(LV_COLOR_GET_B8128,3811
# define LV_COLOR_GET_A8(LV_COLOR_GET_A8129,3851
# define LV_COLOR_SET_R16(LV_COLOR_SET_R16131,3885
# define LV_COLOR_SET_G16(LV_COLOR_SET_G16132,3951
# define LV_COLOR_SET_G16_SWAP(LV_COLOR_SET_G16_SWAP133,4019
# define LV_COLOR_SET_B16(LV_COLOR_SET_B16134,4143
# define LV_COLOR_SET_A16(LV_COLOR_SET_A16135,4210
# define LV_COLOR_GET_R16(LV_COLOR_GET_R16137,4258
# define LV_COLOR_GET_G16(LV_COLOR_GET_G16138,4298
# define LV_COLOR_GET_G16_SWAP(LV_COLOR_GET_G16_SWAP139,4340
# define LV_COLOR_GET_B16(LV_COLOR_GET_B16140,4415
# define LV_COLOR_GET_A16(LV_COLOR_GET_A16141,4456
# define LV_COLOR_SET_R32(LV_COLOR_SET_R32143,4491
# define LV_COLOR_SET_G32(LV_COLOR_SET_G32144,4559
# define LV_COLOR_SET_B32(LV_COLOR_SET_B32145,4629
# define LV_COLOR_SET_A32(LV_COLOR_SET_A32146,4698
# define LV_COLOR_GET_R32(LV_COLOR_GET_R32148,4769
# define LV_COLOR_GET_G32(LV_COLOR_GET_G32149,4809
# define LV_COLOR_GET_B32(LV_COLOR_GET_B32150,4851
# define LV_COLOR_GET_A32(LV_COLOR_GET_A32151,4892
# define LV_COLOR_SET_R(LV_COLOR_SET_R159,5130
# define LV_COLOR_SET_G(LV_COLOR_SET_G160,5181
# define LV_COLOR_SET_B(LV_COLOR_SET_B161,5232
# define LV_COLOR_SET_A(LV_COLOR_SET_A162,5283
# define LV_COLOR_GET_R(LV_COLOR_GET_R164,5335
# define LV_COLOR_GET_G(LV_COLOR_GET_G165,5381
# define LV_COLOR_GET_B(LV_COLOR_GET_B166,5427
# define LV_COLOR_GET_A(LV_COLOR_GET_A167,5473
# define LV_COLOR_SET_R(LV_COLOR_SET_R170,5546
# define LV_COLOR_SET_G(LV_COLOR_SET_G171,5597
# define LV_COLOR_SET_B(LV_COLOR_SET_B172,5648
# define LV_COLOR_SET_A(LV_COLOR_SET_A173,5699
# define LV_COLOR_GET_R(LV_COLOR_GET_R175,5751
# define LV_COLOR_GET_G(LV_COLOR_GET_G176,5797
# define LV_COLOR_GET_B(LV_COLOR_GET_B177,5843
# define LV_COLOR_GET_A(LV_COLOR_GET_A178,5889
# define LV_COLOR_SET_R(LV_COLOR_SET_R181,5963
#   define LV_COLOR_SET_G(LV_COLOR_SET_G183,6042
#   define LV_COLOR_SET_G(LV_COLOR_SET_G185,6103
# define LV_COLOR_SET_B(LV_COLOR_SET_B187,6170
# define LV_COLOR_SET_A(LV_COLOR_SET_A188,6222
# define LV_COLOR_GET_R(LV_COLOR_GET_R190,6275
#   define LV_COLOR_GET_G(LV_COLOR_GET_G192,6349
#   define LV_COLOR_GET_G(LV_COLOR_GET_G194,6405
# define LV_COLOR_GET_B(LV_COLOR_GET_B196,6467
# define LV_COLOR_GET_A(LV_COLOR_GET_A197,6516
# define LV_COLOR_SET_R(LV_COLOR_SET_R200,6593
# define LV_COLOR_SET_G(LV_COLOR_SET_G201,6645
# define LV_COLOR_SET_B(LV_COLOR_SET_B202,6697
# define LV_COLOR_SET_A(LV_COLOR_SET_A203,6749
# define LV_COLOR_GET_R(LV_COLOR_GET_R205,6802
# define LV_COLOR_GET_G(LV_COLOR_GET_G206,6849
# define LV_COLOR_GET_B(LV_COLOR_GET_B207,6896
# define LV_COLOR_GET_A(LV_COLOR_GET_A208,6943
    uint8_t full; /*must be declared first to set all bits of byte via initializer list */full216,7081
    } ch;ch221,7262
} lv_color1_t;lv_color1_t222,7272
        uint8_t blue : 2;blue226,7317
        uint8_t green : 3;green227,7343
        uint8_t red : 3;red228,7370
    } ch;ch229,7395
    uint8_t full;full230,7405
} lv_color8_t;lv_color8_t231,7423
        uint16_t blue : 5;blue236,7494
        uint16_t green : 6;green237,7521
        uint16_t red : 5;red238,7549
    } ch;ch245,7701
    uint16_t full;full246,7711
} lv_color16_t;lv_color16_t247,7730
        uint8_t blue;blue251,7776
        uint8_t green;green252,7798
        uint8_t red;red253,7821
        uint8_t alpha;alpha254,7842
    } ch;ch255,7865
    uint32_t full;full256,7875
} lv_color32_t;lv_color32_t257,7894
typedef uint8_t lv_color_int_t;lv_color_int_t260,7935
typedef lv_color1_t lv_color_t;lv_color_t261,7967
#define _LV_COLOR_ZERO_INITIALIZER _LV_COLOR_ZERO_INITIALIZER262,7999
typedef uint8_t lv_color_int_t;lv_color_int_t264,8067
typedef lv_color8_t lv_color_t;lv_color_t265,8099
#define _LV_COLOR_ZERO_INITIALIZER _LV_COLOR_ZERO_INITIALIZER266,8131
typedef uint16_t lv_color_int_t;lv_color_int_t268,8214
typedef lv_color16_t lv_color_t;lv_color_t269,8247
#  define _LV_COLOR_ZERO_INITIALIZER _LV_COLOR_ZERO_INITIALIZER271,8307
#  define _LV_COLOR_ZERO_INITIALIZER _LV_COLOR_ZERO_INITIALIZER273,8372
typedef uint32_t lv_color_int_t;lv_color_int_t276,8471
typedef lv_color32_t lv_color_t;lv_color_t277,8504
#define _LV_COLOR_ZERO_INITIALIZER _LV_COLOR_ZERO_INITIALIZER278,8537
    uint16_t h;h285,8703
    uint8_t s;s286,8719
    uint8_t v;v287,8734
} lv_color_hsv_t;lv_color_hsv_t288,8749
typedef uint8_t lv_opa_t;lv_opa_t292,8872
static inline uint8_t lv_color_to1(lv_color_t color)lv_color_to1312,9460
static inline uint8_t lv_color_to8(lv_color_t color)lv_color_to8340,10153
static inline uint16_t lv_color_to16(lv_color_t color)lv_color_to16364,10927
static inline uint32_t lv_color_to32(lv_color_t color)lv_color_to32397,12060
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)lv_color_mix462,14655
LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)lv_color_premult482,15523
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)lv_color_mix_premult508,16470
LV_ATTRIBUTE_FAST_MEM static inline void lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_opa,lv_color_mix_with_alpha540,17665
static inline uint8_t lv_color_brightness(lv_color_t color)lv_color_brightness599,20087
#define _LV_COLOR_HAS_MODERN_CPP _LV_COLOR_HAS_MODERN_CPP615,20734
#define _LV_COLOR_HAS_MODERN_CPP _LV_COLOR_HAS_MODERN_CPP619,20809
#define _LV_COLOR_HAS_MODERN_CPP _LV_COLOR_HAS_MODERN_CPP625,20917
#define _LV_COLOR_MAKE_TYPE_HELPER _LV_COLOR_MAKE_TYPE_HELPER630,21041
#define _LV_COLOR_MAKE_TYPE_HELPER _LV_COLOR_MAKE_TYPE_HELPER632,21093
#define LV_COLOR_MAKE(LV_COLOR_MAKE637,21241
#define LV_COLOR_MAKE(LV_COLOR_MAKE639,21376
#define LV_COLOR_MAKE(LV_COLOR_MAKE642,21581
#define LV_COLOR_MAKE(LV_COLOR_MAKE644,21745
#define LV_COLOR_MAKE(LV_COLOR_MAKE647,21966
static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)lv_color_make650,22076
static inline lv_color_t lv_color_hex(uint32_t c)lv_color_hex655,22188
static inline lv_color_t lv_color_hex3(uint32_t c)lv_color_hex3660,22347

lib/lvgl/src/lv_misc/lv_math.c,564
static const int16_t sin0_90_table[] = {sin0_90_table29,451
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)_lv_trigo_sin53,1415
int32_t _lv_bezier3(uint32_t t, int32_t u0, int32_t u1, int32_t u2, int32_t u3)_lv_bezier388,2444
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)_lv_sqrt114,3360
uint16_t _lv_atan2(int x, int y)_lv_atan2137,3987
int64_t _lv_pow(int64_t base, int8_t exp)_lv_pow221,6991
int16_t _lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)_lv_map243,7489

lib/lvgl/src/lv_misc/lv_log.c,292
static lv_log_print_g_cb_t custom_print_cb;custom_print_cb35,516
void lv_log_register_print_cb(lv_log_print_g_cb_t print_cb)lv_log_register_print_cb51,973
void _lv_log_add(lv_log_level_t level, const char * file, int line, const char * func, const char * format, ...)_lv_log_add66,1408

lib/lvgl/src/lv_misc/lv_templ.c,62
typedef int _keep_pedantic_happy;_keep_pedantic_happy20,335

lib/lvgl/src/lv_misc/lv_bidi.c,2308
#define LV_BIDI_BRACKLET_DEPTH LV_BIDI_BRACKLET_DEPTH19,268
#define GET_POS(GET_POS22,389
#define IS_RTL_POS(IS_RTL_POS23,423
#define SET_RTL_POS(SET_RTL_POS24,467
    uint32_t bracklet_pos;bracklet_pos30,619
    lv_bidi_dir_t dir;dir31,646
} bracket_stack_t;bracket_stack_t32,669
static const uint8_t bracket_left[] = {"<({["};bracket_left57,1817
static const uint8_t bracket_right[] = {">)}]"};bracket_right58,1865
static bracket_stack_t br_stack[LV_BIDI_BRACKLET_DEPTH];br_stack59,1914
static uint8_t br_stack_p;br_stack_p60,1971
void _lv_bidi_process(const char * str_in, char * str_out, lv_bidi_dir_t base_dir)_lv_bidi_process77,2431
lv_bidi_dir_t _lv_bidi_detect_base_dir(const char * txt)_lv_bidi_detect_base_dir108,3404
uint16_t _lv_bidi_get_logical_pos(const char * str_in, char ** bidi_txt, uint32_t len, lv_bidi_dir_t base_dir,_lv_bidi_get_logical_pos137,4561
uint16_t _lv_bidi_get_visual_pos(const char * str_in, char ** bidi_txt, uint16_t len, lv_bidi_dir_t base_dir,_lv_bidi_get_visual_pos174,6075
void _lv_bidi_process_paragraph(const char * str_in, char * str_out, uint32_t len, lv_bidi_dir_t base_dir,_lv_bidi_process_paragraph216,7544
static uint32_t lv_bidi_get_next_paragraph(const char * txt)lv_bidi_get_next_paragraph317,10918
static lv_bidi_dir_t lv_bidi_get_letter_dir(uint32_t letter)lv_bidi_get_letter_dir335,11293
static bool lv_bidi_letter_is_weak(uint32_t letter)lv_bidi_letter_is_weak348,11694
static bool lv_bidi_letter_is_rtl(uint32_t letter)lv_bidi_letter_is_rtl367,12101
static bool lv_bidi_letter_is_neutral(uint32_t letter)lv_bidi_letter_is_neutral385,12704
static uint32_t get_txt_len(const char * txt, uint32_t max_len)get_txt_len396,12980
static void fill_pos_conv(uint16_t * out, uint16_t len, uint16_t index)fill_pos_conv409,13214
static lv_bidi_dir_t get_next_run(const char * txt, lv_bidi_dir_t base_dir, uint32_t max_len, uint32_t * len,get_next_run418,13405
static void rtl_reverse(char * dest, const char * src, uint32_t len, uint16_t * pos_conv_out, uint16_t pos_conv_rd_base,rtl_reverse500,16104
static uint32_t char_change_to_pair(uint32_t letter)char_change_to_pair568,18916
static lv_bidi_dir_t bracket_process(const char * txt, uint32_t next_pos, uint32_t len, uint32_t letter,bracket_process583,19244

lib/lvgl/src/lv_misc/lv_utils.h,35
#define LV_UTILS_HLV_UTILS_H7,51

lib/lvgl/src/lv_misc/lv_fs.c,1899
    #undef freefree30,565
void _lv_fs_init(void)_lv_fs_init57,1044
bool lv_fs_is_ready(char letter)lv_fs_is_ready68,1347
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)lv_fs_open86,1946
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)lv_fs_close138,3290
lv_fs_res_t lv_fs_remove(const char * path)lv_fs_remove163,3842
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)lv_fs_read191,4663
lv_fs_res_t lv_fs_write(lv_fs_file_t * file_p, const void * buf, uint32_t btw, uint32_t * bw)lv_fs_write212,5376
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)lv_fs_seek237,6087
lv_fs_res_t lv_fs_tell(lv_fs_file_t * file_p, uint32_t * pos)lv_fs_tell258,6632
lv_fs_res_t lv_fs_trunc(lv_fs_file_t * file_p)lv_fs_trunc281,7240
lv_fs_res_t lv_fs_size(lv_fs_file_t * file_p, uint32_t * size)lv_fs_size301,7742
lv_fs_res_t lv_fs_rename(const char * oldname, const char * newname)lv_fs_rename322,8247
lv_fs_res_t lv_fs_dir_open(lv_fs_dir_t * rddir_p, const char * path)lv_fs_dir_open356,9113
lv_fs_res_t lv_fs_dir_read(lv_fs_dir_t * rddir_p, char * fn)lv_fs_dir_read394,10167
lv_fs_res_t lv_fs_dir_close(lv_fs_dir_t * rddir_p)lv_fs_dir_close415,10705
lv_fs_res_t lv_fs_free_space(char letter, uint32_t * total_p, uint32_t * free_p)lv_fs_free_space445,11463
void lv_fs_drv_init(lv_fs_drv_t * drv)lv_fs_drv_init476,12264
void lv_fs_drv_register(lv_fs_drv_t * drv_p)lv_fs_drv_register486,12547
lv_fs_drv_t * lv_fs_get_drv(char letter)lv_fs_get_drv502,12963
char * lv_fs_get_letters(char * buf)lv_fs_get_letters519,13334
const char * lv_fs_get_ext(const char * fn)lv_fs_get_ext539,13719
char * lv_fs_up(char * path)lv_fs_up559,14179
const char * lv_fs_get_last(const char * path)lv_fs_get_last590,14868
static const char * lv_fs_get_real_path(const char * path)lv_fs_get_real_path624,15698

lib/lvgl/src/lv_misc/lv_math.h,823
#define LV_MATH_HLV_MATH_H7,51
#define LV_MATH_MIN(LV_MATH_MIN22,291
#define LV_MATH_MIN3(LV_MATH_MIN323,341
#define LV_MATH_MIN4(LV_MATH_MIN424,406
#define LV_MATH_MAX(LV_MATH_MAX26,490
#define LV_MATH_MAX3(LV_MATH_MAX327,540
#define LV_MATH_MAX4(LV_MATH_MAX428,605
#define LV_MATH_ABS(LV_MATH_ABS30,689
#define LV_MATH_UDIV255(LV_MATH_UDIV25532,738
#define LV_IS_SIGNED(LV_IS_SIGNED34,812
#define LV_UMAX_OF(LV_UMAX_OF35,858
#define LV_SMAX_OF(LV_SMAX_OF36,973
#define LV_MAX_OF(LV_MAX_OF37,1088
#define LV_TRIGO_SIN_MAX LV_TRIGO_SIN_MAX39,1178
#define LV_TRIGO_SHIFT LV_TRIGO_SHIFT40,1209
#define LV_BEZIER_VAL_MAX LV_BEZIER_VAL_MAX42,1275
#define LV_BEZIER_VAL_SHIFT LV_BEZIER_VAL_SHIFT43,1372
    uint16_t i;i50,1555
    uint16_t f;f51,1571
} lv_sqrt_res_t;lv_sqrt_res_t52,1587

lib/lvgl/src/lv_misc/lv_area.c,1263
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)lv_area_set48,898
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)lv_area_set_width61,1218
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)lv_area_set_height71,1453
void _lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)_lv_area_set_pos82,1750
uint32_t lv_area_get_size(const lv_area_t * area_p)lv_area_get_size97,2138
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)_lv_area_intersect113,2581
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)_lv_area_join135,3358
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)_lv_area_is_point_on150,3870
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)_lv_area_is_on216,5999
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)_lv_area_is_in233,6551
void _lv_area_align(const lv_area_t * base, const lv_area_t * to_align, lv_align_t align, lv_point_t * res)_lv_area_align273,7678
static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)lv_point_within_circle389,11574

lib/lvgl/src/lv_misc/lv_ll.c,1433
#define LL_NODE_META_SIZE LL_NODE_META_SIZE19,321
#define LL_PREV_P_OFFSET(LL_PREV_P_OFFSET20,397
#define LL_NEXT_P_OFFSET(LL_NEXT_P_OFFSET21,443
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)_lv_ll_init50,1156
void * _lv_ll_ins_head(lv_ll_t * ll_p)_lv_ll_ins_head70,1584
void * _lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)_lv_ll_ins_prev99,2429
void * _lv_ll_ins_tail(lv_ll_t * ll_p)_lv_ll_ins_tail129,3199
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)_lv_ll_remove157,4118
void _lv_ll_clear(lv_ll_t * ll_p)_lv_ll_clear192,5164
void _lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)_lv_ll_chg_list218,5729
void * _lv_ll_get_head(const lv_ll_t * ll_p)_lv_ll_get_head257,7015
void * _lv_ll_get_tail(const lv_ll_t * ll_p)_lv_ll_get_tail273,7295
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)_lv_ll_get_next290,7615
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)_lv_ll_get_prev307,8141
uint32_t _lv_ll_get_len(const lv_ll_t * ll_p)_lv_ll_get_len323,8613
void _lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)_lv_ll_move_before341,9046
bool _lv_ll_is_empty(lv_ll_t * ll_p)_lv_ll_is_empty374,10137
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)node_set_prev393,10607
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)node_set_next413,11220

lib/lvgl/src/lv_misc/lv_bidi.h,511
#define LV_BIDI_HLV_BIDI_H7,49
#define LV_BIDI_LRO LV_BIDI_LRO26,421
#define LV_BIDI_RLO LV_BIDI_RLO27,468
    LV_BIDI_DIR_LTR      = 0x00,LV_BIDI_DIR_LTR34,651
    LV_BIDI_DIR_RTL      = 0x01,LV_BIDI_DIR_RTL35,684
    LV_BIDI_DIR_AUTO     = 0x02,LV_BIDI_DIR_AUTO36,717
    LV_BIDI_DIR_INHERIT  = 0x03,LV_BIDI_DIR_INHERIT37,750
    LV_BIDI_DIR_NEUTRAL  = 0x20,LV_BIDI_DIR_NEUTRAL39,784
    LV_BIDI_DIR_WEAK     = 0x21,LV_BIDI_DIR_WEAK40,817
typedef uint8_t lv_bidi_dir_t;lv_bidi_dir_t43,854

lib/lvgl/src/lv_misc/lv_printf.c,2953
#define PRINTF_DISABLE_SUPPORT_FLOAT PRINTF_DISABLE_SUPPORT_FLOAT41,1815
    #define PRINTF_NTOA_BUFFER_SIZE PRINTF_NTOA_BUFFER_SIZE47,2085
    #define PRINTF_FTOA_BUFFER_SIZE PRINTF_FTOA_BUFFER_SIZE54,2338
    #define PRINTF_SUPPORT_FLOATPRINTF_SUPPORT_FLOAT60,2489
    #define PRINTF_SUPPORT_EXPONENTIALPRINTF_SUPPORT_EXPONENTIAL66,2654
    #define PRINTF_DEFAULT_FLOAT_PRECISION PRINTF_DEFAULT_FLOAT_PRECISION72,2808
    #define PRINTF_MAX_FLOAT PRINTF_MAX_FLOAT78,2958
    #define PRINTF_SUPPORT_LONG_LONGPRINTF_SUPPORT_LONG_LONG84,3111
    #define PRINTF_SUPPORT_PTRDIFF_TPRINTF_SUPPORT_PTRDIFF_T91,3331
#define FLAGS_ZEROPAD FLAGS_ZEROPAD97,3486
#define FLAGS_LEFT FLAGS_LEFT98,3522
#define FLAGS_PLUS FLAGS_PLUS99,3558
#define FLAGS_SPACE FLAGS_SPACE100,3594
#define FLAGS_HASH FLAGS_HASH101,3630
#define FLAGS_UPPERCASE FLAGS_UPPERCASE102,3666
#define FLAGS_CHAR FLAGS_CHAR103,3702
#define FLAGS_SHORT FLAGS_SHORT104,3738
#define FLAGS_LONG FLAGS_LONG105,3774
#define FLAGS_LONG_LONG FLAGS_LONG_LONG106,3810
#define FLAGS_PRECISION FLAGS_PRECISION107,3846
#define FLAGS_ADAPT_EXP FLAGS_ADAPT_EXP108,3882
typedef void (*out_fct_type)(char character, void * buffer, size_t idx, size_t maxlen);out_fct_type118,4040
    void (*fct)(char character, void * arg);fct123,4200
    void * arg;arg124,4245
} out_fct_wrap_type;out_fct_wrap_type125,4261
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)_out_buffer129,4310
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)_out_null138,4501
static inline unsigned int _strnlen_s(const char * str, size_t maxsize)_strnlen_s150,4780
static inline bool _is_digit(char ch)_is_digit160,5031
static unsigned int _atoi(const char ** str)_atoi167,5166
static size_t _out_rev(out_fct_type out, char * buffer, size_t idx, size_t maxlen, const char * buf, size_t len,_out_rev178,5424
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,_ntoa_format208,6165
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,_ntoa_long263,7952
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,_ntoa_long_long289,8871
static size_t _ftoa(out_fct_type out, char * buffer, size_t idx, size_t maxlen, double value, unsigned int prec,_ftoa324,10172
static size_t _etoa(out_fct_type out, char * buffer, size_t idx, size_t maxlen, double value, unsigned int prec,_etoa454,14164
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)_vsnprintf567,18225
int lv_snprintf(char * buffer, size_t count, const char * format, ...)lv_snprintf879,29675
int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)lv_vsnprintf888,29897

lib/lvgl/src/lv_misc/lv_task.c,1593
#define IDLE_MEAS_PERIOD IDLE_MEAS_PERIOD23,525
#define DEF_PRIO DEF_PRIO24,563
#define DEF_PERIOD DEF_PERIOD25,597
static bool lv_task_run  = false;lv_task_run40,932
static uint8_t idle_last = 0;idle_last41,966
static bool task_deleted;task_deleted42,996
static bool task_list_changed;task_list_changed43,1022
static bool task_created;task_created44,1053
void _lv_task_core_init(void)_lv_task_core_init57,1252
LV_ATTRIBUTE_TASK_HANDLER uint32_t lv_task_handler(void)lv_task_handler70,1562
lv_task_t * lv_task_create_basic(void)lv_task_create_basic200,6655
lv_task_t * lv_task_create(lv_task_cb_t task_xcb, uint32_t period, lv_task_prio_t prio, void * user_data)lv_task_create259,8557
void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb)lv_task_set_cb278,9124
void lv_task_del(lv_task_t * task)lv_task_del287,9293
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)lv_task_set_prio302,9643
void lv_task_set_period(lv_task_t * task, uint32_t period)lv_task_set_period329,10330
void lv_task_ready(lv_task_t * task)lv_task_ready338,10520
void lv_task_set_repeat_count(lv_task_t * task, int32_t repeat_count)lv_task_set_repeat_count348,10780
void lv_task_reset(lv_task_t * task)lv_task_reset358,11026
void lv_task_enable(bool en)lv_task_enable367,11246
uint8_t lv_task_get_idle(void)lv_task_get_idle376,11375
lv_task_t * lv_task_get_next(lv_task_t * task)lv_task_get_next386,11617
static bool lv_task_exec(lv_task_t * task)lv_task_exec401,12016
static uint32_t lv_task_time_remaining(lv_task_t * task)lv_task_time_remaining431,12822

lib/lvgl/src/lv_misc/lv_log.h,1665
#define LV_LOG_HLV_LOG_H7,47
#define LV_LOG_LEVEL_TRACE LV_LOG_LEVEL_TRACE25,373
#define LV_LOG_LEVEL_INFO LV_LOG_LEVEL_INFO26,452
#define LV_LOG_LEVEL_WARN LV_LOG_LEVEL_WARN27,509
#define LV_LOG_LEVEL_ERROR LV_LOG_LEVEL_ERROR28,606
#define LV_LOG_LEVEL_USER LV_LOG_LEVEL_USER29,688
#define LV_LOG_LEVEL_NONE LV_LOG_LEVEL_NONE30,749
#define _LV_LOG_LEVEL_NUM _LV_LOG_LEVEL_NUM31,804
LV_EXPORT_CONST_INT(LV_LOG_LEVEL_TRACE);LV_LOG_LEVEL_TRACE33,862
LV_EXPORT_CONST_INT(LV_LOG_LEVEL_INFO);LV_LOG_LEVEL_INFO34,903
LV_EXPORT_CONST_INT(LV_LOG_LEVEL_WARN);LV_LOG_LEVEL_WARN35,943
LV_EXPORT_CONST_INT(LV_LOG_LEVEL_ERROR);LV_LOG_LEVEL_ERROR36,983
LV_EXPORT_CONST_INT(LV_LOG_LEVEL_USER);LV_LOG_LEVEL_USER37,1024
LV_EXPORT_CONST_INT(LV_LOG_LEVEL_NONE);LV_LOG_LEVEL_NONE38,1064
typedef int8_t lv_log_level_t;lv_log_level_t40,1105
typedef void (*lv_log_print_g_cb_t)(lv_log_level_t level, const char *, uint32_t, const char *, const char *);lv_log_print_g_cb_t50,1335
#define LV_LOG_TRACE(LV_LOG_TRACE80,2411
#define LV_LOG_TRACE(LV_LOG_TRACE82,2519
#define LV_LOG_INFO(LV_LOG_INFO86,2591
#define LV_LOG_INFO(LV_LOG_INFO88,2697
#define LV_LOG_WARN(LV_LOG_WARN92,2768
#define LV_LOG_WARN(LV_LOG_WARN94,2874
#define LV_LOG_ERROR(LV_LOG_ERROR98,2946
#define LV_LOG_ERROR(LV_LOG_ERROR100,3054
#define LV_LOG_USER(LV_LOG_USER104,3126
#define LV_LOG_USER(LV_LOG_USER106,3232
#define _lv_log_add(_lv_log_add112,3321
#define LV_LOG_TRACE(LV_LOG_TRACE113,3365
#define LV_LOG_INFO(LV_LOG_INFO114,3391
#define LV_LOG_WARN(LV_LOG_WARN115,3416
#define LV_LOG_ERROR(LV_LOG_ERROR116,3441
#define LV_LOG_USER(LV_LOG_USER117,3467

lib/lvgl/src/lv_misc/lv_mem.c,2967
    #define LV_MEM_ADD_JUNK LV_MEM_ADD_JUNK28,596
    #define LV_MEM_FULL_DEFRAG_CNT LV_MEM_FULL_DEFRAG_CNT32,665
    #define MEM_UNIT MEM_UNIT36,729
    #define MEM_UNIT MEM_UNIT38,765
        MEM_UNIT used : 1;    /* 1: if the entry is used*/used50,1026
        MEM_UNIT d_size : 31; /* Size off the data (1 means 4 bytes)*/d_size51,1085
    } s;s52,1156
    MEM_UNIT header; /* The header (used + d_size)*/header53,1165
} lv_mem_header_t;lv_mem_header_t54,1218
    lv_mem_header_t header;header57,1255
    uint8_t first_data; /*First data byte in the allocated data (Just for easily create a pointer)*/first_data58,1283
} lv_mem_ent_t;lv_mem_ent_t59,1384
    #define ALIGN_MASK ALIGN_MASK64,1446
    #define ALIGN_MASK ALIGN_MASK66,1480
#define MEM_BUF_SMALL_SIZE MEM_BUF_SMALL_SIZE69,1516
    static uint8_t * work_mem;work_mem84,1922
static uint32_t zero_mem; /*Give the address of this variable if 0 byte should be allocated*/zero_mem87,1961
    static uint32_t mem_max_size; /*Tracks the maximum total size of memory ever used from the internal heap*/mem_max_size90,2079
static uint8_t mem_buf1_32[MEM_BUF_SMALL_SIZE];mem_buf1_3293,2198
static uint8_t mem_buf2_32[MEM_BUF_SMALL_SIZE];mem_buf2_3294,2246
static lv_mem_buf_t mem_buf_small[] = {{.p = mem_buf1_32, .size = MEM_BUF_SMALL_SIZE, .used = 0},mem_buf_small96,2295
#define COPY32 COPY32104,2524
#define COPY8 COPY8105,2566
#define SET32(SET32106,2603
#define REPEAT8(REPEAT8107,2637
void _lv_mem_init(void)_lv_mem_init116,2847
void _lv_mem_deinit(void)_lv_mem_deinit140,3544
void * lv_mem_alloc(size_t size)lv_mem_alloc156,4056
void lv_mem_free(const void * data)lv_mem_free228,5970
void * lv_mem_realloc(void * data_p, size_t new_size)lv_mem_realloc289,7513
void * lv_mem_realloc(void * data_p, size_t new_size)lv_mem_realloc341,8875
void lv_mem_defrag(void)lv_mem_defrag353,9150
lv_res_t lv_mem_test(void)lv_mem_test394,10102
void lv_mem_monitor(lv_mem_monitor_t * mon_p)lv_mem_monitor418,10699
uint32_t _lv_mem_get_size(const void * data)_lv_mem_get_size463,11884
uint32_t _lv_mem_get_size(const void * data)_lv_mem_get_size475,12144
void * _lv_mem_buf_get(uint32_t size)_lv_mem_buf_get486,12347
void _lv_mem_buf_release(void * p)_lv_mem_buf_release547,14422
void _lv_mem_buf_free_all(void)_lv_mem_buf_free_all572,14986
LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len)_lv_memcpy596,15685
LV_ATTRIBUTE_FAST_MEM void _lv_memset(void * dst, uint8_t v, size_t len)_lv_memset660,17009
LV_ATTRIBUTE_FAST_MEM void _lv_memset_00(void * dst, size_t len)_lv_memset_00713,18036
LV_ATTRIBUTE_FAST_MEM void _lv_memset_ff(void * dst, size_t len)_lv_memset_ff762,18980
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)ent_get_next818,20098
static void * ent_alloc(lv_mem_ent_t * e, size_t size)ent_alloc841,20791
static void ent_trunc(lv_mem_ent_t * e, size_t size)ent_trunc862,21321

lib/lvgl/src/lv_misc/lv_templ.h,35
#define LV_TEMPL_HLV_TEMPL_H7,51

lib/lvgl/src/lv_misc/lv_anim.c,2020
#define LV_ANIM_RESOLUTION LV_ANIM_RESOLUTION27,449
#define LV_ANIM_RES_SHIFT LV_ANIM_RES_SHIFT28,481
#define LV_ANIM_TASK_PRIO LV_ANIM_TASK_PRIO29,510
static uint32_t last_task_run;last_task_run45,894
static bool anim_list_changed;anim_list_changed46,925
static lv_task_t * _lv_anim_task;_lv_anim_task47,956
const lv_anim_path_t lv_anim_path_def = {.cb = lv_anim_path_linear};lv_anim_path_def48,990
void _lv_anim_core_init(void)_lv_anim_core_init61,1235
void lv_anim_init(lv_anim_t * a)lv_anim_init78,1770
void lv_anim_start(lv_anim_t * a)lv_anim_start92,2139
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)lv_anim_del131,3594
lv_anim_t * lv_anim_get(void * var, lv_anim_exec_xcb_t exec_cb)lv_anim_get162,4592
uint16_t lv_anim_count_running(void)lv_anim_count_running178,4937
uint16_t lv_anim_speed_to_time(uint16_t speed, lv_anim_value_t start, lv_anim_value_t end)lv_anim_speed_to_time194,5393
void lv_anim_refr_now(void)lv_anim_refr_now214,5952
lv_anim_value_t lv_anim_path_linear(const lv_anim_path_t * path, const lv_anim_t * a)lv_anim_path_linear224,6164
lv_anim_value_t lv_anim_path_ease_in(const lv_anim_path_t * path, const lv_anim_t * a)lv_anim_path_ease_in252,6993
lv_anim_value_t lv_anim_path_ease_out(const lv_anim_path_t * path, const lv_anim_t * a)lv_anim_path_ease_out278,7662
lv_anim_value_t lv_anim_path_ease_in_out(const lv_anim_path_t * path, const lv_anim_t * a)lv_anim_path_ease_in_out305,8352
lv_anim_value_t lv_anim_path_overshoot(const lv_anim_path_t * path, const lv_anim_t * a)lv_anim_path_overshoot332,9029
lv_anim_value_t lv_anim_path_bounce(const lv_anim_path_t * path, const lv_anim_t * a)lv_anim_path_bounce360,9696
lv_anim_value_t lv_anim_path_step(const lv_anim_path_t * path, const lv_anim_t * a)lv_anim_path_step425,11347
static void anim_task(lv_task_t * param)anim_task443,11688
static bool anim_ready_handler(lv_anim_t * a)anim_ready_handler509,13997
static void anim_mark_list_change(void)anim_mark_list_change555,15804

lib/lvgl/src/lv_misc/lv_area.h,2023
#define LV_AREA_HLV_AREA_H7,49
#define LV_COORD_MAX LV_COORD_MAX26,417
#define LV_COORD_MIN LV_COORD_MIN27,517
LV_EXPORT_CONST_INT(LV_COORD_MAX);LV_COORD_MAX29,555
LV_EXPORT_CONST_INT(LV_COORD_MIN);LV_COORD_MIN30,590
    lv_coord_t x;x40,755
    lv_coord_t y;y41,773
} lv_point_t;lv_point_t42,791
    lv_coord_t x1;x146,864
    lv_coord_t y1;y147,883
    lv_coord_t x2;x248,902
    lv_coord_t y2;y249,921
} lv_area_t;lv_area_t50,940
    LV_ALIGN_CENTER = 0,LV_ALIGN_CENTER56,981
    LV_ALIGN_IN_TOP_LEFT,LV_ALIGN_IN_TOP_LEFT57,1006
    LV_ALIGN_IN_TOP_MID,LV_ALIGN_IN_TOP_MID58,1032
    LV_ALIGN_IN_TOP_RIGHT,LV_ALIGN_IN_TOP_RIGHT59,1057
    LV_ALIGN_IN_BOTTOM_LEFT,LV_ALIGN_IN_BOTTOM_LEFT60,1084
    LV_ALIGN_IN_BOTTOM_MID,LV_ALIGN_IN_BOTTOM_MID61,1113
    LV_ALIGN_IN_BOTTOM_RIGHT,LV_ALIGN_IN_BOTTOM_RIGHT62,1141
    LV_ALIGN_IN_LEFT_MID,LV_ALIGN_IN_LEFT_MID63,1171
    LV_ALIGN_IN_RIGHT_MID,LV_ALIGN_IN_RIGHT_MID64,1197
    LV_ALIGN_OUT_TOP_LEFT,LV_ALIGN_OUT_TOP_LEFT65,1224
    LV_ALIGN_OUT_TOP_MID,LV_ALIGN_OUT_TOP_MID66,1251
    LV_ALIGN_OUT_TOP_RIGHT,LV_ALIGN_OUT_TOP_RIGHT67,1277
    LV_ALIGN_OUT_BOTTOM_LEFT,LV_ALIGN_OUT_BOTTOM_LEFT68,1305
    LV_ALIGN_OUT_BOTTOM_MID,LV_ALIGN_OUT_BOTTOM_MID69,1335
    LV_ALIGN_OUT_BOTTOM_RIGHT,LV_ALIGN_OUT_BOTTOM_RIGHT70,1364
    LV_ALIGN_OUT_LEFT_TOP,LV_ALIGN_OUT_LEFT_TOP71,1395
    LV_ALIGN_OUT_LEFT_MID,LV_ALIGN_OUT_LEFT_MID72,1422
    LV_ALIGN_OUT_LEFT_BOTTOM,LV_ALIGN_OUT_LEFT_BOTTOM73,1449
    LV_ALIGN_OUT_RIGHT_TOP,LV_ALIGN_OUT_RIGHT_TOP74,1479
    LV_ALIGN_OUT_RIGHT_MID,LV_ALIGN_OUT_RIGHT_MID75,1507
    LV_ALIGN_OUT_RIGHT_BOTTOM,LV_ALIGN_OUT_RIGHT_BOTTOM76,1535
typedef uint8_t lv_align_t;lv_align_t78,1569
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)lv_area_copy100,2113
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)lv_area_get_width110,2375
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)lv_area_get_height120,2638

lib/lvgl/src/lv_misc/lv_async.c,159
lv_res_t lv_async_call(lv_async_cb_t async_xcb, void * user_data)lv_async_call38,580
static void lv_async_task_cb(lv_task_t * task)lv_async_task_cb68,1330

lib/lvgl/src/lv_misc/lv_txt_ap.h,743
#define LV_TXT_AP_HLV_TXT_AP_H7,53
#define LV_UNDEF_ARABIC_PERSIAN_CHARS LV_UNDEF_ARABIC_PERSIAN_CHARS26,353
#define LV_AP_ALPHABET_BASE_CODE LV_AP_ALPHABET_BASE_CODE27,408
#define LV_AP_END_CHARS_LIST LV_AP_END_CHARS_LIST28,457
    uint8_t char_offset;char_offset33,600
    uint16_t char_end_form;char_end_form34,625
    int8_t char_begining_form_offset;char_begining_form_offset35,653
    int8_t char_middle_form_offset;char_middle_form_offset36,691
    int8_t char_isolated_form_offset;char_isolated_form_offset37,727
        uint8_t conj_to_previous;conj_to_previous39,778
        uint8_t conj_to_next;conj_to_next40,812
    } ap_chars_conjunction;ap_chars_conjunction41,842
} ap_chars_map_t;ap_chars_map_t42,870

lib/lvgl/src/lv_misc/lv_txt_ap.c,306
const ap_chars_map_t ap_chars_map[] = {ap_chars_map34,576
uint32_t _lv_txt_ap_calc_bytes_cnt(const char * txt)_lv_txt_ap_calc_bytes_cnt95,3099
void _lv_txt_ap_proc(const char * txt, char * txt_out)_lv_txt_ap_proc130,3884
static uint32_t lv_ap_get_char_index(uint16_t c)lv_ap_get_char_index209,6868

lib/lvgl/src/lv_misc/lv_printf.h,44
#define _LV_PRINTF_H__LV_PRINTF_H_33,1662

lib/lvgl/src/lv_misc/lv_color.c,545
LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)lv_color_fill40,623
lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)lv_color_lighten131,2194
lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)lv_color_darken137,2305
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)lv_color_hsv_to_rgb149,2602
lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8)lv_color_rgb_to_hsv214,3944
lv_color_hsv_t lv_color_to_hsv(lv_color_t color)lv_color_to_hsv265,5293

lib/lvgl/src/lv_misc/lv_gc.h,247
#define LV_GC_HLV_GC_H7,45
#define LV_ITERATE_ROOTS(LV_ITERATE_ROOTS28,406
#define LV_DEFINE_ROOT(LV_DEFINE_ROOT49,1680
#define LV_ROOTS LV_ROOTS50,1746
#define LV_GC_ROOT(LV_GC_ROOT57,1927
#define LV_EXTERN_ROOT(LV_EXTERN_ROOT58,1951

lib/lvgl/src/lv_misc/lv_debug.c,433
    #define LV_DEBUG_STR_MAX_LENGTH LV_DEBUG_STR_MAX_LENGTH20,273
    #define LV_DEBUG_STR_MAX_REPEAT LV_DEBUG_STR_MAX_REPEAT24,361
bool lv_debug_check_null(const void * p)lv_debug_check_null46,754
bool lv_debug_check_mem_integrity(void)lv_debug_check_mem_integrity53,842
bool lv_debug_check_str(const void * str)lv_debug_check_str58,941
void lv_debug_log_error(const char * msg, uint64_t value)lv_debug_log_error90,1863

lib/lvgl/src/lv_misc/lv_txt.h,1151
#define LV_TXT_HLV_TXT_H7,48
#define LV_TXT_COLOR_CMD LV_TXT_COLOR_CMD29,431
#define LV_TXT_ENC_UTF8 LV_TXT_ENC_UTF832,468
#define LV_TXT_ENC_ASCII LV_TXT_ENC_ASCII33,494
    LV_TXT_FLAG_NONE    = 0x00,LV_TXT_FLAG_NONE42,634
    LV_TXT_FLAG_RECOLOR = 0x01, /**< Enable parsing of recolor command*/LV_TXT_FLAG_RECOLOR43,666
    LV_TXT_FLAG_EXPAND  = 0x02, /**< Ignore max-width to avoid automatic word wrapping*/LV_TXT_FLAG_EXPAND44,739
    LV_TXT_FLAG_CENTER  = 0x04, /**< Align the text to the middle*/LV_TXT_FLAG_CENTER45,828
    LV_TXT_FLAG_RIGHT   = 0x08, /**< Align the text to the right*/LV_TXT_FLAG_RIGHT46,896
    LV_TXT_FLAG_FIT     = 0x10, /**< Max-width is already equal to the longest line. (Used to skip some calculation)*/LV_TXT_FLAG_FIT47,963
typedef uint8_t lv_txt_flag_t;lv_txt_flag_t49,1085
    LV_TXT_CMD_STATE_WAIT, /**< Waiting for command*/LV_TXT_CMD_STATE_WAIT54,1167
    LV_TXT_CMD_STATE_PAR,  /**< Processing the parameter*/LV_TXT_CMD_STATE_PAR55,1221
    LV_TXT_CMD_STATE_IN,   /**< Processing the command*/LV_TXT_CMD_STATE_IN56,1280
typedef uint8_t lv_txt_cmd_state_t;lv_txt_cmd_state_t58,1340

lib/lvgl/src/lv_misc/lv_mem.h,1399
#define LV_MEM_HLV_MEM_H7,47
#define LV_MEM_BUF_MAX_NUM LV_MEM_BUF_MAX_NUM32,430
    uint32_t total_size; /**< Total heap size */total_size43,594
    uint32_t free_cnt;free_cnt44,643
    uint32_t free_size; /**< Size of available memory */free_size45,666
    uint32_t free_biggest_size;free_biggest_size46,723
    uint32_t used_cnt;used_cnt47,755
    uint32_t max_used; /**< Max size of Heap memory used */max_used48,778
    uint8_t used_pct; /**< Percentage used */used_pct49,838
    uint8_t frag_pct; /**< Amount of fragmentation */frag_pct50,884
} lv_mem_monitor_t;lv_mem_monitor_t51,938
    void * p;p54,976
    uint16_t size;size55,990
    uint8_t used    : 1;used56,1009
} lv_mem_buf_t;lv_mem_buf_t57,1034
typedef lv_mem_buf_t lv_mem_buf_arr_t[LV_MEM_BUF_MAX_NUM];lv_mem_buf_arr_t59,1051
static inline void * _lv_memcpy(void * dst, const void * src, size_t len)_lv_memcpy152,3160
static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)_lv_memcpy_small163,3444
static inline void _lv_memset(void * dst, uint8_t v, size_t len)_lv_memset174,3724
static inline void _lv_memset_00(void * dst, size_t len)_lv_memset_00184,3968
static inline void _lv_memset_ff(void * dst, size_t len)_lv_memset_ff194,4207
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)_lv_memcpy_small214,4775

lib/lvgl/src/lv_misc/lv_misc.mk,0

lib/lvgl/src/lv_misc/lv_utils.c,196
char * _lv_utils_num_to_str(int32_t num, char * buf)_lv_utils_num_to_str46,816
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,_lv_utils_bsearch94,2163

lib/lvgl/src/lv_misc/lv_gc.c,100
void _lv_gc_clear_roots(void)_lv_gc_clear_roots45,715
#define LV_CLEAR_ROOT(LV_CLEAR_ROOT47,747

lib/lvgl/src/lv_misc/lv_ll.h,309
#define LV_LL_HLV_LL_H7,126
typedef uint8_t lv_ll_node_t;lv_ll_node_t30,501
    uint32_t n_size;n_size34,584
    lv_ll_node_t * head;head35,605
    lv_ll_node_t * tail;tail36,630
} lv_ll_t;lv_ll_t37,655
#define _LV_LL_READ(_LV_LL_READ160,3927
#define _LV_LL_READ_BACK(_LV_LL_READ_BACK162,4031

lib/lvgl/src/lv_misc/lv_async.h,266
#define LV_ASYNC_HLV_ASYNC_H7,51
typedef void (*lv_async_cb_t)(void *);lv_async_cb_t31,387
typedef struct _lv_async_info_t {_lv_async_info_t33,427
    lv_async_cb_t cb;cb34,461
    void * user_data;user_data35,483
} lv_async_info_t;lv_async_info_t36,505

lib/lvgl/src/lv_misc/lv_fs.h,3518
#define LV_FS_HLV_FS_H7,45
#define LV_FS_MAX_FN_LENGTH LV_FS_MAX_FN_LENGTH27,348
#define LV_FS_MAX_PATH_LENGTH LV_FS_MAX_PATH_LENGTH28,379
    LV_FS_RES_OK = 0,LV_FS_RES_OK38,533
    LV_FS_RES_HW_ERR,     /*Low level hardware error*/LV_FS_RES_HW_ERR39,555
    LV_FS_RES_FS_ERR,     /*Error in the file system structure */LV_FS_RES_FS_ERR40,610
    LV_FS_RES_NOT_EX,     /*Driver, file or directory is not exists*/LV_FS_RES_NOT_EX41,676
    LV_FS_RES_FULL,       /*Disk full*/LV_FS_RES_FULL42,746
    LV_FS_RES_LOCKED,     /*The file is already opened*/LV_FS_RES_LOCKED43,786
    LV_FS_RES_DENIED,     /*Access denied. Check 'fs_open' modes and write protect*/LV_FS_RES_DENIED44,843
    LV_FS_RES_BUSY,       /*The file system now can't handle it, try later*/LV_FS_RES_BUSY45,928
    LV_FS_RES_TOUT,       /*Process time outed*/LV_FS_RES_TOUT46,1005
    LV_FS_RES_NOT_IMP,    /*Requested function is not implemented*/LV_FS_RES_NOT_IMP47,1054
    LV_FS_RES_OUT_OF_MEM, /*Not enough memory for an internal operation*/LV_FS_RES_OUT_OF_MEM48,1122
    LV_FS_RES_INV_PARAM,  /*Invalid parameter among arguments*/LV_FS_RES_INV_PARAM49,1196
    LV_FS_RES_UNKNOWN,    /*Other unknown error*/LV_FS_RES_UNKNOWN50,1260
typedef uint8_t lv_fs_res_t;lv_fs_res_t52,1313
    LV_FS_MODE_WR = 0x01,LV_FS_MODE_WR58,1378
    LV_FS_MODE_RD = 0x02,LV_FS_MODE_RD59,1404
typedef uint8_t lv_fs_mode_t;lv_fs_mode_t61,1433
typedef struct _lv_fs_drv_t {_lv_fs_drv_t63,1464
    char letter;letter64,1494
    uint16_t file_size;file_size65,1511
    uint16_t rddir_size;rddir_size66,1535
    bool (*ready_cb)(struct _lv_fs_drv_t * drv);ready_cb67,1560
    lv_fs_res_t (*open_cb)(struct _lv_fs_drv_t * drv, void * file_p, const char * path, lv_fs_mode_t mode);open_cb69,1610
    lv_fs_res_t (*close_cb)(struct _lv_fs_drv_t * drv, void * file_p);close_cb70,1718
    lv_fs_res_t (*remove_cb)(struct _lv_fs_drv_t * drv, const char * fn);remove_cb71,1789
    lv_fs_res_t (*read_cb)(struct _lv_fs_drv_t * drv, void * file_p, void * buf, uint32_t btr, uint32_t * br);read_cb72,1863
    lv_fs_res_t (*write_cb)(struct _lv_fs_drv_t * drv, void * file_p, const void * buf, uint32_t btw, uint32_t * bw);write_cb73,1974
    lv_fs_res_t (*seek_cb)(struct _lv_fs_drv_t * drv, void * file_p, uint32_t pos);seek_cb74,2092
    lv_fs_res_t (*tell_cb)(struct _lv_fs_drv_t * drv, void * file_p, uint32_t * pos_p);tell_cb75,2176
    lv_fs_res_t (*trunc_cb)(struct _lv_fs_drv_t * drv, void * file_p);trunc_cb76,2264
    lv_fs_res_t (*size_cb)(struct _lv_fs_drv_t * drv, void * file_p, uint32_t * size_p);size_cb77,2335
    lv_fs_res_t (*rename_cb)(struct _lv_fs_drv_t * drv, const char * oldname, const char * newname);rename_cb78,2424
    lv_fs_res_t (*free_space_cb)(struct _lv_fs_drv_t * drv, uint32_t * total_p, uint32_t * free_p);free_space_cb79,2525
    lv_fs_res_t (*dir_open_cb)(struct _lv_fs_drv_t * drv, void * rddir_p, const char * path);dir_open_cb81,2626
    lv_fs_res_t (*dir_read_cb)(struct _lv_fs_drv_t * drv, void * rddir_p, char * fn);dir_read_cb82,2720
    lv_fs_res_t (*dir_close_cb)(struct _lv_fs_drv_t * drv, void * rddir_p);dir_close_cb83,2806
    lv_fs_drv_user_data_t user_data; /**< Custom file user data */user_data86,2904
} lv_fs_drv_t;lv_fs_drv_t88,2978
    void * file_d;file_d91,3011
    lv_fs_drv_t * drv;drv92,3030
} lv_fs_file_t;lv_fs_file_t93,3053
    void * dir_d;dir_d96,3087
    lv_fs_drv_t * drv;drv97,3105
} lv_fs_dir_t;lv_fs_dir_t98,3128

lib/lvgl/src/lv_misc/lv_txt.c,4555
#define NO_BREAK_FOUND NO_BREAK_FOUND19,285
    uint8_t (*_lv_txt_encoded_size)(const char *)                   = lv_txt_utf8_size;_lv_txt_encoded_size57,1889
    uint32_t (*_lv_txt_unicode_to_encoded)(uint32_t)                = lv_txt_unicode_to_utf8;_lv_txt_unicode_to_encoded58,1977
    uint32_t (*_lv_txt_encoded_conv_wc)(uint32_t)                   = lv_txt_utf8_conv_wc;_lv_txt_encoded_conv_wc59,2071
    uint32_t (*_lv_txt_encoded_next)(const char *, uint32_t *)      = lv_txt_utf8_next;_lv_txt_encoded_next60,2162
    uint32_t (*_lv_txt_encoded_prev)(const char *, uint32_t *)      = lv_txt_utf8_prev;_lv_txt_encoded_prev61,2250
    uint32_t (*_lv_txt_encoded_get_byte_id)(const char *, uint32_t) = lv_txt_utf8_get_byte_id;_lv_txt_encoded_get_byte_id62,2338
    uint32_t (*_lv_txt_encoded_get_char_id)(const char *, uint32_t) = lv_txt_utf8_get_char_id;_lv_txt_encoded_get_char_id63,2433
    uint32_t (*_lv_txt_get_encoded_length)(const char *)            = lv_txt_utf8_get_length;_lv_txt_get_encoded_length64,2528
    uint8_t (*_lv_txt_encoded_size)(const char *)                   = lv_txt_iso8859_1_size;_lv_txt_encoded_size66,2659
    uint32_t (*_lv_txt_unicode_to_encoded)(uint32_t)                = lv_txt_unicode_to_iso8859_1;_lv_txt_unicode_to_encoded67,2752
    uint32_t (*_lv_txt_encoded_conv_wc)(uint32_t)                   = lv_txt_iso8859_1_conv_wc;_lv_txt_encoded_conv_wc68,2851
    uint32_t (*_lv_txt_encoded_next)(const char *, uint32_t *)      = lv_txt_iso8859_1_next;_lv_txt_encoded_next69,2947
    uint32_t (*_lv_txt_encoded_prev)(const char *, uint32_t *)      = lv_txt_iso8859_1_prev;_lv_txt_encoded_prev70,3040
    uint32_t (*_lv_txt_encoded_get_byte_id)(const char *, uint32_t) = lv_txt_iso8859_1_get_byte_id;_lv_txt_encoded_get_byte_id71,3133
    uint32_t (*_lv_txt_encoded_get_char_id)(const char *, uint32_t)     = lv_txt_iso8859_1_get_char_id;_lv_txt_encoded_get_char_id72,3233
    uint32_t (*_lv_txt_get_encoded_length)(const char *)            = lv_txt_iso8859_1_get_length;_lv_txt_get_encoded_length73,3337
void _lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,_lv_txt_get_size96,4029
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,lv_txt_get_next_word175,7241
uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,_lv_txt_get_next_line296,11857
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,_lv_txt_get_width356,13860
bool _lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)_lv_txt_is_cmd400,15427
void _lv_txt_ins(char * txt_buf, uint32_t pos, const char * ins_txt)_lv_txt_ins438,16617
void _lv_txt_cut(char * txt, uint32_t pos, uint32_t len)_lv_txt_cut464,17461
char * _lv_txt_set_text_vfmt(const char * fmt, va_list ap)_lv_txt_set_text_vfmt484,18053
static uint8_t lv_txt_utf8_size(const char * str)lv_txt_utf8_size537,19452
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)lv_txt_unicode_to_utf8555,19967
static uint32_t lv_txt_utf8_conv_wc(uint32_t c)lv_txt_utf8_conv_wc588,21007
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)lv_txt_utf8_next616,21934
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)lv_txt_utf8_prev690,24294
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)lv_txt_utf8_get_byte_id723,25214
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)lv_txt_utf8_get_char_id742,25812
static uint32_t lv_txt_utf8_get_length(const char * txt)lv_txt_utf8_get_length761,26341
static uint8_t lv_txt_iso8859_1_size(const char * str)lv_txt_iso8859_1_size784,26861
static uint32_t lv_txt_unicode_to_iso8859_1(uint32_t letter_uni)lv_txt_unicode_to_iso8859_1795,27153
static uint32_t lv_txt_iso8859_1_conv_wc(uint32_t c)lv_txt_iso8859_1_conv_wc809,27545
static uint32_t lv_txt_iso8859_1_next(const char * txt, uint32_t * i)lv_txt_iso8859_1_next822,27953
static uint32_t lv_txt_iso8859_1_prev(const char * txt, uint32_t * i)lv_txt_iso8859_1_prev837,28441
static uint32_t lv_txt_iso8859_1_get_byte_id(const char * txt, uint32_t utf8_id)lv_txt_iso8859_1_get_byte_id854,28935
static uint32_t lv_txt_iso8859_1_get_char_id(const char * txt, uint32_t byte_id)lv_txt_iso8859_1_get_char_id867,29412
static uint32_t lv_txt_iso8859_1_get_length(const char * txt)lv_txt_iso8859_1_get_length879,29806
static inline bool is_break_char(uint32_t letter)is_break_char898,30201

lib/lvgl/src/lv_core/lv_group.c,2073
void _lv_group_init(void)_lv_group_init51,1036
lv_group_t * lv_group_create(void)lv_group_create60,1211
void lv_group_del(lv_group_t * group)lv_group_del86,1869
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)lv_group_add_obj110,2499
void lv_group_remove_obj(lv_obj_t * obj)lv_group_remove_obj148,3592
void lv_group_remove_all_objs(lv_group_t * group)lv_group_remove_all_objs190,4853
void lv_group_focus_obj(lv_obj_t * obj)lv_group_focus_obj212,5437
void lv_group_focus_next(lv_group_t * group)lv_group_focus_next256,6816
void lv_group_focus_prev(lv_group_t * group)lv_group_focus_prev265,7033
void lv_group_focus_freeze(lv_group_t * group, bool en)lv_group_focus_freeze275,7311
lv_res_t lv_group_send_data(lv_group_t * group, uint32_t c)lv_group_send_data289,7657
void lv_group_set_focus_cb(lv_group_t * group, lv_group_focus_cb_t focus_cb)lv_group_set_focus_cb310,8207
void lv_group_set_editing(lv_group_t * group, bool edit)lv_group_set_editing320,8469
void lv_group_set_click_focus(lv_group_t * group, bool en)lv_group_set_click_focus344,9240
void lv_group_set_refocus_policy(lv_group_t * group, lv_group_refocus_policy_t policy)lv_group_set_refocus_policy349,9341
void lv_group_set_wrap(lv_group_t * group, bool en)lv_group_set_wrap359,9635
lv_obj_t * lv_group_get_focused(const lv_group_t * group)lv_group_get_focused369,9859
lv_group_user_data_t * lv_group_get_user_data(lv_group_t * group)lv_group_get_user_data383,10170
lv_group_focus_cb_t lv_group_get_focus_cb(const lv_group_t * group)lv_group_get_focus_cb394,10420
bool lv_group_get_editing(const lv_group_t * group)lv_group_get_editing405,10683
bool lv_group_get_click_focus(const lv_group_t * group)lv_group_get_click_focus416,10947
bool lv_group_get_wrap(lv_group_t * group)lv_group_get_wrap427,11278
static void lv_group_refocus(lv_group_t * g)lv_group_refocus437,11466
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),focus_next_core451,11883
static void obj_to_foreground(lv_obj_t * obj)obj_to_foreground519,14151

lib/lvgl/src/lv_core/lv_disp.c,1455
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)lv_disp_get_scr_act49,1021
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)lv_disp_get_scr_prev66,1534
void lv_disp_load_scr(lv_obj_t * scr)lv_disp_load_scr81,1843
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)lv_disp_get_layer_top95,2314
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)lv_disp_get_layer_sys112,2862
void lv_disp_assign_screen(lv_disp_t * disp, lv_obj_t * scr)lv_disp_assign_screen128,3271
void lv_disp_set_bg_color(lv_disp_t * disp, lv_color_t color)lv_disp_set_bg_color147,3757
void lv_disp_set_bg_image(lv_disp_t * disp, const void  * img_src)lv_disp_set_bg_image168,4274
void lv_disp_set_bg_opa(lv_disp_t * disp, lv_opa_t opa)lv_disp_set_bg_opa189,4743
void lv_scr_load_anim(lv_obj_t * new_scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, bool auto_del)lv_scr_load_anim214,5448
uint32_t lv_disp_get_inactive_time(const lv_disp_t * disp)lv_disp_get_inactive_time331,10061
void lv_disp_trig_activity(lv_disp_t * disp)lv_disp_trig_activity351,10567
void lv_disp_clean_dcache(lv_disp_t * disp)lv_disp_clean_dcache366,10949
lv_task_t * _lv_disp_get_refr_task(lv_disp_t * disp)_lv_disp_get_refr_task384,11453
static void scr_load_anim_start(lv_anim_t * a)scr_load_anim_start400,11789
static void opa_scale_anim(lv_obj_t * obj, lv_anim_value_t v)opa_scale_anim408,11949
static void scr_anim_ready(lv_anim_t * a)scr_anim_ready413,12098

lib/lvgl/src/lv_core/lv_core.mk,0

lib/lvgl/src/lv_core/lv_style.h,17503
#define LV_STYLE_HLV_STYLE_H7,51
#define LV_RADIUS_CIRCLE LV_RADIUS_CIRCLE29,494
LV_EXPORT_CONST_INT(LV_RADIUS_CIRCLE);LV_RADIUS_CIRCLE30,578
#define LV_DEBUG_STYLE_SENTINEL_VALUE LV_DEBUG_STYLE_SENTINEL_VALUE32,618
#define LV_DEBUG_STYLE_LIST_SENTINEL_VALUE LV_DEBUG_STYLE_LIST_SENTINEL_VALUE33,673
#define LV_STYLE_PROP_INIT(LV_STYLE_PROP_INIT35,729
#define LV_STYLE_ID_MASK LV_STYLE_ID_MASK37,826
#define LV_STYLE_ATTR_NONE LV_STYLE_ATTR_NONE39,859
#define LV_STYLE_ATTR_INHERIT LV_STYLE_ATTR_INHERIT40,897
#define _LV_STYLE_CLOSING_PROP _LV_STYLE_CLOSING_PROP42,943
#define LV_STYLE_TRANS_NUM_MAX LV_STYLE_TRANS_NUM_MAX44,984
#define LV_STYLE_PROP_ALL LV_STYLE_PROP_ALL46,1023
    LV_BORDER_SIDE_NONE     = 0x00,LV_BORDER_SIDE_NONE54,1166
    LV_BORDER_SIDE_BOTTOM   = 0x01,LV_BORDER_SIDE_BOTTOM55,1202
    LV_BORDER_SIDE_TOP      = 0x02,LV_BORDER_SIDE_TOP56,1238
    LV_BORDER_SIDE_LEFT     = 0x04,LV_BORDER_SIDE_LEFT57,1274
    LV_BORDER_SIDE_RIGHT    = 0x08,LV_BORDER_SIDE_RIGHT58,1310
    LV_BORDER_SIDE_FULL     = 0x0F,LV_BORDER_SIDE_FULL59,1346
    LV_BORDER_SIDE_INTERNAL = 0x10, /**< FOR matrix-like objects (e.g. Button matrix)*/LV_BORDER_SIDE_INTERNAL60,1382
    _LV_BORDER_SIDE_LAST_LV_BORDER_SIDE_LAST61,1470
typedef uint8_t lv_border_side_t;lv_border_side_t63,1498
    LV_GRAD_DIR_NONE,LV_GRAD_DIR_NONE66,1540
    LV_GRAD_DIR_VER,LV_GRAD_DIR_VER67,1562
    LV_GRAD_DIR_HOR,LV_GRAD_DIR_HOR68,1583
    _LV_GRAD_DIR_LAST_LV_GRAD_DIR_LAST69,1604
typedef uint8_t lv_grad_dir_t;lv_grad_dir_t72,1630
    LV_TEXT_DECOR_NONE          = 0x00,LV_TEXT_DECOR_NONE76,1710
    LV_TEXT_DECOR_UNDERLINE     = 0x01,LV_TEXT_DECOR_UNDERLINE77,1750
    LV_TEXT_DECOR_STRIKETHROUGH = 0x02,LV_TEXT_DECOR_STRIKETHROUGH78,1790
    _LV_TEXT_DECOR_LAST_LV_TEXT_DECOR_LAST79,1830
typedef uint8_t lv_text_decor_t;lv_text_decor_t82,1858
typedef uint8_t lv_style_attr_t;lv_style_attr_t84,1892
#define LV_STYLE_ATTR_GET_INHERIT(LV_STYLE_ATTR_GET_INHERIT86,1926
#define LV_STYLE_ATTR_GET_STATE(LV_STYLE_ATTR_GET_STATE87,1974
#define LV_STYLE_ID_VALUE LV_STYLE_ID_VALUE89,2021
#define LV_STYLE_ID_COLOR LV_STYLE_ID_COLOR90,2067
#define LV_STYLE_ID_OPA LV_STYLE_ID_OPA91,2113
#define LV_STYLE_ID_PTR LV_STYLE_ID_PTR92,2159
    LV_STYLE_PROP_INIT(LV_STYLE_RADIUS,             0x0, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT96,2239
    LV_STYLE_PROP_INIT(LV_STYLE_CLIP_CORNER,        0x0, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT97,2340
    LV_STYLE_PROP_INIT(LV_STYLE_SIZE,               0x0, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT98,2441
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSFORM_WIDTH,    0x0, LV_STYLE_ID_VALUE + 4, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT99,2542
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSFORM_HEIGHT,   0x0, LV_STYLE_ID_VALUE + 5, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT100,2643
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSFORM_ANGLE,    0x0, LV_STYLE_ID_VALUE + 6, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT101,2744
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSFORM_ZOOM,     0x0, LV_STYLE_ID_VALUE + 7, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT102,2845
    LV_STYLE_PROP_INIT(LV_STYLE_OPA_SCALE,          0x0, LV_STYLE_ID_OPA + 0,   LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT103,2946
    LV_STYLE_PROP_INIT(LV_STYLE_PAD_TOP,            0x1, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT105,3051
    LV_STYLE_PROP_INIT(LV_STYLE_PAD_BOTTOM,         0x1, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT106,3152
    LV_STYLE_PROP_INIT(LV_STYLE_PAD_LEFT,           0x1, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT107,3253
    LV_STYLE_PROP_INIT(LV_STYLE_PAD_RIGHT,          0x1, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT108,3354
    LV_STYLE_PROP_INIT(LV_STYLE_PAD_INNER,          0x1, LV_STYLE_ID_VALUE + 4, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT109,3455
    LV_STYLE_PROP_INIT(LV_STYLE_MARGIN_TOP,         0x1, LV_STYLE_ID_VALUE + 5, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT110,3556
    LV_STYLE_PROP_INIT(LV_STYLE_MARGIN_BOTTOM,      0x1, LV_STYLE_ID_VALUE + 6, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT111,3657
    LV_STYLE_PROP_INIT(LV_STYLE_MARGIN_LEFT,        0x1, LV_STYLE_ID_VALUE + 7, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT112,3758
    LV_STYLE_PROP_INIT(LV_STYLE_MARGIN_RIGHT,       0x1, LV_STYLE_ID_VALUE + 8, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT113,3859
    LV_STYLE_PROP_INIT(LV_STYLE_BG_BLEND_MODE,      0x2, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT115,3961
    LV_STYLE_PROP_INIT(LV_STYLE_BG_MAIN_STOP,       0x2, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT116,4062
    LV_STYLE_PROP_INIT(LV_STYLE_BG_GRAD_STOP,       0x2, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT117,4163
    LV_STYLE_PROP_INIT(LV_STYLE_BG_GRAD_DIR,        0x2, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT118,4264
    LV_STYLE_PROP_INIT(LV_STYLE_BG_COLOR,           0x2, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT119,4365
    LV_STYLE_PROP_INIT(LV_STYLE_BG_GRAD_COLOR,      0x2, LV_STYLE_ID_COLOR + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT120,4466
    LV_STYLE_PROP_INIT(LV_STYLE_BG_OPA,             0x2, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT121,4567
    LV_STYLE_PROP_INIT(LV_STYLE_BORDER_WIDTH,       0x3, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT123,4669
    LV_STYLE_PROP_INIT(LV_STYLE_BORDER_SIDE,        0x3, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT124,4770
    LV_STYLE_PROP_INIT(LV_STYLE_BORDER_BLEND_MODE,  0x3, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT125,4871
    LV_STYLE_PROP_INIT(LV_STYLE_BORDER_POST,        0x3, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT126,4972
    LV_STYLE_PROP_INIT(LV_STYLE_BORDER_COLOR,       0x3, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT127,5073
    LV_STYLE_PROP_INIT(LV_STYLE_BORDER_OPA,         0x3, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT128,5174
    LV_STYLE_PROP_INIT(LV_STYLE_OUTLINE_WIDTH,       0x4, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT130,5276
    LV_STYLE_PROP_INIT(LV_STYLE_OUTLINE_PAD,         0x4, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT131,5378
    LV_STYLE_PROP_INIT(LV_STYLE_OUTLINE_BLEND_MODE,  0x4, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT132,5480
    LV_STYLE_PROP_INIT(LV_STYLE_OUTLINE_COLOR,       0x4, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT133,5582
    LV_STYLE_PROP_INIT(LV_STYLE_OUTLINE_OPA,         0x4, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT134,5684
    LV_STYLE_PROP_INIT(LV_STYLE_SHADOW_WIDTH,       0x5, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT136,5787
    LV_STYLE_PROP_INIT(LV_STYLE_SHADOW_OFS_X,       0x5, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT137,5888
    LV_STYLE_PROP_INIT(LV_STYLE_SHADOW_OFS_Y,       0x5, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT138,5989
    LV_STYLE_PROP_INIT(LV_STYLE_SHADOW_SPREAD,      0x5, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT139,6090
    LV_STYLE_PROP_INIT(LV_STYLE_SHADOW_BLEND_MODE,  0x5, LV_STYLE_ID_VALUE + 4, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT140,6191
    LV_STYLE_PROP_INIT(LV_STYLE_SHADOW_COLOR,       0x5, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT141,6292
    LV_STYLE_PROP_INIT(LV_STYLE_SHADOW_OPA,         0x5, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT142,6393
    LV_STYLE_PROP_INIT(LV_STYLE_PATTERN_BLEND_MODE,    0x6, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT144,6495
    LV_STYLE_PROP_INIT(LV_STYLE_PATTERN_REPEAT,        0x6, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT145,6599
    LV_STYLE_PROP_INIT(LV_STYLE_PATTERN_RECOLOR,       0x6, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT146,6703
    LV_STYLE_PROP_INIT(LV_STYLE_PATTERN_OPA,           0x6, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT147,6807
    LV_STYLE_PROP_INIT(LV_STYLE_PATTERN_RECOLOR_OPA,   0x6, LV_STYLE_ID_OPA   + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT148,6911
    LV_STYLE_PROP_INIT(LV_STYLE_PATTERN_IMAGE,         0x6, LV_STYLE_ID_PTR   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT149,7015
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_LETTER_SPACE,  0x7, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT151,7120
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_LINE_SPACE,    0x7, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT152,7222
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_BLEND_MODE,    0x7, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT153,7324
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_OFS_X,         0x7, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT154,7426
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_OFS_Y,         0x7, LV_STYLE_ID_VALUE + 4, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT155,7528
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_ALIGN,         0x7, LV_STYLE_ID_VALUE + 5, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT156,7630
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_COLOR,         0x7, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT157,7732
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_OPA,           0x7, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT158,7834
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_FONT,          0x7, LV_STYLE_ID_PTR   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT159,7936
    LV_STYLE_PROP_INIT(LV_STYLE_VALUE_STR,           0x7, LV_STYLE_ID_PTR   + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT160,8038
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_LETTER_SPACE,   0x8, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT162,8141
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_LINE_SPACE,     0x8, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT163,8246
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_DECOR,          0x8, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT164,8351
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_BLEND_MODE,     0x8, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT165,8456
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_COLOR,          0x8, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT166,8561
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_SEL_COLOR,      0x8, LV_STYLE_ID_COLOR + 1, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT167,8666
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_SEL_BG_COLOR,   0x8, LV_STYLE_ID_COLOR + 2, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT168,8771
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_OPA,            0x8, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT169,8876
    LV_STYLE_PROP_INIT(LV_STYLE_TEXT_FONT,           0x8, LV_STYLE_ID_PTR   + 0, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT170,8981
    LV_STYLE_PROP_INIT(LV_STYLE_LINE_WIDTH,         0x9, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT172,9087
    LV_STYLE_PROP_INIT(LV_STYLE_LINE_BLEND_MODE,    0x9, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT173,9188
    LV_STYLE_PROP_INIT(LV_STYLE_LINE_DASH_WIDTH,    0x9, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT174,9289
    LV_STYLE_PROP_INIT(LV_STYLE_LINE_DASH_GAP,      0x9, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT175,9390
    LV_STYLE_PROP_INIT(LV_STYLE_LINE_ROUNDED,       0x9, LV_STYLE_ID_VALUE + 4, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT176,9491
    LV_STYLE_PROP_INIT(LV_STYLE_LINE_COLOR,         0x9, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT177,9592
    LV_STYLE_PROP_INIT(LV_STYLE_LINE_OPA,           0x9, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT178,9693
    LV_STYLE_PROP_INIT(LV_STYLE_IMAGE_BLEND_MODE,   0xA, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT180,9795
    LV_STYLE_PROP_INIT(LV_STYLE_IMAGE_RECOLOR,      0xA, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT181,9899
    LV_STYLE_PROP_INIT(LV_STYLE_IMAGE_OPA,          0xA, LV_STYLE_ID_OPA   + 0, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT182,10003
    LV_STYLE_PROP_INIT(LV_STYLE_IMAGE_RECOLOR_OPA,  0xA, LV_STYLE_ID_OPA   + 1, LV_STYLE_ATTR_INHERIT),LV_STYLE_PROP_INIT183,10107
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_TIME,    0xB, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT185,10212
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_DELAY,   0xB, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT186,10313
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_PROP_1,  0xB, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT187,10414
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_PROP_2,  0xB, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT188,10515
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_PROP_3,  0xB, LV_STYLE_ID_VALUE + 4, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT189,10616
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_PROP_4,  0xB, LV_STYLE_ID_VALUE + 5, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT190,10717
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_PROP_5,  0xB, LV_STYLE_ID_VALUE + 6, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT191,10818
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_PROP_6,  0xB, LV_STYLE_ID_VALUE + 7, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT192,10919
    LV_STYLE_PROP_INIT(LV_STYLE_TRANSITION_PATH,    0xB, LV_STYLE_ID_PTR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT193,11020
    LV_STYLE_PROP_INIT(LV_STYLE_SCALE_WIDTH,            0xC, LV_STYLE_ID_VALUE + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT195,11120
    LV_STYLE_PROP_INIT(LV_STYLE_SCALE_BORDER_WIDTH,     0xC, LV_STYLE_ID_VALUE + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT196,11225
    LV_STYLE_PROP_INIT(LV_STYLE_SCALE_END_BORDER_WIDTH, 0xC, LV_STYLE_ID_VALUE + 2, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT197,11330
    LV_STYLE_PROP_INIT(LV_STYLE_SCALE_END_LINE_WIDTH,   0xC, LV_STYLE_ID_VALUE + 3, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT198,11435
    LV_STYLE_PROP_INIT(LV_STYLE_SCALE_GRAD_COLOR,       0xC, LV_STYLE_ID_COLOR + 0, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT199,11540
    LV_STYLE_PROP_INIT(LV_STYLE_SCALE_END_COLOR,        0xC, LV_STYLE_ID_COLOR + 1, LV_STYLE_ATTR_NONE),LV_STYLE_PROP_INIT200,11645
typedef uint16_t lv_style_property_t;lv_style_property_t203,11754
#define LV_STYLE_STATE_POS LV_STYLE_STATE_POS205,11793
#define LV_STYLE_STATE_MASK LV_STYLE_STATE_MASK206,11828
#define LV_STYLE_INHERIT_MASK LV_STYLE_INHERIT_MASK207,11868
typedef uint16_t lv_style_state_t;lv_style_state_t209,11909
    uint8_t * map;map212,11962
    uint32_t sentinel;sentinel214,12005
} lv_style_t;lv_style_t216,12035
typedef int16_t lv_style_int_t;lv_style_int_t218,12050
    lv_style_t ** style_list;style_list221,12100
    uint32_t sentinel;sentinel223,12154
    uint32_t style_cnt     : 6;style_cnt225,12184
    uint32_t has_local     : 1;has_local226,12216
    uint32_t has_trans     : 1;has_trans227,12248
    uint32_t skip_trans    : 1;      /*1: Temporally skip the transition style if any*/skip_trans228,12280
    uint32_t ignore_trans  : 1;      /*1: Mark that this style list shouldn't receive transitions at all*/ignore_trans229,12368
    uint32_t valid_cache   : 1;      /*1: The cache is valid and can be used*/valid_cache230,12475
    uint32_t ignore_cache  : 1;      /*1: Ignore cache while getting value of properties*/ignore_cache231,12554
    uint32_t radius_zero : 1;radius_zero233,12646
    uint32_t opa_scale_cover      : 1;opa_scale_cover234,12676
    uint32_t clip_corner_off       : 1;clip_corner_off235,12715
    uint32_t transform_all_zero  : 1;transform_all_zero236,12755
    uint32_t pad_all_zero : 1;pad_all_zero237,12793
    uint32_t margin_all_zero : 1;margin_all_zero238,12824
    uint32_t blend_mode_all_normal : 1;blend_mode_all_normal239,12858
    uint32_t bg_opa_transp : 1;bg_opa_transp240,12898
    uint32_t bg_opa_cover : 1;bg_opa_cover241,12930
    uint32_t border_width_zero : 1;border_width_zero243,12962
    uint32_t border_side_full : 1;border_side_full244,12998
    uint32_t border_post_off : 1;border_post_off245,13033
    uint32_t outline_width_zero : 1;outline_width_zero247,13068
    uint32_t pattern_img_null : 1;pattern_img_null248,13105
    uint32_t shadow_width_zero : 1;shadow_width_zero249,13140
    uint32_t value_txt_str : 1;value_txt_str250,13176
    uint32_t img_recolor_opa_transp : 1;img_recolor_opa_transp251,13208
    uint32_t text_space_zero : 1;text_space_zero253,13250
    uint32_t text_decor_none : 1;text_decor_none254,13284
    uint32_t text_font_normal : 1;text_font_normal255,13318
} lv_style_list_t;lv_style_list_t256,13353
static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)lv_style_list_get_style311,15126
#define LV_STYLE_CREATE(LV_STYLE_CREATE600,28406
#  define LV_DEBUG_IS_STYLE(LV_DEBUG_IS_STYLE607,28568
#  define LV_DEBUG_IS_STYLE_LIST(LV_DEBUG_IS_STYLE_LIST611,28678
#   define LV_ASSERT_STYLE(LV_ASSERT_STYLE616,28815
#   define LV_ASSERT_STYLE_LIST(LV_ASSERT_STYLE_LIST619,28962
#   define LV_ASSERT_STYLE(LV_ASSERT_STYLE622,29097
#   define LV_ASSERT_STYLE_LIST(LV_ASSERT_STYLE_LIST623,29133
# define LV_ASSERT_STYLE(LV_ASSERT_STYLE627,29188
# define LV_ASSERT_STYLE_LIST(LV_ASSERT_STYLE_LIST628,29216

lib/lvgl/src/lv_core/lv_style.c,4614
#define STYLE_MIX_MAX STYLE_MIX_MAX16,243
#define STYLE_MIX_SHIFT STYLE_MIX_SHIFT17,269
#define VAL_PROP(VAL_PROP19,320
#define STYLE_ATTR_MIX(STYLE_ATTR_MIX20,390
#define LV_STYLE_PROP_TO_ID(LV_STYLE_PROP_TO_ID27,1002
#define LV_STYLE_PROP_GET_TYPE(LV_STYLE_PROP_GET_TYPE28,1051
void lv_style_init(lv_style_t * style)lv_style_init66,2226
void lv_style_copy(lv_style_t * style_dest, const lv_style_t * style_src)lv_style_copy79,2608
bool lv_style_remove_prop(lv_style_t * style, lv_style_property_t prop)lv_style_remove_prop100,3270
void lv_style_list_init(lv_style_list_t * list)lv_style_list_init137,4339
void lv_style_list_copy(lv_style_list_t * list_dest, const lv_style_list_t * list_src)lv_style_list_copy150,4780
void _lv_style_list_add_style(lv_style_list_t * list, lv_style_t * style)_lv_style_list_add_style196,6806
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)_lv_style_list_remove_style234,7993
void _lv_style_list_reset(lv_style_list_t * list)_lv_style_list_reset285,9363
void lv_style_reset(lv_style_t * style)lv_style_reset322,10291
uint16_t _lv_style_get_mem_size(const lv_style_t * style)_lv_style_get_mem_size335,10557
void _lv_style_set_int(lv_style_t * style, lv_style_property_t prop, lv_style_int_t value)_lv_style_set_int360,11409
void _lv_style_set_color(lv_style_t * style, lv_style_property_t prop, lv_color_t color)_lv_style_set_color406,13371
void _lv_style_set_opa(lv_style_t * style, lv_style_property_t prop, lv_opa_t opa)_lv_style_set_opa453,15313
void _lv_style_set_ptr(lv_style_t * style, lv_style_property_t prop, const void * p)_lv_style_set_ptr500,17241
int16_t _lv_style_get_int(const lv_style_t * style, lv_style_property_t prop, void * v_res)_lv_style_get_int547,19148
int16_t _lv_style_get_opa(const lv_style_t * style, lv_style_property_t prop, void * v_res)_lv_style_get_opa584,20622
int16_t _lv_style_get_color(const lv_style_t * style, lv_style_property_t prop, void * v_res)_lv_style_get_color621,22077
int16_t _lv_style_get_ptr(const lv_style_t * style, lv_style_property_t prop, void * v_res)_lv_style_get_ptr655,23508
lv_style_t * lv_style_list_get_local_style(lv_style_list_t * list)lv_style_list_get_local_style682,24367
lv_style_t * _lv_style_list_get_transition_style(lv_style_list_t * list)_lv_style_list_get_transition_style696,24795
lv_style_t * _lv_style_list_add_trans_style(lv_style_list_t * list)_lv_style_list_add_trans_style709,25157
void _lv_style_list_set_local_int(lv_style_list_t * list, lv_style_property_t prop, lv_style_int_t value)_lv_style_list_set_local_int744,26374
void _lv_style_list_set_local_opa(lv_style_list_t * list, lv_style_property_t prop, lv_opa_t value)_lv_style_list_set_local_opa760,27003
void _lv_style_list_set_local_color(lv_style_list_t * list, lv_style_property_t prop, lv_color_t value)_lv_style_list_set_local_color776,27624
void _lv_style_list_set_local_ptr(lv_style_list_t * list, lv_style_property_t prop, const void * value)_lv_style_list_set_local_ptr792,28252
lv_res_t _lv_style_list_get_int(lv_style_list_t * list, lv_style_property_t prop, lv_style_int_t * res)_lv_style_list_get_int813,29096
lv_res_t _lv_style_list_get_color(lv_style_list_t * list, lv_style_property_t prop, lv_color_t * res)_lv_style_list_get_color866,30922
lv_res_t _lv_style_list_get_opa(lv_style_list_t * list, lv_style_property_t prop, lv_opa_t * res)_lv_style_list_get_opa917,32699
lv_res_t _lv_style_list_get_ptr(lv_style_list_t * list, lv_style_property_t prop, const void ** res)_lv_style_list_get_ptr967,34459
bool lv_debug_check_style(const lv_style_t * style)lv_debug_check_style1011,35735
bool lv_debug_check_style_list(const lv_style_list_t * list)lv_debug_check_style_list1030,36199
LV_ATTRIBUTE_FAST_MEM static inline int32_t get_property_index(const lv_style_t * style, lv_style_property_t prop)get_property_index1056,36936
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)get_alloc_local_style1104,38582
static inline void style_resize(lv_style_t * style, size_t sz)style_resize1130,39318
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)get_style_prop1141,39596
static inline uint8_t get_style_prop_id(const lv_style_t * style, size_t idx)get_style_prop_id1156,40016
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)get_style_prop_attr1167,40331
static inline size_t get_prop_size(uint8_t prop_id)get_prop_size1179,40634
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)get_next_prop_index1196,41210

lib/lvgl/src/lv_core/lv_obj.c,18998
#define LV_OBJX_NAME LV_OBJX_NAME51,1117
#define LV_OBJ_DEF_WIDTH LV_OBJ_DEF_WIDTH52,1147
#define LV_OBJ_DEF_HEIGHT LV_OBJ_DEF_HEIGHT53,1189
typedef struct _lv_event_temp_data {_lv_event_temp_data58,1297
    lv_obj_t * obj;obj59,1334
    bool deleted;deleted60,1354
    struct _lv_event_temp_data * prev;prev61,1372
} lv_event_temp_data_t;lv_event_temp_data_t62,1411
    lv_obj_t * obj;obj65,1453
    lv_style_property_t prop;prop66,1473
    uint8_t part;part67,1503
        lv_color_t _color;_color69,1533
        lv_style_int_t _int;_int70,1560
        lv_opa_t _opa;_opa71,1589
        const void * _ptr;_ptr72,1612
    } start_value;start_value73,1639
        lv_color_t _color;_color75,1670
        lv_style_int_t _int;_int76,1697
        lv_opa_t _opa;_opa77,1726
        const void * _ptr;_ptr78,1749
    } end_value;end_value79,1776
} lv_style_trans_t;lv_style_trans_t80,1793
    lv_draw_rect_dsc_t rect;rect83,1831
    lv_draw_label_dsc_t label;label84,1860
    lv_draw_line_dsc_t line;line85,1891
    lv_draw_img_dsc_t img;img86,1920
    lv_style_int_t pad_top;pad_top87,1947
    lv_style_int_t pad_bottom;pad_bottom88,1975
    lv_style_int_t pad_right;pad_right89,2006
    lv_style_int_t pad_left;pad_left90,2036
    lv_style_int_t pad_inner;pad_inner91,2065
    lv_style_int_t margin_top;margin_top92,2095
    lv_style_int_t margin_bottom;margin_bottom93,2126
    lv_style_int_t margin_left;margin_left94,2160
    lv_style_int_t margin_right;margin_right95,2192
    lv_style_int_t size;size96,2225
    lv_style_int_t transform_width;transform_width97,2250
    lv_style_int_t transform_height;transform_height98,2286
    lv_style_int_t transform_angle;transform_angle99,2323
    lv_style_int_t transform_zoom;transform_zoom100,2359
    lv_style_int_t scale_width;scale_width101,2394
    lv_style_int_t scale_border_width;scale_border_width102,2426
    lv_style_int_t scale_end_border_width;scale_end_border_width103,2465
    lv_style_int_t scale_end_line_width;scale_end_line_width104,2508
    lv_color_t scale_grad_color;scale_grad_color105,2549
    lv_color_t scale_end_color;scale_end_color106,2582
    lv_opa_t opa_scale;opa_scale107,2614
    uint32_t clip_corner : 1;clip_corner108,2638
    uint32_t border_post : 1;border_post109,2668
} style_snapshot_t;style_snapshot_t110,2698
    STYLE_COMPARE_SAME,STYLE_COMPARE_SAME113,2734
    STYLE_COMPARE_VISUAL_DIFF,STYLE_COMPARE_VISUAL_DIFF114,2758
    STYLE_COMPARE_DIFF,STYLE_COMPARE_DIFF115,2789
} style_snapshot_res_t;style_snapshot_res_t116,2813
static bool lv_initialized = false;lv_initialized154,5008
static lv_event_temp_data_t * event_temp_data_head;event_temp_data_head155,5044
static const void * event_act_data;event_act_data156,5096
void lv_init(void)lv_init169,5305
void lv_deinit(void)lv_deinit245,7346
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)lv_obj_create272,7920
lv_res_t lv_obj_del(lv_obj_t * obj)lv_obj_del479,14496
void lv_obj_del_anim_ready_cb(lv_anim_t * a)lv_obj_del_anim_ready_cb514,15366
void lv_obj_del_async(lv_obj_t * obj)lv_obj_del_async526,15673
void lv_obj_clean(lv_obj_t * obj)lv_obj_clean536,15878
void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)lv_obj_invalidate_area552,16300
void lv_obj_invalidate(const lv_obj_t * obj)lv_obj_invalidate567,16738
bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)lv_obj_area_is_visible590,17454
bool lv_obj_is_visible(const lv_obj_t * obj)lv_obj_is_visible635,19122
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent)lv_obj_set_parent664,19853
void lv_obj_move_foreground(lv_obj_t * obj)lv_obj_move_foreground720,21323
void lv_obj_move_background(lv_obj_t * obj)lv_obj_move_background743,21885
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)lv_obj_set_pos772,22654
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)lv_obj_set_x824,23988
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)lv_obj_set_y836,24258
void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h)lv_obj_set_size849,24514
void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)lv_obj_set_width903,26003
void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)lv_obj_set_height915,26249
void lv_obj_set_width_fit(lv_obj_t * obj, lv_coord_t w)lv_obj_set_width_fit927,26536
void lv_obj_set_height_fit(lv_obj_t * obj, lv_coord_t h)lv_obj_set_height_fit940,26941
void lv_obj_set_width_margin(lv_obj_t * obj, lv_coord_t w)lv_obj_set_width_margin954,27441
void lv_obj_set_height_margin(lv_obj_t * obj, lv_coord_t h)lv_obj_set_height_margin968,27950
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)lv_obj_align984,28574
void lv_obj_align_x(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs)lv_obj_align_x1011,29480
void lv_obj_align_y(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t y_ofs)lv_obj_align_y1029,30080
void lv_obj_align_mid(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)lv_obj_align_mid1048,30736
void lv_obj_align_mid_x(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs)lv_obj_align_mid_x1078,31682
void lv_obj_align_mid_y(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t y_ofs)lv_obj_align_mid_y1100,32323
void lv_obj_realign(lv_obj_t * obj)lv_obj_realign1118,32751
void lv_obj_set_auto_realign(lv_obj_t * obj, bool en)lv_obj_set_auto_realign1139,33442
void lv_obj_set_ext_click_area(lv_obj_t * obj, lv_coord_t left, lv_coord_t right, lv_coord_t top, lv_coord_t bottom)lv_obj_set_ext_click_area1163,34156
void lv_obj_add_style(lv_obj_t * obj, uint8_t part, lv_style_t * style)lv_obj_add_style1195,35210
void lv_obj_remove_style(lv_obj_t * obj, uint8_t part, lv_style_t * style)lv_obj_remove_style1219,35952
void lv_obj_clean_style_list(lv_obj_t * obj, uint8_t part)lv_obj_clean_style_list1244,36759
void lv_obj_reset_style_list(lv_obj_t * obj, uint8_t part)lv_obj_reset_style_list1266,37478
void _lv_obj_set_style_local_int(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_int_t value)_lv_obj_set_style_local_int1285,38280
void _lv_obj_set_style_local_color(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_color_t color)_lv_obj_set_style_local_color1307,39295
void _lv_obj_set_style_local_opa(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_opa_t opa)_lv_obj_set_style_local_opa1329,40310
void _lv_obj_set_style_local_ptr(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, const void * value)_lv_obj_set_style_local_ptr1351,41320
bool lv_obj_remove_style_local_prop(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)lv_obj_remove_style_local_prop1372,42319
void lv_obj_refresh_style(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)lv_obj_refresh_style1386,42900
void lv_obj_report_style_mod(lv_style_t * style)lv_obj_report_style_mod1466,45410
void _lv_obj_disable_style_caching(lv_obj_t * obj, bool dis)_lv_obj_disable_style_caching1484,45829
void lv_obj_set_hidden(lv_obj_t * obj, bool en)lv_obj_set_hidden1508,46505
void lv_obj_set_adv_hittest(lv_obj_t * obj, bool en)lv_obj_set_adv_hittest1527,47109
void lv_obj_set_click(lv_obj_t * obj, bool en)lv_obj_set_click1539,47385
void lv_obj_set_top(lv_obj_t * obj, bool en)lv_obj_set_top1552,47697
void lv_obj_set_drag(lv_obj_t * obj, bool en)lv_obj_set_drag1564,47947
void lv_obj_set_drag_dir(lv_obj_t * obj, lv_drag_dir_t drag_dir)lv_obj_set_drag_dir1577,48341
void lv_obj_set_drag_throw(lv_obj_t * obj, bool en)lv_obj_set_drag_throw1591,48709
void lv_obj_set_drag_parent(lv_obj_t * obj, bool en)lv_obj_set_drag_parent1604,49069
void lv_obj_set_gesture_parent(lv_obj_t * obj, bool en)lv_obj_set_gesture_parent1617,49435
void lv_obj_set_focus_parent(lv_obj_t * obj, bool en)lv_obj_set_focus_parent1628,49761
void lv_obj_set_parent_event(lv_obj_t * obj, bool en)lv_obj_set_parent_event1652,50481
void lv_obj_set_base_dir(lv_obj_t * obj, lv_bidi_dir_t dir)lv_obj_set_base_dir1665,50834
void lv_obj_add_protect(lv_obj_t * obj, uint8_t prot)lv_obj_add_protect1687,51480
void lv_obj_clear_protect(lv_obj_t * obj, uint8_t prot)lv_obj_clear_protect1699,51741
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)lv_obj_set_state1714,52127
void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)lv_obj_add_state1822,56150
void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)lv_obj_clear_state1839,56710
void lv_obj_finish_transitions(lv_obj_t * obj, uint8_t part)lv_obj_finish_transitions1855,57158
void lv_obj_set_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)lv_obj_set_event_cb1876,57791
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)lv_event_send1890,58252
lv_res_t lv_event_send_refresh(lv_obj_t * obj)lv_event_send_refresh1906,58714
void lv_event_send_refresh_recursive(lv_obj_t * obj)lv_event_send_refresh_recursive1915,58980
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)lv_event_send_func1957,60542
const void * lv_event_get_data(void)lv_event_get_data2014,62193
void lv_obj_set_signal_cb(lv_obj_t * obj, lv_signal_cb_t signal_cb)lv_obj_set_signal_cb2025,62473
lv_res_t lv_signal_send(lv_obj_t * obj, lv_signal_t signal, void * param)lv_signal_send2038,62783
void lv_obj_set_design_cb(lv_obj_t * obj, lv_design_cb_t design_cb)lv_obj_set_design_cb2053,63143
void * lv_obj_allocate_ext_attr(lv_obj_t * obj, uint16_t ext_size)lv_obj_allocate_ext_attr2071,63585
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)lv_obj_refresh_ext_draw_pad2087,64089
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)lv_obj_get_screen2105,64457
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)lv_obj_get_disp2125,64857
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)lv_obj_get_parent2157,65567
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)lv_obj_get_child2171,65982
lv_obj_t * lv_obj_get_child_back(const lv_obj_t * obj, const lv_obj_t * child)lv_obj_get_child_back2194,66599
uint16_t lv_obj_count_children(const lv_obj_t * obj)lv_obj_count_children2215,67075
uint16_t lv_obj_count_children_recursive(const lv_obj_t * obj)lv_obj_count_children_recursive2231,67394
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)lv_obj_get_coords2255,67986
void lv_obj_get_inner_coords(const lv_obj_t * obj, lv_area_t * coords_p)lv_obj_get_inner_coords2267,68355
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)lv_obj_get_x2288,68987
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)lv_obj_get_y2308,69434
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)lv_obj_get_width2328,69842
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)lv_obj_get_height2340,70076
lv_coord_t lv_obj_get_width_fit(const lv_obj_t * obj)lv_obj_get_width_fit2352,70373
lv_coord_t lv_obj_get_height_fit(const lv_obj_t * obj)lv_obj_get_height_fit2367,70833
lv_coord_t lv_obj_get_height_margin(lv_obj_t * obj)lv_obj_get_height_margin2383,71399
lv_coord_t lv_obj_get_width_margin(lv_obj_t * obj)lv_obj_get_width_margin2397,71906
lv_coord_t lv_obj_get_width_grid(lv_obj_t * obj, uint8_t div, uint8_t span)lv_obj_get_width_grid2415,72624
lv_coord_t lv_obj_get_height_grid(lv_obj_t * obj, uint8_t div, uint8_t span)lv_obj_get_height_grid2436,73393
bool lv_obj_get_auto_realign(const lv_obj_t * obj)lv_obj_get_auto_realign2452,73887
lv_coord_t lv_obj_get_ext_click_pad_left(const lv_obj_t * obj)lv_obj_get_ext_click_pad_left2469,74235
lv_coord_t lv_obj_get_ext_click_pad_right(const lv_obj_t * obj)lv_obj_get_ext_click_pad_right2488,74706
lv_coord_t lv_obj_get_ext_click_pad_top(const lv_obj_t * obj)lv_obj_get_ext_click_pad_top2507,75171
lv_coord_t lv_obj_get_ext_click_pad_bottom(const lv_obj_t * obj)lv_obj_get_ext_click_pad_bottom2526,75640
lv_coord_t lv_obj_get_ext_draw_pad(const lv_obj_t * obj)lv_obj_get_ext_draw_pad2545,76107
lv_style_list_t * lv_obj_get_style_list(const lv_obj_t * obj, uint8_t part)lv_obj_get_style_list2556,76297
lv_style_int_t _lv_obj_get_style_int(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)_lv_obj_get_style_int2586,77502
lv_color_t _lv_obj_get_style_color(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)_lv_obj_get_style_color2717,82554
lv_opa_t _lv_obj_get_style_opa(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)_lv_obj_get_style_opa2773,84533
const void * _lv_obj_get_style_ptr(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)_lv_obj_get_style_ptr2852,87387
lv_style_t * lv_obj_get_local_style(lv_obj_t * obj, uint8_t part)lv_obj_get_local_style2925,89670
bool lv_obj_get_hidden(const lv_obj_t * obj)lv_obj_get_hidden2941,90083
bool lv_obj_get_adv_hittest(const lv_obj_t * obj)lv_obj_get_adv_hittest2953,90368
bool lv_obj_get_click(const lv_obj_t * obj)lv_obj_get_click2965,90642
bool lv_obj_get_top(const lv_obj_t * obj)lv_obj_get_top2977,90910
bool lv_obj_get_drag(const lv_obj_t * obj)lv_obj_get_drag2989,91167
lv_drag_dir_t lv_obj_get_drag_dir(const lv_obj_t * obj)lv_obj_get_drag_dir3001,91458
bool lv_obj_get_drag_throw(const lv_obj_t * obj)lv_obj_get_drag_throw3013,91718
bool lv_obj_get_drag_parent(const lv_obj_t * obj)lv_obj_get_drag_parent3025,91988
bool lv_obj_get_gesture_parent(const lv_obj_t * obj)lv_obj_get_gesture_parent3035,92223
bool lv_obj_get_focus_parent(const lv_obj_t * obj)lv_obj_get_focus_parent3045,92460
bool lv_obj_get_parent_event(const lv_obj_t * obj)lv_obj_get_parent_event3055,92695
lv_bidi_dir_t lv_obj_get_base_dir(const lv_obj_t * obj)lv_obj_get_base_dir3063,92841
uint8_t lv_obj_get_protect(const lv_obj_t * obj)lv_obj_get_protect3088,93384
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)lv_obj_is_protected3101,93756
lv_state_t lv_obj_get_state(const lv_obj_t * obj, uint8_t part)lv_obj_get_state3108,93915
lv_signal_cb_t lv_obj_get_signal_cb(const lv_obj_t * obj)lv_obj_get_signal_cb3131,94602
lv_design_cb_t lv_obj_get_design_cb(const lv_obj_t * obj)lv_obj_get_design_cb3143,94845
lv_event_cb_t lv_obj_get_event_cb(const lv_obj_t * obj)lv_obj_get_event_cb3155,95086
void * lv_obj_get_ext_attr(const lv_obj_t * obj)lv_obj_get_ext_attr3172,95446
void lv_obj_get_type(const lv_obj_t * obj, lv_obj_type_t * buf)lv_obj_get_type3185,95878
lv_obj_user_data_t lv_obj_get_user_data(const lv_obj_t * obj)lv_obj_get_user_data3216,96564
lv_obj_user_data_t * lv_obj_get_user_data_ptr(const lv_obj_t * obj)lv_obj_get_user_data_ptr3228,96819
void lv_obj_set_user_data(lv_obj_t * obj, lv_obj_user_data_t data)lv_obj_set_user_data3240,97105
void * lv_obj_get_group(const lv_obj_t * obj)lv_obj_get_group3253,97411
bool lv_obj_is_focused(const lv_obj_t * obj)lv_obj_is_focused3270,97795
bool lv_obj_is_point_on_coords(lv_obj_t * obj, const lv_point_t * point)lv_obj_is_point_on_coords3298,98436
bool lv_obj_hittest(lv_obj_t * obj, lv_point_t * point)lv_obj_hittest3330,99558
lv_res_t lv_obj_handle_get_type_signal(lv_obj_type_t * buf, const char * name)lv_obj_handle_get_type_signal3350,100194
void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint8_t part, lv_draw_rect_dsc_t * draw_dsc)lv_obj_init_draw_rect_dsc3369,100843
void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint8_t part, lv_draw_label_dsc_t * draw_dsc)lv_obj_init_draw_label_dsc3505,106840
void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint8_t part, lv_draw_img_dsc_t * draw_dsc)lv_obj_init_draw_img_dsc3538,108074
void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint8_t part, lv_draw_line_dsc_t * draw_dsc)lv_obj_init_draw_line_dsc3565,109008
lv_coord_t lv_obj_get_draw_rect_ext_pad_size(lv_obj_t * obj, uint8_t part)lv_obj_get_draw_rect_ext_pad_size3601,110202
void lv_obj_fade_in(lv_obj_t * obj, uint32_t time, uint32_t delay)lv_obj_fade_in3677,113368
void lv_obj_fade_out(lv_obj_t * obj, uint32_t time, uint32_t delay)lv_obj_fade_out3702,114150
bool lv_debug_check_obj_type(const lv_obj_t * obj, const char * obj_type)lv_debug_check_obj_type3726,114791
bool lv_debug_check_obj_valid(const lv_obj_t * obj)lv_debug_check_obj_valid3748,115362
static void lv_obj_del_async_cb(void * obj)lv_obj_del_async_cb3770,115824
static void obj_del_core(lv_obj_t * obj)obj_del_core3777,115933
static lv_design_res_t lv_obj_design(lv_obj_t * obj, const lv_area_t * clip_area, lv_design_mode_t mode)lv_obj_design3860,118429
lv_obj_t * lv_obj_get_focused_obj(const lv_obj_t * obj)lv_obj_get_focused_obj3968,123029
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)lv_obj_signal3986,123604
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)refresh_children_position4065,126153
static void report_style_mod_core(void * style, lv_obj_t * obj)report_style_mod_core4083,126667
static void refresh_children_style(lv_obj_t * obj)refresh_children_style4114,127657
static void base_dir_refr_children(lv_obj_t * obj)base_dir_refr_children4127,128035
static void obj_align_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, bool x_set, bool y_set,obj_align_core4142,128398
static void obj_align_mid_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align,  bool x_set, bool y_set,obj_align_mid_core4162,129137
static lv_style_trans_t * trans_create(lv_obj_t * obj, lv_style_property_t prop, uint8_t part, lv_state_t prev_state,trans_create4307,134003
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)trans_del4428,138836
static void trans_anim_cb(lv_style_trans_t * tr, lv_anim_value_t v)trans_anim_cb4454,139899
static void trans_anim_start_cb(lv_anim_t * a)trans_anim_start_cb4490,141326
static void trans_anim_ready_cb(lv_anim_t * a)trans_anim_ready_cb4519,142298
static void opa_scale_anim(lv_obj_t * obj, lv_anim_value_t v)opa_scale_anim4545,143122
static void fade_in_anim_ready(lv_anim_t * a)fade_in_anim_ready4550,143271
static void lv_event_mark_deleted(lv_obj_t * obj)lv_event_mark_deleted4557,143426
static bool obj_valid_child(const lv_obj_t * parent, const lv_obj_t * obj_to_find)obj_valid_child4567,143622
static bool style_prop_is_cacheble(lv_style_property_t prop)style_prop_is_cacheble4582,144006
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)update_style_cache4636,145707
static void update_style_cache_children(lv_obj_t * obj)update_style_cache_children4723,149551
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)invalidate_style_cache4760,150922
static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)style_snapshot4784,151638
static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)style_snapshot_compare4831,153978

lib/lvgl/src/lv_core/lv_group.h,2255
#define LV_GROUP_HLV_GROUP_H7,51
    LV_KEY_UP        = 17,  /*0x11*/LV_KEY_UP26,432
    LV_KEY_DOWN      = 18,  /*0x12*/LV_KEY_DOWN27,469
    LV_KEY_RIGHT     = 19,  /*0x13*/LV_KEY_RIGHT28,506
    LV_KEY_LEFT      = 20,  /*0x14*/LV_KEY_LEFT29,543
    LV_KEY_ESC       = 27,  /*0x1B*/LV_KEY_ESC30,580
    LV_KEY_DEL       = 127, /*0x7F*/LV_KEY_DEL31,617
    LV_KEY_BACKSPACE = 8,   /*0x08*/LV_KEY_BACKSPACE32,654
    LV_KEY_ENTER     = 10,  /*0x0A, '\n'*/LV_KEY_ENTER33,691
    LV_KEY_NEXT      = 9,   /*0x09, '\t'*/LV_KEY_NEXT34,734
    LV_KEY_PREV      = 11,  /*0x0B, '*/LV_KEY_PREV35,777
    LV_KEY_HOME      = 2,   /*0x02, STX*/LV_KEY_HOME36,817
    LV_KEY_END       = 3,   /*0x03, ETX*/LV_KEY_END37,859
typedef uint8_t lv_key_t;lv_key_t39,904
typedef void (*lv_group_style_mod_cb_t)(struct _lv_group_t *, lv_style_t *);lv_group_style_mod_cb_t47,1040
typedef void (*lv_group_focus_cb_t)(struct _lv_group_t *);lv_group_focus_cb_t48,1117
typedef struct _lv_group_t {_lv_group_t54,1352
    lv_ll_t obj_ll;        /**< Linked list to store the objects in the group */obj_ll55,1381
    lv_obj_t ** obj_focus; /**< The object in focus*/obj_focus56,1462
    lv_group_focus_cb_t focus_cb;              /**< A function to call when a new object is focused (optional)*/focus_cb58,1517
    lv_group_user_data_t user_data;user_data60,1651
    uint8_t frozen : 1;         /**< 1: can't focus to new object*/frozen63,1695
    uint8_t editing : 1;        /**< 1: Edit mode, 0: Navigate mode*/editing64,1763
    uint8_t click_focus : 1;    /**< 1: If an object in a group is clicked by an indev then it will beclick_focus65,1833
    uint8_t refocus_policy : 1; /**< 1: Focus prev if focused on deletion. 0: Focus next if focused onrefocus_policy67,1982
    uint8_t wrap : 1;           /**< 1: Focus next/prev can wrap at end of list. 0: Focus next/prev stops at endwrap69,2132
} lv_group_t;lv_group_t71,2291
enum { LV_GROUP_REFOCUS_POLICY_NEXT = 0, LV_GROUP_REFOCUS_POLICY_PREV = 1 };LV_GROUP_REFOCUS_POLICY_NEXT73,2306
enum { LV_GROUP_REFOCUS_POLICY_NEXT = 0, LV_GROUP_REFOCUS_POLICY_PREV = 1 };LV_GROUP_REFOCUS_POLICY_PREV73,2306
typedef uint8_t lv_group_refocus_policy_t;lv_group_refocus_policy_t74,2383

lib/lvgl/src/lv_core/lv_obj_style_dec.h,2335
#define LV_OBJ_STYLE_DEC_HLV_OBJ_STYLE_DEC_H8,68
#define _OBJ_GET_STYLE_scalar(_OBJ_GET_STYLE_scalar61,2514
#define _OBJ_GET_STYLE_nonscalar(_OBJ_GET_STYLE_nonscalar67,2929
#define _OBJ_SET_STYLE_LOCAL_scalar(_OBJ_SET_STYLE_LOCAL_scalar73,3344
#define _OBJ_SET_STYLE_LOCAL_nonscalar(_OBJ_SET_STYLE_LOCAL_nonscalar79,3871
#define _OBJ_SET_STYLE_scalar(_OBJ_SET_STYLE_scalar85,4398
#define _OBJ_SET_STYLE_nonscalar(_OBJ_SET_STYLE_nonscalar91,4896
#define _LV_OBJ_STYLE_SET_GET_DECLARE(_LV_OBJ_STYLE_SET_GET_DECLARE97,5394
#undef _LV_OBJ_STYLE_SET_GET_DECLARE_LV_OBJ_STYLE_SET_GET_DECLARE201,14241
static inline void lv_obj_set_style_local_pad_all(lv_obj_t * obj, uint8_t part, lv_state_t state, lv_style_int_t value)lv_obj_set_style_local_pad_all204,14280
static inline void lv_style_set_pad_all(lv_style_t * style, lv_state_t state, lv_style_int_t value)lv_style_set_pad_all213,14656
static inline void lv_obj_set_style_local_pad_hor(lv_obj_t * obj, uint8_t part, lv_state_t state, lv_style_int_t value)lv_obj_set_style_local_pad_hor222,14956
static inline void lv_style_set_pad_hor(lv_style_t * style, lv_state_t state, lv_style_int_t value)lv_style_set_pad_hor229,15207
static inline void lv_obj_set_style_local_pad_ver(lv_obj_t * obj, uint8_t part, lv_state_t state, lv_style_int_t value)lv_obj_set_style_local_pad_ver236,15410
static inline void lv_style_set_pad_ver(lv_style_t * style, lv_state_t state, lv_style_int_t value)lv_style_set_pad_ver243,15661
static inline void lv_obj_set_style_local_margin_all(lv_obj_t * obj, uint8_t part, lv_state_t state,lv_obj_set_style_local_margin_all250,15864
static inline void lv_style_set_margin_all(lv_style_t * style, lv_state_t state, lv_style_int_t value)lv_style_set_margin_all260,16308
static inline void lv_obj_set_style_local_margin_hor(lv_obj_t * obj, uint8_t part, lv_state_t state,lv_obj_set_style_local_margin_hor269,16623
static inline void lv_style_set_margin_hor(lv_style_t * style, lv_state_t state, lv_style_int_t value)lv_style_set_margin_hor277,16936
static inline void lv_obj_set_style_local_margin_ver(lv_obj_t * obj, uint8_t part, lv_state_t state,lv_obj_set_style_local_margin_ver284,17148
static inline void lv_style_set_margin_ver(lv_style_t * style, lv_state_t state, lv_style_int_t value)lv_style_set_margin_ver292,17461

lib/lvgl/src/lv_core/lv_obj.h,11948
#define LV_OBJ_HLV_OBJ_H7,47
#define LV_MAX_ANCESTOR_NUM LV_MAX_ANCESTOR_NUM44,872
#define LV_EXT_CLICK_AREA_OFF LV_EXT_CLICK_AREA_OFF46,903
#define LV_EXT_CLICK_AREA_TINY LV_EXT_CLICK_AREA_TINY47,937
#define LV_EXT_CLICK_AREA_FULL LV_EXT_CLICK_AREA_FULL48,971
#define _LV_OBJ_PART_VIRTUAL_FIRST _LV_OBJ_PART_VIRTUAL_FIRST50,1006
#define _LV_OBJ_PART_REAL_FIRST _LV_OBJ_PART_REAL_FIRST51,1046
    LV_DESIGN_DRAW_MAIN, /**< Draw the main portion of the object */LV_DESIGN_DRAW_MAIN62,1201
    LV_DESIGN_DRAW_POST, /**< Draw extras on the object */LV_DESIGN_DRAW_POST63,1270
    LV_DESIGN_COVER_CHK, /**< Check if the object fully covers the 'mask_p' area */LV_DESIGN_COVER_CHK64,1329
typedef uint8_t lv_design_mode_t;lv_design_mode_t66,1416
    LV_DESIGN_RES_OK,          /**< Draw ready */LV_DESIGN_RES_OK71,1481
    LV_DESIGN_RES_COVER,       /**< Returned on `LV_DESIGN_COVER_CHK` if the areas is fully covered*/LV_DESIGN_RES_COVER72,1531
    LV_DESIGN_RES_NOT_COVER,   /**< Returned on `LV_DESIGN_COVER_CHK` if the areas is not covered*/LV_DESIGN_RES_NOT_COVER73,1633
    LV_DESIGN_RES_MASKED,      /**< Returned on `LV_DESIGN_COVER_CHK` if the areas is masked out (children also not cover)*/LV_DESIGN_RES_MASKED74,1733
typedef uint8_t lv_design_res_t;lv_design_res_t76,1861
typedef lv_design_res_t (*lv_design_cb_t)(struct _lv_obj_t * obj, const lv_area_t * clip_area, lv_design_mode_t mode);lv_design_cb_t82,2049
    LV_EVENT_PRESSED,             /**< The object has been pressed*/LV_EVENT_PRESSED85,2176
    LV_EVENT_PRESSING,            /**< The object is being pressed (called continuously while pressing)*/LV_EVENT_PRESSING86,2245
    LV_EVENT_PRESS_LOST,          /**< User is still pressing but slid cursor/finger off of the object */LV_EVENT_PRESS_LOST87,2351
    LV_EVENT_SHORT_CLICKED,       /**< User pressed object for a short period of time, then released it. Not called if dragged. */LV_EVENT_SHORT_CLICKED88,2457
    LV_EVENT_LONG_PRESSED,        /**< Object has been pressed for at least `LV_INDEV_LONG_PRESS_TIME`.  Not called if dragged.*/LV_EVENT_LONG_PRESSED89,2588
    LV_EVENT_LONG_PRESSED_REPEAT, /**< Called after `LV_INDEV_LONG_PRESS_TIME` in everyLV_EVENT_LONG_PRESSED_REPEAT90,2718
    LV_EVENT_CLICKED,             /**< Called on release if not dragged (regardless to long press)*/LV_EVENT_CLICKED92,2906
    LV_EVENT_RELEASED,            /**< Called in every cases when the object has been released*/LV_EVENT_RELEASED93,3007
    LV_EVENT_DRAG_BEGIN,LV_EVENT_DRAG_BEGIN94,3104
    LV_EVENT_DRAG_END,LV_EVENT_DRAG_END95,3129
    LV_EVENT_DRAG_THROW_BEGIN,LV_EVENT_DRAG_THROW_BEGIN96,3152
    LV_EVENT_GESTURE,           /**< The object has been gesture*/LV_EVENT_GESTURE97,3183
    LV_EVENT_KEY,LV_EVENT_KEY98,3250
    LV_EVENT_FOCUSED,LV_EVENT_FOCUSED99,3268
    LV_EVENT_DEFOCUSED,LV_EVENT_DEFOCUSED100,3290
    LV_EVENT_LEAVE,LV_EVENT_LEAVE101,3314
    LV_EVENT_VALUE_CHANGED,      /**< The object's value has changed (i.e. slider moved) */LV_EVENT_VALUE_CHANGED102,3334
    LV_EVENT_INSERT,LV_EVENT_INSERT103,3426
    LV_EVENT_REFRESH,LV_EVENT_REFRESH104,3447
    LV_EVENT_APPLY,  /**< "Ok", "Apply" or similar specific button has clicked*/LV_EVENT_APPLY105,3469
    LV_EVENT_CANCEL, /**< "Close", "Cancel" or similar specific button has clicked*/LV_EVENT_CANCEL106,3550
    LV_EVENT_DELETE, /**< Object is being deleted */LV_EVENT_DELETE107,3635
    _LV_EVENT_LAST /** Number of events*/_LV_EVENT_LAST108,3688
typedef uint8_t lv_event_t; /**< Type of event being sent to the object. */lv_event_t110,3733
typedef void (*lv_event_cb_t)(struct _lv_obj_t * obj, lv_event_t event);lv_event_cb_t117,3958
    LV_SIGNAL_CLEANUP, /**< Object is being deleted */LV_SIGNAL_CLEANUP124,4257
    LV_SIGNAL_CHILD_CHG, /**< Child was removed/added */LV_SIGNAL_CHILD_CHG125,4312
    LV_SIGNAL_COORD_CHG, /**< Object coordinates/size have changed */LV_SIGNAL_COORD_CHG126,4369
    LV_SIGNAL_PARENT_SIZE_CHG, /**< Parent's size has changed */LV_SIGNAL_PARENT_SIZE_CHG127,4439
    LV_SIGNAL_STYLE_CHG,    /**< Object's style has changed */LV_SIGNAL_STYLE_CHG128,4504
    LV_SIGNAL_BASE_DIR_CHG, /**<The base dir has changed*/LV_SIGNAL_BASE_DIR_CHG129,4567
    LV_SIGNAL_REFR_EXT_DRAW_PAD, /**< Object's extra padding has changed */LV_SIGNAL_REFR_EXT_DRAW_PAD130,4626
    LV_SIGNAL_GET_TYPE, /**< LVGL needs to retrieve the object's type */LV_SIGNAL_GET_TYPE131,4702
    LV_SIGNAL_GET_STYLE, /**<Get the style of an object*/LV_SIGNAL_GET_STYLE132,4775
    LV_SIGNAL_GET_STATE_DSC, /**<Get the state of the object*/LV_SIGNAL_GET_STATE_DSC133,4833
    LV_SIGNAL_HIT_TEST,          /**< Advanced hit-testing */LV_SIGNAL_HIT_TEST136,4926
    LV_SIGNAL_PRESSED,           /**< The object has been pressed*/LV_SIGNAL_PRESSED137,4988
    LV_SIGNAL_PRESSING,          /**< The object is being pressed (called continuously while pressing)*/LV_SIGNAL_PRESSING138,5056
    LV_SIGNAL_PRESS_LOST,        /**< User is still pressing but slid cursor/finger off of the object */LV_SIGNAL_PRESS_LOST139,5161
    LV_SIGNAL_RELEASED,          /**< User pressed object for a short period of time, then released it. Not called if dragged. */LV_SIGNAL_RELEASED140,5266
    LV_SIGNAL_LONG_PRESS,        /**< Object has been pressed for at least `LV_INDEV_LONG_PRESS_TIME`.  Not called if dragged.*/LV_SIGNAL_LONG_PRESS141,5396
    LV_SIGNAL_LONG_PRESS_REP,    /**< Called after `LV_INDEV_LONG_PRESS_TIME` in every `LV_INDEV_LONG_PRESS_REP_TIME` ms.  Not called if dragged.*/LV_SIGNAL_LONG_PRESS_REP142,5525
    LV_SIGNAL_DRAG_BEGIN,LV_SIGNAL_DRAG_BEGIN143,5673
    LV_SIGNAL_DRAG_THROW_BEGIN,LV_SIGNAL_DRAG_THROW_BEGIN144,5699
    LV_SIGNAL_DRAG_END,LV_SIGNAL_DRAG_END145,5731
    LV_SIGNAL_GESTURE,          /**< The object has been gesture*/LV_SIGNAL_GESTURE146,5755
    LV_SIGNAL_LEAVE,            /**< Another object is clicked or chosen via an input device */LV_SIGNAL_LEAVE147,5822
    LV_SIGNAL_FOCUS,LV_SIGNAL_FOCUS150,5941
    LV_SIGNAL_DEFOCUS,LV_SIGNAL_DEFOCUS151,5962
    LV_SIGNAL_CONTROL,LV_SIGNAL_CONTROL152,5985
    LV_SIGNAL_GET_EDITABLE,LV_SIGNAL_GET_EDITABLE153,6008
typedef uint8_t lv_signal_t;lv_signal_t155,6039
typedef lv_res_t (*lv_signal_cb_t)(struct _lv_obj_t * obj, lv_signal_t sign, void * param);lv_signal_cb_t157,6069
    const struct _lv_obj_t * base;base161,6202
    lv_coord_t xofs;xofs162,6237
    lv_coord_t yofs;yofs163,6258
    lv_align_t align;align164,6279
    uint8_t auto_realign : 1;auto_realign165,6301
    uint8_t mid_align : 1; /**< 1: the origo (center of the object) was aligned withmid_align166,6331
} lv_realign_t;lv_realign_t168,6471
    LV_PROTECT_NONE      = 0x00,LV_PROTECT_NONE173,6543
    LV_PROTECT_CHILD_CHG = 0x01,   /**< Disable the child change signal. Used by the library*/LV_PROTECT_CHILD_CHG174,6576
    LV_PROTECT_PARENT    = 0x02,   /**< Prevent automatic parent change (e.g. in lv_page)*/LV_PROTECT_PARENT175,6671
    LV_PROTECT_POS       = 0x04,   /**< Prevent automatic positioning (e.g. in lv_cont layout)*/LV_PROTECT_POS176,6763
    LV_PROTECT_FOLLOW    = 0x08,   /**< Prevent the object be followed in automatic ordering (e.g. inLV_PROTECT_FOLLOW177,6860
    LV_PROTECT_PRESS_LOST = 0x10,  /**< If the `indev` was pressing this object but swiped out whileLV_PROTECT_PRESS_LOST179,7025
    LV_PROTECT_CLICK_FOCUS = 0x20, /**< Prevent focusing the object by clicking on it*/LV_PROTECT_CLICK_FOCUS181,7203
typedef uint8_t lv_protect_t;lv_protect_t183,7294
    LV_STATE_DEFAULT   =  0x00,LV_STATE_DEFAULT186,7332
    LV_STATE_CHECKED  =  0x01,LV_STATE_CHECKED187,7364
    LV_STATE_FOCUSED  =  0x02,LV_STATE_FOCUSED188,7395
    LV_STATE_EDITED   =  0x04,LV_STATE_EDITED189,7426
    LV_STATE_HOVERED  =  0x08,LV_STATE_HOVERED190,7457
    LV_STATE_PRESSED  =  0x10,LV_STATE_PRESSED191,7488
    LV_STATE_DISABLED =  0x20,LV_STATE_DISABLED192,7519
typedef uint8_t lv_state_t;lv_state_t195,7554
typedef struct _lv_obj_t {_lv_obj_t197,7583
    struct _lv_obj_t * parent; /**< Pointer to the parent object*/parent198,7610
    lv_ll_t child_ll;       /**< Linked list to store the children objects*/child_ll199,7677
    lv_area_t coords; /**< Coordinates of the object (x1, y1, x2, y2)*/coords201,7755
    lv_event_cb_t event_cb; /**< Event callback function */event_cb203,7828
    lv_signal_cb_t signal_cb; /**< Object type specific signal function*/signal_cb204,7888
    lv_design_cb_t design_cb; /**< Object type specific design function*/design_cb205,7962
    void * ext_attr;            /**< Object type specific extended data*/ext_attr207,8037
    lv_style_list_t  style_list;style_list208,8111
    uint8_t ext_click_pad_hor; /**< Extra click padding in horizontal direction */ext_click_pad_hor211,8197
    uint8_t ext_click_pad_ver; /**< Extra click padding in vertical direction */ext_click_pad_ver212,8280
    lv_area_t ext_click_pad;   /**< Extra click padding area. */ext_click_pad214,8415
    lv_coord_t ext_draw_pad; /**< EXTend the size in every direction for drawing. */ext_draw_pad217,8488
    uint8_t click           : 1; /**< 1: Can be pressed by an input device*/click220,8604
    uint8_t drag            : 1; /**< 1: Enable the dragging*/drag221,8681
    uint8_t drag_throw      : 1; /**< 1: Enable throwing with drag*/drag_throw222,8744
    uint8_t drag_parent     : 1; /**< 1: Parent will be dragged instead*/drag_parent223,8813
    uint8_t hidden          : 1; /**< 1: Object is hidden*/hidden224,8887
    uint8_t top             : 1; /**< 1: If the object or its children is clicked it goes to the foreground*/top225,8947
    uint8_t parent_event    : 1; /**< 1: Send the object's events to the parent too. */parent_event226,9057
    uint8_t adv_hittest     : 1; /**< 1: Use advanced hit-testing (slower) */adv_hittest227,9145
    uint8_t gesture_parent  : 1; /**< 1: Parent will be gesture instead*/gesture_parent228,9223
    uint8_t focus_parent    : 1; /**< 1: Parent will be focused instead*/focus_parent229,9297
    lv_drag_dir_t drag_dir  : 3; /**<  Which directions the object can be dragged in */drag_dir231,9372
    lv_bidi_dir_t base_dir  : 2; /**< Base direction of texts related to this object */base_dir232,9460
    void * group_p;group_p235,9571
    uint8_t protect;            /**< Automatically happening actions can be prevented.protect238,9599
    lv_state_t state;state240,9759
    lv_realign_t realign;       /**< Information about the last call to ::lv_obj_align. */realign243,9805
    lv_obj_user_data_t user_data; /**< Custom user data for object. */user_data247,9925
} lv_obj_t;lv_obj_t250,10004
    LV_OBJ_PART_MAIN,LV_OBJ_PART_MAIN253,10024
    _LV_OBJ_PART_VIRTUAL_LAST = _LV_OBJ_PART_VIRTUAL_FIRST,_LV_OBJ_PART_VIRTUAL_LAST254,10046
    _LV_OBJ_PART_REAL_LAST =    _LV_OBJ_PART_REAL_FIRST,_LV_OBJ_PART_REAL_LAST255,10106
    LV_OBJ_PART_ALL = 0xFF,LV_OBJ_PART_ALL256,10163
typedef uint8_t lv_obj_part_t;lv_obj_part_t259,10195
    const char * type[LV_MAX_ANCESTOR_NUM]; /**< [0]: the actual type, [1]: ancestor, [2] #1's ancestortype263,10331
} lv_obj_type_t;lv_obj_type_t265,10503
    lv_point_t * point;point268,10538
    bool result;result269,10562
} lv_hit_test_info_t;lv_hit_test_info_t270,10579
    uint8_t part;part273,10619
    lv_style_list_t * result;result274,10637
} lv_get_style_info_t;lv_get_style_info_t275,10667
    uint8_t part;part278,10708
    lv_state_t result;result279,10726
} lv_get_state_info_t;lv_get_state_info_t280,10749
#define LV_EVENT_CB_DECLARE(LV_EVENT_CB_DECLARE1511,53051
#  define LV_DEBUG_IS_OBJ(LV_DEBUG_IS_OBJ1517,53177
#   define LV_ASSERT_OBJ(LV_ASSERT_OBJ1525,53482
#    define LV_ASSERT_OBJ(LV_ASSERT_OBJ1529,53713
#    define LV_ASSERT_OBJ(LV_ASSERT_OBJ1531,53786
# define LV_ASSERT_OBJ(LV_ASSERT_OBJ1535,53852

lib/lvgl/src/lv_core/lv_refr.h,85
#define LV_REFR_HLV_REFR_H7,49
#define LV_REFR_TASK_PRIO LV_REFR_TASK_PRIO23,278

lib/lvgl/src/lv_core/lv_disp.h,1171
#define LV_DISP_HLV_DISP_H7,49
    LV_SCR_LOAD_ANIM_NONE,LV_SCR_LOAD_ANIM_NONE28,369
    LV_SCR_LOAD_ANIM_OVER_LEFT,LV_SCR_LOAD_ANIM_OVER_LEFT29,396
    LV_SCR_LOAD_ANIM_OVER_RIGHT,LV_SCR_LOAD_ANIM_OVER_RIGHT30,428
    LV_SCR_LOAD_ANIM_OVER_TOP,LV_SCR_LOAD_ANIM_OVER_TOP31,461
    LV_SCR_LOAD_ANIM_OVER_BOTTOM,LV_SCR_LOAD_ANIM_OVER_BOTTOM32,492
    LV_SCR_LOAD_ANIM_MOVE_LEFT,LV_SCR_LOAD_ANIM_MOVE_LEFT33,526
    LV_SCR_LOAD_ANIM_MOVE_RIGHT,LV_SCR_LOAD_ANIM_MOVE_RIGHT34,558
    LV_SCR_LOAD_ANIM_MOVE_TOP,LV_SCR_LOAD_ANIM_MOVE_TOP35,591
    LV_SCR_LOAD_ANIM_MOVE_BOTTOM,LV_SCR_LOAD_ANIM_MOVE_BOTTOM36,622
    LV_SCR_LOAD_ANIM_FADE_ON,LV_SCR_LOAD_ANIM_FADE_ON37,656
} lv_scr_load_anim_t;lv_scr_load_anim_t38,686
static inline lv_obj_t * lv_scr_act(void)lv_scr_act159,4639
static inline lv_obj_t * lv_layer_top(void)lv_layer_top168,4830
static inline lv_obj_t * lv_layer_sys(void)lv_layer_sys177,5029
static inline void lv_scr_load(lv_obj_t * scr)lv_scr_load182,5135
#define LV_HOR_RES LV_HOR_RES200,5554
#define LV_VER_RES LV_VER_RES207,5711
#define LV_DPX(LV_DPX217,6055
static inline lv_coord_t lv_dpx(lv_coord_t n)lv_dpx219,6171

lib/lvgl/src/lv_core/lv_indev.h,35
#define LV_INDEV_HLV_INDEV_H7,51

lib/lvgl/src/lv_core/lv_indev.c,2925
static lv_indev_t * indev_act;indev_act52,1471
static lv_obj_t * indev_obj_act = NULL;indev_obj_act53,1502
void _lv_indev_init(void)_lv_indev_init66,1737
void _lv_indev_read_task(lv_task_t * task)_lv_indev_read_task75,1937
lv_indev_t * lv_indev_get_act(void)lv_indev_get_act137,4005
lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)lv_indev_get_type147,4243
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)lv_indev_reset159,4573
void lv_indev_reset_long_press(lv_indev_t * indev)lv_indev_reset_long_press185,5362
void lv_indev_enable(lv_indev_t * indev, bool en)lv_indev_enable197,5699
void lv_indev_set_cursor(lv_indev_t * indev, lv_obj_t * cur_obj)lv_indev_set_cursor209,6024
void lv_indev_set_group(lv_indev_t * indev, lv_group_t * group)lv_indev_set_group225,6603
void lv_indev_set_button_points(lv_indev_t * indev, const lv_point_t points[])lv_indev_set_button_points239,7043
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)lv_indev_get_point251,7422
lv_gesture_dir_t lv_indev_get_gesture_dir(const lv_indev_t * indev)lv_indev_get_gesture_dir273,7987
uint32_t lv_indev_get_key(const lv_indev_t * indev)lv_indev_get_key283,8280
bool lv_indev_is_dragging(const lv_indev_t * indev)lv_indev_is_dragging297,8667
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)lv_indev_get_vect310,9182
lv_res_t lv_indev_finish_drag(lv_indev_t * indev)lv_indev_finish_drag334,9845
void lv_indev_wait_release(lv_indev_t * indev)lv_indev_wait_release362,10697
lv_obj_t * lv_indev_get_obj_act(void)lv_indev_get_obj_act372,10990
lv_task_t * lv_indev_get_read_task(lv_disp_t * indev)lv_indev_get_read_task383,11277
static void indev_pointer_proc(lv_indev_t * i, lv_indev_data_t * data)indev_pointer_proc402,11717
static void indev_keypad_proc(lv_indev_t * i, lv_indev_data_t * data)indev_keypad_proc429,12630
static void indev_encoder_proc(lv_indev_t * i, lv_indev_data_t * data)indev_encoder_proc586,19152
static void indev_button_proc(lv_indev_t * i, lv_indev_data_t * data)indev_button_proc802,27521
static void indev_proc_press(lv_indev_proc_t * proc)indev_proc_press841,28802
static void indev_proc_release(lv_indev_proc_t * proc)indev_proc_release1010,36594
static void indev_proc_reset_query_handler(lv_indev_t * indev)indev_proc_reset_query_handler1098,40240
lv_obj_t * lv_indev_search_obj(lv_obj_t * obj, lv_point_t * point)lv_indev_search_obj1125,41543
static void indev_click_focus(lv_indev_proc_t * proc)indev_click_focus1162,42733
static void indev_drag(lv_indev_proc_t * proc)indev_drag1257,47073
static void indev_drag_throw(lv_indev_proc_t * proc)indev_drag_throw1403,53336
static lv_obj_t * get_dragged_obj(lv_obj_t * obj)get_dragged_obj1478,56513
static void indev_gesture(lv_indev_proc_t * proc)indev_gesture1494,56898
static bool indev_reset_check(lv_indev_proc_t * proc)indev_reset_check1550,59030

lib/lvgl/src/lv_core/lv_refr.c,1425
#define MASK_AREA_DEBUG MASK_AREA_DEBUG34,761
static uint32_t px_num;px_num55,1447
static lv_disp_t * disp_refr; /*Display being refreshed*/disp_refr56,1471
    static uint32_t fps_sum_cnt;fps_sum_cnt58,1553
    static uint32_t fps_sum_all;fps_sum_all59,1586
void _lv_refr_init(void)_lv_refr_init73,1815
void lv_refr_now(lv_disp_t * disp)lv_refr_now85,2274
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)_lv_inv_area110,2895
lv_disp_t * _lv_refr_get_disp_refreshing(void)_lv_refr_get_disp_refreshing159,4306
void _lv_refr_set_disp_refreshing(lv_disp_t * disp)_lv_refr_set_disp_refreshing170,4600
void _lv_disp_refr_task(lv_task_t * task)_lv_disp_refr_task179,4777
uint32_t lv_refr_get_fps_avg(void)lv_refr_get_fps_avg329,10989
static void lv_refr_join_area(void)lv_refr_join_area342,11199
static void lv_refr_areas(void)lv_refr_areas379,12600
static void lv_refr_area(const lv_area_t * area_p)lv_refr_area415,13528
static void lv_refr_area_part(const lv_area_t * area_p)lv_refr_area_part503,16630
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)lv_refr_get_top_obj591,19698
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)lv_refr_obj_and_children632,21005
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)lv_refr_obj676,22552
static void lv_refr_vdb_flush(void)lv_refr_vdb_flush752,25435

lib/lvgl/src/lv_gpu/lv_gpu_nxp_pxp_osa.c,476
    static SemaphoreHandle_t s_pxpIdle;s_pxpIdle67,1948
    static volatile bool s_pxpIdle;s_pxpIdle69,1994
void PXP_IRQHandler(void)PXP_IRQHandler83,2258
static lv_res_t _lv_gpu_nxp_pxp_interrupt_init(void)_lv_gpu_nxp_pxp_interrupt_init108,2785
static void _lv_gpu_nxp_pxp_interrupt_deinit(void)_lv_gpu_nxp_pxp_interrupt_deinit129,3220
static void _lv_gpu_nxp_pxp_run(void)_lv_gpu_nxp_pxp_run140,3473
lv_nxp_pxp_cfg_t pxp_default_cfg = {pxp_default_cfg160,3919

lib/lvgl/src/lv_gpu/lv_gpu_nxp_pxp.c,1668
    #define PXP_OUT_PIXEL_FORMAT PXP_OUT_PIXEL_FORMAT56,1664
    #define PXP_AS_PIXEL_FORMAT PXP_AS_PIXEL_FORMAT57,1726
    #define PXP_PS_PIXEL_FORMAT PXP_PS_PIXEL_FORMAT58,1783
static bool colorKeyEnabled = false;colorKeyEnabled83,2655
static uint32_t colorKey = 0x0;colorKey84,2692
static bool recolorEnabled = false;recolorEnabled86,2725
static lv_color_t recolor = {.full = 0x0};recolor87,2761
static lv_opa_t recolorOpa = 0x0;recolorOpa88,2804
static lv_nxp_pxp_cfg_t pxp_cfg;pxp_cfg90,2839
lv_res_t lv_gpu_nxp_pxp_init(lv_nxp_pxp_cfg_t * cfg)lv_gpu_nxp_pxp_init106,3222
void lv_gpu_nxp_pxp_deinit(void)lv_gpu_nxp_pxp_deinit132,4005
void lv_gpu_nxp_pxp_fill(lv_color_t * dest_buf, lv_coord_t dest_width, const lv_area_t * fill_area, lv_color_t color,lv_gpu_nxp_pxp_fill149,4450
void lv_gpu_nxp_pxp_blit(lv_color_t * dest, lv_coord_t dest_width, const lv_color_t * src, lv_coord_t src_width,lv_gpu_nxp_pxp_blit228,8630
void lv_gpu_nxp_pxp_enable_color_key(void)lv_gpu_nxp_pxp_enable_color_key308,12210
void lv_gpu_nxp_pxp_disable_color_key(void)lv_gpu_nxp_pxp_disable_color_key317,12374
void lv_gpu_nxp_pxp_enable_recolor(lv_color_t color, lv_opa_t opa)lv_gpu_nxp_pxp_enable_recolor328,12609
void lv_gpu_nxp_pxp_disable_recolor(void)lv_gpu_nxp_pxp_disable_recolor339,12840
static void lv_gpu_nxp_pxp_run(void)lv_gpu_nxp_pxp_run354,13132
static void lv_gpu_nxp_pxp_blit_recolor(lv_color_t * dest, lv_coord_t dest_width, const lv_color_t * src,lv_gpu_nxp_pxp_blit_recolor374,13880
static void lv_gpu_nxp_invalidate_cache(uint32_t address, uint32_t width, uint32_t height, uint32_t stride,lv_gpu_nxp_invalidate_cache470,18933

lib/lvgl/src/lv_gpu/lv_gpu_nxp_vglite.h,1752
#define LV_SRC_LV_GPU_LV_GPU_NXP_VGLITE_H_LV_SRC_LV_GPU_LV_GPU_NXP_VGLITE_H_31,1243
#define LV_GPU_NXP_VG_LITE_STRIDE_ALIGN_PX LV_GPU_NXP_VG_LITE_STRIDE_ALIGN_PX47,1548
#define LV_GPU_NXP_VG_LITE_FILL_SIZE_LIMIT LV_GPU_NXP_VG_LITE_FILL_SIZE_LIMIT51,1712
#define LV_GPU_NXP_VG_LITE_FILL_OPA_SIZE_LIMIT LV_GPU_NXP_VG_LITE_FILL_OPA_SIZE_LIMIT56,1887
#define LV_GPU_NXP_VG_LITE_BLIT_SIZE_LIMIT LV_GPU_NXP_VG_LITE_BLIT_SIZE_LIMIT61,2078
#define LV_GPU_NXP_VG_LITE_BLIT_OPA_SIZE_LIMIT LV_GPU_NXP_VG_LITE_BLIT_OPA_SIZE_LIMIT66,2269
#define LV_GPU_NXP_VG_LITE_LOG_ERRORS LV_GPU_NXP_VG_LITE_LOG_ERRORS71,2425
    const lv_color_t * src;  /**< Source buffer pointer (must be aligned on 32 bytes) */src83,2611
    lv_area_t src_area;      /**< Area to be copied from source */src_area84,2700
    lv_coord_t src_width;    /**< Source buffer width */src_width85,2767
    lv_coord_t src_height;   /**< Source buffer height */src_height86,2824
    uint32_t src_stride;     /**< Source buffer stride in bytes (must be aligned on 16 px) */src_stride87,2882
    const lv_color_t * dst;  /**< Destination buffer pointer (must be aligned on 32 bytes) */dst89,2977
    lv_area_t dst_area;      /**< Target area in destination buffer (must be the same as src_area) */dst_area90,3071
    lv_coord_t dst_width;    /**< Destination buffer width */dst_width91,3173
    lv_coord_t dst_height;   /**< Destination buffer height */dst_height92,3235
    uint32_t dst_stride;     /**< Destination buffer stride in bytes (must be aligned on 16 px) */dst_stride93,3298
    lv_opa_t opa;            /**< Opacity - alpha mix (0 = source not copied, 255 = 100% opaque) */opa95,3398
} lv_gpu_nxp_vglite_blit_info_t;lv_gpu_nxp_vglite_blit_info_t97,3499

lib/lvgl/src/lv_gpu/lv_gpu.mk,0

lib/lvgl/src/lv_gpu/lv_gpu_nxp_pxp.h,752
#define LV_SRC_LV_GPU_LV_GPU_NXP_PXP_H_LV_SRC_LV_GPU_LV_GPU_NXP_PXP_H_31,1237
#define LV_GPU_NXP_PXP_ID LV_GPU_NXP_PXP_ID49,1547
#define LV_GPU_NXP_PXP_IRQ_ID LV_GPU_NXP_PXP_IRQ_ID52,1608
#define LV_GPU_NXP_PXP_BLIT_SIZE_LIMIT LV_GPU_NXP_PXP_BLIT_SIZE_LIMIT56,1773
#define LV_GPU_NXP_PXP_BLIT_OPA_SIZE_LIMIT LV_GPU_NXP_PXP_BLIT_OPA_SIZE_LIMIT61,1952
#define LV_GPU_NXP_PXP_FILL_SIZE_LIMIT LV_GPU_NXP_PXP_FILL_SIZE_LIMIT66,2115
#define LV_GPU_NXP_PXP_FILL_OPA_SIZE_LIMIT LV_GPU_NXP_PXP_FILL_OPA_SIZE_LIMIT71,2278
    lv_res_t (*pxp_interrupt_init)(void);pxp_interrupt_init83,2561
    void (*pxp_interrupt_deinit)(void);pxp_interrupt_deinit86,2660
    void (*pxp_run)(void);pxp_run89,2775
} lv_nxp_pxp_cfg_t;lv_nxp_pxp_cfg_t90,2802

lib/lvgl/src/lv_gpu/lv_gpu_stm32_dma2d.c,976
    #define LV_DMA2D_COLOR_FORMAT LV_DMA2D_COLOR_FORMAT31,609
    #define LV_DMA2D_COLOR_FORMAT LV_DMA2D_COLOR_FORMAT33,686
void lv_gpu_stm32_dma2d_init(void)lv_gpu_stm32_dma2d_init63,1300
void lv_gpu_stm32_dma2d_fill(lv_color_t * buf, lv_coord_t buf_w, lv_color_t color, lv_coord_t fill_w, lv_coord_t fill_h)lv_gpu_stm32_dma2d_fill93,2151
void lv_gpu_stm32_dma2d_fill_mask(lv_color_t * buf, lv_coord_t buf_w, lv_color_t color, const lv_opa_t * mask,lv_gpu_stm32_dma2d_fill_mask121,3256
void lv_gpu_stm32_dma2d_copy(lv_color_t * buf, lv_coord_t buf_w, const lv_color_t * map, lv_coord_t map_w,lv_gpu_stm32_dma2d_copy166,5015
void lv_gpu_stm32_dma2d_blend(lv_color_t * buf, lv_coord_t buf_w, const lv_color_t * map, lv_opa_t opa,lv_gpu_stm32_dma2d_blend196,6136
void lv_gpu_stm32_dma2d_wait_cb(lv_disp_drv_t * drv)lv_gpu_stm32_dma2d_wait_cb223,7068
static void invalidate_cache(void)invalidate_cache239,7387
static void wait_finish(void)wait_finish251,7702

lib/lvgl/src/lv_gpu/lv_gpu_nxp_vglite.c,407
    #define VGLITE_PX_FMT VGLITE_PX_FMT54,1607
lv_res_t lv_gpu_nxp_vglite_fill(lv_color_t * dest_buf, lv_coord_t dest_width, lv_coord_t dest_height,lv_gpu_nxp_vglite_fill89,2714
lv_res_t lv_gpu_nxp_vglite_blit(lv_gpu_nxp_vglite_blit_info_t * blit)lv_gpu_nxp_vglite_blit186,6019
static lv_res_t init_vg_buf(vg_lite_buffer_t * dst, uint32_t width, uint32_t height, uint32_t stride,init_vg_buf268,8518

lib/lvgl/src/lv_gpu/lv_gpu_stm32_dma2d.h,307
#define LV_GPU_STM32_DMA2D_HLV_GPU_STM32_DMA2D_H7,71
#define LV_DMA2D_ARGB8888 LV_DMA2D_ARGB888824,370
#define LV_DMA2D_RGB888 LV_DMA2D_RGB88825,398
#define LV_DMA2D_RGB565 LV_DMA2D_RGB56526,424
#define LV_DMA2D_ARGB1555 LV_DMA2D_ARGB155527,450
#define LV_DMA2D_ARGB4444 LV_DMA2D_ARGB444428,478

lib/lvgl/src/lv_gpu/lv_gpu_nxp_pxp_osa.h,88
#define LV_SRC_LV_GPU_LV_GPU_NXP_PXP_OSA_H_LV_SRC_LV_GPU_LV_GPU_NXP_PXP_OSA_H_31,1245

lib/lvgl/lv_conf_template.h,0

lib/FastLED/fastspi_dma.h,0

lib/FastLED/lib8tion/math8.h,1493
#define __INC_LIB8TION_MATH_H__INC_LIB8TION_MATH_H2,30
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)qadd823,647
LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)qadd756,1560
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)qsub888,2395
LIB8STATIC_ALWAYS_INLINE uint8_t add8( uint8_t i, uint8_t j)add8117,3088
LIB8STATIC_ALWAYS_INLINE uint16_t add8to16( uint8_t i, uint16_t j)add8to16132,3431
LIB8STATIC_ALWAYS_INLINE uint8_t sub8( uint8_t i, uint8_t j)sub8152,3939
LIB8STATIC_ALWAYS_INLINE uint8_t avg8( uint8_t i, uint8_t j)avg8169,4399
LIB8STATIC_ALWAYS_INLINE uint16_t avg16( uint16_t i, uint16_t j)avg16190,5013
LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)avg7217,6053
LIB8STATIC_ALWAYS_INLINE int16_t avg15( int16_t i, int16_t j)avg15238,6668
LIB8STATIC_ALWAYS_INLINE uint8_t mod8( uint8_t a, uint8_t m)mod8270,7872
LIB8STATIC uint8_t addmod8( uint8_t a, uint8_t b, uint8_t m)addmod8297,8859
LIB8STATIC uint8_t submod8( uint8_t a, uint8_t b, uint8_t m)submod8326,9932
LIB8STATIC_ALWAYS_INLINE uint8_t mul8( uint8_t i, uint8_t j)mul8345,10446
LIB8STATIC_ALWAYS_INLINE uint8_t qmul8( uint8_t i, uint8_t j)qmul8370,11137
LIB8STATIC_ALWAYS_INLINE int8_t abs8( int8_t i)abs8404,12298
LIB8STATIC uint8_t sqrt16(uint16_t x)sqrt16429,12866
LIB8STATIC uint8_t blend8( uint8_t a, uint8_t b, uint8_t amountOfB)blend8465,13704
LIB8STATIC uint8_t blend8( uint8_t a, uint8_t b, uint8_t amountOfB)blend8536,15406

lib/FastLED/lib8tion/random8.h,754
#define __INC_LIB8TION_RANDOM_H__INC_LIB8TION_RANDOM_H2,32
#define FASTLED_RAND16_2053 FASTLED_RAND16_205312,334
#define FASTLED_RAND16_13849 FASTLED_RAND16_1384913,382
LIB8STATIC uint8_t random8()random819,537
LIB8STATIC uint16_t random16()random1629,895
LIB8STATIC uint8_t random8(uint8_t lim)random837,1130
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)random847,1399
LIB8STATIC uint16_t random16( uint16_t lim)random1656,1641
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)random1667,1958
LIB8STATIC void random16_set_seed( uint16_t seed)random16_set_seed75,2169
LIB8STATIC uint16_t random16_get_seed()random16_get_seed81,2310
LIB8STATIC void random16_add_entropy( uint16_t entropy)random16_add_entropy87,2427

lib/FastLED/lib8tion/scale8.h,1735
#define __INC_LIB8TION_SCALE_H__INC_LIB8TION_SCALE_H2,31
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)scale820,675
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)scale8_video98,3301
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)scale8_LEAVING_R1_DIRTY146,4765
LIB8STATIC_ALWAYS_INLINE void nscale8_LEAVING_R1_DIRTY( uint8_t& i, fract8 scale)nscale8_LEAVING_R1_DIRTY190,6325
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)scale8_video_LEAVING_R1_DIRTY230,7802
LIB8STATIC_ALWAYS_INLINE void nscale8_video_LEAVING_R1_DIRTY( uint8_t & i, fract8 scale)nscale8_video_LEAVING_R1_DIRTY277,9324
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()cleanup_R1299,9986
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)nscale8x3314,10450
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)nscale8x3_video344,11488
LIB8STATIC void nscale8x2( uint8_t& i, uint8_t& j, fract8 scale)nscale8x2367,12367
LIB8STATIC void nscale8x2_video( uint8_t& i, uint8_t& j, fract8 scale)nscale8x2_video396,13285
LIB8STATIC_ALWAYS_INLINE uint16_t scale16by8( uint16_t i, fract8 scale )scale16by8416,13961
LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )scale16485,16317
LIB8STATIC uint8_t dim8_raw( uint8_t x)dim8_raw661,22866
LIB8STATIC uint8_t dim8_video( uint8_t x)dim8_video667,23016
LIB8STATIC uint8_t dim8_lin( uint8_t x )dim8_lin673,23167
LIB8STATIC uint8_t brighten8_raw( uint8_t x)brighten8_raw685,23380
LIB8STATIC uint8_t brighten8_video( uint8_t x)brighten8_video692,23544
LIB8STATIC uint8_t brighten8_lin( uint8_t x )brighten8_lin699,23716

lib/FastLED/lib8tion/trig8.h,623
#define __INC_LIB8TION_TRIG_H__INC_LIB8TION_TRIG_H2,30
#define sin16 sin1618,566
#define sin16 sin1620,596
LIB8STATIC int16_t sin16_avr( uint16_t theta )sin16_avr30,912
LIB8STATIC int16_t sin16_C( uint16_t theta )sin16_C88,2499
LIB8STATIC int16_t cos16( uint16_t theta)cos16120,3383
#define sin8 sin8144,4203
#define sin8 sin8146,4231
const uint8_t b_m16_interleave[] = { 0, 49, 49, 41, 90, 27, 117, 10 };b_m16_interleave150,4260
LIB8STATIC uint8_t  sin8_avr( uint8_t theta)sin8_avr159,4611
LIB8STATIC uint8_t sin8_C( uint8_t theta)sin8_C217,6202
LIB8STATIC uint8_t cos8( uint8_t theta)cos8253,7051

lib/FastLED/platforms.h,49
#define __INC_PLATFORMS_H__INC_PLATFORMS_H2,26

lib/FastLED/fastspi_types.h,1025
#define __INC_FASTSPI_TYPES_H__INC_FASTSPI_TYPES_H2,30
#define SPI_B0 SPI_B09,169
#define SPI_B1 SPI_B110,233
#define SPI_B2 SPI_B211,297
#define SPI_ADVANCE SPI_ADVANCE12,361
class DATA_NOP {DATA_NOP20,832
  static __attribute__((always_inline)) inline uint8_t adjust(register uint8_t data) { return data; }adjust22,857
  static __attribute__((always_inline)) inline uint8_t adjust(register uint8_t data, register uint8_t scale) { return scale8(data, scale); }adjust23,959
  static __attribute__((always_inline)) inline void postBlock(int /* len */) { }postBlock24,1100
#define FLAG_START_BIT FLAG_START_BIT27,1185
#define MASK_SKIP_BITS MASK_SKIP_BITS28,1213
#define SPEED_DIV_2 SPEED_DIV_231,1266
#define SPEED_DIV_4 SPEED_DIV_432,1288
#define SPEED_DIV_8 SPEED_DIV_833,1310
#define SPEED_DIV_16 SPEED_DIV_1634,1332
#define SPEED_DIV_32 SPEED_DIV_3235,1356
#define SPEED_DIV_64 SPEED_DIV_6436,1380
#define SPEED_DIV_128 SPEED_DIV_12837,1404
#define MAX_DATA_RATE MAX_DATA_RATE39,1431

lib/FastLED/color.h,2008
#define __INC_COLOR_H__INC_COLOR_H2,22
    TypicalSMD5050=0xFFB0F0 /* 255, 176, 240 */,TypicalSMD505018,393
    TypicalLEDStrip=0xFFB0F0 /* 255, 176, 240 */,TypicalLEDStrip19,442
   Typical8mmPixel=0xFFE08C /* 255, 224, 140 */,Typical8mmPixel25,612
   TypicalPixelString=0xFFE08C /* 255, 224, 140 */,TypicalPixelString26,661
   UncorrectedColor=0xFFFFFFUncorrectedColor30,748
} LEDColorCorrection;LEDColorCorrection32,778
   Candle=0xFF9329 /* 1900 K, 255, 147, 41 */,Candle41,1037
   Tungsten40W=0xFFC58F /* 2600 K, 255, 197, 143 */,Tungsten40W43,1103
   Tungsten100W=0xFFD6AA /* 2850 K, 255, 214, 170 */,Tungsten100W45,1175
   Halogen=0xFFF1E0 /* 3200 K, 255, 241, 224 */,Halogen47,1248
   CarbonArc=0xFFFAF4 /* 5200 K, 255, 250, 244 */,CarbonArc49,1316
   HighNoonSun=0xFFFFFB /* 5400 K, 255, 255, 251 */,HighNoonSun51,1386
   DirectSunlight=0xFFFFFF /* 6000 K, 255, 255, 255 */,DirectSunlight53,1458
   OvercastSky=0xC9E2FF /* 7000 K, 201, 226, 255 */,OvercastSky55,1533
   ClearBlueSky=0x409CFF /* 20000 K, 64, 156, 255 */,ClearBlueSky57,1606
   WarmFluorescent=0xFFF4E5 /* 0 K, 255, 244, 229 */,WarmFluorescent65,1907
   StandardFluorescent=0xF4FFFA /* 0 K, 244, 255, 250 */,StandardFluorescent66,1961
   CoolWhiteFluorescent=0xD4EBFF /* 0 K, 212, 235, 255 */,CoolWhiteFluorescent67,2019
   FullSpectrumFluorescent=0xFFF4F2 /* 0 K, 255, 244, 242 */,FullSpectrumFluorescent68,2078
   GrowLightFluorescent=0xFFEFF7 /* 0 K, 255, 239, 247 */,GrowLightFluorescent69,2140
   BlackLightFluorescent=0xA700FF /* 0 K, 167, 0, 255 */,BlackLightFluorescent70,2199
   MercuryVapor=0xD8F7FF /* 0 K, 216, 247, 255 */,MercuryVapor71,2257
   SodiumVapor=0xFFD1B2 /* 0 K, 255, 209, 178 */,SodiumVapor72,2308
   MetalHalide=0xF2FCFF /* 0 K, 242, 252, 255 */,MetalHalide73,2358
   HighPressureSodium=0xFFB74C /* 0 K, 255, 183, 76 */,HighPressureSodium74,2408
   UncorrectedTemperature=0xFFFFFFUncorrectedTemperature78,2514
} ColorTemperature;ColorTemperature79,2549

lib/FastLED/fastpin.h,8308
#define __INC_FASTPIN_H__INC_FASTPIN_H2,24
#define NO_PIN NO_PIN17,301
class Selectable {Selectable25,675
class Pin : public Selectable {Pin34,828
	volatile RwReg *mPort;mPort35,860
	volatile RoReg *mInPort;mInPort36,884
	RwReg mPinMask;mPinMask37,910
	uint8_t mPin;mPin38,927
	void _init() {_init40,943
	Pin(int pin) : mPin(pin) { _init(); }Pin46,1153
	typedef volatile RwReg * port_ptr_t;port_ptr_t48,1193
	typedef RwReg port_t;port_t49,1231
	inline void setOutput() { pinMode(mPin, OUTPUT); }setOutput51,1255
	inline void setInput() { pinMode(mPin, INPUT); }setInput52,1307
	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }hi54,1358
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }lo55,1432
	inline void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }strobe57,1508
	inline void toggle() __attribute__ ((always_inline)) { *mInPort = mPinMask; }toggle58,1586
	inline void hi(register port_ptr_t port) __attribute__ ((always_inline)) { *port |= mPinMask; }hi60,1666
	inline void lo(register port_ptr_t port) __attribute__ ((always_inline)) { *port &= ~mPinMask; }lo61,1763
	inline void set(register port_t val) __attribute__ ((always_inline)) { *mPort = val; }set62,1861
	inline void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port  = val; }fastset64,1950
	port_t hival() __attribute__ ((always_inline)) { return *mPort | mPinMask;  }hival66,2069
	port_t loval() __attribute__ ((always_inline)) { return *mPort & ~mPinMask; }loval67,2148
	port_ptr_t  port() __attribute__ ((always_inline)) { return mPort; }port68,2227
	port_t mask() __attribute__ ((always_inline)) { return mPinMask; }mask69,2297
	virtual void select() { hi(); }select71,2366
	virtual void release() { lo(); }release72,2399
	virtual bool isSelected() { return (*mPort & mPinMask) == mPinMask; }isSelected73,2433
class OutputPin : public Pin {OutputPin76,2508
	OutputPin(int pin) : Pin(pin) { setOutput(); }OutputPin78,2547
class InputPin : public Pin {InputPin81,2599
	InputPin(int pin) : Pin(pin) { setInput(); }InputPin83,2637
class Pin : public Selectable {Pin89,2857
	volatile RwReg *mPort;mPort90,2889
	volatile RoReg *mInPort;mInPort91,2913
	RwReg mPinMask;mPinMask92,2939
	uint8_t mPin;mPin93,2956
	void _init() {_init95,2972
	Pin(int pin) : mPin(pin) { _init(); }Pin102,3091
	void setPin(int pin) { mPin = pin; _init(); }setPin104,3131
	typedef volatile RwReg * port_ptr_t;port_ptr_t106,3179
	typedef RwReg port_t;port_t107,3217
	inline void setOutput() { /* TODO: Set pin output */ }setOutput109,3241
	inline void setInput() { /* TODO: Set pin input */ }setInput110,3297
	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }hi112,3352
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }lo113,3426
	inline void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }strobe115,3502
	inline void toggle() __attribute__ ((always_inline)) { *mInPort = mPinMask; }toggle116,3580
	inline void hi(register port_ptr_t port) __attribute__ ((always_inline)) { *port |= mPinMask; }hi118,3660
	inline void lo(register port_ptr_t port) __attribute__ ((always_inline)) { *port &= ~mPinMask; }lo119,3757
	inline void set(register port_t val) __attribute__ ((always_inline)) { *mPort = val; }set120,3855
	inline void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port  = val; }fastset122,3944
	port_t hival() __attribute__ ((always_inline)) { return *mPort | mPinMask;  }hival124,4063
	port_t loval() __attribute__ ((always_inline)) { return *mPort & ~mPinMask; }loval125,4142
	port_ptr_t  port() __attribute__ ((always_inline)) { return mPort; }port126,4221
	port_t mask() __attribute__ ((always_inline)) { return mPinMask; }mask127,4291
	virtual void select() { hi(); }select129,4360
	virtual void release() { lo(); }release130,4393
	virtual bool isSelected() { return (*mPort & mPinMask) == mPinMask; }isSelected131,4427
class OutputPin : public Pin {OutputPin134,4502
	OutputPin(int pin) : Pin(pin) { setOutput(); }OutputPin136,4541
class InputPin : public Pin {InputPin139,4593
	InputPin(int pin) : Pin(pin) { setInput(); }InputPin141,4631
template<uint8_t PIN> class FastPin {FastPin161,6161
	static RwReg sPinMask;sPinMask162,6199
	static volatile RwReg *sPort;sPort163,6223
	static volatile RoReg *sInPort;sInPort164,6254
	static void _init() {_init165,6287
	typedef volatile RwReg * port_ptr_t;port_ptr_t173,6506
	typedef RwReg port_t;port_t174,6544
	inline static void setOutput() { _init(); pinMode(PIN, OUTPUT); }setOutput176,6568
	inline static void setInput() { _init(); pinMode(PIN, INPUT); }setInput177,6635
	inline static void hi() __attribute__ ((always_inline)) { *sPort |= sPinMask; }hi179,6701
	inline static void lo() __attribute__ ((always_inline)) { *sPort &= ~sPinMask; }lo180,6782
	inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }strobe182,6865
	inline static void toggle() __attribute__ ((always_inline)) { *sInPort = sPinMask; }toggle184,6951
	inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { *port |= sPinMask; }hi186,7038
	inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { *port &= ~sPinMask; }lo187,7142
	inline static void set(register port_t val) __attribute__ ((always_inline)) { *sPort = val; }set188,7247
	inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port  = val; }fastset190,7343
	static port_t hival() __attribute__ ((always_inline)) { return *sPort | sPinMask;  }hival192,7469
	static port_t loval() __attribute__ ((always_inline)) { return *sPort & ~sPinMask; }loval193,7555
	static port_ptr_t  port() __attribute__ ((always_inline)) { return sPort; }port194,7641
	static port_t mask() __attribute__ ((always_inline)) { return sPinMask; }mask195,7718
template<uint8_t PIN> RwReg FastPin<PIN>::sPinMask;sPinMask198,7797
template<uint8_t PIN> volatile RwReg *FastPin<PIN>::sPort;sPort199,7849
template<uint8_t PIN> volatile RoReg *FastPin<PIN>::sInPort;sInPort200,7908
template<uint8_t PIN> class FastPin {FastPin204,7977
	constexpr static bool validpin() { return false; }validpin205,8015
	static void _init() {_init209,8122
	typedef volatile RwReg * port_ptr_t;port_ptr_t212,8156
	typedef RwReg port_t;port_t213,8194
	inline static void setOutput() { }setOutput215,8218
	inline static void setInput() { }setInput216,8254
	inline static void hi() __attribute__ ((always_inline)) { }hi218,8290
	inline static void lo() __attribute__ ((always_inline)) { }lo219,8351
	inline static void strobe() __attribute__ ((always_inline)) { }strobe221,8413
	inline static void toggle() __attribute__ ((always_inline)) { }toggle223,8479
	inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { }hi225,8545
	inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { }lo226,8630
	inline static void set(register port_t val) __attribute__ ((always_inline)) { }set227,8715
	inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { }fastset229,8797
	static port_t hival() __attribute__ ((always_inline)) { return 0; }hival231,8909
	static port_t loval() __attribute__ ((always_inline)) { return 0;}loval232,8978
	static port_ptr_t  port() __attribute__ ((always_inline)) { return NULL; }port233,9046
	static port_t mask() __attribute__ ((always_inline)) { return 0; }mask234,9122
template<uint8_t PIN> class FastPinBB : public FastPin<PIN> {};FastPinBB239,9202
typedef volatile uint32_t & reg32_t;reg32_t241,9267
typedef volatile uint32_t * ptr_reg32_t;ptr_reg32_t242,9304
template<uint8_t port> struct __FL_PORT_INFO {__FL_PORT_INFO245,9418
	static bool hasPort() { return 0; }hasPort246,9465
	static const char *portName() { return "--"; }portName247,9502
	static const void *portAddr() { return NULL; }portAddr248,9550
#define _FL_DEFINE_PORT(_FL_DEFINE_PORT256,10084
#define _FL_DEFINE_PORT3(_FL_DEFINE_PORT3261,10372

lib/FastLED/noise.cpp,4179
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
#define P(P7,92
FL_PROGMEM static uint8_t const p[] = { 151,160,137,91,90,15,p9,135
#define AVG15(AVG1526,1213
#define AVG15(AVG1530,1369
static int16_t inline __attribute__((always_inline))  avg15_inline_avr_mul( int16_t i, int16_t j)avg15_inline_avr_mul34,1621
#define AVG15(AVG1551,2264
#define EASE8(EASE858,2444
#define EASE16(EASE1659,2473
#define EASE8(EASE861,2508
#define EASE16(EASE1662,2547
#define FADE_16FADE_1666,2615
#define FADE FADE69,2647
#define LERP(LERP70,2670
#define FADE(FADE72,2714
#define LERP(LERP73,2743
static int16_t inline __attribute__((always_inline))  grad16(uint8_t hash, int16_t x, int16_t y, int16_t z) {grad1675,2788
static int16_t inline __attribute__((always_inline)) grad16(uint8_t hash, int16_t x, int16_t y) {grad16106,3718
static int16_t inline __attribute__((always_inline)) grad16(uint8_t hash, int16_t x) {grad16116,3981
static int8_t inline __attribute__((always_inline)) selectBasedOnHashBit(uint8_t hash, uint8_t bitnumber, int8_t a, int8_t b) {selectBasedOnHashBit132,4459
static int8_t  inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x, int8_t y, int8_t z) {grad8151,4953
static int8_t inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x, int8_t y)grad8201,6184
static int8_t inline __attribute__((always_inline)) grad8(uint8_t hash, int8_t x)grad8220,6581
uint16_t logfade12(uint16_t val) {logfade12245,7014
static int16_t inline __attribute__((always_inline)) lerp15by12( int16_t a, int16_t b, fract16 frac)lerp15by12249,7082
static int8_t inline __attribute__((always_inline)) lerp7by8( int8_t a, int8_t b, fract8 frac)lerp7by8266,7528
int16_t inoise16_raw(uint32_t x, uint32_t y, uint32_t z)inoise16_raw286,8092
uint16_t inoise16(uint32_t x, uint32_t y, uint32_t z) {inoise16329,9411
int16_t inoise16_raw(uint32_t x, uint32_t y)inoise16_raw345,10025
uint16_t inoise16(uint32_t x, uint32_t y) {inoise16378,10831
int16_t inoise16_raw(uint32_t x)inoise16_raw393,11421
uint16_t inoise16(uint32_t x) {inoise16418,11949
int8_t inoise8_raw(uint16_t x, uint16_t y, uint16_t z)inoise8_raw422,12047
uint8_t inoise8(uint16_t x, uint16_t y, uint16_t z) {inoise8463,13230
int8_t inoise8_raw(uint16_t x, uint16_t y)inoise8_raw471,13507
uint8_t inoise8(uint16_t x, uint16_t y) {inoise8507,14343
int8_t inoise8_raw(uint16_t x)inoise8_raw516,14624
uint8_t inoise8(uint16_t x) {inoise8541,15144
void fill_raw_noise8(uint8_t *pData, uint8_t num_points, uint8_t octaves, uint16_t x, int scale, uint16_t time) {fill_raw_noise8562,15652
void fill_raw_noise16into8(uint8_t *pData, uint8_t num_points, uint8_t octaves, uint32_t x, int scale, uint32_t time) {fill_raw_noise16into8575,16007
void fill_raw_2dnoise8(uint8_t *pData, int width, int height, uint8_t octaves, q44 freq44, fract8 amplitude, int skip, uint16_t x, int scalex, uint16_t y, int scaley, uint16_t time) {fill_raw_2dnoise8591,16457
void fill_raw_2dnoise8(uint8_t *pData, int width, int height, uint8_t octaves, uint16_t x, int scalex, uint16_t y, int scaley, uint16_t time) {fill_raw_2dnoise8625,17664
void fill_raw_2dnoise16(uint16_t *pData, int width, int height, uint8_t octaves, q88 freq88, fract16 amplitude, int skip, uint32_t x, int scalex, uint32_t y, int scaley, uint32_t time) {fill_raw_2dnoise16629,17909
int32_t nmin=11111110;nmin660,19117
int32_t nmax=0;nmax661,19140
void fill_raw_2dnoise16into8(uint8_t *pData, int width, int height, uint8_t octaves, q44 freq44, fract8 amplitude, int skip, uint32_t x, int scalex, uint32_t y, int scaley, uint32_t time) {fill_raw_2dnoise16into8663,19157
void fill_raw_2dnoise16into8(uint8_t *pData, int width, int height, uint8_t octaves, uint32_t x, int scalex, uint32_t y, int scaley, uint32_t time) {fill_raw_2dnoise16into8696,20387
void fill_noise8(CRGB *leds, int num_leds,fill_noise8700,20644
void fill_noise16(CRGB *leds, int num_leds,fill_noise16718,21125
void fill_2dnoise8(CRGB *leds, int width, int height, bool serpentine,fill_2dnoise8736,21644
void fill_2dnoise16(CRGB *leds, int width, int height, bool serpentine,fill_2dnoise16769,22642

lib/FastLED/bitswap.h,2021
#define __INC_BITSWAP_H__INC_BITSWAP_H2,24
  uint8_t raw;raw17,385
  uint32_t a0:1;a019,411
  uint32_t a1:1;a120,428
  uint32_t a2:1;a221,445
  uint32_t a3:1;a322,462
  uint32_t a4:1;a423,479
  uint32_t a5:1;a524,496
  uint32_t a6:1;a625,513
  uint32_t a7:1;a726,530
} just8bits;just8bits28,552
  uint32_t a0:1;a032,628
  uint32_t a1:1;a133,645
  uint32_t a2:1;a234,662
  uint32_t a3:1;a335,679
  uint32_t a4:1;a436,696
  uint32_t a5:1;a537,713
  uint32_t a6:1;a638,730
  uint32_t a7:1;a739,747
  uint32_t b0:1;b040,764
  uint32_t b1:1;b141,781
  uint32_t b2:1;b242,798
  uint32_t b3:1;b343,815
  uint32_t b4:1;b444,832
  uint32_t b5:1;b545,849
  uint32_t b6:1;b646,866
  uint32_t b7:1;b747,883
  uint32_t c0:1;c048,900
  uint32_t c1:1;c149,917
  uint32_t c2:1;c250,934
  uint32_t c3:1;c351,951
  uint32_t c4:1;c452,968
  uint32_t c5:1;c553,985
  uint32_t c6:1;c654,1002
  uint32_t c7:1;c755,1019
  uint32_t d0:1;d056,1036
  uint32_t d1:1;d157,1053
  uint32_t d2:1;d258,1070
  uint32_t d3:1;d359,1087
  uint32_t d4:1;d460,1104
  uint32_t d5:1;d561,1121
  uint32_t d6:1;d662,1138
  uint32_t d7:1;d763,1155
} sub4;sub464,1172
  uint32_t word[2];word68,1264
  uint8_t bytes[8];bytes69,1284
    sub4 a;a71,1315
    sub4 b;b72,1327
} bitswap_type;bitswap_type74,1344
#define SWAPSA(SWAPSA77,1362
#define SWAPSB(SWAPSB82,1507
#define SWAPS(SWAPS87,1652
__attribute__((always_inline)) inline void swapbits8(bitswap_type in, bitswap_type & out) {swapbits898,1958
__attribute__((always_inline)) inline void slowswap(unsigned char *A, unsigned char *B) {slowswap146,2977
__attribute__((always_inline)) inline void transpose8x1(unsigned char *A, unsigned char *B) {transpose8x1175,3989
__attribute__((always_inline)) inline void transpose8x1_MSB(unsigned char *A, unsigned char *B) {transpose8x1_MSB200,4800
__attribute__((always_inline)) inline void transpose8(unsigned char *A, unsigned char *B) {transpose8233,5735

lib/FastLED/pixelset.h,10783
#define __INC_PIXELSET_H__INC_PIXELSET_H2,25
class CPixelView {CPixelView14,474
  const int8_t  dir;dir16,501
  const int   len;len17,522
  PIXEL_TYPE * const leds;leds18,541
  PIXEL_TYPE * const end_pos;end_pos19,568
  inline CPixelView(const CPixelView & other) : dir(other.dir), len(other.len), leds(other.leds), end_pos(other.end_pos) {}CPixelView24,640
  inline CPixelView(PIXEL_TYPE *_leds, int _len) : dir(_len < 0 ? -1 : 1), len(_len), leds(_leds), end_pos(_leds + _len) {}CPixelView30,1055
  inline CPixelView(PIXEL_TYPE *_leds, int _start, int _end) : dir(((_end-_start)<0) ? -1 : 1), len((_end - _start) + dir), leds(_leds + _start), end_pos(_leds + _start + len) {}CPixelView37,1517
  int size() { return abs(len); }size41,1762
  bool reversed() { return len < 0; }reversed45,1892
  bool operator==(const CPixelView & rhs) const { return leds == rhs.leds && len == rhs.len && dir == rhs.dir; }operator ==48,2045
  bool operator!=(const CPixelView & rhs) const { return leds != rhs.leds || len != rhs.len || dir != rhs.dir; }operator !=51,2279
  inline PIXEL_TYPE & operator[](int x) const { if(dir & 0x80) { return leds[-x]; } else { return leds[x]; } }operator []54,2464
  inline CPixelView operator()(int start, int end) { return CPixelView(leds, start, end); }operator ()60,2887
  inline CPixelView operator-() { return CPixelView(leds + len - dir, len - dir, 0); }operator -67,3266
  inline operator PIXEL_TYPE* () const { return leds; }operator PIXEL_TYPE*70,3410
  inline CPixelView & operator=(const PIXEL_TYPE & color) {operator =74,3589
  void dump() const {dump80,3767
  inline CPixelView & operator=(const CPixelView & rhs) {operator =91,4264
  inline CPixelView & addToRGB(uint8_t inc) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) += inc; } return *this; }addToRGB101,4660
  inline CPixelView & operator+=(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) += (*rhspixel); } return *this; }operator +=103,4862
  inline CPixelView & subFromRGB(uint8_t inc) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) -= inc; } return *this; }subFromRGB106,5186
  inline CPixelView & operator-=(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) -= (*rhspixel); } return *this; }operator -=108,5397
  inline CPixelView & operator++() { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)++; } return *this; }operator ++111,5694
  inline CPixelView & operator++(int DUMMY_ARG) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)++; } return *this; }operator ++113,5877
  inline CPixelView & operator--() { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)--; } return *this; }operator --116,6074
  inline CPixelView & operator--(int DUMMY_ARG) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel)--; } return *this; }operator --118,6257
  inline CPixelView & operator/=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) /= d; } return *this; }operator /=121,6450
  inline CPixelView & operator>>=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) >>= d; } return *this; }operator >>=123,6667
  inline CPixelView & operator*=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) *= d; } return *this; }operator *=125,6874
  inline CPixelView & nscale8_video(uint8_t scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8_video(scaledown); } return *this;}nscale8_video128,7065
  inline CPixelView & operator%=(uint8_t scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8_video(scaledown); } return *this; }operator %=130,7290
  inline CPixelView & fadeLightBy(uint8_t fadefactor) { return nscale8_video(255 - fadefactor); }fadeLightBy132,7512
  inline CPixelView & nscale8(uint8_t scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8(scaledown); } return *this; }nscale8135,7652
  inline CPixelView & nscale8(PIXEL_TYPE & scaledown) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel).nscale8(scaledown); } return *this; }nscale8137,7861
  inline CPixelView & nscale8(CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel).nscale8((*rhspixel)); } return *this; }nscale8139,8098
  inline CPixelView & fadeToBlackBy(uint8_t fade) { return nscale8(255 - fade); }fadeToBlackBy142,8397
  inline CPixelView & operator|=(const PIXEL_TYPE & rhs) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) |= rhs; } return *this; }operator |=145,8634
  inline CPixelView & operator|=(const CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) |= (*rhspixel); } return *this; }operator |=147,8902
  inline CPixelView & operator|=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) |= d; } return *this; }operator |=149,9224
  inline CPixelView & operator&=(const PIXEL_TYPE & rhs) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) &= rhs; } return *this; }operator &=152,9532
  inline CPixelView & operator&=(const CPixelView & rhs) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { (*pixel) &= (*rhspixel); } return *this; }operator &=154,9800
  inline CPixelView & operator&=(uint8_t d) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { (*pixel) &= d; } return *this; }operator &=156,10147
  inline operator bool() { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { if((*pixel)) return true; } return false; }operator bool160,10367
  inline CPixelView & fill_solid(const PIXEL_TYPE & color) { *this = color; return *this; }fill_solid163,10535
  inline CPixelView & fill_solid(const CHSV & color) { if(dir>0) { *this = color; return *this; } }fill_solid164,10627
  inline CPixelView & fill_rainbow(uint8_t initialhue, uint8_t deltahue=5) {fill_rainbow166,10728
  inline CPixelView & fill_gradient(const CHSV & startcolor, const CHSV & endcolor, TGradientDirectionCode directionCode  = SHORTEST_HUES) {fill_gradient175,10977
  inline CPixelView & fill_gradient(const CHSV & c1, const CHSV & c2, const CHSV &  c3, TGradientDirectionCode directionCode = SHORTEST_HUES) {fill_gradient184,11332
  inline CPixelView & fill_gradient(const CHSV & c1, const CHSV & c2, const CHSV & c3, const CHSV & c4, TGradientDirectionCode directionCode = SHORTEST_HUES) {fill_gradient193,11670
  inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & startcolor, const PIXEL_TYPE & endcolor, TGradientDirectionCode directionCode  = SHORTEST_HUES) {fill_gradient_RGB202,12032
  inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & c1, const PIXEL_TYPE & c2, const PIXEL_TYPE &  c3) {fill_gradient_RGB211,12381
  inline CPixelView & fill_gradient_RGB(const PIXEL_TYPE & c1, const PIXEL_TYPE & c2, const PIXEL_TYPE & c3, const PIXEL_TYPE & c4) {fill_gradient_RGB220,12665
  inline CPixelView & nblend(const PIXEL_TYPE & overlay, fract8 amountOfOverlay) { for(iterator pixel = begin(), _end = end(); pixel != _end; ++pixel) { ::nblend((*pixel), overlay, amountOfOverlay); } return *this; }nblend229,12979
  inline CPixelView & nblend(const CPixelView & rhs, fract8 amountOfOverlay) { for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) { ::nblend((*pixel), (*rhspixel), amountOfOverlay); } return *this; }nblend230,13196
  inline CPixelView & blur1d(fract8 blur_amount) {blur1d233,13593
  inline CPixelView & napplyGamma_video(float gamma) {napplyGamma_video242,13796
  inline CPixelView & napplyGamma_video(float gammaR, float gammaG, float gammaB) {napplyGamma_video251,14013
  class pixelset_iterator_base {pixelset_iterator_base262,14369
    T * leds;leds263,14402
    const int8_t dir;dir264,14416
    __attribute__((always_inline)) inline pixelset_iterator_base(const pixelset_iterator_base & rhs) : leds(rhs.leds), dir(rhs.dir) {}pixelset_iterator_base266,14448
    __attribute__((always_inline)) inline pixelset_iterator_base(T * _leds, const char _dir) : leds(_leds), dir(_dir) {}pixelset_iterator_base267,14583
    __attribute__((always_inline)) inline pixelset_iterator_base& operator++() { leds += dir; return *this; }operator ++269,14705
    __attribute__((always_inline)) inline pixelset_iterator_base operator++(int) { pixelset_iterator_base tmp(*this); leds += dir; return tmp; }operator ++270,14815
    __attribute__((always_inline)) inline bool operator==(pixelset_iterator_base & other) const { return leds == other.leds; } // && set==other.set; }operator ==272,14961
    __attribute__((always_inline)) inline bool operator!=(pixelset_iterator_base & other) const { return leds != other.leds; } // || set != other.set; }operator !=273,15112
    __attribute__((always_inline)) inline PIXEL_TYPE& operator*() const { return *leds; }operator *275,15266
  typedef pixelset_iterator_base<PIXEL_TYPE> iterator;iterator278,15362
  typedef pixelset_iterator_base<const PIXEL_TYPE> const_iterator;const_iterator279,15417
  iterator begin() { return iterator(leds, dir); }begin281,15485
  iterator end() { return iterator(end_pos, dir); }end282,15536
  iterator begin() const { return iterator(leds, dir); }begin284,15589
  iterator end() const { return iterator(end_pos, dir); }end285,15646
  const_iterator cbegin() const { return const_iterator(leds, dir); }cbegin287,15705
  const_iterator cend() const { return const_iterator(end_pos, dir); }cend288,15775
typedef CPixelView<CRGB> CRGBSet;CRGBSet291,15850
inline CRGB *operator+(const CRGBSet & pixels, int offset) { return (CRGB*)pixels + offset; }operator +294,15916
class CRGBArray : public CPixelView<CRGB> {CRGBArray298,16031
  CRGB rawleds[SIZE];rawleds299,16075
  CRGBArray() : CPixelView<CRGB>(rawleds, SIZE) {}CRGBArray301,16105

lib/FastLED/fastspi_ref.h,1445
#define __INC_FASTSPI_ARM_SAM_H__INC_FASTSPI_ARM_SAM_H2,32
class REFHardwareSPIOutput {REFHardwareSPIOutput12,504
	Selectable *m_pSelect;m_pSelect13,533
	SAMHardwareSPIOutput() { m_pSelect = NULL; }SAMHardwareSPIOutput15,565
	SAMHArdwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }SAMHArdwareSPIOutput16,611
	void setSelect(Selectable *pSelect) { /* TODO */ }setSelect19,727
	void init() { /* TODO */ }init22,813
	void inline select() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->select(); } }select25,866
	void inline release() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->release(); } }release28,997
	static void waitFully() { /* TODO */ }waitFully31,1155
	static void writeByte(uint8_t b) { /* TODO */ }writeByte34,1267
	static void writeWord(uint16_t w) { /* TODO */ }writeWord37,1388
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw40,1519
	void writeBytesValue(uint8_t value, int len) {writeBytesValue45,1708
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes50,1905
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes63,2292
	template <uint8_t BIT> inline static void writeBit(uint8_t b) { /* TODO */ }writeBit66,2478
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels70,2771

lib/FastLED/cpp_compat.h,129
#define __INC_CPP_COMPAT_H__INC_CPP_COMPAT_H2,27
#define static_assert(static_assert8,105
#define constexpr constexpr9,148

lib/FastLED/FastLED.h,10211
#define __INC_FASTSPI_LED2_H__INC_FASTSPI_LED2_H2,29
#define FASTLED_HAS_PRAGMA_MESSAGEFASTLED_HAS_PRAGMA_MESSAGE8,212
#define FASTLED_VERSION FASTLED_VERSION11,255
#define __PROG_TYPES_COMPAT____PROG_TYPES_COMPAT__15,319
enum ESPIChipsets {ESPIChipsets65,1123
    LPD6803,LPD680366,1143
	LPD8806,LPD880667,1156
	WS2801,WS280168,1166
	WS2803,WS280369,1175
	SM16716,SM1671670,1184
	P9813,P981371,1194
	APA102,APA10272,1202
	SK9822,SK982273,1211
	DOTSTARDOTSTAR74,1220
enum ESM { SMART_MATRIX };ESM77,1233
enum ESM { SMART_MATRIX };SMART_MATRIX77,1233
enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};OWS281178,1260
enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};OCTOWS281178,1260
enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};OCTOWS2811_40078,1260
enum OWS2811 { OCTOWS2811,OCTOWS2811_400, OCTOWS2813};OCTOWS281378,1260
enum SWS2812 { WS2812SERIAL };SWS281279,1315
enum SWS2812 { WS2812SERIAL };WS2812SERIAL79,1315
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};PIXIE82,1364
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};NEOPIXEL86,1508
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SM16703 : public SM16703Controller<DATA_PIN, RGB_ORDER> {};SM1670387,1601
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1829 : public TM1829Controller800Khz<DATA_PIN, RGB_ORDER> {};TM182988,1712
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1812 : public TM1809Controller800Khz<DATA_PIN, RGB_ORDER> {};TM181289,1827
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1809 : public TM1809Controller800Khz<DATA_PIN, RGB_ORDER> {};TM180990,1942
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1804 : public TM1809Controller800Khz<DATA_PIN, RGB_ORDER> {};TM180491,2057
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class TM1803 : public TM1803Controller400Khz<DATA_PIN, RGB_ORDER> {};TM180392,2172
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903 : public UCS1903Controller400Khz<DATA_PIN, RGB_ORDER> {};UCS190393,2287
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903B : public UCS1903BController800Khz<DATA_PIN, RGB_ORDER> {};UCS1903B94,2404
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1904 : public UCS1904Controller800Khz<DATA_PIN, RGB_ORDER> {};UCS190495,2523
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS2903 : public UCS2903Controller<DATA_PIN, RGB_ORDER> {};UCS290396,2640
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};WS281297,2751
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2852 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};WS285298,2866
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812B : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};WS2812B99,2981
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GS1903 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};GS1903100,3097
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6812 : public SK6812Controller<DATA_PIN, RGB_ORDER> {};SK6812101,3212
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class SK6822 : public SK6822Controller<DATA_PIN, RGB_ORDER> {};SK6822102,3321
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class APA106 : public SK6822Controller<DATA_PIN, RGB_ORDER> {};APA106103,3430
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PL9823 : public PL9823Controller<DATA_PIN, RGB_ORDER> {};PL9823104,3539
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2811 : public WS2811Controller800Khz<DATA_PIN, RGB_ORDER> {};WS2811105,3648
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2813 : public WS2813Controller<DATA_PIN, RGB_ORDER> {};WS2813106,3763
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class APA104 : public WS2811Controller800Khz<DATA_PIN, RGB_ORDER> {};APA104107,3872
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2811_400 : public WS2811Controller400Khz<DATA_PIN, RGB_ORDER> {};WS2811_400108,3987
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GE8822 : public GE8822Controller800Khz<DATA_PIN, RGB_ORDER> {};GE8822109,4106
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GW6205 : public GW6205Controller800Khz<DATA_PIN, RGB_ORDER> {};GW6205110,4221
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class GW6205_400 : public GW6205Controller400Khz<DATA_PIN, RGB_ORDER> {};GW6205_400111,4336
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class LPD1886 : public LPD1886Controller1250Khz<DATA_PIN, RGB_ORDER> {};LPD1886112,4455
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class LPD1886_8BIT : public LPD1886Controller1250Khz_8bit<DATA_PIN, RGB_ORDER> {};LPD1886_8BIT113,4573
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class DMXSIMPLE : public DMXSimpleController<DATA_PIN, RGB_ORDER> {};DMXSIMPLE115,4720
template<EOrder RGB_ORDER> class DMXSERIAL : public DMXSerialController<RGB_ORDER> {};DMXSERIAL118,4861
enum EBlockChipsets {EBlockChipsets122,4963
	WS2811_PORTA,WS2811_PORTA124,5008
	WS2813_PORTA,WS2813_PORTA125,5023
	WS2811_400_PORTA,WS2811_400_PORTA126,5038
	TM1803_PORTA,TM1803_PORTA127,5057
	UCS1903_PORTA,UCS1903_PORTA128,5072
	WS2811_PORTB,WS2811_PORTB131,5118
	WS2813_PORTB,WS2813_PORTB132,5133
	WS2811_400_PORTB,WS2811_400_PORTB133,5148
	TM1803_PORTB,TM1803_PORTB134,5167
	UCS1903_PORTB,UCS1903_PORTB135,5182
	WS2811_PORTC,WS2811_PORTC138,5228
	WS2813_PORTC,WS2813_PORTC139,5243
	WS2811_400_PORTC,WS2811_400_PORTC140,5258
	TM1803_PORTC,TM1803_PORTC141,5277
	UCS1903_PORTC,UCS1903_PORTC142,5292
	WS2811_PORTD,WS2811_PORTD145,5338
	WS2813_PORTD,WS2813_PORTD146,5353
	WS2811_400_PORTD,WS2811_400_PORTD147,5368
	TM1803_PORTD,TM1803_PORTD148,5387
	UCS1903_PORTD,UCS1903_PORTD149,5402
	WS2811_PORTDC,WS2811_PORTDC152,5443
	WS2813_PORTDC,WS2813_PORTDC153,5459
	WS2811_400_PORTDC,WS2811_400_PORTDC154,5475
	TM1803_PORTDC,TM1803_PORTDC155,5495
	UCS1903_PORTDC,UCS1903_PORTDC156,5511
#define NUM_CONTROLLERS NUM_CONTROLLERS161,5564
#define NUM_CONTROLLERS NUM_CONTROLLERS163,5596
typedef uint8_t (*power_func)(uint8_t scale, uint32_t data);power_func166,5630
class CFastLED {CFastLED172,5974
	uint8_t  m_Scale; 				///< The current global brightness scale settingm_Scale174,6015
	uint16_t m_nFPS;					///< Tracking for current FPS valuem_nFPS175,6087
	uint32_t m_nMinMicros;		///< minimum µs between frames, used for capping frame rates.m_nMinMicros176,6145
	uint32_t m_nPowerData;		///< max power use parameterm_nPowerData177,6233
	power_func m_pPowerFunc;	///< function for overriding brightness when using FastLED.show();m_pPowerFunc178,6287
	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER, uint8_t SPI_DATA_RATE > CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds217,9058
	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN > static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds231,10506
	template<ESPIChipsets CHIPSET,  uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER > static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds245,11712
	template<ESPIChipsets CHIPSET> static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds260,13040
	template<ESPIChipsets CHIPSET, EOrder RGB_ORDER> static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds264,13259
	template<ESPIChipsets CHIPSET, EOrder RGB_ORDER, uint8_t SPI_DATA_RATE> static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds268,13502
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds295,15232
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds301,15518
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds307,15780
  static CLEDController &addLeds(struct CRGB *data, int nLeds) {addLeds314,16160
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)addLeds322,16446
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds351,18072
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds357,18312
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)addLeds364,18561
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)addLeds376,19212
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)addLeds385,19468
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0)addLeds394,19751
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds425,21391
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {addLeds466,26301
	void setBrightness(uint8_t scale) { m_Scale = scale; }setBrightness474,26614
	uint8_t getBrightness() { return m_Scale; }getBrightness478,26768
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }setMaxPowerInVoltsAndMilliamps483,27028
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }setMaxPowerInMilliWatts487,27282
	void show() { show(m_Scale); }show494,27656
	void showColor(const struct CRGB & color) { showColor(color, m_Scale); }showColor510,28269
	uint16_t getFPS() { return m_nFPS; }getFPS550,30571
	int size() { return (*this)[0].size(); }size562,31005
	CRGB *leds() { return (*this)[0].leds(); }leds566,31171
#define FastSPI_LED FastSPI_LED569,31219
#define FastSPI_LED2 FastSPI_LED2570,31247
#define LEDS LEDS572,31289
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT580,31509

lib/FastLED/FastLED.cpp,1866
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
volatile uint32_t fuckit;fuckit6,73
void *pSmartMatrix = NULL;pSmartMatrix11,132
CFastLED FastLED;FastLED13,160
CLEDController *CLEDController::m_pHead = NULL;m_pHead15,179
CLEDController *CLEDController::m_pTail = NULL;m_pTail16,227
static uint32_t lastshow = 0;lastshow17,275
uint32_t _frame_cnt=0;_frame_cnt19,306
uint32_t _retry_cnt=0;_retry_cnt20,329
CFastLED::CFastLED() {CFastLED24,476
CLEDController &CFastLED::addLeds(CLEDController *pLed,addLeds33,648
void CFastLED::show(uint8_t scale) {show45,1042
int CFastLED::count() {count66,1557
CLEDController & CFastLED::operator[](int x) {operator []76,1716
void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {showColor88,1947
void CFastLED::clear(bool writeData) {clear108,2464
void CFastLED::clearData() {clearData115,2572
void CFastLED::delay(unsigned long ms) {delay123,2717
void CFastLED::setTemperature(const struct CRGB & temp) {setTemperature137,3001
void CFastLED::setCorrection(const struct CRGB & correction) {setCorrection145,3181
void CFastLED::setDither(uint8_t ditherMode)  {setDither153,3371
void CFastLED::countFPS(int nFrames) {countFPS206,4918
void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {setMaxRefreshRate219,5171
extern "C" int atexit(void (* /*func*/ )()) { return 0; }atexit233,5650
extern "C" void yield(void) { }yield236,5736
namespace __cxxabiv1__cxxabiv1240,5797
	extern "C" void __cxa_pure_virtual (void) {}__cxa_pure_virtual243,5862
	__extension__ typedef int __guard __attribute__((mode(__DI__)));__guard249,5981
	extern "C" int __cxa_guard_acquire (__guard *g)__cxa_guard_acquire255,6262
	extern "C" void __cxa_guard_release (__guard *g)__cxa_guard_release260,6342
	extern "C" void __cxa_guard_abort (__guard *)__cxa_guard_abort265,6417

lib/FastLED/fastspi_nop.h,1193
#define __INC_FASTSPI_NOP_H__INC_FASTSPI_NOP_H2,28
class NOPSPIOutput {NOPSPIOutput14,637
	Selectable *m_pSelect;m_pSelect15,658
	NOPSPIOutput() { m_pSelect = NULL; }NOPSPIOutput18,691
	NOPSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }NOPSPIOutput19,729
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect;  }setSelect22,838
	void init() { /* TODO */ }init25,936
	void select() { /* TODO */ }select28,990
	void release() { /* TODO */ }release31,1048
	template <uint8_t BIT> inline static void writeBit(uint8_t b) { /* TODO */ }writeBit37,1250
	void writeByte(uint8_t b) { /* TODO */ }writeByte40,1401
	void writeWord(uint16_t w) { /* TODO */ }writeWord42,1515
	static void writeBytesValueRaw(uint8_t value, int len) { /* TODO */ }writeBytesValueRaw45,1679
	void writeBytesValue(uint8_t value, int len) { /* TODO */ }writeBytesValue48,1842
	void writeBytes(uint8_t *data, int len) { /* TODO */ }writeBytes51,1997
	template <uint8_t BIT> inline static void writeBit(uint8_t b) { /* TODO */ }writeBit54,2153
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) { /* TODO */ }writePixels57,2296

lib/FastLED/hsv2rgb.h,177
#define __INC_HSV2RGB_H__INC_HSV2RGB_H2,24
#define HUE_MAX_RAINBOW HUE_MAX_RAINBOW20,629
#define HUE_MAX_SPECTRUM HUE_MAX_SPECTRUM33,1192
#define HUE_MAX HUE_MAX49,1828

lib/FastLED/colorpalettes.h,178
#define __INC_COLORPALETTES_H__INC_COLORPALETTES_H2,30
#define RainbowStripesColors_p RainbowStripesColors_p33,1016
DECLARE_GRADIENT_PALETTE( Rainbow_gp);Rainbow_gp52,1849

lib/FastLED/colorutils.cpp,5574
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
#define __PROG_TYPES_COMPAT____PROG_TYPES_COMPAT__2,25
void fill_solid( struct CRGB * leds, int numToFill,fill_solid13,144
void fill_solid( struct CHSV * targetArray, int numToFill,fill_solid21,317
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,fill_rainbow36,684
void fill_rainbow( struct CHSV * targetArray, int numToFill,fill_rainbow50,1006
void fill_gradient_RGB( CRGB* leds,fill_gradient_RGB65,1333
void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2)fill_gradient_RGB144,3482
void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2, const CRGB& c3)fill_gradient_RGB151,3654
void fill_gradient_RGB( CRGB* leds, uint16_t numLeds, const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)fill_gradient_RGB159,3929
void nscale8_video( CRGB* leds, uint16_t num_leds, uint8_t scale)nscale8_video172,4353
void fade_video(CRGB* leds, uint16_t num_leds, uint8_t fadeBy)fade_video179,4515
void fadeLightBy(CRGB* leds, uint16_t num_leds, uint8_t fadeBy)fadeLightBy184,4633
void fadeToBlackBy( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)fadeToBlackBy190,4753
void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)fade_raw195,4869
void nscale8_raw( CRGB* leds, uint16_t num_leds, uint8_t scale)nscale8_raw200,4980
void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)nscale8205,5086
void fadeUsingColor( CRGB* leds, uint16_t numLeds, const CRGB& colormask)fadeUsingColor212,5236
CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )nblend227,5641
void nblend( CRGB* existing, CRGB* overlay, uint16_t count, fract8 amountOfOverlay)nblend262,6843
CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )blend271,7071
CRGB* blend( const CRGB* src1, const CRGB* src2, CRGB* dest, uint16_t count, fract8 amountOfsrc2 )blend278,7205
CHSV& nblend( CHSV& existing, const CHSV& overlay, fract8 amountOfOverlay, TGradientDirectionCode directionCode)nblend288,7434
void nblend( CHSV* existing, CHSV* overlay, uint16_t count, fract8 amountOfOverlay, TGradientDirectionCode directionCode )nblend338,8763
CHSV blend( const CHSV& p1, const CHSV& p2, fract8 amountOfP2, TGradientDirectionCode directionCode )blend348,9081
CHSV* blend( const CHSV* src1, const CHSV* src2, CHSV* dest, uint16_t count, fract8 amountOfsrc2, TGradientDirectionCode directionCode )blend355,9268
void blur1d( CRGB* leds, uint16_t numLeds, fract8 blur_amount)blur1d383,10346
void blur2d( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)blur2d400,10793
void blurRows( CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)blurRows407,11040
void blurColumns(CRGB* leds, uint8_t width, uint8_t height, fract8 blur_amount)blurColumns416,11342
CRGB HeatColor( uint8_t temperature)HeatColor449,12450
inline uint8_t lsrX4( uint8_t dividend)lsrX4492,13873
CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)ColorFromPalette506,14070
CRGB ColorFromPalette( const TProgmemRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)ColorFromPalette591,16673
CRGB ColorFromPalette( const CRGBPalette32& pal, uint8_t index, uint8_t brightness, TBlendType blendType)ColorFromPalette670,18899
CRGB ColorFromPalette( const TProgmemRGBPalette32& pal, uint8_t index, uint8_t brightness, TBlendType blendType)ColorFromPalette761,21537
CRGB ColorFromPalette( const CRGBPalette256& pal, uint8_t index, uint8_t brightness, TBlendType)ColorFromPalette846,23881
CHSV ColorFromPalette( const struct CHSVPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)ColorFromPalette866,24468
CHSV ColorFromPalette( const struct CHSVPalette32& pal, uint8_t index, uint8_t brightness, TBlendType blendType)ColorFromPalette950,26741
CHSV ColorFromPalette( const struct CHSVPalette256& pal, uint8_t index, uint8_t brightness, TBlendType)ColorFromPalette1039,29254
void UpscalePalette(const struct CRGBPalette16& srcpal16, struct CRGBPalette256& destpal256)UpscalePalette1051,29514
void UpscalePalette(const struct CHSVPalette16& srcpal16, struct CHSVPalette256& destpal256)UpscalePalette1058,29721
void UpscalePalette(const struct CRGBPalette16& srcpal16, struct CRGBPalette32& destpal32)UpscalePalette1066,29929
void UpscalePalette(const struct CHSVPalette16& srcpal16, struct CHSVPalette32& destpal32)UpscalePalette1075,30173
void UpscalePalette(const struct CRGBPalette32& srcpal32, struct CRGBPalette256& destpal256)UpscalePalette1084,30417
void UpscalePalette(const struct CHSVPalette32& srcpal32, struct CHSVPalette256& destpal256)UpscalePalette1091,30624
void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)nblendPaletteTowardPalette1110,31129
uint8_t applyGamma_video( uint8_t brightness, float gamma)applyGamma_video1140,32058
CRGB applyGamma_video( const CRGB& orig, float gamma)applyGamma_video1153,32417
CRGB applyGamma_video( const CRGB& orig, float gammaR, float gammaG, float gammaB)applyGamma_video1162,32644
CRGB& napplyGamma_video( CRGB& rgb, float gamma)napplyGamma_video1171,32903
CRGB& napplyGamma_video( CRGB& rgb, float gammaR, float gammaG, float gammaB)napplyGamma_video1177,33014
void napplyGamma_video( CRGB* rgbarray, uint16_t count, float gamma)napplyGamma_video1183,33171
void napplyGamma_video( CRGB* rgbarray, uint16_t count, float gammaR, float gammaG, float gammaB)napplyGamma_video1190,33355

lib/FastLED/pixeltypes.h,13715
#define __INC_PIXELS_H__INC_PIXELS_H2,23
struct CHSV {CHSV23,467
		        uint8_t hue;hue27,518
		        uint8_t h; };h28,541
		        uint8_t saturation;saturation30,579
		        uint8_t sat;sat31,609
		        uint8_t s; };s32,632
		        uint8_t value;value34,670
		        uint8_t val;val35,695
		        uint8_t v; };v36,718
		uint8_t raw[3];raw38,747
    inline CHSV() __attribute__((always_inline))CHSV42,809
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))CHSV47,911
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))CHSV53,1070
    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))operator =60,1204
    inline CHSV& setHSV(uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))setHSV68,1372
    HUE_RED = 0,HUE_RED79,1607
    HUE_ORANGE = 32,HUE_ORANGE80,1624
    HUE_YELLOW = 64,HUE_YELLOW81,1645
    HUE_GREEN = 96,HUE_GREEN82,1666
    HUE_AQUA = 128,HUE_AQUA83,1686
    HUE_BLUE = 160,HUE_BLUE84,1706
    HUE_PURPLE = 192,HUE_PURPLE85,1726
    HUE_PINK = 224HUE_PINK86,1748
} HSVHue;HSVHue87,1767
struct CRGB {CRGB90,1832
                uint8_t r;r94,1886
                uint8_t red;red95,1913
                uint8_t g;g98,1977
                uint8_t green;green99,2004
                uint8_t b;b102,2070
                uint8_t blue;blue103,2097
		uint8_t raw[3];raw106,2153
	inline uint8_t& operator[] (uint8_t x) __attribute__((always_inline))operator []110,2234
    inline const uint8_t& operator[] (uint8_t x) const __attribute__((always_inline))operator []116,2401
	inline CRGB() __attribute__((always_inline))CRGB122,2563
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))CRGB127,2662
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))CRGB133,2869
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))CRGB139,3099
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))CRGB146,3337
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))CRGB153,3549
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))CRGB161,3722
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))operator =167,3890
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))operator =176,4128
	inline CRGB& setRGB (uint8_t nr, uint8_t ng, uint8_t nb) __attribute__((always_inline))setRGB185,4401
	inline CRGB& setHSV (uint8_t hue, uint8_t sat, uint8_t val) __attribute__((always_inline))setHSV194,4615
	inline CRGB& setHue (uint8_t hue) __attribute__((always_inline))setHue201,4881
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))operator =208,5076
	inline CRGB& setColorCode (uint32_t colorcode) __attribute__((always_inline))setColorCode215,5295
    inline CRGB& operator+= (const CRGB& rhs )operator +=225,5592
    inline CRGB& addToRGB (uint8_t d )addToRGB237,6014
    inline CRGB& operator-= (const CRGB& rhs )operator -=246,6241
    inline CRGB& subtractFromRGB(uint8_t d )subtractFromRGB258,6669
    inline CRGB& operator-- ()  __attribute__((always_inline))operator --267,6900
    inline CRGB operator-- (int )  __attribute__((always_inline))operator --274,7099
    inline CRGB& operator++ ()  __attribute__((always_inline))operator ++282,7316
    inline CRGB operator++ (int )  __attribute__((always_inline))operator ++289,7503
    inline CRGB& operator/= (uint8_t d )operator /=297,7702
    inline CRGB& operator>>= (uint8_t d)operator >>=306,7881
    inline CRGB& operator*= (uint8_t d )operator *=316,8093
    inline CRGB& nscale8_video (uint8_t scaledown )nscale8_video329,8589
    inline CRGB& operator%= (uint8_t scaledown )operator %=337,8820
    inline CRGB& fadeLightBy (uint8_t fadefactor )fadeLightBy344,9023
    inline CRGB& nscale8 (uint8_t scaledown )nscale8353,9353
    inline CRGB& nscale8 (const CRGB & scaledown )nscale8362,9665
    inline CRGB scale8 (const CRGB & scaledown ) constscale8371,9939
    inline CRGB& fadeToBlackBy (uint8_t fadefactor )fadeToBlackBy381,10240
    inline CRGB& operator|= (const CRGB& rhs )operator |=388,10452
    inline CRGB& operator|= (uint8_t d )operator |=397,10713
    inline CRGB& operator&= (const CRGB& rhs )operator &=406,10946
    inline CRGB& operator&= (uint8_t d )operator &=415,11209
    inline operator bool() const __attribute__((always_inline))operator bool424,11412
    inline CRGB operator- ()operator -430,11545
    operator rgb24() const {operator rgb24440,11769
    inline uint8_t getLuma ( )  const {getLuma451,12031
    inline uint8_t getAverageLight( )  const {getAverageLight463,12412
    inline void maximizeBrightness( uint8_t limit = 255 )  {maximizeBrightness477,12848
    inline CRGB lerp8( const CRGB& other, fract8 frac) constlerp8492,13413
    inline CRGB lerp16( const CRGB& other, fract16 frac) constlerp16504,13761
    inline uint8_t getParity()getParity517,14132
    inline void setParity( uint8_t parity)setParity546,15294
        AliceBlue=0xF0F8FF,AliceBlue595,16516
        Amethyst=0x9966CC,Amethyst596,16544
        AntiqueWhite=0xFAEBD7,AntiqueWhite597,16571
        Aqua=0x00FFFF,Aqua598,16602
        Aquamarine=0x7FFFD4,Aquamarine599,16625
        Azure=0xF0FFFF,Azure600,16654
        Beige=0xF5F5DC,Beige601,16678
        Bisque=0xFFE4C4,Bisque602,16702
        Black=0x000000,Black603,16727
        BlanchedAlmond=0xFFEBCD,BlanchedAlmond604,16751
        Blue=0x0000FF,Blue605,16784
        BlueViolet=0x8A2BE2,BlueViolet606,16807
        Brown=0xA52A2A,Brown607,16836
        BurlyWood=0xDEB887,BurlyWood608,16860
        CadetBlue=0x5F9EA0,CadetBlue609,16888
        Chartreuse=0x7FFF00,Chartreuse610,16916
        Chocolate=0xD2691E,Chocolate611,16945
        Coral=0xFF7F50,Coral612,16973
        CornflowerBlue=0x6495ED,CornflowerBlue613,16997
        Cornsilk=0xFFF8DC,Cornsilk614,17030
        Crimson=0xDC143C,Crimson615,17057
        Cyan=0x00FFFF,Cyan616,17083
        DarkBlue=0x00008B,DarkBlue617,17106
        DarkCyan=0x008B8B,DarkCyan618,17133
        DarkGoldenrod=0xB8860B,DarkGoldenrod619,17160
        DarkGray=0xA9A9A9,DarkGray620,17192
        DarkGrey=0xA9A9A9,DarkGrey621,17219
        DarkGreen=0x006400,DarkGreen622,17246
        DarkKhaki=0xBDB76B,DarkKhaki623,17274
        DarkMagenta=0x8B008B,DarkMagenta624,17302
        DarkOliveGreen=0x556B2F,DarkOliveGreen625,17332
        DarkOrange=0xFF8C00,DarkOrange626,17365
        DarkOrchid=0x9932CC,DarkOrchid627,17394
        DarkRed=0x8B0000,DarkRed628,17423
        DarkSalmon=0xE9967A,DarkSalmon629,17449
        DarkSeaGreen=0x8FBC8F,DarkSeaGreen630,17478
        DarkSlateBlue=0x483D8B,DarkSlateBlue631,17509
        DarkSlateGray=0x2F4F4F,DarkSlateGray632,17541
        DarkSlateGrey=0x2F4F4F,DarkSlateGrey633,17573
        DarkTurquoise=0x00CED1,DarkTurquoise634,17605
        DarkViolet=0x9400D3,DarkViolet635,17637
        DeepPink=0xFF1493,DeepPink636,17666
        DeepSkyBlue=0x00BFFF,DeepSkyBlue637,17693
        DimGray=0x696969,DimGray638,17723
        DimGrey=0x696969,DimGrey639,17749
        DodgerBlue=0x1E90FF,DodgerBlue640,17775
        FireBrick=0xB22222,FireBrick641,17804
        FloralWhite=0xFFFAF0,FloralWhite642,17832
        ForestGreen=0x228B22,ForestGreen643,17862
        Fuchsia=0xFF00FF,Fuchsia644,17892
        Gainsboro=0xDCDCDC,Gainsboro645,17918
        GhostWhite=0xF8F8FF,GhostWhite646,17946
        Gold=0xFFD700,Gold647,17975
        Goldenrod=0xDAA520,Goldenrod648,17998
        Gray=0x808080,Gray649,18026
        Grey=0x808080,Grey650,18049
        Green=0x008000,Green651,18072
        GreenYellow=0xADFF2F,GreenYellow652,18096
        Honeydew=0xF0FFF0,Honeydew653,18126
        HotPink=0xFF69B4,HotPink654,18153
        IndianRed=0xCD5C5C,IndianRed655,18179
        Indigo=0x4B0082,Indigo656,18207
        Ivory=0xFFFFF0,Ivory657,18232
        Khaki=0xF0E68C,Khaki658,18256
        Lavender=0xE6E6FA,Lavender659,18280
        LavenderBlush=0xFFF0F5,LavenderBlush660,18307
        LawnGreen=0x7CFC00,LawnGreen661,18339
        LemonChiffon=0xFFFACD,LemonChiffon662,18367
        LightBlue=0xADD8E6,LightBlue663,18398
        LightCoral=0xF08080,LightCoral664,18426
        LightCyan=0xE0FFFF,LightCyan665,18455
        LightGoldenrodYellow=0xFAFAD2,LightGoldenrodYellow666,18483
        LightGreen=0x90EE90,LightGreen667,18522
        LightGrey=0xD3D3D3,LightGrey668,18551
        LightPink=0xFFB6C1,LightPink669,18579
        LightSalmon=0xFFA07A,LightSalmon670,18607
        LightSeaGreen=0x20B2AA,LightSeaGreen671,18637
        LightSkyBlue=0x87CEFA,LightSkyBlue672,18669
        LightSlateGray=0x778899,LightSlateGray673,18700
        LightSlateGrey=0x778899,LightSlateGrey674,18733
        LightSteelBlue=0xB0C4DE,LightSteelBlue675,18766
        LightYellow=0xFFFFE0,LightYellow676,18799
        Lime=0x00FF00,Lime677,18829
        LimeGreen=0x32CD32,LimeGreen678,18852
        Linen=0xFAF0E6,Linen679,18880
        Magenta=0xFF00FF,Magenta680,18904
        Maroon=0x800000,Maroon681,18930
        MediumAquamarine=0x66CDAA,MediumAquamarine682,18955
        MediumBlue=0x0000CD,MediumBlue683,18990
        MediumOrchid=0xBA55D3,MediumOrchid684,19019
        MediumPurple=0x9370DB,MediumPurple685,19050
        MediumSeaGreen=0x3CB371,MediumSeaGreen686,19081
        MediumSlateBlue=0x7B68EE,MediumSlateBlue687,19114
        MediumSpringGreen=0x00FA9A,MediumSpringGreen688,19148
        MediumTurquoise=0x48D1CC,MediumTurquoise689,19184
        MediumVioletRed=0xC71585,MediumVioletRed690,19218
        MidnightBlue=0x191970,MidnightBlue691,19252
        MintCream=0xF5FFFA,MintCream692,19283
        MistyRose=0xFFE4E1,MistyRose693,19311
        Moccasin=0xFFE4B5,Moccasin694,19339
        NavajoWhite=0xFFDEAD,NavajoWhite695,19366
        Navy=0x000080,Navy696,19396
        OldLace=0xFDF5E6,OldLace697,19419
        Olive=0x808000,Olive698,19445
        OliveDrab=0x6B8E23,OliveDrab699,19469
        Orange=0xFFA500,Orange700,19497
        OrangeRed=0xFF4500,OrangeRed701,19522
        Orchid=0xDA70D6,Orchid702,19550
        PaleGoldenrod=0xEEE8AA,PaleGoldenrod703,19575
        PaleGreen=0x98FB98,PaleGreen704,19607
        PaleTurquoise=0xAFEEEE,PaleTurquoise705,19635
        PaleVioletRed=0xDB7093,PaleVioletRed706,19667
        PapayaWhip=0xFFEFD5,PapayaWhip707,19699
        PeachPuff=0xFFDAB9,PeachPuff708,19728
        Peru=0xCD853F,Peru709,19756
        Pink=0xFFC0CB,Pink710,19779
        Plaid=0xCC5533,Plaid711,19802
        Plum=0xDDA0DD,Plum712,19826
        PowderBlue=0xB0E0E6,PowderBlue713,19849
        Purple=0x800080,Purple714,19878
        Red=0xFF0000,Red715,19903
        RosyBrown=0xBC8F8F,RosyBrown716,19925
        RoyalBlue=0x4169E1,RoyalBlue717,19953
        SaddleBrown=0x8B4513,SaddleBrown718,19981
        Salmon=0xFA8072,Salmon719,20011
        SandyBrown=0xF4A460,SandyBrown720,20036
        SeaGreen=0x2E8B57,SeaGreen721,20065
        Seashell=0xFFF5EE,Seashell722,20092
        Sienna=0xA0522D,Sienna723,20119
        Silver=0xC0C0C0,Silver724,20144
        SkyBlue=0x87CEEB,SkyBlue725,20169
        SlateBlue=0x6A5ACD,SlateBlue726,20195
        SlateGray=0x708090,SlateGray727,20223
        SlateGrey=0x708090,SlateGrey728,20251
        Snow=0xFFFAFA,Snow729,20279
        SpringGreen=0x00FF7F,SpringGreen730,20302
        SteelBlue=0x4682B4,SteelBlue731,20332
        Tan=0xD2B48C,Tan732,20360
        Teal=0x008080,Teal733,20382
        Thistle=0xD8BFD8,Thistle734,20405
        Tomato=0xFF6347,Tomato735,20431
        Turquoise=0x40E0D0,Turquoise736,20456
        Violet=0xEE82EE,Violet737,20484
        Wheat=0xF5DEB3,Wheat738,20509
        White=0xFFFFFF,White739,20533
        WhiteSmoke=0xF5F5F5,WhiteSmoke740,20557
        Yellow=0xFFFF00,Yellow741,20586
        YellowGreen=0x9ACD32,YellowGreen742,20611
        FairyLight=0xFFE42D,FairyLight748,20846
        FairyLightNCC=0xFF9D2AFairyLightNCC750,20933
    } HTMLColorCode;HTMLColorCode752,20965
inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)operator ==756,20991
inline __attribute__((always_inline)) bool operator!= (const CRGB& lhs, const CRGB& rhs)operator !=761,21154
inline __attribute__((always_inline)) bool operator< (const CRGB& lhs, const CRGB& rhs)operator <766,21274
inline __attribute__((always_inline)) bool operator> (const CRGB& lhs, const CRGB& rhs)operator >774,21472
inline __attribute__((always_inline)) bool operator>= (const CRGB& lhs, const CRGB& rhs)operator >=782,21670
inline __attribute__((always_inline)) bool operator<= (const CRGB& lhs, const CRGB& rhs)operator <=790,21870
inline CRGB operator+( const CRGB& p1, const CRGB& p2)operator +800,22102
inline CRGB operator-( const CRGB& p1, const CRGB& p2)operator -808,22305
inline CRGB operator*( const CRGB& p1, uint8_t d)operator *816,22508
inline CRGB operator/( const CRGB& p1, uint8_t d)operator /824,22697
inline CRGB operator&( const CRGB& p1, const CRGB& p2)operator &831,22826
inline CRGB operator|( const CRGB& p1, const CRGB& p2)operator |839,23050
inline CRGB operator%( const CRGB& p1, uint8_t d)operator %847,23274
enum EOrder {EOrder859,23565
	RGB=0012,RGB860,23579
	RBG=0021,RBG861,23590
	GRB=0102,GRB862,23601
	GBR=0120,GBR863,23612
	BRG=0201,BRG864,23623
	BGR=0210BGR865,23634

lib/FastLED/power_mgt.h,37
#define POWER_MGT_HPOWER_MGT_H2,20

lib/FastLED/dmx.h,702
#define __INC_DMX_H__INC_DMX_H2,20
#define HAS_DMX_SIMPLEHAS_DMX_SIMPLE8,105
template <uint8_t DATA_PIN, EOrder RGB_ORDER = RGB> class DMXSimpleController : public CPixelLEDController<RGB_ORDER> {DMXSimpleController15,262
	virtual void init() { DmxSimple.usePin(DATA_PIN); }init18,424
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels21,489
template <EOrder RGB_ORDER = RGB> class DMXSerialController : public CPixelLEDController<RGB_ORDER> {DMXSerialController42,928
	virtual void init() { DMXSerial.init(DMXController); }init45,1072
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels47,1129
#define HAS_DMX_SERIALHAS_DMX_SERIAL62,1498

lib/FastLED/fastled_delay.h,2571
#define __INC_FL_DELAY_H__INC_FL_DELAY_H2,25
template<int WAIT> class CMinWait {CMinWait13,363
	uint16_t mLastMicros;mLastMicros14,399
	CMinWait() { mLastMicros = 0; }CMinWait16,430
	void wait() {wait18,464
	void mark() { mLastMicros = micros() & 0xFFFF; }mark25,576
#undef NOPNOP39,992
#undef NOP2NOP240,1003
#  define FL_NOP FL_NOP44,1044
#  define FL_NOP2 FL_NOP245,1098
#  define FL_NOP FL_NOP47,1157
#  define FL_NOP2 FL_NOP248,1206
template<int CYCLES> inline void delaycycles_min1() {delaycycles_min153,1364
template<int LOOP, int PAD> inline void _delaycycles_AVR() {_delaycycles_AVR64,1621
template<int CYCLES> __attribute__((always_inline)) inline void delaycycles() {delaycycles79,2034
template<int CYCLES> __attribute__((always_inline)) inline void delaycycles() {delaycycles99,2634
template<> __attribute__((always_inline)) inline void delaycycles<-10>() {}delaycycles107,2929
template<> __attribute__((always_inline)) inline void delaycycles<-9>() {}delaycycles108,3005
template<> __attribute__((always_inline)) inline void delaycycles<-8>() {}delaycycles109,3080
template<> __attribute__((always_inline)) inline void delaycycles<-7>() {}delaycycles110,3155
template<> __attribute__((always_inline)) inline void delaycycles<-6>() {}delaycycles111,3230
template<> __attribute__((always_inline)) inline void delaycycles<-5>() {}delaycycles112,3305
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}delaycycles113,3380
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}delaycycles114,3455
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}delaycycles115,3530
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}delaycycles116,3605
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}delaycycles117,3680
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}delaycycles118,3754
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}delaycycles119,3835
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}delaycycles120,3917
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}delaycycles121,4006
template<> __attribute__((always_inline)) inline void delaycycles<5>() {FL_NOP2;FL_NOP2;FL_NOP;}delaycycles122,4096
#define F_CPU_MHZ F_CPU_MHZ128,4367
#define NS(NS131,4461
#define CLKS_TO_MICROS(CLKS_TO_MICROS132,4512
#define NO_TIME(NO_TIME135,4636

lib/FastLED/fastspi_bitbang.h,3192
#define __INC_FASTSPI_BITBANG_H__INC_FASTSPI_BITBANG_H2,32
class AVRSoftwareSPIOutput {AVRSoftwareSPIOutput19,723
	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t22,925
	typedef typename FastPin<CLOCK_PIN>::port_ptr_t clock_ptr_t;clock_ptr_t23,985
	typedef typename FastPin<DATA_PIN>::port_t data_t;data_t27,1205
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;clock_t28,1257
	Selectable 	*m_pSelect;m_pSelect29,1311
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }AVRSoftwareSPIOutput32,1345
	AVRSoftwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }AVRSoftwareSPIOutput33,1391
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect34,1459
	void init() {init36,1522
	static void stop() { }stop45,1844
	static void wait() __attribute__((always_inline)) { }wait48,1958
	static void waitFully() __attribute__((always_inline)) { wait(); }waitFully49,2013
	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }writeByteNoWait51,2082
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }writeBytePostWait52,2171
	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }writeWord54,2271
	static void writeByte(uint8_t b) {writeByte57,2463
	static void writeByte(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin)  {writeByte70,2722
	static void writeByte(uint8_t b, data_ptr_t datapin,writeByte84,3387
	static void writeByte(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin,writeByte100,4282
	#define DELAY_NS DELAY_NS117,5114
	#define CLOCK_HI_DELAY CLOCK_HI_DELAY118,5161
	#define CLOCK_LO_DELAY CLOCK_LO_DELAY119,5234
	#define MIN_DELAY MIN_DELAY121,5313
	#define CLOCK_HI_DELAY CLOCK_HI_DELAY123,5365
	#define CLOCK_LO_DELAY CLOCK_LO_DELAY124,5517
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {writeBit128,5720
	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin) {writeBit156,6659
	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, clock_ptr_t clockpin, data_ptr_t datapin,writeBit171,7259
	template <uint8_t BIT> __attribute__((always_inline)) inline static void writeBit(uint8_t b, data_ptr_t clockdatapin,writeBit188,8106
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }select210,9084
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }release213,9208
	void writeBytesValue(uint8_t value, int len) {writeBytesValue216,9430
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw222,9541
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes261,11556
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes306,13425
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER>  __attribute__((noinline)) void writePixels(PixelController<RGB_ORDER> pixels) {writePixels312,13818

lib/FastLED/fastled_progmem.h,455
#define __INC_FL_PROGMEM_H__INC_FL_PROGMEM_H2,27
#define FASTLED_INCLUDE_PGMSPACE FASTLED_INCLUDE_PGMSPACE26,754
#define FL_PROGMEM FL_PROGMEM33,865
#define FL_PGM_READ_BYTE_NEAR(FL_PGM_READ_BYTE_NEAR39,1102
#define FL_PGM_READ_WORD_NEAR(FL_PGM_READ_WORD_NEAR40,1160
#define FL_PGM_READ_DWORD_NEAR(FL_PGM_READ_DWORD_NEAR41,1218
#undef PROGMEMPROGMEM47,1440
#define PROGMEM PROGMEM48,1455
#define FL_ALIGN_PROGMEM FL_ALIGN_PROGMEM73,2277

lib/FastLED/lib8tion.cpp,591
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
#define RAND16_SEED RAND16_SEED7,92
uint16_t rand16seed = RAND16_SEED;rand16seed8,118
void * memset8 ( void * ptr, uint8_t val, uint16_t num )memset832,985
void * memcpy8 ( void * dst, const void* src, uint16_t num )memcpy859,1775
void * memmove8 ( void * dst, const void* src, uint16_t num )memmove887,2691
void test1abs( int8_t i)test1abs135,4085
void testabs()testabs142,4246
void testmul8()testmul8152,4369
void testscale8()testscale8172,4759
void testqadd8()testqadd8207,5497
void testnscale8x3()testnscale8x3224,5862

lib/FastLED/noise.h,41
#define __INC_NOISE_H__INC_NOISE_H2,22

lib/FastLED/platforms.cpp,538
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
    uint32_t isrCount;isrCount13,366
                void PWM0_IRQHandler(void) { isrCount++; PWM_Arbiter<0>::isr_handler(); }PWM0_IRQHandler20,598
                void PWM1_IRQHandler(void) { isrCount++; PWM_Arbiter<1>::isr_handler(); }PWM1_IRQHandler23,767
                void PWM2_IRQHandler(void) { isrCount++; PWM_Arbiter<2>::isr_handler(); }PWM2_IRQHandler26,936
                void PWM3_IRQHandler(void) { isrCount++; PWM_Arbiter<3>::isr_handler(); }PWM3_IRQHandler29,1105

lib/FastLED/power_mgt.cpp,1826
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
static const uint8_t gRed_mW   = 16 * 5; // 16mA @ 5v = 80mWgRed_mW25,906
static const uint8_t gGreen_mW = 11 * 5; // 11mA @ 5v = 55mWgGreen_mW26,967
static const uint8_t gBlue_mW  = 15 * 5; // 15mA @ 5v = 75mWgBlue_mW27,1028
static const uint8_t gDark_mW  =  1 * 5; //  1mA @ 5v =  5mWgDark_mW28,1089
#define POWER_LED POWER_LED40,1577
#define POWER_DEBUG_PRINT POWER_DEBUG_PRINT41,1597
static const uint8_t gMCU_mW  =  25 * 5; // 25mA @ 5v = 125 mWgMCU_mW45,1656
static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.gMaxPowerIndicatorLEDPinNumber47,1720
uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354calculate_unscaled_power_mW50,1839
uint8_t calculate_max_brightness_for_power_vmA(const CRGB* ledbuffer, uint16_t numLeds, uint8_t target_brightness, uint32_t max_power_V, uint32_t max_power_mA) {calculate_max_brightness_for_power_vmA80,2504
uint8_t calculate_max_brightness_for_power_mW(const CRGB* ledbuffer, uint16_t numLeds, uint8_t target_brightness, uint32_t max_power_mW) {calculate_max_brightness_for_power_mW84,2783
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)calculate_max_brightness_for_power_mW100,3440
void set_max_power_indicator_LED( uint8_t pinNumber)set_max_power_indicator_LED159,5185
void set_max_power_in_volts_and_milliamps( uint8_t volts, uint32_t milliamps)set_max_power_in_volts_and_milliamps164,5291
void set_max_power_in_milliwatts( uint32_t powerInmW)set_max_power_in_milliwatts169,5434
void show_at_max_brightness_for_power()show_at_max_brightness_for_power174,5539
void delay_at_max_brightness_for_power( uint16_t ms)delay_at_max_brightness_for_power180,5680

lib/FastLED/fastled_config.h,309
#define __INC_FASTLED_CONFIG_H__INC_FASTLED_CONFIG_H2,31
#define FASTLED_SCALE8_FIXED FASTLED_SCALE8_FIXED37,1919
#define FASTLED_BLEND_FIXED FASTLED_BLEND_FIXED46,2517
#define FASTLED_NOISE_FIXED FASTLED_NOISE_FIXED55,3080
#define FASTLED_INTERRUPT_RETRY_COUNT FASTLED_INTERRUPT_RETRY_COUNT61,3311

lib/FastLED/controller.h,11432
#define __INC_CONTROLLER_H__INC_CONTROLLER_H2,27
#define RO(RO15,283
#define RGB_BYTE(RGB_BYTE16,320
#define RGB_BYTE0(RGB_BYTE018,372
#define RGB_BYTE1(RGB_BYTE119,410
#define RGB_BYTE2(RGB_BYTE220,448
#define DISABLE_DITHER DISABLE_DITHER24,546
#define BINARY_DITHER BINARY_DITHER25,574
typedef uint8_t EDitherMode;EDitherMode26,601
class CLEDController {CLEDController39,1466
    CRGB *m_Data;m_Data42,1527
    CLEDController *m_pNext;m_pNext43,1545
    CRGB m_ColorCorrection;m_ColorCorrection44,1574
    CRGB m_ColorTemperature;m_ColorTemperature45,1602
    EDitherMode m_DitherMode;m_DitherMode46,1631
    int m_nLeds;m_nLeds47,1661
    static CLEDController *m_pHead;m_pHead48,1678
    static CLEDController *m_pTail;m_pTail49,1714
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {CLEDController65,2488
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }clearLeds76,2916
    void show(const struct CRGB *data, int nLeds, uint8_t brightness) {show79,3092
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {showColor84,3317
    void showLeds(uint8_t brightness=255) {showLeds89,3531
    void showColor(const struct CRGB & data, uint8_t brightness=255) {showColor94,3683
    static CLEDController *head() { return m_pHead; }head99,3887
    CLEDController *next() { return m_pNext; }next101,4044
    CLEDController & setLeds(CRGB *data, int nLeds) {setLeds104,4157
    void clearLedData() {clearLedData111,4342
    virtual int size() { return m_nLeds; }size118,4527
    CRGB* leds() { return m_Data; }leds121,4625
    CRGB &operator[](int x) { return m_Data[x]; }operator []124,4715
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }setDither127,4821
    inline uint8_t getDither() { return m_DitherMode; }getDither129,5007
    CLEDController & setCorrection(CRGB correction) { m_ColorCorrection = correction; return *this; }setCorrection132,5148
    CLEDController & setCorrection(LEDColorCorrection correction) { m_ColorCorrection = correction; return *this; }setCorrection134,5310
    CRGB getCorrection() { return m_ColorCorrection; }getCorrection136,5483
    CLEDController & setTemperature(CRGB temperature) { m_ColorTemperature = temperature; return *this; }setTemperature139,5608
    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }setTemperature141,5786
    CRGB getTemperature() { return m_ColorTemperature; }getTemperature143,5976
    CRGB getAdjustment(uint8_t scale) {getAdjustment146,6104
    static CRGB computeAdjustment(uint8_t scale, const CRGB & colorCorrection, const CRGB & colorTemperature) {computeAdjustment150,6231
    virtual uint16_t getMaxRefreshRate() const { return 0; }getMaxRefreshRate171,7026
struct PixelController {PixelController178,7433
        const uint8_t *mData;mData179,7458
        int mLen,mLenRemaining;mLen180,7488
        int mLen,mLenRemaining;mLenRemaining180,7488
        uint8_t d[3];d181,7520
        uint8_t e[3];e182,7542
        CRGB mScale;mScale183,7564
        int8_t mAdvance;mAdvance184,7585
        int mOffsets[LANES];mOffsets185,7610
        PixelController(const PixelController & other) {PixelController187,7640
        void initOffsets(int len) {initOffsets202,8129
        PixelController(const uint8_t *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER, bool advance=true, uint8_t skip=0) : mData(d), mLen(len), mLenRemaining(len), mScale(s) {PixelController210,8356
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {PixelController217,8696
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {PixelController223,8966
        void init_binary_dithering() {init_binary_dithering229,9237
#define MAX_LIKELY_UPDATE_RATE_HZ MAX_LIKELY_UPDATE_RATE_HZ244,10120
#define MIN_ACCEPTABLE_DITHER_RATE_HZ MIN_ACCEPTABLE_DITHER_RATE_HZ245,10162
#define UPDATES_PER_FULL_DITHER_CYCLE UPDATES_PER_FULL_DITHER_CYCLE246,10204
#define RECOMMENDED_VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS247,10302
#define VIRTUAL_BITS VIRTUAL_BITS255,10881
        __attribute__((always_inline)) inline bool has(int n) {has309,12809
        void enable_dithering(EDitherMode dither) {enable_dithering314,12958
        __attribute__((always_inline)) inline int size() { return mLen; }size321,13197
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }advanceBy324,13324
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}advanceData327,13477
         __attribute__((always_inline)) inline void stepDithering() {stepDithering330,13621
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {preStepFirstByteDithering339,14028
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }loadByte343,14164
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }loadByte344,14307
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }dither346,14481
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & , uint8_t b, uint8_t d) { return b ? qadd8(b,d) : 0; }dither347,14647
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & pc, uint8_t b) { return scale8(b, pc.mScale.raw[RO(SLOT)]); }scale349,14809
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t scale(PixelController & , uint8_t b, uint8_t scale) { return scale8(b, scale); }scale350,14976
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc))); }loadAndScale353,15215
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc, int lane) { return scale<SLOT>(pc, pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc, lane))); }loadAndScale354,15403
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc, int lane, uint8_t d, uint8_t scale) { return scale8(pc.dither<SLOT>(pc, pc.loadByte<SLOT>(pc, lane), d), scale); }loadAndScale355,15607
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadAndScale(PixelController & pc, int lane, uint8_t scale) { return scale8(pc.loadByte<SLOT>(pc, lane), scale); }loadAndScale356,15838
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }advanceAndLoadAndScale358,16035
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }advanceAndLoadAndScale359,16217
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }advanceAndLoadAndScale360,16415
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }getd362,16636
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }getscale363,16771
        __attribute__((always_inline)) inline uint8_t loadAndScale0(int lane, uint8_t scale) { return loadAndScale<0>(*this, lane, scale); }loadAndScale0366,16978
        __attribute__((always_inline)) inline uint8_t loadAndScale1(int lane, uint8_t scale) { return loadAndScale<1>(*this, lane, scale); }loadAndScale1367,17119
        __attribute__((always_inline)) inline uint8_t loadAndScale2(int lane, uint8_t scale) { return loadAndScale<2>(*this, lane, scale); }loadAndScale2368,17260
        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0(int lane, uint8_t scale) { return advanceAndLoadAndScale<0>(*this, lane, scale); }advanceAndLoadAndScale0369,17401
        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0(int lane, uint8_t scale) { stepDithering(); return advanceAndLoadAndScale<0>(*this, lane, scale); }stepAdvanceAndLoadAndScale0370,17562
        __attribute__((always_inline)) inline uint8_t loadAndScale0(int lane) { return loadAndScale<0>(*this, lane); }loadAndScale0372,17745
        __attribute__((always_inline)) inline uint8_t loadAndScale1(int lane) { return loadAndScale<1>(*this, lane); }loadAndScale1373,17864
        __attribute__((always_inline)) inline uint8_t loadAndScale2(int lane) { return loadAndScale<2>(*this, lane); }loadAndScale2374,17983
        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0(int lane) { return advanceAndLoadAndScale<0>(*this, lane); }advanceAndLoadAndScale0375,18102
        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0(int lane) { stepDithering(); return advanceAndLoadAndScale<0>(*this, lane); }stepAdvanceAndLoadAndScale0376,18241
        __attribute__((always_inline)) inline uint8_t loadAndScale0() { return loadAndScale<0>(*this); }loadAndScale0378,18402
        __attribute__((always_inline)) inline uint8_t loadAndScale1() { return loadAndScale<1>(*this); }loadAndScale1379,18507
        __attribute__((always_inline)) inline uint8_t loadAndScale2() { return loadAndScale<2>(*this); }loadAndScale2380,18612
        __attribute__((always_inline)) inline uint8_t advanceAndLoadAndScale0() { return advanceAndLoadAndScale<0>(*this); }advanceAndLoadAndScale0381,18717
        __attribute__((always_inline)) inline uint8_t stepAdvanceAndLoadAndScale0() { stepDithering(); return advanceAndLoadAndScale<0>(*this); }stepAdvanceAndLoadAndScale0382,18842
        __attribute__((always_inline)) inline uint8_t getScale0() { return getscale<0>(*this); }getScale0384,18989
        __attribute__((always_inline)) inline uint8_t getScale1() { return getscale<1>(*this); }getScale1385,19086
        __attribute__((always_inline)) inline uint8_t getScale2() { return getscale<2>(*this); }getScale2386,19183
template<EOrder RGB_ORDER, int LANES=1, uint32_t MASK=0xFFFFFFFF> class CPixelLEDController : public CLEDController {CPixelLEDController389,19284
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {showColor397,19721
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {show406,20169
  CPixelLEDController() : CLEDController() {}CPixelLEDController412,20361

lib/FastLED/fastspi.h,2266
#define __INC_FASTSPI_H__INC_FASTSPI_H2,24
#define DATA_RATE_MHZ(DATA_RATE_MHZ14,224
#define DATA_RATE_KHZ(DATA_RATE_KHZ15,280
class SPIOutput : public AVRSoftwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};SPIOutput34,1156
class SoftwareSPIOutput : public AVRSoftwareSPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};SoftwareSPIOutput38,1334
class SPIOutput : public NRF51SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};SPIOutput44,1610
class SPIOutput : public NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER> {};SPIOutput49,1850
class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED, 0x4002C000> {};SPIOutput57,2078
class SPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED, 0x4002C000> {};SPIOutput62,2258
class SPIOutput<SPI_DATA, SPI2_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI_DATA, SPI2_CLOCK, SPI_SPEED, 0x4002C000> {};SPIOutput65,2418
class SPIOutput<SPI2_DATA, SPI_CLOCK, SPI_SPEED> : public ARMHardwareSPIOutput<SPI2_DATA, SPI_CLOCK, SPI_SPEED, 0x4002C000> {};SPIOutput68,2576
class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public Teesy4HardwareSPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED, SPI, 0> {};SPIOutput74,2802
class SPIOutput<SPI1_DATA, SPI_CLOCK, SPI_SPEED> : public Teesy4HardwareSPIOutput<SPI1_DATA, SPI1_CLOCK, SPI_SPEED, SPI1, 1> {};SPIOutput77,2957
class SPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED> : public Teesy4HardwareSPIOutput<SPI2_DATA, SPI2_CLOCK, SPI_SPEED, SPI2, 2> {};SPIOutput80,3116
#define DECLARE_SPI0(DECLARE_SPI084,3309
 #define DECLARE_SPI1(DECLARE_SPI186,3495
class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public SAMHardwareSPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> {};SPIOutput104,3967
class SPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> : public AVRHardwareSPIOutput<SPI_DATA, SPI_CLOCK, SPI_SPEED> {};SPIOutput109,4144
class SPIOutput<SPI_UART0_DATA, SPI_UART0_CLOCK, SPI_SPEED> : public AVRUSART0SPIOutput<SPI_UART0_DATA, SPI_UART0_CLOCK, SPI_SPEED> {};SPIOutput114,4317
class SPIOutput<SPI_UART1_DATA, SPI_UART1_CLOCK, SPI_SPEED> : public AVRUSART1SPIOutput<SPI_UART1_DATA, SPI_UART1_CLOCK, SPI_SPEED> {};SPIOutput121,4520

lib/FastLED/chipsets.h,10779
#define __INC_CHIPSETS_H__INC_CHIPSETS_H2,25
#define HAS_PIXIEHAS_PIXIE22,441
class PixieController : public CPixelLEDController<RGB_ORDER> {PixieController28,652
	SoftwareSerial Serial;Serial29,716
	CMinWait<2000> mWait;mWait30,740
	PixieController() : Serial(-1, DATA_PIN) {}PixieController32,771
	virtual void init() {init35,828
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels40,895
class LPD8806Controller : public CPixelLEDController<RGB_ORDER> {LPD8806Controller81,2395
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;SPI82,2461
	class LPD8806_ADJUST {LPD8806_ADJUST84,2518
		__attribute__((always_inline)) inline static uint8_t adjust(register uint8_t data) { return ((data>>1) | 0x80) + ((data && (data<254)) & 0x01); }adjust87,2631
		__attribute__((always_inline)) inline static void postBlock(int len) {postBlock88,2779
	SPI mSPI;mSPI94,2910
	LPD8806Controller()  {}LPD8806Controller97,2930
	virtual void init() {init98,2955
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels104,3009
class WS2801Controller : public CPixelLEDController<RGB_ORDER> {WS2801Controller122,3948
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;SPI123,4013
	SPI mSPI;mSPI124,4069
	CMinWait<1000>  mWaitDelay;mWaitDelay125,4080
	WS2801Controller() {}WS2801Controller127,4117
	virtual void init() {init129,4141
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels136,4217
class WS2803Controller : public WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER, SPI_SPEED> {};WS2803Controller144,4502
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {LPD6803Controller155,5252
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;SPI156,5318
	SPI mSPI;mSPI157,5374
	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }startBoundary159,5386
	LPD6803Controller() {}LPD6803Controller162,5497
	virtual void init() {init164,5522
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels170,5576
class APA102Controller : public CPixelLEDController<RGB_ORDER> {APA102Controller205,7041
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;SPI206,7106
	SPI mSPI;mSPI207,7162
	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }startBoundary209,7174
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }endBoundary210,7238
	inline void writeLed(uint8_t brightness, uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {writeLed212,7411
	APA102Controller() {}APA102Controller228,7814
	virtual void init() {init230,7838
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels236,7892
class SK9822Controller : public CPixelLEDController<RGB_ORDER> {SK9822Controller270,9194
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;SPI271,9259
	SPI mSPI;mSPI272,9315
	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }startBoundary274,9327
	void endBoundary(int nLeds) { int nLongWords = (nLeds/32); do { mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nLongWords--); }endBoundary275,9391
	inline void writeLed(uint8_t brightness, uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {writeLed277,9570
	SK9822Controller() {}SK9822Controller293,9973
	virtual void init() {init295,9997
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels301,10051
class P9813Controller : public CPixelLEDController<RGB_ORDER> {P9813Controller344,11719
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;SPI345,11783
	SPI mSPI;mSPI346,11839
	void writeBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }writeBoundary348,11851
	inline void writeLed(uint8_t r, uint8_t g, uint8_t b) __attribute__((always_inline)) {writeLed350,11916
	P9813Controller() {}P9813Controller356,12190
	virtual void init() {init358,12213
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels364,12267
class SM16716Controller : public CPixelLEDController<RGB_ORDER> {SM16716Controller394,13405
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;SPI395,13471
	SPI mSPI;mSPI396,13527
	void writeHeader() {writeHeader398,13539
	SM16716Controller() {}SM16716Controller414,13908
	virtual void init() {init416,13933
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels422,13987
    #define CLOCKLESS_FREQUENCY CLOCKLESS_FREQUENCY456,15536
#define FMUL FMUL462,15937
class GE8822Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 5 * FMUL, 3 * FMUL, RGB_ORDER, 4> {};GE8822Controller800Khz466,16043
class LPD1886Controller1250Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 3 * FMUL, 2 * FMUL, RGB_ORDER, 4> {};LPD1886Controller1250Khz470,16223
class LPD1886Controller1250Khz_8bit : public ClocklessController<DATA_PIN, 2 * FMUL, 3 * FMUL, 2 * FMUL, RGB_ORDER> {};LPD1886Controller1250Khz_8bit474,16405
class WS2812Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL, RGB_ORDER> {};WS2812Controller800Khz478,16624
class WS2811Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL, RGB_ORDER> {};WS2811Controller800Khz481,16790
class WS2813Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL, RGB_ORDER> {};WS2813Controller484,17029
class WS2811Controller400Khz : public ClocklessController<DATA_PIN, 4 * FMUL, 10 * FMUL, 6 * FMUL, RGB_ORDER> {};WS2811Controller400Khz487,17189
class SK6822Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 8 * FMUL, 3 * FMUL, RGB_ORDER> {};SK6822Controller490,17356
class SM16703Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 4 * FMUL, 3 * FMUL, RGB_ORDER> {};SM16703Controller493,17516
class SK6812Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 3 * FMUL, 4 * FMUL, RGB_ORDER> {};SK6812Controller496,17677
class UCS1903Controller400Khz : public ClocklessController<DATA_PIN, 4 * FMUL, 12 * FMUL, 4 * FMUL, RGB_ORDER> {};UCS1903Controller400Khz499,17837
class UCS1903BController800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 4 * FMUL, 4 * FMUL, RGB_ORDER> {};UCS1903BController800Khz502,18005
class UCS1904Controller800Khz : public ClocklessController<DATA_PIN, 3 * FMUL, 3 * FMUL, 4 * FMUL, RGB_ORDER> {};UCS1904Controller800Khz505,18173
class UCS2903Controller : public ClocklessController<DATA_PIN, 2 * FMUL, 6 * FMUL, 2 * FMUL, RGB_ORDER> {};UCS2903Controller508,18340
class TM1809Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL, RGB_ORDER> {};TM1809Controller800Khz511,18501
class TM1803Controller400Khz : public ClocklessController<DATA_PIN, 6 * FMUL, 9 * FMUL, 6 * FMUL, RGB_ORDER> {};TM1803Controller400Khz514,18667
class TM1829Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 5 * FMUL, 3 * FMUL, RGB_ORDER, 0, true, 500> {};TM1829Controller800Khz517,18833
class GW6205Controller400Khz : public ClocklessController<DATA_PIN, 6 * FMUL, 7 * FMUL, 6 * FMUL, RGB_ORDER, 4> {};GW6205Controller400Khz520,19013
class GW6205Controller800Khz : public ClocklessController<DATA_PIN, 2 * FMUL, 4 * FMUL, 4 * FMUL, RGB_ORDER, 4> {};GW6205Controller800Khz523,19182
class PL9823Controller : public ClocklessController<DATA_PIN, 3 * FMUL, 8 * FMUL, 3 * FMUL, RGB_ORDER> {};PL9823Controller526,19351
#define C_NS(C_NS535,19667
#define C_NS(C_NS537,19695
class GE8822Controller800Khz : public ClocklessController<DATA_PIN, C_NS(350), C_NS(660), C_NS(350), RGB_ORDER, 4> {};GE8822Controller800Khz542,19863
class GW6205Controller400Khz : public ClocklessController<DATA_PIN, C_NS(800), C_NS(800), C_NS(800), RGB_ORDER, 4> {};GW6205Controller400Khz546,20074
class GW6205Controller800Khz : public ClocklessController<DATA_PIN, C_NS(400), C_NS(400), C_NS(400), RGB_ORDER, 4> {};GW6205Controller800Khz550,20285
class UCS1903Controller400Khz : public ClocklessController<DATA_PIN, C_NS(500), C_NS(1500), C_NS(500), RGB_ORDER> {};UCS1903Controller400Khz554,20491
class UCS1903BController800Khz : public ClocklessController<DATA_PIN, C_NS(400), C_NS(450), C_NS(450), RGB_ORDER> {};UCS1903BController800Khz558,20696
class UCS1904Controller800Khz : public ClocklessController<DATA_PIN, C_NS(400), C_NS(400), C_NS(450), RGB_ORDER> {};UCS1904Controller800Khz562,20900
class UCS2903Controller : public ClocklessController<DATA_PIN, C_NS(250), C_NS(750), C_NS(250), RGB_ORDER> {};UCS2903Controller566,21103
class TM1809Controller800Khz : public ClocklessController<DATA_PIN, C_NS(350), C_NS(350), C_NS(450), RGB_ORDER> {};TM1809Controller800Khz570,21299
class WS2811Controller800Khz : public ClocklessController<DATA_PIN, C_NS(320), C_NS(320), C_NS(640), RGB_ORDER> {};WS2811Controller800Khz574,21500
class WS2813Controller : public ClocklessController<DATA_PIN, C_NS(320), C_NS(320), C_NS(640), RGB_ORDER> {};WS2813Controller578,21701
class WS2812Controller800Khz : public ClocklessController<DATA_PIN, C_NS(250), C_NS(625), C_NS(375), RGB_ORDER> {};WS2812Controller800Khz582,21896
class WS2811Controller400Khz : public ClocklessController<DATA_PIN, C_NS(800), C_NS(800), C_NS(900), RGB_ORDER> {};WS2811Controller400Khz586,22104
class TM1803Controller400Khz : public ClocklessController<DATA_PIN, C_NS(700), C_NS(1100), C_NS(700), RGB_ORDER> {};TM1803Controller400Khz590,22296
class TM1829Controller800Khz : public ClocklessController<DATA_PIN, C_NS(340), C_NS(340), C_NS(550), RGB_ORDER, 0, true, 500> {};TM1829Controller800Khz593,22466
class TM1829Controller1600Khz : public ClocklessController<DATA_PIN, C_NS(100), C_NS(300), C_NS(200), RGB_ORDER, 0, true, 500> {};TM1829Controller1600Khz596,22649
class LPD1886Controller1250Khz : public ClocklessController<DATA_PIN, C_NS(200), C_NS(400), C_NS(200), RGB_ORDER, 4> {};LPD1886Controller1250Khz599,22833
class LPD1886Controller1250Khz_8bit : public ClocklessController<DATA_PIN, C_NS(200), C_NS(400), C_NS(200), RGB_ORDER> {};LPD1886Controller1250Khz_8bit602,23007
class SK6822Controller : public ClocklessController<DATA_PIN, C_NS(375), C_NS(1000), C_NS(375), RGB_ORDER> {};SK6822Controller606,23184
class SK6812Controller : public ClocklessController<DATA_PIN, C_NS(300), C_NS(300), C_NS(600), RGB_ORDER> {};SK6812Controller609,23348
class SM16703Controller : public ClocklessController<DATA_PIN, C_NS(300), C_NS(600), C_NS(300), RGB_ORDER> {};SM16703Controller612,23511
class PL9823Controller : public ClocklessController<DATA_PIN, C_NS(350), C_NS(1010), C_NS(350), RGB_ORDER> {};PL9823Controller615,23675

lib/FastLED/lib8tion.h,8724
#define __INC_LIB8TION_H__INC_LIB8TION_H2,25
#define LIB8STATIC LIB8STATIC178,5798
#define LIB8STATIC_ALWAYS_INLINE LIB8STATIC_ALWAYS_INLINE179,5856
#define QADD8_C QADD8_C190,6130
#define QADD7_C QADD7_C191,6148
#define QADD8_ARM_DSP_ASM QADD8_ARM_DSP_ASM192,6166
#define QADD7_ARM_DSP_ASM QADD7_ARM_DSP_ASM193,6194
#define QSUB8_C QSUB8_C200,6287
#define SCALE8_C SCALE8_C201,6305
#define SCALE16BY8_C SCALE16BY8_C202,6324
#define SCALE16_C SCALE16_C203,6347
#define ABS8_C ABS8_C204,6367
#define MUL8_C MUL8_C205,6384
#define QMUL8_C QMUL8_C206,6401
#define ADD8_C ADD8_C207,6419
#define SUB8_C SUB8_C208,6436
#define EASE8_C EASE8_C209,6453
#define AVG8_C AVG8_C210,6471
#define AVG7_C AVG7_C211,6488
#define AVG16_C AVG16_C212,6505
#define AVG15_C AVG15_C213,6523
#define BLEND8_C BLEND8_C214,6541
typedef uint8_t   fract8;   ///< ANSI: unsigned short _Fractfract8336,9225
typedef int8_t    sfract7;  ///< ANSI: signed   short _Fractsfract7340,9395
typedef uint16_t  fract16;  ///< ANSI: unsigned       _Fractfract16344,9560
typedef int16_t   sfract15; ///< ANSI: signed         _Fractsfract15348,9736
typedef uint16_t  accum88;  ///< ANSI: unsigned short _Accum.  8 bits int, 8 bits fractionaccum88355,9959
typedef int16_t   saccum78; ///< ANSI: signed   short _Accum.  7 bits int, 8 bits fractionsaccum78356,10050
typedef uint32_t  accum1616;///< ANSI: signed         _Accum. 16 bits int, 16 bits fractionaccum1616357,10141
typedef int32_t   saccum1516;///< ANSI: signed         _Accum. 15 bits int, 16 bits fractionsaccum1516358,10233
typedef uint16_t  accum124; ///< no direct ANSI counterpart. 12 bits int, 4 bits fractionaccum124359,10326
typedef int32_t   saccum114;///< no direct ANSI counterpart. 1 bit int, 14 bits fractionsaccum114360,10416
    uint32_t i;i365,10579
    float    f;f366,10595
        uint32_t mantissa: 23;mantissa368,10624
        uint32_t exponent:  8;exponent369,10655
        uint32_t signbit:   1;signbit370,10686
        uint32_t mant7 :  7;mant7373,10737
        uint32_t mant16: 16;mant16374,10766
        uint32_t exp_  :  8;exp_375,10795
        uint32_t sb_   :  1;sb_376,10824
        uint32_t mant_lo8 : 8;mant_lo8379,10873
        uint32_t mant_hi16_exp_lo1 : 16;mant_hi16_exp_lo1380,10904
        uint32_t sb_exphi7 : 8;sb_exphi7381,10945
} IEEE754binary32_t;IEEE754binary32_t383,10984
LIB8STATIC float sfract15ToFloat( sfract15 y)sfract15ToFloat406,11498
LIB8STATIC sfract15 floatToSfract15( float f)floatToSfract15415,11822
#define memmove8 memmove8436,12460
#define memcpy8 memcpy8437,12485
#define memset8 memset8438,12508
LIB8STATIC uint8_t lerp8by8( uint8_t a, uint8_t b, fract8 frac)lerp8by8458,13208
LIB8STATIC uint16_t lerp16by16( uint16_t a, uint16_t b, fract16 frac)lerp16by16475,13652
LIB8STATIC uint16_t lerp16by8( uint16_t a, uint16_t b, fract8 frac)lerp16by8492,14108
LIB8STATIC int16_t lerp15by8( int16_t a, int16_t b, fract8 frac)lerp15by8509,14566
LIB8STATIC int16_t lerp15by16( int16_t a, int16_t b, fract16 frac)lerp15by16526,15020
LIB8STATIC uint8_t map8( uint8_t in, uint8_t rangeStart, uint8_t rangeEnd)map8558,16050
LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)ease8InOutQuad575,16514
LIB8STATIC uint8_t ease8InOutQuad(uint8_t val) {ease8InOutQuad593,16934
LIB8STATIC uint16_t ease16InOutQuad( uint16_t i)ease16InOutQuad620,17678
LIB8STATIC fract8 ease8InOutCubic( fract8 i)ease8InOutCubic637,18051
LIB8STATIC fract8 ease8InOutApprox( fract8 i)ease8InOutApprox666,19032
LIB8STATIC uint8_t ease8InOutApprox( fract8 i)ease8InOutApprox687,19434
LIB8STATIC uint8_t triwave8(uint8_t in)triwave8731,20591
LIB8STATIC uint8_t quadwave8(uint8_t in)quadwave8752,21234
LIB8STATIC uint8_t cubicwave8(uint8_t in)cubicwave8759,21439
LIB8STATIC uint8_t squarewave8( uint8_t in, uint8_t pulsewidth=128)squarewave8788,22278
template<class T, int F, int I> class q {q801,22514
  T i:I;I802,22556
  T f:F;F803,22565
  q(float fx) { i = fx; f = (fx-i) * (1<<F); }q805,22582
  q(uint8_t _i, uint8_t _f) {i=_i; f=_f; }q806,22629
  uint32_t operator*(uint32_t v) { return (v*i) + ((v*f)>>F); }operator *807,22672
  uint16_t operator*(uint16_t v) { return (v*i) + ((v*f)>>F); }operator *808,22736
  int32_t operator*(int32_t v) { return (v*i) + ((v*f)>>F); }operator *809,22800
  int16_t operator*(int16_t v) { return (v*i) + ((v*f)>>F); }operator *810,22862
  int operator*(int v) { return (v*i) + ((v*f)>>F); }operator *812,22943
template<class T, int F, int I> static uint32_t operator*(uint32_t v, q<T,F,I> & q) { return q * v; }operator *816,23008
template<class T, int F, int I> static uint16_t operator*(uint16_t v, q<T,F,I> & q) { return q * v; }operator *817,23110
template<class T, int F, int I> static int32_t operator*(int32_t v, q<T,F,I> & q) { return q * v; }operator *818,23212
template<class T, int F, int I> static int16_t operator*(int16_t v, q<T,F,I> & q) { return q * v; }operator *819,23312
template<class T, int F, int I> static int operator*(int v, q<T,F,I> & q) { return q * v; }operator *821,23431
typedef q<uint8_t, 4,4> q44;q44825,23583
typedef q<uint8_t, 6,2> q62;q62827,23664
typedef q<uint16_t, 8,8> q88;q88829,23745
typedef q<uint16_t, 12,4> q124;q124831,23829
#define GET_MILLIS GET_MILLIS891,27181
#define GET_MILLIS GET_MILLIS894,27247
LIB8STATIC uint16_t beat88( accum88 beats_per_minute_88, uint32_t timebase = 0)beat88902,27574
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)beat16916,28253
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)beat8924,28565
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,beatsin88935,29047
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,beatsin16948,29635
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,beatsin8961,30217
LIB8STATIC uint16_t seconds16()seconds16975,30781
LIB8STATIC uint16_t minutes16()minutes16985,31024
LIB8STATIC uint8_t hours8()hours8995,31280
LIB8STATIC uint16_t div1024_32_16( uint32_t in32)div1024_32_161014,31947
LIB8STATIC uint16_t bseconds16()bseconds161039,32677
#define INSTANTIATE_EVERY_N_TIME_PERIODS(INSTANTIATE_EVERY_N_TIME_PERIODS1051,32948
class CEveryNTimePeriods {CEveryNTimePeriods1090,34651
    timeType mPrevTrigger;mPrevTrigger1092,34686
    timeType mPeriod;mPeriod1093,34713
    CEveryNTimePeriods() { reset(); mPeriod = 1; };CEveryNTimePeriods1095,34736
    CEveryNTimePeriods(timeType period) { reset(); setPeriod(period); };CEveryNTimePeriods1096,34788
    void setPeriod( timeType period) { mPeriod = period; };setPeriod1097,34861
    timeType getTime() { return (timeType)(timeGetter()); };getTime1098,34921
    timeType getPeriod() { return mPeriod; };getPeriod1099,34982
    timeType getElapsed() { return getTime() - mPrevTrigger; }getElapsed1100,35028
    timeType getRemaining() { return mPeriod - getElapsed(); }getRemaining1101,35091
    timeType getLastTriggerTime() { return mPrevTrigger; }getLastTriggerTime1102,35154
    bool ready() {ready1103,35213
    void reset() { mPrevTrigger = getTime(); };reset1108,35347
    void trigger() { mPrevTrigger = getTime() - mPeriod; };trigger1109,35395
    operator bool() { return ready(); }operator bool1111,35456
typedef CEveryNTimePeriods<uint16_t,seconds16> CEveryNSeconds;CEveryNSeconds1113,35499
typedef CEveryNTimePeriods<uint16_t,bseconds16> CEveryNBSeconds;CEveryNBSeconds1114,35562
typedef CEveryNTimePeriods<uint32_t,millis> CEveryNMillis;CEveryNMillis1115,35627
typedef CEveryNTimePeriods<uint16_t,minutes16> CEveryNMinutes;CEveryNMinutes1116,35686
typedef CEveryNTimePeriods<uint8_t,hours8> CEveryNHours;CEveryNHours1117,35749
#define CONCAT_HELPER(CONCAT_HELPER1121,35815
#define CONCAT_MACRO(CONCAT_MACRO1122,35850
#define EVERY_N_MILLIS(EVERY_N_MILLIS1123,35901
#define EVERY_N_MILLIS_I(EVERY_N_MILLIS_I1124,35979
#define EVERY_N_SECONDS(EVERY_N_SECONDS1125,36053
#define EVERY_N_SECONDS_I(EVERY_N_SECONDS_I1126,36133
#define EVERY_N_BSECONDS(EVERY_N_BSECONDS1127,36209
#define EVERY_N_BSECONDS_I(EVERY_N_BSECONDS_I1128,36291
#define EVERY_N_MINUTES(EVERY_N_MINUTES1129,36369
#define EVERY_N_MINUTES_I(EVERY_N_MINUTES_I1130,36449
#define EVERY_N_HOURS(EVERY_N_HOURS1131,36525
#define EVERY_N_HOURS_I(EVERY_N_HOURS_I1132,36601
#define CEveryNMilliseconds CEveryNMilliseconds1134,36674
#define EVERY_N_MILLISECONDS(EVERY_N_MILLISECONDS1135,36716
#define EVERY_N_MILLISECONDS_I(EVERY_N_MILLISECONDS_I1136,36766

lib/FastLED/colorutils.h,15588
#define __INC_COLORUTILS_H__INC_COLORUTILS_H2,27
typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;FORWARD_HUES63,2550
typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;BACKWARD_HUES63,2550
typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;SHORTEST_HUES63,2550
typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;LONGEST_HUES63,2550
typedef enum { FORWARD_HUES, BACKWARD_HUES, SHORTEST_HUES, LONGEST_HUES } TGradientDirectionCode;TGradientDirectionCode63,2550
#define saccum87 saccum8767,2651
void fill_gradient( T* targetArray,fill_gradient94,3728
void fill_gradient( T* targetArray, uint16_t numLeds, const CHSV& c1, const CHSV& c2,fill_gradient183,6565
void fill_gradient( T* targetArray, uint16_t numLeds,fill_gradient191,6836
void fill_gradient( T* targetArray, uint16_t numLeds,fill_gradient202,7234
#define fill_gradient_HSV fill_gradient_HSV215,7797
typedef uint32_t TProgmemRGBPalette16[16];TProgmemRGBPalette16400,15861
typedef uint32_t TProgmemHSVPalette16[16];TProgmemHSVPalette16401,15904
#define TProgmemPalette16 TProgmemPalette16402,15947
typedef uint32_t TProgmemRGBPalette32[32];TProgmemRGBPalette32403,15994
typedef uint32_t TProgmemHSVPalette32[32];TProgmemHSVPalette32404,16037
#define TProgmemPalette32 TProgmemPalette32405,16080
typedef const uint8_t TProgmemRGBGradientPalette_byte ;TProgmemRGBGradientPalette_byte407,16128
typedef const TProgmemRGBGradientPalette_byte *TProgmemRGBGradientPalette_bytes;TProgmemRGBGradientPalette_bytes408,16184
typedef TProgmemRGBGradientPalette_bytes TProgmemRGBGradientPalettePtr;TProgmemRGBGradientPalettePtr409,16265
        uint8_t index;index412,16366
        uint8_t r;r413,16389
        uint8_t g;g414,16408
        uint8_t b;b415,16427
    uint32_t dword;dword417,16453
    uint8_t  bytes[4];bytes418,16473
} TRGBGradientPaletteEntryUnion;TRGBGradientPaletteEntryUnion419,16496
typedef uint8_t TDynamicRGBGradientPalette_byte ;TDynamicRGBGradientPalette_byte421,16530
typedef const TDynamicRGBGradientPalette_byte *TDynamicRGBGradientPalette_bytes;TDynamicRGBGradientPalette_bytes422,16580
typedef TDynamicRGBGradientPalette_bytes TDynamicRGBGradientPalettePtr;TDynamicRGBGradientPalettePtr423,16661
class CHSVPalette16 {CHSVPalette16438,17456
    CHSV entries[16];entries440,17486
    CHSVPalette16() {};CHSVPalette16441,17508
    CHSVPalette16( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,CHSVPalette16442,17532
    CHSVPalette16( const CHSVPalette16& rhs)CHSVPalette16453,18180
    CHSVPalette16& operator=( const CHSVPalette16& rhs)operator =457,18308
    CHSVPalette16( const TProgmemHSVPalette16& rhs)CHSVPalette16463,18470
    CHSVPalette16& operator=( const TProgmemHSVPalette16& rhs)operator =472,18764
    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))operator []483,19092
    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))operator []487,19202
    inline CHSV& operator[] (int x) __attribute__((always_inline))operator []492,19325
    inline const CHSV& operator[] (int x) const __attribute__((always_inline))operator []496,19440
    operator CHSV*()operator CHSV*501,19568
    bool operator==( const CHSVPalette16 rhs)operator ==506,19632
    bool operator!=( const CHSVPalette16 rhs)operator !=518,20017
    CHSVPalette16( const CHSV& c1)CHSVPalette16523,20113
    CHSVPalette16( const CHSV& c1, const CHSV& c2)CHSVPalette16527,20204
    CHSVPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3)CHSVPalette16531,20318
    CHSVPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)CHSVPalette16535,20452
class CHSVPalette256 {CHSVPalette256542,20611
    CHSV entries[256];entries544,20642
    CHSVPalette256() {};CHSVPalette256545,20665
    CHSVPalette256( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,CHSVPalette256546,20690
    CHSVPalette256( const CHSVPalette256& rhs)CHSVPalette256556,21179
    CHSVPalette256& operator=( const CHSVPalette256& rhs)operator =560,21309
    CHSVPalette256( const CHSVPalette16& rhs16)CHSVPalette256566,21473
    CHSVPalette256& operator=( const CHSVPalette16& rhs16)operator =570,21572
    CHSVPalette256( const TProgmemRGBPalette16& rhs)CHSVPalette256576,21705
    CHSVPalette256& operator=( const TProgmemRGBPalette16& rhs)operator =581,21823
    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))operator []588,21975
    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))operator []592,22085
    inline CHSV& operator[] (int x) __attribute__((always_inline))operator []597,22208
    inline const CHSV& operator[] (int x) const __attribute__((always_inline))operator []601,22323
    operator CHSV*()operator CHSV*606,22451
    bool operator==( const CHSVPalette256 rhs)operator ==611,22515
    bool operator!=( const CHSVPalette256 rhs)operator !=623,22902
    CHSVPalette256( const CHSV& c1)CHSVPalette256628,22999
    CHSVPalette256( const CHSV& c1, const CHSV& c2)CHSVPalette256632,23090
    CHSVPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3)CHSVPalette256636,23206
    CHSVPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)CHSVPalette256640,23342
class CRGBPalette16 {CRGBPalette16646,23502
    CRGB entries[16];entries648,23532
    CRGBPalette16() {};CRGBPalette16649,23554
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,CRGBPalette16650,23578
    CRGBPalette16( const CRGBPalette16& rhs)CRGBPalette16661,24226
    CRGBPalette16( const CRGB rhs[16])CRGBPalette16665,24354
    CRGBPalette16& operator=( const CRGBPalette16& rhs)operator =669,24468
    CRGBPalette16& operator=( const CRGB rhs[16])operator =674,24629
    CRGBPalette16( const CHSVPalette16& rhs)CRGBPalette16680,24777
    CRGBPalette16( const CHSV rhs[16])CRGBPalette16686,24956
    CRGBPalette16& operator=( const CHSVPalette16& rhs)operator =692,25127
    CRGBPalette16& operator=( const CHSV rhs[16])operator =699,25339
    CRGBPalette16( const TProgmemRGBPalette16& rhs)CRGBPalette16707,25544
    CRGBPalette16& operator=( const TProgmemRGBPalette16& rhs)operator =713,25721
    bool operator==( const CRGBPalette16 rhs)operator ==721,25932
    bool operator!=( const CRGBPalette16 rhs)operator !=733,26317
    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))operator []738,26413
    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))operator []742,26523
    inline CRGB& operator[] (int x) __attribute__((always_inline))operator []747,26646
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))operator []751,26761
    operator CRGB*()operator CRGB*756,26889
    CRGBPalette16( const CHSV& c1)CRGBPalette16761,26953
    CRGBPalette16( const CHSV& c1, const CHSV& c2)CRGBPalette16765,27044
    CRGBPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3)CRGBPalette16769,27158
    CRGBPalette16( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)CRGBPalette16773,27292
    CRGBPalette16( const CRGB& c1)CRGBPalette16778,27447
    CRGBPalette16( const CRGB& c1, const CRGB& c2)CRGBPalette16782,27538
    CRGBPalette16( const CRGB& c1, const CRGB& c2, const CRGB& c3)CRGBPalette16786,27656
    CRGBPalette16( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)CRGBPalette16790,27794
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )CRGBPalette16818,29271
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )operator =822,29370
    CRGBPalette16& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )loadDynamicGradientPalette864,30762
class CHSVPalette32 {CHSVPalette32912,32066
    CHSV entries[32];entries914,32096
    CHSVPalette32() {};CHSVPalette32915,32118
    CHSVPalette32( const CHSV& c00,const CHSV& c01,const CHSV& c02,const CHSV& c03,CHSVPalette32916,32142
    CHSVPalette32( const CHSVPalette32& rhs)CHSVPalette32929,32893
    CHSVPalette32& operator=( const CHSVPalette32& rhs)operator =933,33021
    CHSVPalette32( const TProgmemHSVPalette32& rhs)CHSVPalette32939,33187
    CHSVPalette32& operator=( const TProgmemHSVPalette32& rhs)operator =948,33481
    inline CHSV& operator[] (uint8_t x) __attribute__((always_inline))operator []959,33813
    inline const CHSV& operator[] (uint8_t x) const __attribute__((always_inline))operator []963,33923
    inline CHSV& operator[] (int x) __attribute__((always_inline))operator []968,34050
    inline const CHSV& operator[] (int x) const __attribute__((always_inline))operator []972,34165
    operator CHSV*()operator CHSV*977,34297
    bool operator==( const CHSVPalette32 rhs)operator ==982,34365
    bool operator!=( const CHSVPalette32 rhs)operator !=994,34750
    CHSVPalette32( const CHSV& c1)CHSVPalette32999,34846
    CHSVPalette32( const CHSV& c1, const CHSV& c2)CHSVPalette321003,34937
    CHSVPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3)CHSVPalette321007,35051
    CHSVPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)CHSVPalette321011,35185
class CRGBPalette32 {CRGBPalette321018,35348
    CRGB entries[32];entries1020,35378
    CRGBPalette32() {};CRGBPalette321021,35400
    CRGBPalette32( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,CRGBPalette321022,35424
    CRGBPalette32( const CRGBPalette32& rhs)CRGBPalette321035,36175
    CRGBPalette32( const CRGB rhs[32])CRGBPalette321039,36303
    CRGBPalette32& operator=( const CRGBPalette32& rhs)operator =1043,36417
    CRGBPalette32& operator=( const CRGB rhs[32])operator =1048,36578
    CRGBPalette32( const CHSVPalette32& rhs)CRGBPalette321054,36730
    CRGBPalette32( const CHSV rhs[32])CRGBPalette321060,36915
    CRGBPalette32& operator=( const CHSVPalette32& rhs)operator =1066,37086
    CRGBPalette32& operator=( const CHSV rhs[32])operator =1073,37304
    CRGBPalette32( const TProgmemRGBPalette32& rhs)CRGBPalette321081,37513
    CRGBPalette32& operator=( const TProgmemRGBPalette32& rhs)operator =1087,37690
    bool operator==( const CRGBPalette32 rhs)operator ==1095,37905
    bool operator!=( const CRGBPalette32 rhs)operator !=1107,38290
    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))operator []1112,38386
    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))operator []1116,38496
    inline CRGB& operator[] (int x) __attribute__((always_inline))operator []1121,38623
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))operator []1125,38738
    operator CRGB*()operator CRGB*1130,38870
    CRGBPalette32( const CHSV& c1)CRGBPalette321135,38938
    CRGBPalette32( const CHSV& c1, const CHSV& c2)CRGBPalette321139,39029
    CRGBPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3)CRGBPalette321143,39143
    CRGBPalette32( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)CRGBPalette321147,39277
    CRGBPalette32( const CRGB& c1)CRGBPalette321152,39436
    CRGBPalette32( const CRGB& c1, const CRGB& c2)CRGBPalette321156,39527
    CRGBPalette32( const CRGB& c1, const CRGB& c2, const CRGB& c3)CRGBPalette321160,39645
    CRGBPalette32( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)CRGBPalette321164,39783
    CRGBPalette32( const CRGBPalette16& rhs16)CRGBPalette321170,39951
    CRGBPalette32& operator=( const CRGBPalette16& rhs16)operator =1174,40049
    CRGBPalette32( const TProgmemRGBPalette16& rhs)CRGBPalette321180,40185
    CRGBPalette32& operator=( const TProgmemRGBPalette16& rhs)operator =1185,40302
    CRGBPalette32( TProgmemRGBGradientPalette_bytes progpal )CRGBPalette321215,41779
    CRGBPalette32& operator=( TProgmemRGBGradientPalette_bytes progpal )operator =1219,41878
    CRGBPalette32& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )loadDynamicGradientPalette1261,43300
class CRGBPalette256 {CRGBPalette2561309,44646
    CRGB entries[256];entries1311,44677
    CRGBPalette256() {};CRGBPalette2561312,44700
    CRGBPalette256( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,CRGBPalette2561313,44725
    CRGBPalette256( const CRGBPalette256& rhs)CRGBPalette2561323,45214
    CRGBPalette256( const CRGB rhs[256])CRGBPalette2561327,45344
    CRGBPalette256& operator=( const CRGBPalette256& rhs)operator =1331,45460
    CRGBPalette256& operator=( const CRGB rhs[256])operator =1336,45623
    CRGBPalette256( const CHSVPalette256& rhs)CRGBPalette2561342,45773
    CRGBPalette256( const CHSV rhs[256])CRGBPalette2561348,45945
    CRGBPalette256& operator=( const CHSVPalette256& rhs)operator =1354,46115
    CRGBPalette256& operator=( const CHSV rhs[256])operator =1361,46320
    CRGBPalette256( const CRGBPalette16& rhs16)CRGBPalette2561369,46524
    CRGBPalette256& operator=( const CRGBPalette16& rhs16)operator =1373,46623
    CRGBPalette256( const TProgmemRGBPalette16& rhs)CRGBPalette2561379,46756
    CRGBPalette256& operator=( const TProgmemRGBPalette16& rhs)operator =1384,46874
    bool operator==( const CRGBPalette256 rhs)operator ==1391,47026
    bool operator!=( const CRGBPalette256 rhs)operator !=1403,47413
    inline CRGB& operator[] (uint8_t x) __attribute__((always_inline))operator []1408,47510
    inline const CRGB& operator[] (uint8_t x) const __attribute__((always_inline))operator []1412,47620
    inline CRGB& operator[] (int x) __attribute__((always_inline))operator []1417,47743
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))operator []1421,47858
    operator CRGB*()operator CRGB*1426,47986
    CRGBPalette256( const CHSV& c1)CRGBPalette2561431,48050
    CRGBPalette256( const CHSV& c1, const CHSV& c2)CRGBPalette2561435,48143
    CRGBPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3)CRGBPalette2561439,48259
    CRGBPalette256( const CHSV& c1, const CHSV& c2, const CHSV& c3, const CHSV& c4)CRGBPalette2561443,48395
    CRGBPalette256( const CRGB& c1)CRGBPalette2561448,48552
    CRGBPalette256( const CRGB& c1, const CRGB& c2)CRGBPalette2561452,48645
    CRGBPalette256( const CRGB& c1, const CRGB& c2, const CRGB& c3)CRGBPalette2561456,48765
    CRGBPalette256( const CRGB& c1, const CRGB& c2, const CRGB& c3, const CRGB& c4)CRGBPalette2561460,48905
    CRGBPalette256( TProgmemRGBGradientPalette_bytes progpal )CRGBPalette2561465,49066
    CRGBPalette256& operator=( TProgmemRGBGradientPalette_bytes progpal )operator =1469,49166
    CRGBPalette256& loadDynamicGradientPalette( TDynamicRGBGradientPalette_bytes gpal )loadDynamicGradientPalette1488,49882
typedef enum { NOBLEND=0, LINEARBLEND=1 } TBlendType;NOBLEND1511,50539
typedef enum { NOBLEND=0, LINEARBLEND=1 } TBlendType;LINEARBLEND1511,50539
typedef enum { NOBLEND=0, LINEARBLEND=1 } TBlendType;TBlendType1511,50539
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,fill_palette1556,52231
void map_data_into_colors_through_palette(map_data_into_colors_through_palette1567,52609
#define DEFINE_GRADIENT_PALETTE(DEFINE_GRADIENT_PALETTE1670,57321
#define DECLARE_GRADIENT_PALETTE(DECLARE_GRADIENT_PALETTE1674,57444

lib/FastLED/wiring.cpp,46
#define FASTLED_INTERNALFASTLED_INTERNAL1,0

lib/FastLED/colorpalettes.cpp,892
#define __INC_COLORPALETTES_H__INC_COLORPALETTES_H2,30
#define FASTLED_INTERNALFASTLED_INTERNAL3,60
extern const TProgmemRGBPalette16 CloudColors_p FL_PROGMEM =FL_PROGMEM20,519
extern const TProgmemRGBPalette16 LavaColors_p FL_PROGMEM =FL_PROGMEM43,896
extern const TProgmemRGBPalette16 OceanColors_p FL_PROGMEM =FL_PROGMEM66,1231
extern const TProgmemRGBPalette16 ForestColors_p FL_PROGMEM =FL_PROGMEM89,1627
extern const TProgmemRGBPalette16 RainbowColors_p FL_PROGMEM =FL_PROGMEM113,2066
#define RainbowStripesColors_p RainbowStripesColors_p122,2369
extern const TProgmemRGBPalette16 RainbowStripeColors_p FL_PROGMEM =FL_PROGMEM123,2422
extern const TProgmemRGBPalette16 PartyColors_p FL_PROGMEM =FL_PROGMEM135,2926
extern const TProgmemRGBPalette16 HeatColors_p FL_PROGMEM =FL_PROGMEM149,3444
DEFINE_GRADIENT_PALETTE( Rainbow_gp ) {DEFINE_GRADIENT_PALETTE163,3868

lib/FastLED/hsv2rgb.cpp,1259
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
void hsv2rgb_raw(const struct CHSV & hsv, struct CRGB & rgb)hsv2rgb_raw54,2171
void hsv2rgb_raw(const struct CHSV & hsv, struct CRGB & rgb)hsv2rgb_raw59,2274
#define APPLY_DIMMING(APPLY_DIMMING67,2379
#define HSV_SECTION_6 HSV_SECTION_668,2408
#define HSV_SECTION_3 HSV_SECTION_369,2437
void hsv2rgb_raw_C (const struct CHSV & hsv, struct CRGB & rgb)hsv2rgb_raw_C71,2467
void hsv2rgb_raw_avr(const struct CHSV & hsv, struct CRGB & rgb)hsv2rgb_raw_avr160,5941
void hsv2rgb_spectrum( const CHSV& hsv, CRGB& rgb)hsv2rgb_spectrum256,9190
#define FORCE_REFERENCE(FORCE_REFERENCE270,9686
#define K255 K255273,9751
#define K171 K171274,9768
#define K170 K170275,9785
#define K85 K85276,9802
void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)hsv2rgb_rainbow278,9819
void hsv2rgb_raw(const struct CHSV * phsv, struct CRGB * prgb, int numLeds) {hsv2rgb_raw498,16609
void hsv2rgb_rainbow( const struct CHSV* phsv, struct CRGB * prgb, int numLeds) {hsv2rgb_rainbow504,16774
void hsv2rgb_spectrum( const struct CHSV* phsv, struct CRGB * prgb, int numLeds) {hsv2rgb_spectrum510,16947
#define FIXFRAC8(FIXFRAC8518,17124
CHSV rgb2hsv_approximate( const CRGB& rgb)rgb2hsv_approximate523,17313

lib/FastLED/bitswap.cpp,139
#define FASTLED_INTERNALFASTLED_INTERNAL1,0
void transpose8x1_noinline(unsigned char *A, unsigned char *B) {transpose8x1_noinline6,291

lib/FastLED/led_sysdefs.h,282
#define __INC_LED_SYSDEFS_H__INC_LED_SYSDEFS_H2,28
#define FASTLED_NAMESPACE_BEGINFASTLED_NAMESPACE_BEGIN41,1469
#define FASTLED_NAMESPACE_ENDFASTLED_NAMESPACE_END42,1501
#define FASTLED_USING_NAMESPACEFASTLED_USING_NAMESPACE43,1531
#define CLKS_PER_US CLKS_PER_US51,1730

lib/FastLED/platforms/arm/d21/led_sysdefs_arm_d21.h,389
#define __INC_LED_SYSDEFS_ARM_D21_H__INC_LED_SYSDEFS_ARM_D21_H2,36
#define FASTLED_ARMFASTLED_ARM5,74
#define FASTLED_ARM_M0_PLUSFASTLED_ARM_M0_PLUS6,94
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD9,151
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS14,256
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK18,333
#define cli(cli22,412
#define sei(sei23,444

lib/FastLED/platforms/arm/d21/fastled_arm_d21.h,61
#define __INC_FASTLED_ARM_D21_H__INC_FASTLED_ARM_D21_H2,32

lib/FastLED/platforms/arm/d21/clockless_arm_d21.h,773
#define __INC_CLOCKLESS_ARM_D21__INC_CLOCKLESS_ARM_D212,32
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS6,124
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController9,287
  typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t10,355
  typedef typename FastPinBB<DATA_PIN>::port_t data_t;data_t11,418
  data_t mPinMask;mPinMask13,474
  data_ptr_t mPort;mPort14,493
  CMinWait<WAIT_TIME> mWait;mWait15,513
  virtual void init() {init17,550
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate23,702
  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels25,763
  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal38,1192

lib/FastLED/platforms/arm/d21/fastpin_arm_d21.h,186
#define __INC_FASTPIN_ARM_SAM_H__INC_FASTPIN_ARM_SAM_H2,32
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,207
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,239

lib/FastLED/platforms/arm/nrf52/fastpin_arm_nrf52_variants.h,1314
#define __FASTPIN_ARM_NRF52_VARIANTS_H__FASTPIN_ARM_NRF52_VARIANTS_H2,39
#undef __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND5,160
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND13,464
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND56,2412
    #define MAX_PIN MAX_PIN59,2474
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND112,4863
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND164,7387
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND278,13707
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND317,15610
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND356,17473
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND399,19509
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND435,21210
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND458,22360
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND495,24218
        #define __FASTPIN_ARM_NRF52_VARIANT_FOUND__FASTPIN_ARM_NRF52_VARIANT_FOUND540,26539

lib/FastLED/platforms/arm/nrf52/arbiter_nrf52.h,1012
#define __INC_ARBITER_NRF52__INC_ARBITER_NRF522,28
typedef void (*FASTLED_NRF52_PWM_INTERRUPT_HANDLER)();FASTLED_NRF52_PWM_INTERRUPT_HANDLER10,147
typedef enum _FASTLED_NRF52_ENABLED_PWM_INSTANCE {_FASTLED_NRF52_ENABLED_PWM_INSTANCE19,481
    FASTLED_NRF52_PWM0_INSTANCE_IDX,FASTLED_NRF52_PWM0_INSTANCE_IDX21,580
    FASTLED_NRF52_PWM1_INSTANCE_IDX,FASTLED_NRF52_PWM1_INSTANCE_IDX24,672
    FASTLED_NRF52_PWM2_INSTANCE_IDX,FASTLED_NRF52_PWM2_INSTANCE_IDX27,764
    FASTLED_NRF52_PWM3_INSTANCE_IDX,FASTLED_NRF52_PWM3_INSTANCE_IDX30,856
    FASTLED_NRF52_PWM_INSTANCE_COUNTFASTLED_NRF52_PWM_INSTANCE_COUNT32,900
} FASTLED_NRF52_ENABLED_PWM_INSTANCES;FASTLED_NRF52_ENABLED_PWM_INSTANCES33,937
class PWM_Arbiter {PWM_Arbiter38,1177
template <uint32_t _PWM_ID> uint32_t                                      PWM_Arbiter<_PWM_ID>::s_PwmInUse  = 0;s_PwmInUse109,3907
template <uint32_t _PWM_ID> FASTLED_NRF52_PWM_INTERRUPT_HANDLER volatile  PWM_Arbiter<_PWM_ID>::s_Isr       = NULL;s_Isr110,4020

lib/FastLED/platforms/arm/nrf52/led_sysdefs_arm_nrf52.h,803
#define __LED_SYSDEFS_ARM_NRF52__LED_SYSDEFS_ARM_NRF522,32
#define FASTLED_ARMFASTLED_ARM4,65
    #define F_CPU F_CPU7,100
#define CLOCKLESS_FREQUENCY CLOCKLESS_FREQUENCY13,303
    #define F_TIMER F_TIMER16,406
    #define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM20,531
    #define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS24,651
#define FASTLED_NRF52_ENABLE_PWM_INSTANCE0FASTLED_NRF52_ENABLE_PWM_INSTANCE029,788
    #define FASTLED_NRF52_INLINE_ATTRIBUTE FASTLED_NRF52_INLINE_ATTRIBUTE32,872
    #define FASTLED_NRF52_INLINE_ATTRIBUTE FASTLED_NRF52_INLINE_ATTRIBUTE34,964
typedef __I  uint32_t RoReg;RoReg43,1230
typedef __IO uint32_t RwReg;RwReg44,1259
#define cli(cli46,1289
#define sei(sei47,1320
#define FASTLED_NRF52_DEBUGPRINT(FASTLED_NRF52_DEBUGPRINT49,1351

lib/FastLED/platforms/arm/nrf52/fastled_arm_nrf52.h,65
#define __INC_FASTLED_ARM_NRF52_H__INC_FASTLED_ARM_NRF52_H2,34

lib/FastLED/platforms/arm/nrf52/fastspi_arm_nrf52.h,3023
#define __FASTSPI_ARM_NRF52_H__FASTSPI_ARM_NRF52_H2,30
    #define FASTLED_ALL_PINS_HARDWARE_SPIFASTLED_ALL_PINS_HARDWARE_SPI9,125
        #define FASTLED_NRF52_SPIM FASTLED_NRF52_SPIM16,418
    class NRF52SPIOutput {NRF52SPIOutput25,801
        static bool s_InUse;s_InUse29,905
        static bool s_NeedToWait; // a data transfer was started, and completion event was not cleared.s_NeedToWait30,934
        static uint8_t  s_BufferIndex;s_BufferIndex45,1720
        static uint8_t  s_Buffer[2][2]; // 2x two-byte buffers, allows one buffer currently being sent, and a second one being prepped to send.s_Buffer46,1759
        struct spim_config {spim_config50,2047
            uint32_t inten;inten51,2076
            uint32_t shorts;shorts52,2104
            uint32_t sck_pin;sck_pin53,2133
            uint32_t mosi_pin;mosi_pin54,2163
            uint32_t miso_pin;miso_pin55,2194
            uint32_t frequency;frequency56,2225
            uint32_t config; // mode & bit orderconfig58,2334
            uint32_t orc;orc59,2383
            uint32_t csn_pin;csn_pin62,2474
            uint32_t csn_polarity; // CSNPOLcsn_polarity63,2504
            uint32_t csn_duration; // IFTIMING.CSNDURcsn_duration64,2549
            uint32_t rx_delay;     // IFTIMING.RXDELAYrx_delay65,2603
            uint32_t dcx_pin;      // PSELDCXdcx_pin66,2658
            uint32_t dcx_config;   // DCXCNTdcx_config67,2704
        } m_SpiSavedConfig;m_SpiSavedConfig70,2757
        void saveSpimConfig() {saveSpimConfig71,2785
        void restoreSpimConfig() {restoreSpimConfig89,3883
        NRF52SPIOutput() {}NRF52SPIOutput112,5133
        void init() {init119,5539
        void select() {select153,6811
        void release() {release161,6990
        static void waitFully() {waitFully169,7203
        static void wait() {wait181,7807
        static void writeByte(uint8_t b) {writeByte189,8139
        static void writeWord(uint16_t w) {writeWord211,8893
        static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw234,9819
        void writeBytesValue(uint8_t value, int len) {writeBytesValue239,10041
        void writeBytes(uint8_t *data, int len) {writeBytes247,10321
        template<class D> void writeBytes(uint8_t *data, int len) {writeBytes266,10953
        template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit283,11558
        template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels303,12429
    bool NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_InUse = false;s_InUse329,13681
    bool NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_NeedToWait = false;s_NeedToWait331,13848
    uint8_t NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_BufferIndex = 0;s_BufferIndex333,14020
    uint8_t NRF52SPIOutput<_DATA_PIN, _CLOCK_PIN, _SPI_CLOCK_DIVIDER>::s_Buffer[2][2] = {{0,0},{0,0}};s_Buffer335,14192

lib/FastLED/platforms/arm/nrf52/clockless_arm_nrf52.h,374
#define __INC_CLOCKLESS_ARM_NRF52__INC_CLOCKLESS_ARM_NRF522,34
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS9,124
#define FASTLED_NRF52_MAXIMUM_PIXELS_PER_STRING FASTLED_NRF52_MAXIMUM_PIXELS_PER_STRING10,156
#define FASTLED_NRF52_PWM_ID FASTLED_NRF52_PWM_ID16,514
class ClocklessController : public CPixelLEDController<_RGB_ORDER> {ClocklessController23,726

lib/FastLED/platforms/arm/nrf52/fastpin_arm_nrf52.h,4765
#define __FASTPIN_ARM_NRF52_H__FASTPIN_ARM_NRF52_H2,30
struct __generated_struct_NRF_P0 {__generated_struct_NRF_P075,2841
    FASTLED_NRF52_INLINE_ATTRIBUTE constexpr static uintptr_t r() {r76,2876
struct __generated_struct_NRF_P1 {__generated_struct_NRF_P180,2981
    FASTLED_NRF52_INLINE_ATTRIBUTE constexpr static uintptr_t r() {r81,3016
template <uint32_t _MASK, typename _PORT, uint8_t _PORT_NUMBER, uint8_t _PIN_NUMBER> class _ARMPIN  {_ARMPIN88,3228
  typedef volatile uint32_t * port_ptr_t;port_ptr_t90,3338
  typedef uint32_t port_t;port_t91,3380
  FASTLED_NRF52_INLINE_ATTRIBUTE static void       setOutput() {setOutput93,3408
  FASTLED_NRF52_INLINE_ATTRIBUTE static void       setInput()  {setInput104,4005
  FASTLED_NRF52_INLINE_ATTRIBUTE static void       hi()        { (reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUTSET = _MASK;            } // sets _MASK in the SET   OUTPUT register (output set high)hi115,4601
  FASTLED_NRF52_INLINE_ATTRIBUTE static void       lo()        { (reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUTCLR = _MASK;            } // sets _MASK in the CLEAR OUTPUT register (output set low)lo116,4804
  FASTLED_NRF52_INLINE_ATTRIBUTE static void       toggle()    { (reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUT ^= _MASK;              } // toggles _MASK bits in the OUTPUT GPIO port directlytoggle117,5006
  FASTLED_NRF52_INLINE_ATTRIBUTE static void       strobe()    { toggle();     toggle();                } // BUGBUG -- Is this used by FastLED?  Without knowing (for example) SPI Speed?strobe118,5203
  FASTLED_NRF52_INLINE_ATTRIBUTE static port_t     hival()     { return (reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUT | _MASK;        } // sets all _MASK bit(s) in the OUTPUT GPIO port to 1hival119,5389
  FASTLED_NRF52_INLINE_ATTRIBUTE static port_t     loval()     { return (reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUT & ~_MASK;       } // sets all _MASK bit(s) in the OUTPUT GPIO port to 0loval120,5585
  FASTLED_NRF52_INLINE_ATTRIBUTE static port_ptr_t port()      { return &((reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUT);             } // gets raw pointer to OUTPUT          GPIO portport121,5781
  FASTLED_NRF52_INLINE_ATTRIBUTE static port_ptr_t cport()     { return &((reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUTCLR);          } // gets raw pointer to SET   DIRECTION GPIO portcport122,5972
  FASTLED_NRF52_INLINE_ATTRIBUTE static port_ptr_t sport()     { return &((reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUTSET);          } // gets raw pointer to CLEAR DIRECTION GPIO portsport123,6163
  FASTLED_NRF52_INLINE_ATTRIBUTE static port_t     mask()      { return _MASK;                          } // gets the value of _MASKmask124,6354
  FASTLED_NRF52_INLINE_ATTRIBUTE static void hi (register port_ptr_t port) { hi();                      } // sets _MASK in the SET   OUTPUT register (output set high)hi125,6487
  FASTLED_NRF52_INLINE_ATTRIBUTE static void lo (register port_ptr_t port) { lo();                      } // sets _MASK in the CLEAR OUTPUT register (output set low)lo126,6654
  FASTLED_NRF52_INLINE_ATTRIBUTE static void set(register port_t     val ) { (reinterpret_cast<NRF_GPIO_Type*>(_PORT::r()))->OUT = val;     } // sets entire port's value (optimization used by FastLED)set127,6820
  FASTLED_NRF52_INLINE_ATTRIBUTE static void fastset(register port_ptr_t port, register port_t val) { *port = val; }fastset128,7021
  constexpr                      static uint32_t   nrf_pin2() { return NRF_GPIO_PIN_MAP(_PORT_NUMBER, _PIN_NUMBER); }nrf_pin2129,7138
  constexpr                      static bool       LowSpeedOnlyRecommended() {LowSpeedOnlyRecommended130,7256
    #undef _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT_FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT132,7372
        #define _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT139,7679
        #define _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT153,8214
        #define _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT169,8756
        #define _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT190,9588
        #define _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT _FASTLED_NRF52_LOW_SPEED_ONLY_BOARD_DETECT233,11414
  FASTLED_NRF52_INLINE_ATTRIBUTE static uint32_t   nrf_pin()  { return NRF_GPIO_PIN_MAP(_PORT_NUMBER, _PIN_NUMBER); }nrf_pin278,13280
#define FL_DEFPIN(FL_DEFPIN293,13811
#define _DEFPIN_ARM_IDENTITY_P0(_DEFPIN_ARM_IDENTITY_P0303,14291
#define _DEFPIN_ARM_IDENTITY_P1(_DEFPIN_ARM_IDENTITY_P1313,14715
#define HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT326,15243

lib/FastLED/platforms/arm/common/m0clockless.h,929
#define __INC_M0_CLOCKLESS_H__INC_M0_CLOCKLESS_H2,29
struct M0ClocklessData {M0ClocklessData4,59
  uint8_t d[3];d5,84
  uint8_t e[3];e6,100
  uint8_t adj;adj7,116
  uint8_t pad;pad8,131
  uint32_t s[3];s9,146
showLedData(volatile uint32_t *_port, uint32_t _bitmask, const uint8_t *_leds, uint32_t num_leds, struct M0ClocklessData *pData) {showLedData14,267
#define M0_ASM_ARGS M0_ASM_ARGS182,5806
#define LOOP LOOP211,6983
#define HI2 HI2212,7020
#define _D1 _D1213,7086
#define QLO4 QLO4214,7147
#define LOADLEDS3(LOADLEDS3215,7216
#define _D2(_D2216,7296
#define LO2 LO2217,7364
#define _D3(_D3218,7430
#define LOADDITHER7(LOADDITHER7219,7498
#define DITHER5 DITHER5220,7574
#define SCALE4(SCALE4221,7623
#define SWAPBBN1 SWAPBBN1222,7702
#define ADJDITHER7(ADJDITHER7223,7752
#define INCLEDS3 INCLEDS3224,7840
#define CMPLOOP5 CMPLOOP5225,7905
#define NOTHING NOTHING226,7963

lib/FastLED/platforms/arm/mxrt1062/fastpin_arm_mxrt1062.h,188
#define __FASTPIN_ARM_MXRT1062_H__FASTPIN_ARM_MXRT1062_H2,33
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,209
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,241

lib/FastLED/platforms/arm/mxrt1062/led_sysdefs_arm_mxrt1062.h,657
#define __INC_LED_SYSDEFS_ARM_MXRT1062_H__INC_LED_SYSDEFS_ARM_MXRT1062_H2,41
#define FASTLED_TEENSY4FASTLED_TEENSY44,83
#define FASTLED_ARMFASTLED_ARM5,107
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD8,156
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS13,261
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK17,338
#define CLK_DBL CLK_DBL21,401
typedef volatile       uint32_t RoReg; /**< Read only 8-bit register (volatile const unsigned int) */RoReg30,604
typedef volatile       uint32_t RwReg; /**< Read-Write 8-bit register (volatile unsigned int) */RwReg31,706
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM39,963

lib/FastLED/platforms/arm/mxrt1062/clockless_arm_mxrt1062.h,1449
#define __INC_CLOCKLESS_ARM_MXRT1062_H__INC_CLOCKLESS_ARM_MXRT1062_H2,39
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS10,284
#define _FASTLED_NS_TO_DWT(_FASTLED_NS_TO_DWT12,317
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController15,526
	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t16,594
	typedef typename FastPin<DATA_PIN>::port_t data_t;data_t17,654
	data_t mPinMask;mPinMask19,707
	data_ptr_t mPort;mPort20,725
	CMinWait<WAIT_TIME> mWait;mWait21,744
	uint32_t off[3];off22,772
	static constexpr int __DATA_PIN() { return DATA_PIN; }__DATA_PIN25,799
	static constexpr int __T1() { return T1; }__T126,855
	static constexpr int __T2() { return T2; }__T227,899
	static constexpr int __T3() { return T3; }__T328,943
	static constexpr EOrder __RGB_ORDER() { return RGB_ORDER; }__RGB_ORDER29,987
	static constexpr int __XTRA0() { return XTRA0; }__XTRA030,1048
	static constexpr bool __FLIP() { return FLIP; }__FLIP31,1098
	static constexpr int __WAIT_TIME() { return WAIT_TIME; }__WAIT_TIME32,1147
	virtual void init() {init34,1206
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels43,1385
	template<int BITS> __attribute__ ((always_inline)) inline void writeBits(register uint32_t & next_mark, register uint32_t & b)  {writeBits52,1610
	uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal80,2397

lib/FastLED/platforms/arm/mxrt1062/fastspi_arm_mxrt1062.h,1591
#define __INC_FASTSPI_ARM_MXRT1062_H__INC_FASTSPI_ARM_MXRT1062_H2,37
class Teesy4HardwareSPIOutput {Teesy4HardwareSPIOutput10,291
	Selectable *m_pSelect;m_pSelect11,323
  uint32_t  m_bitCount;m_bitCount12,347
  uint32_t m_bitData;m_bitData13,371
  inline IMXRT_LPSPI_t & port() __attribute__((always_inline)) {port14,393
	Teesy4HardwareSPIOutput() { m_pSelect = NULL; m_bitCount = 0;}Teesy4HardwareSPIOutput26,637
	Teesy4HardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; m_bitCount = 0;}Teesy4HardwareSPIOutput27,701
	void setSelect(Selectable *pSelect) { /* TODO */ }setSelect30,853
	void init() { _SPIObject.begin(); }init33,939
	void inline select() __attribute__((always_inline)) {select36,1001
	void inline release() __attribute__((always_inline)) {release43,1255
	static void waitFully() { /* TODO */ }waitFully49,1452
	void inline writeByte(uint8_t b) __attribute__((always_inline)) {writeByte52,1566
	void inline writeWord(uint16_t w) __attribute__((always_inline)) {writeWord69,2314
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw75,2534
	void writeBytesValue(uint8_t value, int len) {writeBytesValue80,2733
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes85,2930
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes98,3317
	template <uint8_t BIT> inline void writeBit(uint8_t b) {writeBit101,3503
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels115,4070

lib/FastLED/platforms/arm/mxrt1062/fastled_arm_mxrt1062.h,71
#define __INC_FASTLED_ARM_MXRT1062_H__INC_FASTLED_ARM_MXRT1062_H2,37

lib/FastLED/platforms/arm/mxrt1062/block_clockless_arm_mxrt1062.h,1804
#define __INC_BLOCK_CLOCKLESS_ARM_MXRT1062_H__INC_BLOCK_CLOCKLESS_ARM_MXRT1062_H2,45
#define __FL_T4_MASK __FL_T4_MASK10,296
class FlexibleInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, __FL_T4_MASK> {FlexibleInlineBlockClocklessController12,476
  uint8_t m_bitOffsets[16];m_bitOffsets14,585
  uint8_t m_nActualLanes;m_nActualLanes15,613
  uint8_t m_nLowBit;m_nLowBit16,639
  uint8_t m_nHighBit;m_nHighBit17,660
  uint32_t m_nWriteMask;m_nWriteMask18,682
  uint8_t m_nOutBlocks;m_nOutBlocks19,707
  uint32_t m_offsets[3];m_offsets20,731
  CMinWait<WAIT_TIME> mWait;mWait21,756
  virtual int size() { return CLEDController::size() * m_nActualLanes; }size24,794
#define _BLOCK_PIN(_BLOCK_PIN29,1110
  virtual void init() {init37,1473
  virtual void showPixels(PixelController<RGB_ORDER, LANES, __FL_T4_MASK> & pixels) {showPixels96,2706
    uint8_t bytes[32];bytes111,3091
    uint8_t bg[4][8];bg112,3114
    uint16_t shorts[16];shorts113,3136
    uint32_t raw[8];raw114,3161
  } _outlines;_outlines115,3182
  template<int BITS,int PX> __attribute__ ((always_inline)) inline void writeBits(register uint32_t & next_mark, register _outlines & b, PixelController<RGB_ORDER, LANES, __FL_T4_MASK> &pixels) {writeBits118,3199
  uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, __FL_T4_MASK> &allpixels) {showRGBInternal157,4595
class __FIBCC : public FlexibleInlineBlockClocklessController<NUM_LANES,DATA_PIN,CHIPSET<DATA_PIN,RGB_ORDER>::__T1(),CHIPSET<DATA_PIN,RGB_ORDER>::__T2(),CHIPSET<DATA_PIN,RGB_ORDER>::__T3(),RGB_ORDER,CHIPSET<DATA_PIN,RGB_ORDER>::__XTRA0(),CHIPSET<DATA_PIN,RGB_ORDER>::__FLIP(),CHIPSET<DATA_PIN,RGB_ORDER>::__WAIT_TIME()> {};__FIBCC206,6036
#define __FASTLED_HAS_FIBCC __FASTLED_HAS_FIBCC208,6361

lib/FastLED/platforms/arm/kl26/clockless_arm_kl26.h,776
#define __INC_CLOCKLESS_ARM_KL26__INC_CLOCKLESS_ARM_KL262,33
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS6,126
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController9,289
  typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t10,357
  typedef typename FastPinBB<DATA_PIN>::port_t data_t;data_t11,420
  data_t mPinMask;mPinMask13,476
  data_ptr_t mPort;mPort14,495
  CMinWait<WAIT_TIME> mWait;mWait15,515
  virtual void init() {init17,552
  virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate23,704
  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels25,766
  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal41,1345

lib/FastLED/platforms/arm/kl26/fastspi_arm_kl26.h,1963
#define __INC_FASTSPI_ARM_KL26_h__INC_FASTSPI_ARM_KL26_h2,33
template <int VAL> void getScalars(uint8_t & sppr, uint8_t & spr) {getScalars6,92
#define SPIX SPIX82,3017
#define ARM_HARDWARE_SPIARM_HARDWARE_SPI83,3056
class ARMHardwareSPIOutput {ARMHardwareSPIOutput86,3176
  Selectable *m_pSelect;m_pSelect87,3205
  static inline void enable_pins(void) __attribute__((always_inline)) {enable_pins89,3231
  static inline void disable_pins(void) __attribute((always_inline)) {__attribute107,3962
  void setSPIRate() {setSPIRate125,4832
  ARMHardwareSPIOutput() { m_pSelect = NULL; }ARMHardwareSPIOutput138,5147
  ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }ARMHardwareSPIOutput139,5194
  void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect142,5312
  void init() {init145,5410
  void inline select() __attribute__((always_inline)) {select165,5914
  void inline release() __attribute__((always_inline)) {release173,6091
  static void wait() __attribute__((always_inline)) { while(!(SPIX.S & SPI_S_SPTEF));  }wait179,6261
  void waitFully() { wait(); }waitFully182,6403
  template <uint8_t BIT> inline static void writeBit(uint8_t b) { /* TODO */ }writeBit185,6533
  static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.DL = b; }writeByte188,6685
  static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w & 0xFF); }writeWord190,6848
  static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw193,7078
  void writeBytesValue(uint8_t value, int len) {writeBytesValue198,7272
  template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes209,7532
  void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes222,7868
  template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels225,7958

lib/FastLED/platforms/arm/kl26/fastpin_arm_kl26.h,180
#define __FASTPIN_ARM_KL26_H__FASTPIN_ARM_KL26_H2,29
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,202
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,234

lib/FastLED/platforms/arm/kl26/led_sysdefs_arm_kl26.h,737
#define __INC_LED_SYSDEFS_ARM_KL26_H__INC_LED_SYSDEFS_ARM_KL26_H2,37
#define FASTLED_TEENSYLCFASTLED_TEENSYLC4,75
#define FASTLED_ARMFASTLED_ARM5,100
#define FASTLED_ARM_M0_PLUSFASTLED_ARM_M0_PLUS6,120
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD9,177
#define FASTLED_SPI_BYTE_ONLYFASTLED_SPI_BYTE_ONLY12,215
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK20,393
#define CLK_DBL CLK_DBL24,456
typedef volatile       uint8_t RoReg; /**< Read only 8-bit register (volatile const unsigned int) */RoReg33,659
typedef volatile       uint8_t RwReg; /**< Read-Write 8-bit register (volatile unsigned int) */RwReg34,760
#  define MS_COUNTER MS_COUNTER38,911
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM44,1137

lib/FastLED/platforms/arm/kl26/fastled_arm_kl26.h,63
#define __INC_FASTLED_ARM_KL26_H__INC_FASTLED_ARM_KL26_H2,33

lib/FastLED/platforms/arm/nrf51/fastspi_arm_nrf51.h,2221
#define __INC_FASTSPI_NRF_H__INC_FASTSPI_NRF_H2,28
#define FASTLED_ALL_PINS_HARDWARE_SPIFASTLED_ALL_PINS_HARDWARE_SPI7,106
class NRF51SPIOutput {NRF51SPIOutput13,595
  struct saveData {saveData15,619
    uint32_t sck;sck16,639
    uint32_t mosi;mosi17,657
    uint32_t miso;miso18,676
    uint32_t freq;freq19,695
    uint32_t enable;enable20,714
  } mSavedData;mSavedData21,735
  void saveSPIData() {saveSPIData23,752
  void restoreSPIData() {restoreSPIData31,989
  NRF51SPIOutput() { FastPin<_DATA_PIN>::setOutput(); FastPin<_CLOCK_PIN>::setOutput(); }NRF51SPIOutput40,1237
  NRF51SPIOutput(Selectable *pSelect) {  FastPin<_DATA_PIN>::setOutput(); FastPin<_CLOCK_PIN>::setOutput();  }NRF51SPIOutput41,1327
  void setSelect(Selectable *pSelect) { /* TODO */ }setSelect44,1487
  void init() {init47,1575
  void select() { saveSPIData(); init(); }select59,1901
  void release() { shouldWait(); restoreSPIData(); }release62,1972
  static bool shouldWait(bool wait = false) __attribute__((always_inline)) __attribute__((always_inline)) {shouldWait64,2026
  static void waitFully() __attribute__((always_inline)){ if(shouldWait()) { while(NRF_SPI0->EVENTS_READY==0); } NRF_SPI0->INTENCLR; }waitFully74,2502
  static void wait() __attribute__((always_inline)){ if(shouldWait()) { while(NRF_SPI0->EVENTS_READY==0); } NRF_SPI0->INTENCLR; }wait75,2637
  static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); NRF_SPI0->TXD = b; NRF_SPI0->INTENCLR; shouldWait(true); }writeByte78,2840
  static void writeWord(uint16_t w) __attribute__((always_inline)){ writeByte(w>>8); writeByte(w & 0xFF);  }writeWord81,3048
  static void writeBytesValueRaw(uint8_t value, int len) { while(len--) { writeByte(value);  } }writeBytesValueRaw84,3278
  void writeBytesValue(uint8_t value, int len) {writeBytesValue87,3467
  template<class D> void writeBytes(uint8_t *data, int len) {writeBytes97,3709
  void writeBytes(uint8_t *data, int len) {writeBytes108,3944
  template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit113,4129
  template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels126,4443

lib/FastLED/platforms/arm/nrf51/led_sysdefs_arm_nrf51.h,867
#define __LED_SYSDEFS_ARM_NRF51__LED_SYSDEFS_ARM_NRF512,32
#define NRF51NRF515,79
#define LED_TIMER LED_TIMER8,101
#define FASTLED_NO_PINMAPFASTLED_NO_PINMAP9,130
#define FASTLED_HAS_CLOCKLESSFASTLED_HAS_CLOCKLESS10,156
#define FASTLED_SPI_BYTE_ONLYFASTLED_SPI_BYTE_ONLY12,187
#define FASTLED_ARMFASTLED_ARM14,218
#define FASTLED_ARM_M0FASTLED_ARM_M015,238
#define F_CPU F_CPU18,276
typedef volatile uint32_t RoReg;RoReg25,369
typedef volatile uint32_t RwReg;RwReg26,402
typedef uint32_t prog_uint32_t;prog_uint32_t27,435
typedef uint8_t boolean;boolean28,467
#define PROGMEMPROGMEM30,493
#define NO_PROGMEMNO_PROGMEM31,509
#define NEED_CXX_BITSNEED_CXX_BITS32,528
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM36,616
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS40,687
#define cli(cli43,730
#define sei(sei44,762

lib/FastLED/platforms/arm/nrf51/clockless_arm_nrf51.h,978
#define __INC_CLOCKLESS_ARM_NRF51__INC_CLOCKLESS_ARM_NRF512,34
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS7,118
#define SEI_CHK SEI_CHK10,185
#define CLI_CHK CLI_CHK11,309
#define INNER_SEI INNER_SEI12,406
#define SEI_CHKSEI_CHK14,437
#define CLI_CHKCLI_CHK15,453
#define INNER_SEI INNER_SEI16,469
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController22,679
  typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t23,747
  typedef typename FastPinBB<DATA_PIN>::port_t data_t;data_t24,810
  data_t mPinMask;mPinMask26,866
  data_ptr_t mPort;mPort27,885
  CMinWait<WAIT_TIME> mWait;mWait28,905
  virtual void init() {init30,942
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate36,1094
  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels38,1155
  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal51,1584

lib/FastLED/platforms/arm/nrf51/fastpin_arm_nrf51.h,3302
#define __FASTPIN_ARM_NRF51_H__FASTPIN_ARM_NRF51_H2,30
  __IO uint32_t  OUT;                               /*!< Write GPIO port.                                                      */OUT58,3093
  __IO uint32_t  OUTSET;                            /*!< Set individual bits in GPIO port.                                     */OUTSET59,3223
  __IO uint32_t  OUTCLR;                            /*!< Clear individual bits in GPIO port.                                   */OUTCLR60,3353
  __I  uint32_t  IN;                                /*!< Read GPIO port.                                                       */IN61,3483
  __IO uint32_t  DIR;                               /*!< Direction of GPIO pins.                                               */DIR62,3613
  __IO uint32_t  DIRSET;                            /*!< DIR set register.                                                     */DIRSET63,3743
  __IO uint32_t  DIRCLR;                            /*!< DIR clear register.                                                   */DIRCLR64,3873
  __I  uint32_t  RESERVED1[120];RESERVED165,4003
  __IO uint32_t  PIN_CNF[32];                       /*!< Configuration of GPIO pins.                                           */PIN_CNF66,4036
} FL_NRF_GPIO_Type;FL_NRF_GPIO_Type67,4166
#define FL_NRF_GPIO_BASE FL_NRF_GPIO_BASE69,4187
#define FL_NRF_GPIO FL_NRF_GPIO70,4243
template<uint8_t PIN, uint32_t _MASK> class _ARMPIN {_ARMPIN72,4337
  typedef volatile uint32_t * port_ptr_t;port_ptr_t74,4399
  typedef uint32_t port_t;port_t75,4441
  inline static void setOutput() { FL_NRF_GPIO->DIRSET = _MASK; }setOutput77,4469
  inline static void setInput() { FL_NRF_GPIO->DIRCLR = _MASK; }setInput78,4535
  inline static void hi() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUTSET = _MASK; }hi80,4601
  inline static void lo() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUTCLR= _MASK; }lo81,4692
  inline static void set(register port_t val) __attribute__ ((always_inline)) { FL_NRF_GPIO->OUT = val; }set82,4782
  inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }strobe84,4889
  inline static void toggle() __attribute__ ((always_inline)) { FL_NRF_GPIO->OUT ^= _MASK; }toggle86,4976
  inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }hi88,5070
  inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }lo89,5162
  inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }fastset90,5254
  inline static port_t hival() __attribute__ ((always_inline)) { return FL_NRF_GPIO->OUT | _MASK; }hival92,5380
  inline static port_t loval() __attribute__ ((always_inline)) { return FL_NRF_GPIO->OUT & ~_MASK; }loval93,5480
  inline static port_ptr_t port() __attribute__ ((always_inline)) { return &FL_NRF_GPIO->OUT; }port94,5581
  inline static port_t mask() __attribute__ ((always_inline)) { return _MASK; }mask95,5677
  inline static bool isset() __attribute__ ((always_inline)) { return (FL_NRF_GPIO->IN & _MASK) != 0; }isset97,5758
#define _FL_DEFPIN(_FL_DEFPIN101,5867
#define MAX_PIN MAX_PIN105,5991
#define HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT115,6513

lib/FastLED/platforms/arm/nrf51/fastled_arm_nrf51.h,65
#define __INC_FASTLED_ARM_NRF51_H__INC_FASTLED_ARM_NRF51_H2,34

lib/FastLED/platforms/arm/sam/fastled_arm_sam.h,61
#define __INC_FASTLED_ARM_SAM_H__INC_FASTLED_ARM_SAM_H2,32

lib/FastLED/platforms/arm/sam/clockless_arm_sam.h,1062
#define __INC_CLOCKLESS_ARM_SAM_H__INC_CLOCKLESS_ARM_SAM_H2,34
#define TADJUST TADJUST12,327
#define TOTAL TOTAL13,345
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS15,407
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController18,570
	typedef typename FastPinBB<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t19,638
	typedef typename FastPinBB<DATA_PIN>::port_t data_t;data_t20,700
	data_t mPinMask;mPinMask22,755
	data_ptr_t mPort;mPort23,773
	CMinWait<WAIT_TIME> mWait;mWait24,792
	virtual void init() {init26,828
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate32,972
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels36,1045
	template<int BITS>  __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register uint8_t & b) {writeBits45,1265
#define FORCE_REFERENCE(FORCE_REFERENCE70,2235
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal73,2475

lib/FastLED/platforms/arm/sam/fastpin_arm_sam.h,186
#define __INC_FASTPIN_ARM_SAM_H__INC_FASTPIN_ARM_SAM_H2,32
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,208
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,240

lib/FastLED/platforms/arm/sam/clockless_block_arm_sam.h,1582
#define __INC_BLOCK_CLOCKLESS_H__INC_BLOCK_CLOCKLESS_H2,33
#define PORT_MASK PORT_MASK15,756
#define FASTLED_HAS_BLOCKLESS FASTLED_HAS_BLOCKLESS17,825
#define PORTD_FIRST_PIN PORTD_FIRST_PIN19,858
#define PORTA_FIRST_PIN PORTA_FIRST_PIN20,885
#define PORTB_FIRST_PIN PORTB_FIRST_PIN21,912
  uint8_t bytes[8];bytes24,956
  uint32_t raw[2];raw25,976
} Lines;Lines26,995
#define TADJUST TADJUST28,1005
#define TOTAL TOTAL29,1023
#define T1_MARK T1_MARK30,1084
#define T2_MARK T2_MARK31,1123
class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {InlineBlockClocklessController33,1306
	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;data_ptr_t34,1403
	typedef typename FastPin<FIRST_PIN>::port_t data_t;data_t35,1464
	data_t mPinMask;mPinMask37,1518
	data_ptr_t mPort;mPort38,1536
	CMinWait<WAIT_TIME> mWait;mWait39,1555
	virtual int size() { return CLEDController::size() * LANES; }size41,1591
	virtual void init() {init42,1654
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate82,3083
  virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {showPixels84,3144
	static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {showRGBInternal91,3308
  template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, Lines & b3, PixelController<RGB_ORDER,LANES, PORT_MASK> &pixels) { // , register uint32_t & b2)  {writeBits142,4734

lib/FastLED/platforms/arm/sam/fastspi_arm_sam.h,2092
#define __INC_FASTSPI_ARM_SAM_H__INC_FASTSPI_ARM_SAM_H2,32
#define m_SPI m_SPI7,115
class SAMHardwareSPIOutput {SAMHardwareSPIOutput10,221
	Selectable *m_pSelect;m_pSelect11,250
	static inline void waitForEmpty() { while ((m_SPI->SPI_SR & SPI_SR_TDRE) == 0); }waitForEmpty13,275
	void enableConfig() { m_SPI->SPI_WPMR &= ~SPI_WPMR_WPEN; }enableConfig15,359
	void disableConfig() { m_SPI->SPI_WPMR |= SPI_WPMR_WPEN; }disableConfig16,419
	void enableSPI() { m_SPI->SPI_CR = SPI_CR_SPIEN; }enableSPI18,480
	void disableSPI() { m_SPI->SPI_CR = SPI_CR_SPIDIS; }disableSPI19,532
	void resetSPI() { m_SPI->SPI_CR = SPI_CR_SWRST; }resetSPI20,586
	static inline void readyTransferBits(register uint32_t bits) {readyTransferBits22,638
	template<int BITS> static inline void writeBits(uint16_t w) {writeBits29,989
	SAMHardwareSPIOutput() { m_pSelect = NULL; }SAMHardwareSPIOutput35,1127
	SAMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }SAMHardwareSPIOutput36,1173
	void setSelect(Selectable *pSelect) { /* TODO */ }setSelect39,1289
	void init() {init42,1375
	void inline select() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->select(); } }select73,2387
	void inline release() __attribute__((always_inline)) { if(m_pSelect != NULL) { m_pSelect->release(); } }release76,2518
	void waitFully() { while((m_SPI->SPI_SR & SPI_SR_TXEMPTY) == 0); }waitFully79,2676
	static void writeByte(uint8_t b) {writeByte82,2816
	static void writeWord(uint16_t w) {writeWord87,2946
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw92,3087
	void writeBytesValue(uint8_t value, int len) {writeBytesValue97,3276
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes101,3383
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes113,3680
	template <uint8_t BIT> inline void writeBit(uint8_t b) {writeBit117,3963
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels134,4507

lib/FastLED/platforms/arm/sam/led_sysdefs_arm_sam.h,610
#define __INC_LED_SYSDEFS_ARM_SAM_H__INC_LED_SYSDEFS_ARM_SAM_H2,36
#define FASTLED_ARMFASTLED_ARM5,74
#define DUE_TIMER_GROUP DUE_TIMER_GROUP9,164
#define DUE_TIMER_CHANNEL DUE_TIMER_CHANNEL13,224
#define DUE_TIMER DUE_TIMER16,260
#define DUE_TIMER_ID DUE_TIMER_ID17,344
#define DUE_TIMER_VAL DUE_TIMER_VAL18,416
#define DUE_TIMER_RUNNING DUE_TIMER_RUNNING19,492
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD22,618
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS27,723
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK31,800
#define cli(cli35,879
#define sei(sei36,934

lib/FastLED/platforms/arm/stm32/fastled_arm_stm32.h,61
#define __INC_FASTLED_ARM_SAM_H__INC_FASTLED_ARM_SAM_H2,32

lib/FastLED/platforms/arm/stm32/fastpin_arm_stm32.h,182
#define __FASTPIN_ARM_STM32_H__FASTPIN_ARM_STM32_H2,30
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,204
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,236

lib/FastLED/platforms/arm/stm32/cm3_regs.h,3825
#define __CM3_REGS__CM3_REGS2,19
  #define   __I __I7,79
  #define   __I __I9,182
#define     __O __O11,286
#define     __IO __IO12,383
  __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register    */DHCSR17,499
  __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register        */DCRSR18,614
  __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register            */DCRDR19,729
  __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */DEMCR20,844
} CoreDebug_Type;CoreDebug_Type21,959
#define CoreDebug_BASE CoreDebug_BASE23,978
#define CoreDebug CoreDebug24,1091
#define CoreDebug_DEMCR_TRCENA_Pos CoreDebug_DEMCR_TRCENA_Pos26,1205
#define CoreDebug_DEMCR_TRCENA_Msk CoreDebug_DEMCR_TRCENA_Msk27,1336
  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                          */CTRL31,1481
  __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register                      */CYCCNT32,1593
  __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register                        */CPICNT33,1705
  __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register         */EXCCNT34,1817
  __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register                      */SLEEPCNT35,1929
  __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register                        */LSUCNT36,2041
  __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register         */FOLDCNT37,2153
  __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register           */PCSR38,2265
  __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0                     */COMP039,2377
  __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                           */MASK040,2489
  __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0                       */FUNCTION041,2601
       uint32_t RESERVED0[1];RESERVED042,2713
  __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1                     */COMP143,2743
  __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                           */MASK144,2855
  __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1                       */FUNCTION145,2967
       uint32_t RESERVED1[1];RESERVED146,3079
  __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2                     */COMP247,3109
  __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                           */MASK248,3221
  __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2                       */FUNCTION249,3333
       uint32_t RESERVED2[1];RESERVED250,3445
  __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3                     */COMP351,3475
  __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                           */MASK352,3587
  __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3                       */FUNCTION353,3699
} DWT_Type;DWT_Type54,3811
#define DWT_BASE DWT_BASE57,3825
#define DWT DWT58,3938
#define DWT_CTRL_CYCCNTENA_Pos DWT_CTRL_CYCCNTENA_Pos60,4052
#define DWT_CTRL_CYCCNTENA_Msk DWT_CTRL_CYCCNTENA_Msk61,4176

lib/FastLED/platforms/arm/stm32/clockless_arm_stm32.h,1033
#define __INC_CLOCKLESS_ARM_STM32_H__INC_CLOCKLESS_ARM_STM32_H2,36
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS8,296
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController11,455
  typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t12,523
  typedef typename FastPin<DATA_PIN>::port_t data_t;data_t13,584
  data_t mPinMask;mPinMask15,638
  data_ptr_t mPort;mPort16,657
  CMinWait<WAIT_TIME> mWait;mWait17,677
  virtual void init() {init19,714
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate25,860
  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels29,933
#define _CYCCNT _CYCCNT38,1161
  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {writeBits40,1216
  static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal70,2271

lib/FastLED/platforms/arm/stm32/led_sysdefs_arm_stm32.h,1077
#define __INC_LED_SYSDEFS_ARM_SAM_H__INC_LED_SYSDEFS_ARM_SAM_H2,36
 #define FASTLED_NAMESPACE_BEGIN FASTLED_NAMESPACE_BEGIN8,127
 #define FASTLED_NAMESPACE_END FASTLED_NAMESPACE_END9,182
 #define FASTLED_USING_NAMESPACE FASTLED_USING_NAMESPACE10,215
 #define cli(cli13,317
 #define sei(sei14,373
 #define cli(cli20,480
 #define sei(sei21,520
#define FASTLED_ARMFASTLED_ARM27,607
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD30,656
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS35,761
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK39,838
#define PROGMEMPROGMEM43,901
#define pgm_read_dword(pgm_read_dword44,917
#define pgm_read_dword_near(pgm_read_dword_near45,979
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM49,1100
typedef volatile       uint8_t RoReg; /**< Read only 8-bit register (volatile const unsigned int) */RoReg53,1156
typedef volatile       uint8_t RwReg; /**< Read-Write 8-bit register (volatile unsigned int) */RwReg54,1257
#define FASTLED_NO_PINMAPFASTLED_NO_PINMAP56,1354
 #define F_CPU F_CPU59,1395

lib/FastLED/platforms/arm/k20/fastled_arm_k20.h,61
#define __INC_FASTLED_ARM_K20_H__INC_FASTLED_ARM_K20_H2,32

lib/FastLED/platforms/arm/k20/led_sysdefs_arm_k20.h,685
#define __INC_LED_SYSDEFS_ARM_K20_H__INC_LED_SYSDEFS_ARM_K20_H2,36
#define FASTLED_TEENSY3FASTLED_TEENSY34,73
#define FASTLED_ARMFASTLED_ARM5,97
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD8,146
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS13,251
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK17,328
#define CLK_DBL CLK_DBL21,391
typedef volatile       uint8_t RoReg; /**< Read only 8-bit register (volatile const unsigned int) */RoReg30,594
typedef volatile       uint8_t RwReg; /**< Read-Write 8-bit register (volatile unsigned int) */RwReg31,695
#  define MS_COUNTER MS_COUNTER35,846
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM42,1072

lib/FastLED/platforms/arm/k20/ws2812serial_controller.h,606
#define __INC_WS2812SERIAL_CONTROLLER_H__INC_WS2812SERIAL_CONTROLLER_H2,40
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {CWS2812SerialController9,172
  WS2812Serial *pserial;pserial10,253
  uint8_t *drawbuffer,*framebuffer;drawbuffer11,278
  uint8_t *drawbuffer,*framebuffer;framebuffer11,278
  void _init(int nLeds) {_init13,315
  CWS2812SerialController() { pserial = NULL; }CWS2812SerialController22,596
  virtual void init() { /* do nothing yet */ }init24,645
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {showPixels26,693

lib/FastLED/platforms/arm/k20/clockless_block_arm_k20.h,2698
#define __INC_BLOCK_CLOCKLESS_ARM_K20_H__INC_BLOCK_CLOCKLESS_ARM_K20_H2,40
#define FASTLED_HAS_BLOCKLESS FASTLED_HAS_BLOCKLESS7,310
#define PORTC_FIRST_PIN PORTC_FIRST_PIN9,343
#define PORTD_FIRST_PIN PORTD_FIRST_PIN10,370
#define HAS_PORTDC HAS_PORTDC11,396
#define PORT_MASK PORT_MASK13,418
#define MIN(MIN15,488
#define USED_LANES USED_LANES16,527
class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {InlineBlockClocklessController23,784
	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;data_ptr_t24,881
	typedef typename FastPin<FIRST_PIN>::port_t data_t;data_t25,942
	data_t mPinMask;mPinMask27,996
	data_ptr_t mPort;mPort28,1014
	CMinWait<WAIT_TIME> mWait;mWait29,1033
	virtual int size() { return CLEDController::size() * LANES; }size31,1069
	virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) { showPixels33,1133
	virtual void init() {init45,1454
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate77,2478
		uint8_t bytes[12];bytes80,2556
		uint16_t shorts[6];shorts81,2577
		uint32_t raw[3];raw82,2599
	} Lines;Lines83,2618
	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER, LANES, PORT_MASK> &pixels) { // , register uint32_t & b2)  {writeBits85,2629
		static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {showRGBInternal142,4775
#define PMASK PMASK188,6025
#define PMASK_HI PMASK_HI189,6056
#define PMASK_LO PMASK_LO190,6091
class SixteenWayInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PMASK> {SixteenWayInlineBlockClocklessController193,6251
	typedef typename FastPin<PORTC_FIRST_PIN>::port_ptr_t data_ptr_t;data_ptr_t194,6354
	typedef typename FastPin<PORTC_FIRST_PIN>::port_t data_t;data_t195,6421
	data_t mPinMask;mPinMask197,6481
	data_ptr_t mPort;mPort198,6499
	CMinWait<WAIT_TIME> mWait;mWait199,6518
	virtual void init() {init201,6554
	virtual void showPixels(PixelController<RGB_ORDER, LANES, PMASK> & pixels) { showPixels228,7416
		uint8_t bytes[16];bytes241,7750
		uint16_t shorts[8];shorts242,7771
		uint32_t raw[4];raw243,7793
	} Lines;Lines244,7812
	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER,LANES, PMASK> &pixels) { // , register uint32_t & b2)  {writeBits246,7823
		static uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, PMASK> &allpixels) {showRGBInternal278,9236

lib/FastLED/platforms/arm/k20/fastspi_arm_k20.h,6096
#define __INC_FASTSPI_ARM_H__INC_FASTSPI_ARM_H2,28
#define SPI_t SPI_t10,207
#define KINETISK_SPI0 KINETISK_SPI014,266
#define SPI_PUSHR_CONT SPI_PUSHR_CONT18,324
#define SPI_PUSHR_CTAS(SPI_PUSHR_CTAS19,363
#define SPI_PUSHR_EOQ SPI_PUSHR_EOQ20,408
#define SPI_PUSHR_CTCNT SPI_PUSHR_CTCNT21,445
#define SPI_PUSHR_PCS(SPI_PUSHR_PCS22,486
template<int VAL, int BIT> class BitWork {BitWork28,856
	static int highestBit() __attribute__((always_inline)) { return (VAL & 1 << BIT) ? BIT : BitWork<VAL, BIT-1>::highestBit(); }highestBit30,907
template<int VAL> class BitWork<VAL, 0> {BitWork32,1037
	static int highestBit() __attribute__((always_inline)) { return 0; }highestBit34,1087
#define MAX(MAX37,1161
#define USE_CONT USE_CONT39,1208
struct SPIState {SPIState41,1254
	uint32_t _ctar0,_ctar1;_ctar042,1272
	uint32_t _ctar0,_ctar1;_ctar142,1272
	uint32_t pins[4];pins43,1297
template <int VAL> void getScalars(uint32_t & preScalar, uint32_t & scalar, uint32_t & dbl) {getScalars50,1476
#define SPIX SPIX95,3088
class ARMHardwareSPIOutput {ARMHardwareSPIOutput98,3213
	Selectable *m_pSelect;m_pSelect99,3242
	SPIState gState;gState100,3266
	inline void enable_pins(void) __attribute__((always_inline)) {enable_pins104,3459
	inline void disable_pins(void) __attribute__((always_inline)) {disable_pins130,4358
	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {update_ctars142,4966
	static inline void update_ctar0(uint32_t ctar) __attribute__((always_inline)) {update_ctar0156,5354
	static inline void update_ctar1(uint32_t ctar) __attribute__((always_inline)) {update_ctar1169,5656
	void setSPIRate() {setSPIRate182,5958
	void inline save_spi_state() __attribute__ ((always_inline)) {save_spi_state220,7635
	void inline restore_spi_state() __attribute__ ((always_inline)) {restore_spi_state232,7970
	ARMHardwareSPIOutput() { m_pSelect = NULL; }ARMHardwareSPIOutput245,8370
	ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }ARMHardwareSPIOutput246,8416
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect247,8484
	void init() {init250,8548
	static void waitFully() __attribute__((always_inline)) {waitFully278,9351
	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }needwait298,9780
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }wait299,9866
	static void wait1() __attribute__((always_inline)) { while( (SPIX.SR & 0xF000) >= 0x2000);  }wait1300,9951
	enum ECont { CONT, NOCONT };ECont302,10047
	enum ECont { CONT, NOCONT };CONT302,10047
	enum ECont { CONT, NOCONT };NOCONT302,10047
	enum EWait { PRE, POST, NONE };EWait303,10077
	enum EWait { PRE, POST, NONE };PRE303,10077
	enum EWait { PRE, POST, NONE };POST303,10077
	enum EWait { PRE, POST, NONE };NONE303,10077
	enum ELast { NOTLAST, LAST };ELast304,10110
	enum ELast { NOTLAST, LAST };NOTLAST304,10110
	enum ELast { NOTLAST, LAST };LAST304,10110
	#define CM CM307,10161
	#define CM CM309,10185
	#define WM WM311,10212
	template<ECont CONT_STATE, EWait WAIT_STATE, ELast LAST_STATE> class Write {Write313,10229
		static void writeWord(uint16_t w) __attribute__((always_inline)) {writeWord315,10316
		static void writeByte(uint8_t b) __attribute__((always_inline)) {writeByte326,10658
	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }writeWord338,11001
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }writeWordNoWait339,11163
	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }writeByte341,11324
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF);SPIX.SR |= SPI_SR_TCF; sei(); wait(); }writeBytePostWait342,11483
	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }writeByteNoWait343,11649
	static void writeWordCont(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }writeWordCont345,11807
	static void writeWordContNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;  sei();}writeWordContNoWait346,11990
	static void writeByteCont(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;  sei(); }writeByteCont348,12172
	static void writeByteContPostWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;  sei(); wait(); }writeByteContPostWait349,12353
	static void writeByteContNoWait(uint8_t b) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }writeByteContNoWait350,12542
	template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit353,12818
	void inline select() __attribute__((always_inline)) {select365,13168
	void inline release() __attribute__((always_inline)) {release372,13329
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw378,13480
	void writeBytesValue(uint8_t value, int len) {writeBytesValue382,13603
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes392,13773
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes404,14070
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels408,14372

lib/FastLED/platforms/arm/k20/fastpin_arm_k20.h,178
#define __FASTPIN_ARM_K20_H__FASTPIN_ARM_K20_H2,28
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,200
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,232

lib/FastLED/platforms/arm/k20/clockless_arm_k20.h,988
#define __INC_CLOCKLESS_ARM_K20_H__INC_CLOCKLESS_ARM_K20_H2,34
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS10,324
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController13,483
	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t14,551
	typedef typename FastPin<DATA_PIN>::port_t data_t;data_t15,611
	data_t mPinMask;mPinMask17,664
	data_ptr_t mPort;mPort18,682
	CMinWait<WAIT_TIME> mWait;mWait19,701
	virtual void init() {init21,737
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate27,875
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels31,948
	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {writeBits40,1173
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal70,2377

lib/FastLED/platforms/arm/k20/octows2811_controller.h,751
#define __INC_OCTOWS2811_CONTROLLER_H__INC_OCTOWS2811_CONTROLLER_H2,38
class COctoWS2811Controller : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {COctoWS2811Controller11,216
  OctoWS2811  *pocto;pocto12,295
  uint8_t *drawbuffer,*framebuffer;drawbuffer13,317
  uint8_t *drawbuffer,*framebuffer;framebuffer13,317
  void _init(int nLeds) {_init15,354
  COctoWS2811Controller() { pocto = NULL; }COctoWS2811Controller30,741
  virtual int size() { return CLEDController::size() * 8; }size31,785
  virtual void init() { /* do nothing yet */ }init33,846
    uint8_t bytes[8];bytes36,912
    uint32_t raw[2];raw37,934
  } Lines;Lines38,955
  virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {showPixels40,967

lib/FastLED/platforms/arm/k20/smartmatrix_t3.h,315
#define __INC_SMARTMATRIX_T3_H__INC_SMARTMATRIX_T3_H2,31
class CSmartMatrixController : public CPixelLEDController<RGB_ORDER> {CSmartMatrixController12,251
  SmartMatrix matrix;matrix13,322
  virtual void init() {init17,388
  virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels29,637

lib/FastLED/platforms/arm/d51/fastpin_arm_d51.h,186
#define __INC_FASTPIN_ARM_D51_H__INC_FASTPIN_ARM_D51_H2,32
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,207
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,239

lib/FastLED/platforms/arm/d51/fastled_arm_d51.h,61
#define __INC_FASTLED_ARM_D51_H__INC_FASTLED_ARM_D51_H2,32

lib/FastLED/platforms/arm/d51/clockless_arm_d51.h,1224
#define __INC_CLOCKLESS_ARM_D51__INC_CLOCKLESS_ARM_D512,32
#define ARM_DEMCR ARM_DEMCR8,235
#define ARM_DEMCR_TRCENA ARM_DEMCR_TRCENA9,341
#define ARM_DWT_CTRL ARM_DWT_CTRL10,438
#define ARM_DWT_CTRL_CYCCNTENA ARM_DWT_CTRL_CYCCNTENA11,529
#define ARM_DWT_CYCCNT ARM_DWT_CYCCNT12,615
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS15,708
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController18,867
	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t19,935
	typedef typename FastPin<DATA_PIN>::port_t data_t;data_t20,995
	data_t mPinMask;mPinMask22,1048
	data_ptr_t mPort;mPort23,1066
	CMinWait<WAIT_TIME> mWait;mWait24,1085
	virtual void init() {init26,1121
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate32,1259
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels36,1332
	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {writeBits45,1557
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal75,2761

lib/FastLED/platforms/arm/d51/led_sysdefs_arm_d51.h,391
#define __INC_LED_SYSDEFS_ARM_D51_H__INC_LED_SYSDEFS_ARM_D51_H2,36
#define FASTLED_ARMFASTLED_ARM5,74
#define FASTLED_ARM_M0_PLUSFASTLED_ARM_M0_PLUS7,171
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD10,228
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS15,333
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK19,410
#define cli(cli23,489
#define sei(sei24,521

lib/FastLED/platforms/arm/k66/fastpin_arm_k66.h,178
#define __FASTPIN_ARM_K66_H__FASTPIN_ARM_K66_H2,28
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,199
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,231

lib/FastLED/platforms/arm/k66/clockless_block_arm_k66.h,2823
#define __INC_BLOCK_CLOCKLESS_ARM_K66_H__INC_BLOCK_CLOCKLESS_ARM_K66_H2,40
#define FASTLED_HAS_BLOCKLESS FASTLED_HAS_BLOCKLESS7,306
#define PORTB_FIRST_PIN PORTB_FIRST_PIN9,339
#define PORTC_FIRST_PIN PORTC_FIRST_PIN10,365
#define PORTD_FIRST_PIN PORTD_FIRST_PIN11,392
#define HAS_PORTDC HAS_PORTDC12,418
#define LANE_MASK LANE_MASK14,440
#define PORT_SHIFT(PORT_SHIFT15,509
#define PORT_MASK PORT_MASK16,566
#define MIN(MIN18,607
#define USED_LANES USED_LANES19,646
class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, LANE_MASK> {InlineBlockClocklessController26,904
	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;data_ptr_t27,1001
	typedef typename FastPin<FIRST_PIN>::port_t data_t;data_t28,1062
	data_t mPinMask;mPinMask30,1116
	data_ptr_t mPort;mPort31,1134
	CMinWait<WAIT_TIME> mWait;mWait32,1153
	virtual int size() { return CLEDController::size() * LANES; }size34,1189
	virtual void showPixels(PixelController<RGB_ORDER, LANES, LANE_MASK> & pixels) { showPixels36,1253
	virtual void init() {init48,1574
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate91,2984
		uint8_t bytes[12];bytes94,3062
		uint16_t shorts[6];shorts95,3083
		uint32_t raw[3];raw96,3105
	} Lines;Lines97,3124
	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER, LANES, LANE_MASK> &pixels) { // , register uint32_t & b2)  {writeBits99,3135
		static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, LANE_MASK> &allpixels) {showRGBInternal156,5301
#define PMASK PMASK202,6551
#define PMASK_HI PMASK_HI203,6582
#define PMASK_LO PMASK_LO204,6617
class SixteenWayInlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PMASK> {SixteenWayInlineBlockClocklessController207,6777
	typedef typename FastPin<PORTC_FIRST_PIN>::port_ptr_t data_ptr_t;data_ptr_t208,6880
	typedef typename FastPin<PORTC_FIRST_PIN>::port_t data_t;data_t209,6947
	data_t mPinMask;mPinMask211,7007
	data_ptr_t mPort;mPort212,7025
	CMinWait<WAIT_TIME> mWait;mWait213,7044
	virtual void init() {init215,7080
	virtual void showPixels(PixelController<RGB_ORDER, LANES, PMASK> & pixels) { showPixels242,7942
		uint8_t bytes[16];bytes255,8276
		uint16_t shorts[8];shorts256,8297
		uint32_t raw[4];raw257,8319
	} Lines;Lines258,8338
	template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register Lines & b, PixelController<RGB_ORDER,LANES, PMASK> &pixels) { // , register uint32_t & b2)  {writeBits260,8349
		static uint32_t showRGBInternal(PixelController<RGB_ORDER,LANES, PMASK> &allpixels) {showRGBInternal292,9762

lib/FastLED/platforms/arm/k66/clockless_arm_k66.h,988
#define __INC_CLOCKLESS_ARM_K66_H__INC_CLOCKLESS_ARM_K66_H2,34
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS10,320
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController13,479
	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t14,547
	typedef typename FastPin<DATA_PIN>::port_t data_t;data_t15,607
	data_t mPinMask;mPinMask17,660
	data_ptr_t mPort;mPort18,678
	CMinWait<WAIT_TIME> mWait;mWait19,697
	virtual void init() {init21,733
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate27,871
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels31,944
	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {writeBits40,1169
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal70,2373

lib/FastLED/platforms/arm/k66/fastled_arm_k66.h,61
#define __INC_FASTLED_ARM_K66_H__INC_FASTLED_ARM_K66_H2,32

lib/FastLED/platforms/arm/k66/led_sysdefs_arm_k66.h,685
#define __INC_LED_SYSDEFS_ARM_K66_H__INC_LED_SYSDEFS_ARM_K66_H2,36
#define FASTLED_TEENSY3FASTLED_TEENSY34,73
#define FASTLED_ARMFASTLED_ARM5,97
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD8,146
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS13,251
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK17,328
#define CLK_DBL CLK_DBL21,392
typedef volatile       uint8_t RoReg; /**< Read only 8-bit register (volatile const unsigned int) */RoReg30,595
typedef volatile       uint8_t RwReg; /**< Read-Write 8-bit register (volatile unsigned int) */RwReg31,696
#  define MS_COUNTER MS_COUNTER35,847
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM42,1073

lib/FastLED/platforms/arm/k66/fastspi_arm_k66.h,5952
#define __INC_FASTSPI_ARM_H__INC_FASTSPI_ARM_H2,28
#define SPI_t SPI_t18,406
#define KINETISK_SPI0 KINETISK_SPI022,465
#define SPI_PUSHR_CONT SPI_PUSHR_CONT26,523
#define SPI_PUSHR_CTAS(SPI_PUSHR_CTAS27,562
#define SPI_PUSHR_EOQ SPI_PUSHR_EOQ28,607
#define SPI_PUSHR_CTCNT SPI_PUSHR_CTCNT29,644
#define SPI_PUSHR_PCS(SPI_PUSHR_PCS30,685
template<int VAL, int BIT> class BitWork {BitWork36,1055
	static int highestBit() __attribute__((always_inline)) { return (VAL & 1 << BIT) ? BIT : BitWork<VAL, BIT-1>::highestBit(); }highestBit38,1106
template<int VAL> class BitWork<VAL, 0> {BitWork40,1236
	static int highestBit() __attribute__((always_inline)) { return 0; }highestBit42,1286
#define MAX(MAX45,1360
#define USE_CONT USE_CONT47,1407
struct SPIState {SPIState49,1453
	uint32_t _ctar0,_ctar1;_ctar050,1471
	uint32_t _ctar0,_ctar1;_ctar150,1471
	uint32_t pins[4];pins51,1496
template <int VAL> void getScalars(uint32_t & preScalar, uint32_t & scalar, uint32_t & dbl) {getScalars58,1675
#define SPIX SPIX103,3287
class ARMHardwareSPIOutput {ARMHardwareSPIOutput106,3412
	Selectable *m_pSelect;m_pSelect107,3441
	SPIState gState;gState108,3465
	inline void enable_pins(void) __attribute__((always_inline)) {enable_pins112,3658
	inline void disable_pins(void) __attribute__((always_inline)) {disable_pins138,4557
	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {update_ctars150,5165
	static inline void update_ctar0(uint32_t ctar) __attribute__((always_inline)) {update_ctar0164,5553
	static inline void update_ctar1(uint32_t ctar) __attribute__((always_inline)) {update_ctar1177,5855
	void setSPIRate() {setSPIRate190,6157
	void inline save_spi_state() __attribute__ ((always_inline)) {save_spi_state228,7834
	void inline restore_spi_state() __attribute__ ((always_inline)) {restore_spi_state240,8169
	ARMHardwareSPIOutput() { m_pSelect = NULL; }ARMHardwareSPIOutput253,8569
	ARMHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }ARMHardwareSPIOutput254,8615
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect255,8683
	void init() {init258,8747
	static void waitFully() __attribute__((always_inline)) {waitFully286,9559
	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }needwait306,9988
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }wait307,10074
	static void wait1() __attribute__((always_inline)) { while( (SPIX.SR & 0xF000) >= 0x2000);  }wait1308,10159
	enum ECont { CONT, NOCONT };ECont310,10255
	enum ECont { CONT, NOCONT };CONT310,10255
	enum ECont { CONT, NOCONT };NOCONT310,10255
	enum EWait { PRE, POST, NONE };EWait311,10285
	enum EWait { PRE, POST, NONE };PRE311,10285
	enum EWait { PRE, POST, NONE };POST311,10285
	enum EWait { PRE, POST, NONE };NONE311,10285
	enum ELast { NOTLAST, LAST };ELast312,10318
	enum ELast { NOTLAST, LAST };NOTLAST312,10318
	enum ELast { NOTLAST, LAST };LAST312,10318
	#define CM CM315,10369
	#define CM CM317,10393
	#define WM WM319,10420
	template<ECont CONT_STATE, EWait WAIT_STATE, ELast LAST_STATE> class Write {Write321,10437
		static void writeWord(uint16_t w) __attribute__((always_inline)) {writeWord323,10524
		static void writeByte(uint8_t b) __attribute__((always_inline)) {writeByte332,10846
	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}writeWord342,11169
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}writeWordNoWait343,11316
	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}writeByte345,11462
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF);SPIX.SR |= SPI_SR_TCF; wait(); }writeBytePostWait346,11606
	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}writeByteNoWait347,11758
	static void writeWordCont(uint16_t w) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}writeWordCont349,11901
	static void writeWordContNoWait(uint16_t w) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF;}writeWordContNoWait350,12069
	static void writeByteCont(uint8_t b) __attribute__((always_inline)) { wait(); SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}writeByteCont352,12236
	static void writeByteContPostWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;wait(); }writeByteContPostWait353,12401
	static void writeByteContNoWait(uint8_t b) __attribute__((always_inline)) { SPIX.PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF;}writeByteContNoWait354,12574
	template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit357,12835
	void inline select() __attribute__((always_inline)) {select369,13185
	void inline release() __attribute__((always_inline)) {release376,13346
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw382,13497
	void writeBytesValue(uint8_t value, int len) {writeBytesValue386,13620
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes396,13790
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes408,14087
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels412,14389

lib/FastLED/platforms/avr/fastspi_avr.h,7999
#define __INC_FASTSPI_AVR_H__INC_FASTSPI_AVR_H2,28
#define UCPHA1 UCPHA120,570
class AVRUSART1SPIOutput {AVRUSART1SPIOutput24,673
	Selectable *m_pSelect;m_pSelect25,700
	AVRUSART1SPIOutput() { m_pSelect = NULL; }AVRUSART1SPIOutput28,733
	AVRUSART1SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }AVRUSART1SPIOutput29,777
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect30,843
	void init() {init32,906
	void setSPIRate() {setSPIRate47,1258
	static void stop() {stop56,1381
	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {shouldWait60,1443
	static void wait() __attribute__((always_inline)) {wait69,1657
	static void waitFully() __attribute__((always_inline)) { wait(); }waitFully74,1772
	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }writeWord76,1841
	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); UDR1=b;  shouldWait(true); }writeByte78,1948
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { UDR1=b; shouldWait(true); wait(); }writeBytePostWait79,2052
	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { UDR1=b; shouldWait(true); }writeByteNoWait80,2163
	template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit83,2266
	void enable_pins() { }enable_pins94,2491
	void disable_pins() { }disable_pins95,2515
	void select() {select97,2541
	void release() {release105,2649
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw112,2744
	void writeBytesValue(uint8_t value, int len) {writeBytesValue118,2848
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes128,3021
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes139,3360
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels143,3662
class AVRUSART0SPIOutput {AVRUSART0SPIOutput171,4445
	Selectable *m_pSelect;m_pSelect172,4472
	AVRUSART0SPIOutput() { m_pSelect = NULL; }AVRUSART0SPIOutput175,4505
	AVRUSART0SPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }AVRUSART0SPIOutput176,4549
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect177,4615
	void init() {init179,4678
	void setSPIRate() {setSPIRate195,5035
	static void stop() {stop203,5157
	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {shouldWait207,5219
	static void wait() __attribute__((always_inline)) {wait216,5433
	static void waitFully() __attribute__((always_inline)) { wait(); }waitFully221,5548
	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }writeWord223,5617
	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); UDR0=b;  shouldWait(true); }writeByte225,5724
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { UDR0=b; shouldWait(true); wait(); }writeBytePostWait226,5828
	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { UDR0=b; shouldWait(true); }writeByteNoWait227,5939
	template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit230,6042
	void enable_pins() { }enable_pins241,6267
	void disable_pins() { }disable_pins242,6291
	void select() {select244,6317
		void release() {release252,6425
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw259,6526
	void writeBytesValue(uint8_t value, int len) {writeBytesValue265,6630
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes275,6803
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes286,7142
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels290,7444
class AVRHardwareSPIOutput {AVRHardwareSPIOutput333,8846
	Selectable *m_pSelect;m_pSelect334,8875
	bool mWait;mWait335,8899
	AVRHardwareSPIOutput() { m_pSelect = NULL; mWait = false;}AVRHardwareSPIOutput337,8920
	AVRHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }AVRHardwareSPIOutput338,8980
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect339,9048
	void setSPIRate() {setSPIRate341,9111
	void init() {init358,9755
	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {shouldWait395,10894
	static void wait() __attribute__((always_inline)) { if(shouldWait()) { while(!(SPSR & (1<<SPIF))); } }wait400,11098
	static void waitFully() __attribute__((always_inline)) { wait(); }waitFully401,11202
	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }writeWord403,11271
	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPDR=b;  shouldWait(true); }writeByte405,11378
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPDR=b; shouldWait(true); wait(); }writeBytePostWait406,11482
	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPDR=b; shouldWait(true); }writeByteNoWait407,11593
	template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit409,11695
	void enable_pins() {enable_pins423,11983
	void disable_pins() {disable_pins427,12070
	void select() {select431,12150
	void release() {release437,12253
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw442,12343
	void writeBytesValue(uint8_t value, int len) {writeBytesValue446,12442
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes456,12615
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes467,12954
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels471,13256
class AVRHardwareSPIOutput {AVRHardwareSPIOutput510,14652
	Selectable *m_pSelect;m_pSelect511,14681
	bool mWait;mWait512,14705
	AVRHardwareSPIOutput() { m_pSelect = NULL; mWait = false;}AVRHardwareSPIOutput514,14726
	AVRHardwareSPIOutput(Selectable *pSelect) { m_pSelect = pSelect; }AVRHardwareSPIOutput515,14786
	void setSelect(Selectable *pSelect) { m_pSelect = pSelect; }setSelect516,14854
	void setSPIRate() {setSPIRate518,14917
	void init() {init535,15571
	static bool shouldWait(bool wait = false) __attribute__((always_inline)) {shouldWait572,16723
	static void wait() __attribute__((always_inline)) { if(shouldWait()) { while(!(SPSR0 & (1<<SPIF))); } }wait577,16927
	static void waitFully() __attribute__((always_inline)) { wait(); }waitFully578,17032
	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }writeWord580,17101
	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); SPDR0=b;  shouldWait(true); }writeByte582,17208
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { SPDR0=b; shouldWait(true); wait(); }writeBytePostWait583,17313
	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { SPDR0=b; shouldWait(true); }writeByteNoWait584,17425
	template <uint8_t BIT> inline static void writeBit(uint8_t b) {writeBit586,17528
	void enable_pins() {enable_pins600,17818
	void disable_pins() {disable_pins604,17906
	void select() {select608,17987
	void release() {release614,18090
	static void writeBytesValueRaw(uint8_t value, int len) {writeBytesValueRaw619,18180
	void writeBytesValue(uint8_t value, int len) {writeBytesValue623,18279
	template <class D> void writeBytes(register uint8_t *data, int len) {writeBytes633,18452
	void writeBytes(register uint8_t *data, int len) { writeBytes<DATA_NOP>(data, len); }writeBytes644,18791
	template <uint8_t FLAGS, class D, EOrder RGB_ORDER> void writePixels(PixelController<RGB_ORDER> pixels) {writePixels648,19093

lib/FastLED/platforms/avr/fastpin_avr.h,178
#define __INC_FASTPIN_AVR_H__INC_FASTPIN_AVR_H2,28
#define NO_HARDWARE_PIN_SUPPORTNO_HARDWARE_PIN_SUPPORT8,199
#undef HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT9,231

lib/FastLED/platforms/avr/clockless_trinket.h,7052
#define __INC_CLOCKLESS_TRINKET_H__INC_CLOCKLESS_TRINKET_H2,34
#define TRINKET_SCALE TRINKET_SCALE14,278
#define DITHER DITHER16,337
#define FASTLED_SLOW_CLOCK_ADJUST FASTLED_SLOW_CLOCK_ADJUST20,383
#define US_PER_TICK US_PER_TICK25,504
template<int _LOOP, int PAD> __attribute__((always_inline)) inline void _dc_AVR(register uint8_t & loopvar) {_dc_AVR30,743
template<int CYCLES> __attribute__((always_inline)) inline void _dc(register uint8_t & loopvar) {_dc41,1313
template<> __attribute__((always_inline)) inline void _dc<-6>(register uint8_t & ) {}_dc44,1451
template<> __attribute__((always_inline)) inline void _dc<-5>(register uint8_t & ) {}_dc45,1537
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}_dc46,1623
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}_dc47,1709
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}_dc48,1795
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}_dc49,1881
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}_dc50,1967
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}_dc51,2053
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}_dc52,2172
template<> __attribute__((always_inline)) inline void _dc< 3>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<1>(loopvar); }_dc53,2290
template<> __attribute__((always_inline)) inline void _dc< 4>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<2>(loopvar); }_dc54,2418
template<> __attribute__((always_inline)) inline void _dc< 5>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<3>(loopvar); }_dc55,2546
template<> __attribute__((always_inline)) inline void _dc< 6>(register uint8_t & loopvar) { _dc<2>(loopvar); _dc<2>(loopvar); _dc<2>(loopvar);}_dc56,2674
template<> __attribute__((always_inline)) inline void _dc< 7>(register uint8_t & loopvar) { _dc<4>(loopvar); _dc<3>(loopvar); }_dc57,2818
template<> __attribute__((always_inline)) inline void _dc< 8>(register uint8_t & loopvar) { _dc<4>(loopvar); _dc<4>(loopvar); }_dc58,2946
template<> __attribute__((always_inline)) inline void _dc< 9>(register uint8_t & loopvar) { _dc<5>(loopvar); _dc<4>(loopvar); }_dc59,3074
template<> __attribute__((always_inline)) inline void _dc<10>(register uint8_t & loopvar) { _dc<6>(loopvar); _dc<4>(loopvar); }_dc60,3202
template<> __attribute__((always_inline)) inline void _dc<11>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<1>(loopvar); }_dc61,3330
template<> __attribute__((always_inline)) inline void _dc<12>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<2>(loopvar); }_dc62,3459
template<> __attribute__((always_inline)) inline void _dc<13>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<3>(loopvar); }_dc63,3588
template<> __attribute__((always_inline)) inline void _dc<14>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<4>(loopvar); }_dc64,3717
template<> __attribute__((always_inline)) inline void _dc<15>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<5>(loopvar); }_dc65,3846
template<> __attribute__((always_inline)) inline void _dc<16>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<6>(loopvar); }_dc66,3975
template<> __attribute__((always_inline)) inline void _dc<17>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<7>(loopvar); }_dc67,4104
template<> __attribute__((always_inline)) inline void _dc<18>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<8>(loopvar); }_dc68,4233
template<> __attribute__((always_inline)) inline void _dc<19>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<9>(loopvar); }_dc69,4362
template<> __attribute__((always_inline)) inline void _dc<20>(register uint8_t & loopvar) { _dc<10>(loopvar); _dc<10>(loopvar); }_dc70,4491
#define DINTPIN(DINTPIN72,4622
#define DINT(DINT73,4721
#define _D1(_D174,4821
#define _D2(_D275,4851
#define _D3(_D376,4881
static uint8_t gTimeErrorAccum256ths;gTimeErrorAccum256ths87,5638
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS90,5684
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController93,5847
	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t96,6011
	typedef typename FastPin<DATA_PIN>::port_t data_t;data_t97,6071
	CMinWait<WAIT_TIME> mWait;mWait99,6124
	virtual void init() {init101,6160
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate105,6221
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels109,6294
#define USE_ASM_MACROSUSE_ASM_MACROS168,8908
#define ASM_VARS ASM_VARS172,9169
#define HI1 HI1201,10108
#define LO1 LO1203,10320
#define QLO2(QLO2206,10544
#define LD2(LD2208,10684
#define LDSCL4(LDSCL4210,10888
#define PRESCALE4(PRESCALE4214,11081
#define PRESCALEA2(PRESCALEA2217,11282
#define PRESCALEB4(PRESCALEB4220,11517
#define PSBIDATA4(PSBIDATA4223,11751
#define PRESCALE4(PRESCALE4226,11913
#define PRESCALEA2(PRESCALEA2227,11951
#define PRESCALEB4(PRESCALEB4228,11990
#define PSBIDATA4(PSBIDATA4229,12029
#define _SCALE02(_SCALE02233,12273
#define _SCALE12(_SCALE12234,12353
#define _SCALE22(_SCALE22235,12433
#define SCALE02(SCALE02236,12513
#define SCALE12(SCALE12237,12578
#define SCALE22(SCALE22238,12643
#define _ROR1(_ROR1241,12758
#define ROR1(ROR1242,12795
#define _CLC1 _CLC1245,12882
#define CLC1 CLC1246,12906
#define RORCLC2(RORCLC2249,13031
#define RORSC04(RORSC04252,13145
#define RORSC14(RORSC14253,13227
#define RORSC24(RORSC24254,13309
#define SCROR04(SCROR04257,13436
#define SCROR14(SCROR14258,13517
#define SCROR24(SCROR24259,13598
#define _NEGD1(_NEGD1266,13903
#define _ADJD1(_ADJD1267,13941
#define ADJDITHER2(ADJDITHER2268,13992
#define ADDDE1(ADDDE1269,14070
#define LOOP LOOP276,14340
#define DONE DONE278,14417
#define IDATA2 IDATA2281,14506
#define IDATACLC3 IDATACLC3282,14608
#define _MOV1(_MOV1285,14735
#define MOV1(MOV1287,14791
#define _MOV_FIX03(_MOV_FIX03291,14936
#define _MOV_FIX13(_MOV_FIX13292,15041
#define _MOV_FIX23(_MOV_FIX23293,15146
#define _MOV_FIX03(_MOV_FIX03297,15375
#define _MOV_FIX13(_MOV_FIX13298,15431
#define _MOV_FIX23(_MOV_FIX23299,15487
#define MOV_NEGD04(MOV_NEGD04303,15599
#define MOV_ADDDE04(MOV_ADDDE04304,15686
#define MOV_NEGD14(MOV_NEGD14305,15780
#define MOV_ADDDE14(MOV_ADDDE14306,15867
#define MOV_NEGD24(MOV_NEGD24307,15961
#define DCOUNT2 DCOUNT2310,16085
#define JMPLOOP2 JMPLOOP2312,16197
#define BRLOOP1 BRLOOP1314,16288
#define ENDLOOP5 ENDLOOP5317,16400
#define DNOP DNOP320,16545
#define DADVANCE DADVANCE322,16599
#define DUSE DUSE323,16618
	static void /*__attribute__((optimize("O0")))*/  /*__attribute__ ((always_inline))*/  showRGBInternal(PixelController<RGB_ORDER> & pixels)  {showRGBInternal327,16831

lib/FastLED/platforms/avr/led_sysdefs_avr.h,944
#define __INC_LED_SYSDEFS_AVR_H__INC_LED_SYSDEFS_AVR_H2,32
#define FASTLED_AVRFASTLED_AVR4,65
#define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD7,114
#define FASTLED_SPI_BYTE_ONLYFASTLED_SPI_BYTE_ONLY10,152
typedef volatile       uint8_t RoReg; /**< Read only 8-bit register (volatile const unsigned int) */RoReg16,286
typedef volatile       uint8_t RwReg; /**< Read-Write 8-bit register (volatile unsigned int) */RwReg17,387
#define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS23,685
#define FASTLED_ACCURATE_CLOCKFASTLED_ACCURATE_CLOCK27,762
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM33,863
#define NO_CORRECTION NO_CORRECTION38,995
#    define MS_COUNTER MS_COUNTER45,1149
#    define MS_COUNTER MS_COUNTER48,1272
#    define MS_COUNTER MS_COUNTER51,1368
#define LIB8_ATTINY LIB8_ATTINY57,1907
#define FASTLED_NEEDS_YIELDFASTLED_NEEDS_YIELD58,1929
#define FASTLED_NEEDS_YIELDFASTLED_NEEDS_YIELD64,2174

lib/FastLED/platforms/avr/fastled_avr.h,109
#define __INC_FASTLED_AVR_H__INC_FASTLED_AVR_H2,28
#define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM10,195

lib/FastLED/platforms/esp/8266/led_sysdefs_esp8266.h,660
#define ESP8266ESP82664,30
#define FASTLED_ESP8266FASTLED_ESP82667,54
#define FASTLED_HAS_MILLISFASTLED_HAS_MILLIS10,106
typedef volatile uint32_t RoReg;RoReg12,134
typedef volatile uint32_t RwReg;RwReg13,167
typedef uint32_t prog_uint32_t;prog_uint32_t14,200
# define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM19,299
# define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS23,371
# define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD24,407
#define NEED_CXX_BITSNEED_CXX_BITS27,446
#   define FASTLED_ESP8266_NODEMCU_PIN_ORDERFASTLED_ESP8266_NODEMCU_PIN_ORDER32,661
#   define FASTLED_ESP8266_RAW_PIN_ORDERFASTLED_ESP8266_RAW_PIN_ORDER34,713

lib/FastLED/platforms/esp/8266/fastpin_esp8266.h,2818
struct FASTLED_ESP_IO {FASTLED_ESP_IO5,39
  volatile uint32_t _GPO;_GPO6,63
  volatile uint32_t _GPOS;_GPOS7,89
  volatile uint32_t _GPOC;_GPOC8,116
#define _GPB _GPB11,147
template<uint8_t PIN, uint32_t MASK> class _ESPPIN {_ESPPIN14,203
  typedef volatile uint32_t * port_ptr_t;port_ptr_t17,265
  typedef uint32_t port_t;port_t18,307
  inline static void setOutput() { pinMode(PIN, OUTPUT); }setOutput20,335
  inline static void setInput() { pinMode(PIN, INPUT); }setInput21,394
  inline static void hi() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPOS = MASK; } else { GP16O |= MASK; } }hi23,452
  inline static void lo() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPOC = MASK; } else { GP16O &= ~MASK; } }lo24,574
  inline static void set(register port_t val) __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPO = val; } else { GP16O = val; }}set25,697
  inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }strobe27,835
  inline static void toggle() __attribute__ ((always_inline)) { if(PIN < 16) { _GPB._GPO ^= MASK; } else { GP16O ^= MASK; } }toggle29,922
  inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }hi31,1049
  inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }lo32,1141
  inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }fastset33,1233
  inline static port_t hival() __attribute__ ((always_inline)) { if (PIN<16) { return GPO | MASK;  } else { return GP16O | MASK; } }hival35,1359
  inline static port_t loval() __attribute__ ((always_inline)) { if (PIN<16) { return GPO & ~MASK; } else { return GP16O & ~MASK; } }loval36,1492
  inline static port_ptr_t port() __attribute__ ((always_inline)) { if(PIN<16) { return &_GPB._GPO; } else { return &GP16O; } }port37,1626
  inline static port_ptr_t sport() __attribute__ ((always_inline)) { return &_GPB._GPOS; } // there is no GP160 support for thissport38,1754
	inline static port_ptr_t cport() __attribute__ ((always_inline)) { return &_GPB._GPOC; }cport39,1883
  inline static port_t mask() __attribute__ ((always_inline)) { return MASK; }mask40,1973
  inline static bool isset() __attribute__ ((always_inline)) { return (PIN < 16) ? (GPO & MASK) : (GP16O & MASK); }isset42,2053
#define _FL_DEFPIN(_FL_DEFPIN45,2173
#define MAX_PIN MAX_PIN49,2331
#define PORTA_FIRST_PIN PORTA_FIRST_PIN60,2728
#define MAX_PIN MAX_PIN62,2799
#define PORTA_FIRST_PIN PORTA_FIRST_PIN80,3105
#define MAX_PIN MAX_PIN83,3188
#define PORTA_FIRST_PIN PORTA_FIRST_PIN90,3493
#define HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT99,3708
#define FASTLED_NAMESPACE_ENDFASTLED_NAMESPACE_END101,3742

lib/FastLED/platforms/esp/8266/clockless_block_esp8266.h,1565
#define __INC_CLOCKLESS_BLOCK_ESP8266_H__INC_CLOCKLESS_BLOCK_ESP8266_H2,40
#define FASTLED_HAS_BLOCKLESS FASTLED_HAS_BLOCKLESS4,81
#define FIX_BITS(FIX_BITS6,114
#define MIN(MIN8,179
#define USED_LANES USED_LANES9,218
#define PORT_MASK PORT_MASK10,253
#define PIN_MASK PIN_MASK11,309
class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {InlineBlockClocklessController21,619
	typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;data_ptr_t22,716
	typedef typename FastPin<FIRST_PIN>::port_t data_t;data_t23,777
	CMinWait<WAIT_TIME> mWait;mWait25,831
	virtual int size() { return CLEDController::size() * LANES; }size27,867
	virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {showPixels29,931
  template<int PIN> static void initPin() {initPin50,1499
  virtual void init() {init54,1595
  virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate62,1789
		uint8_t bytes[8];bytes65,1868
		uint16_t shorts[4];shorts66,1888
		uint32_t raw[2];raw67,1910
	} Lines;Lines68,1929
#define ESP_ADJUST ESP_ADJUST70,1940
#define ESP_ADJUST2 ESP_ADJUST271,1985
  template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & last_mark, register Lines & b, PixelController<RGB_ORDER, LANES, PORT_MASK> &pixels) { // , register uint32_t & b2)  {writeBits72,2007
		static uint32_t ICACHE_RAM_ATTR showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {showRGBInternal110,3547

lib/FastLED/platforms/esp/8266/fastled_esp8266.h,0

lib/FastLED/platforms/esp/8266/clockless_esp8266.h,1041
__attribute__ ((always_inline)) inline static uint32_t __clock_cycles() {__clock_cycles11,266
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS17,426
class ClocklessController : public CPixelLEDController<RGB_ORDER> {ClocklessController20,585
	typedef typename FastPin<DATA_PIN>::port_ptr_t data_ptr_t;data_ptr_t21,653
	typedef typename FastPin<DATA_PIN>::port_t data_t;data_t22,713
	data_t mPinMask;mPinMask24,766
	data_ptr_t mPort;mPort25,784
	CMinWait<WAIT_TIME> mWait;mWait26,803
	virtual void init() {init28,839
	virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate34,977
	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {showPixels38,1050
#define _ESP_ADJ _ESP_ADJ52,1423
#define _ESP_ADJ2 _ESP_ADJ253,1444
	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & last_mark, register uint32_t b)  {writeBits55,1467
	static uint32_t ICACHE_RAM_ATTR showRGBInternal(PixelController<RGB_ORDER> pixels) {showRGBInternal73,2190

lib/FastLED/platforms/esp/32/fastled_esp32.h,0

lib/FastLED/platforms/esp/32/clockless_block_esp32.h,1657
#define __INC_CLOCKLESS_BLOCK_ESP8266_H__INC_CLOCKLESS_BLOCK_ESP8266_H2,40
#define FASTLED_HAS_BLOCKLESS FASTLED_HAS_BLOCKLESS4,81
#define PORT_MASK PORT_MASK6,114
#define MIN(MIN7,163
#define USED_LANES USED_LANES8,202
#define REAL_FIRST_PIN REAL_FIRST_PIN9,236
#define LAST_PIN LAST_PIN10,262
class InlineBlockClocklessController : public CPixelLEDController<RGB_ORDER, LANES, PORT_MASK> {InlineBlockClocklessController20,573
    typedef typename FastPin<FIRST_PIN>::port_ptr_t data_ptr_t;data_ptr_t21,670
    typedef typename FastPin<FIRST_PIN>::port_t data_t;data_t22,734
    data_t mPinMask;mPinMask24,791
    data_ptr_t mPort;mPort25,812
    CMinWait<WAIT_TIME> mWait;mWait26,834
    virtual int size() { return CLEDController::size() * LANES; }size28,873
    virtual void showPixels(PixelController<RGB_ORDER, LANES, PORT_MASK> & pixels) {showPixels30,940
    template<int PIN> static void initPin() {initPin51,1497
    virtual void init() {init58,1685
    virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate71,2033
	uint8_t bytes[8];bytes74,2121
	uint16_t shorts[4];shorts75,2140
	uint32_t raw[2];raw76,2161
    } Lines;Lines77,2179
#define ESP_ADJUST ESP_ADJUST79,2193
#define ESP_ADJUST2 ESP_ADJUST280,2238
    template<int BITS,int PX> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & last_mark, register Lines & b, PixelController<RGB_ORDER, LANES, PORT_MASK> &pixels) { // , register uint32_t & b2)  {writeBits81,2260
    static uint32_t showRGBInternal(PixelController<RGB_ORDER, LANES, PORT_MASK> &allpixels) {showRGBInternal119,3982

lib/FastLED/platforms/esp/32/clockless_rmt_esp32.h,2923
__attribute__ ((always_inline)) inline static uint32_t __clock_cycles() {__clock_cycles108,4521
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS114,4681
#define NUM_COLOR_CHANNELS NUM_COLOR_CHANNELS115,4713
#define DIVIDER DIVIDER118,4773
#define MAX_PULSES MAX_PULSES119,4862
#define F_CPU_RMT F_CPU_RMT122,5041
#define RMT_CYCLES_PER_SEC RMT_CYCLES_PER_SEC123,5091
#define RMT_CYCLES_PER_ESP_CYCLE RMT_CYCLES_PER_ESP_CYCLE124,5147
#define ESP_TO_RMT_CYCLES(ESP_TO_RMT_CYCLES125,5212
#define NS_PER_CYCLE NS_PER_CYCLE128,5336
#define NS_TO_CYCLES(NS_TO_CYCLES129,5409
#define RMT_RESET_DURATION RMT_RESET_DURATION130,5468
#define FASTLED_RMT_BUILTIN_DRIVER FASTLED_RMT_BUILTIN_DRIVER134,5588
#define FASTLED_RMT_MAX_CONTROLLERS FASTLED_RMT_MAX_CONTROLLERS139,5720
#define FASTLED_RMT_MAX_CHANNELS FASTLED_RMT_MAX_CHANNELS145,5900
static CLEDController * gControllers[FASTLED_RMT_MAX_CONTROLLERS];gControllers149,5974
static CLEDController * gOnChannel[FASTLED_RMT_MAX_CHANNELS];gOnChannel153,6134
static int gNumControllers = 0;gNumControllers155,6197
static int gNumStarted = 0;gNumStarted156,6229
static int gNumDone = 0;gNumDone157,6257
static int gNext = 0;gNext158,6282
static intr_handle_t gRMT_intr_handle = NULL;gRMT_intr_handle160,6305
static xSemaphoreHandle gTX_sem = NULL;gTX_sem164,6460
static bool gInitialized = false;gInitialized166,6501
class ClocklessController : public CPixelLEDController<RGB_ORDER>ClocklessController169,6661
    rmt_channel_t  mRMT_channel;mRMT_channel172,6775
    gpio_num_t     mPin;mPin175,6838
    FastPin<DATA_PIN> mFastPin;mFastPin178,6926
    rmt_item32_t   mZero;mZero181,7034
    rmt_item32_t   mOne;mOne182,7060
    PixelController<RGB_ORDER> * mPixels;mPixels185,7122
    int            mCurColor;mCurColor186,7164
    uint16_t       mCurPulse;mCurPulse187,7194
    volatile uint32_t * mRMT_mem_ptr;mRMT_mem_ptr188,7224
    rmt_item32_t * mBuffer;mBuffer192,7383
    uint16_t       mBufferSize;mBufferSize193,7411
    void init()init197,7453
    virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate225,8408
    void initRMT()initRMT229,8484
    virtual void showPixels(PixelController<RGB_ORDER> & pixels)showPixels283,10681
    virtual void convertAllPixelData(PixelController<RGB_ORDER> & pixels)convertAllPixelData333,12516
    void convertByte(uint32_t byteval)convertByte363,13507
    static void IRAM_ATTR startNext(int channel)startNext377,14010
    void IRAM_ATTR startOnChannel(int channel)startOnChannel389,14448
    static void doneOnChannel(rmt_channel_t channel, void * arg)doneOnChannel435,16213
    static void IRAM_ATTR interruptHandler(void *arg)interruptHandler462,17281
    uint8_t IRAM_ATTR getNextByte() __attribute__ ((always_inline))getNextByte494,18584
    virtual void IRAM_ATTR fillHalfRMTBuffer()fillHalfRMTBuffer526,19522

lib/FastLED/platforms/esp/32/fastpin_esp32.h,1749
template<uint8_t PIN, uint32_t MASK> class _ESPPIN {_ESPPIN5,39
  typedef volatile uint32_t * port_ptr_t;port_ptr_t8,101
  typedef uint32_t port_t;port_t9,143
  inline static void setOutput() { pinMode(PIN, OUTPUT); }setOutput11,171
  inline static void setInput() { pinMode(PIN, INPUT); }setInput12,230
  inline static void hi() __attribute__ ((always_inline)) {hi14,288
  inline static void lo() __attribute__ ((always_inline)) {lo19,433
  inline static void set(register port_t val) __attribute__ ((always_inline)) {set24,578
  inline static void strobe() __attribute__ ((always_inline)) { toggle(); toggle(); }strobe29,731
  inline static void toggle() __attribute__ ((always_inline)) {toggle31,818
  inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }hi36,965
  inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }lo37,1057
  inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }fastset38,1149
  inline static port_t hival() __attribute__ ((always_inline)) {hival40,1275
  inline static port_t loval() __attribute__ ((always_inline)) {loval45,1429
  inline static port_ptr_t port() __attribute__ ((always_inline)) {port50,1585
  inline static port_ptr_t sport() __attribute__ ((always_inline)) {sport55,1730
  inline static port_ptr_t cport() __attribute__ ((always_inline)) {cport60,1886
  inline static port_t mask() __attribute__ ((always_inline)) { return MASK; }mask65,2042
  inline static bool isset() __attribute__ ((always_inline)) {isset67,2122
#define _FL_DEFPIN(_FL_DEFPIN73,2277
#define HAS_HARDWARE_PIN_SUPPORTHAS_HARDWARE_PIN_SUPPORT113,3315

lib/FastLED/platforms/esp/32/led_sysdefs_esp32.h,567
#define ESP32ESP324,28
#define FASTLED_ESP32FASTLED_ESP327,50
#define FASTLED_HAS_MILLISFASTLED_HAS_MILLIS10,100
typedef volatile uint32_t RoReg;RoReg12,128
typedef volatile uint32_t RwReg;RwReg13,161
typedef unsigned long prog_uint32_t;prog_uint32_t14,194
# define FASTLED_USE_PROGMEM FASTLED_USE_PROGMEM19,298
# define FASTLED_ALLOW_INTERRUPTS FASTLED_ALLOW_INTERRUPTS23,370
# define INTERRUPT_THRESHOLD INTERRUPT_THRESHOLD24,406
#define NEED_CXX_BITSNEED_CXX_BITS27,445
#   define FASTLED_ESP32_RAW_PIN_ORDERFASTLED_ESP32_RAW_PIN_ORDER30,495

lib/FastLED/platforms/esp/32/clockless_i2s_esp32.h,3382
__attribute__ ((always_inline)) inline static uint32_t __clock_cycles() {__clock_cycles113,4687
#define FASTLED_HAS_CLOCKLESS FASTLED_HAS_CLOCKLESS119,4853
#define NUM_COLOR_CHANNELS NUM_COLOR_CHANNELS120,4885
#define I2S_DEVICE I2S_DEVICE124,4971
#define FASTLED_I2S_MAX_CONTROLLERS FASTLED_I2S_MAX_CONTROLLERS129,5083
#define I2S_BASE_CLK I2S_BASE_CLK133,5146
#define I2S_MAX_CLK I2S_MAX_CLK134,5179
#define I2S_MAX_PULSE_PER_BIT I2S_MAX_PULSE_PER_BIT135,5267
#define ESPCLKS_TO_NS(ESPCLKS_TO_NS137,5450
static CLEDController * gControllers[FASTLED_I2S_MAX_CONTROLLERS];gControllers140,5549
static int gNumControllers = 0;gNumControllers141,5616
static int gNumStarted = 0;gNumStarted142,5648
static xSemaphoreHandle gTX_sem = NULL;gTX_sem146,5785
static bool gInitialized = false;gInitialized149,5860
static intr_handle_t gI2S_intr_handle = NULL;gI2S_intr_handle152,5919
static i2s_dev_t * i2s;i2s155,6027
static int i2s_base_pin_index;i2s_base_pin_index158,6123
struct DMABuffer {DMABuffer161,6178
    lldesc_t descriptor;descriptor162,6197
    uint8_t * buffer;buffer163,6222
#define NUM_DMA_BUFFERS NUM_DMA_BUFFERS166,6248
static DMABuffer * dmaBuffers[NUM_DMA_BUFFERS];dmaBuffers167,6274
static int      gPulsesPerBit = 0;gPulsesPerBit173,6441
static uint32_t gOneBit[40] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};gOneBit174,6476
static uint32_t gZeroBit[40]  = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};gZeroBit175,6589
static int gCurBuffer = 0;gCurBuffer178,6738
static bool gDoneFilling = false;gDoneFilling179,6765
static int ones_for_one;ones_for_one180,6799
static int ones_for_zero;ones_for_zero181,6824
static uint8_t gPixelRow[NUM_COLOR_CHANNELS][32];gPixelRow184,6914
static uint8_t gPixelBits[NUM_COLOR_CHANNELS][8][4];gPixelBits185,6964
static int CLOCK_DIVIDER_N;CLOCK_DIVIDER_N186,7017
static int CLOCK_DIVIDER_A;CLOCK_DIVIDER_A187,7045
static int CLOCK_DIVIDER_B;CLOCK_DIVIDER_B188,7073
class ClocklessController : public CPixelLEDController<RGB_ORDER>ClocklessController191,7227
    gpio_num_t     mPin;mPin194,7324
    FastPin<DATA_PIN> mFastPin;mFastPin197,7416
    PixelController<RGB_ORDER> * mPixels;mPixels200,7489
    void init()init204,7545
    virtual uint16_t getMaxRefreshRate() const { return 400; }getMaxRefreshRate230,8625
   static int pgcd(int smallest,int precision,int a,int b,int c)pgcd234,8708
    static void initBitPatterns()initBitPatterns259,9487
    static DMABuffer * allocateDMABuffer(int bytes)allocateDMABuffer412,15716
    static void i2sInit()i2sInit432,16345
    static void empty( uint32_t *buf)empty531,20175
    virtual void showPixels(PixelController<RGB_ORDER> & pixels)showPixels546,20608
    static IRAM_ATTR void interruptHandler(void *arg)interruptHandler593,22282
    static void fillBuffer()fillBuffer614,22976
    static void transpose32(uint8_t * pixels, uint8_t * bits)transpose32673,25798
    static void transpose8rS32(uint8_t * A, int m, int n, uint8_t * B)transpose8rS32684,26192
    static void i2sStart()i2sStart709,27086
    static void i2sReset()i2sReset733,27890
    static void i2sReset_DMA()i2sReset_DMA745,28407
    static void i2sReset_FIFO()i2sReset_FIFO751,28565
    static void i2sStop()i2sStop757,28738

lib/FastLED/component.mk,61
COMPONENT_ADD_INCLUDEDIRS := .COMPONENT_ADD_INCLUDEDIRS1,0

lib/TFT_eSPI/TFT_Drivers/ILI9163_Rotation.h,45
  writecommand(TFT_MADCTL);TFT_MADCTL6,104

lib/TFT_eSPI/TFT_Drivers/ST7789_2_Defines.h,4687
  #define TFT_WIDTH TFT_WIDTH4,136
  #define TFT_HEIGHT TFT_HEIGHT7,187
  #define CGRAM_OFFSETCGRAM_OFFSET11,266
#define TFT_INIT_DELAY TFT_INIT_DELAY15,343
#define TFT_NOP TFT_NOP19,453
#define TFT_SWRST TFT_SWRST20,478
#define TFT_SLPIN TFT_SLPIN22,504
#define TFT_SLPOUT TFT_SLPOUT23,529
#define TFT_NORON TFT_NORON24,554
#define TFT_INVOFF TFT_INVOFF26,580
#define TFT_INVON TFT_INVON27,605
#define TFT_DISPOFF TFT_DISPOFF28,630
#define TFT_DISPON TFT_DISPON29,655
#define TFT_CASET TFT_CASET30,680
#define TFT_PASET TFT_PASET31,705
#define TFT_RAMWR TFT_RAMWR32,730
#define TFT_RAMRD TFT_RAMRD33,755
#define TFT_MADCTL TFT_MADCTL34,780
#define TFT_COLMOD TFT_COLMOD35,805
#define TFT_MAD_MY TFT_MAD_MY38,855
#define TFT_MAD_MX TFT_MAD_MX39,880
#define TFT_MAD_MV TFT_MAD_MV40,905
#define TFT_MAD_ML TFT_MAD_ML41,930
#define TFT_MAD_RGB TFT_MAD_RGB42,955
#define TFT_MAD_BGR TFT_MAD_BGR43,980
#define TFT_MAD_MH TFT_MAD_MH44,1005
#define TFT_MAD_SS TFT_MAD_SS45,1030
#define TFT_MAD_GS TFT_MAD_GS46,1055
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER50,1129
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER52,1181
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER56,1262
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER58,1314
#define TFT_IDXRD TFT_IDXRD62,1375
#define ST_CMD_DELAY ST_CMD_DELAY64,1448
#define ST7789_240x240_XSTART ST7789_240x240_XSTART65,1518
#define ST7789_240x240_YSTART ST7789_240x240_YSTART66,1550
#define ST7789_NOP	ST7789_NOP69,1624
#define ST7789_SWRESET	ST7789_SWRESET70,1650
#define ST7789_RDDID	ST7789_RDDID71,1679
#define ST7789_RDDST	ST7789_RDDST72,1706
#define ST7789_RDDPM	ST7789_RDDPM74,1734
#define ST7789_RDD_MADCTL	ST7789_RDD_MADCTL75,1793
#define ST7789_RDD_COLMOD	ST7789_RDD_COLMOD76,1852
#define ST7789_RDDIM	ST7789_RDDIM77,1917
#define ST7789_RDDSM	ST7789_RDDSM78,1976
#define ST7789_RDDSR	ST7789_RDDSR79,2036
#define ST7789_SLPIN	ST7789_SLPIN81,2118
#define ST7789_SLPOUT	ST7789_SLPOUT82,2145
#define ST7789_PTLON	ST7789_PTLON83,2173
#define ST7789_NORON	ST7789_NORON84,2200
#define ST7789_INVOFF	ST7789_INVOFF86,2228
#define ST7789_INVON	ST7789_INVON87,2256
#define ST7789_GAMSET	ST7789_GAMSET88,2283
#define ST7789_DISPOFF	ST7789_DISPOFF89,2329
#define ST7789_DISPON	ST7789_DISPON90,2358
#define ST7789_CASET	ST7789_CASET91,2386
#define ST7789_RASET	ST7789_RASET92,2413
#define ST7789_RAMWR	ST7789_RAMWR93,2440
#define ST7789_RGBSET	ST7789_RGBSET94,2467
#define ST7789_RAMRD	ST7789_RAMRD95,2547
#define ST7789_PTLAR	ST7789_PTLAR97,2575
#define ST7789_VSCRDEF	ST7789_VSCRDEF98,2602
#define ST7789_TEOFF	ST7789_TEOFF99,2679
#define ST7789_TEON	ST7789_TEON100,2738
#define ST7789_MADCTL	ST7789_MADCTL101,2796
#define ST7789_IDMOFF	ST7789_IDMOFF102,2859
#define ST7789_IDMON	ST7789_IDMON103,2909
#define ST7789_RAMWRC	ST7789_RAMWRC104,2957
#define ST7789_RAMRDC	ST7789_RAMRDC105,3025
#define ST7789_COLMOD	ST7789_COLMOD106,3092
#define ST7789_RAMCTRL	ST7789_RAMCTRL108,3121
#define ST7789_RGBCTRL	ST7789_RGBCTRL109,3170
#define ST7789_PORCTRL	ST7789_PORCTRL110,3219
#define ST7789_FRCTRL1	ST7789_FRCTRL1111,3270
#define ST7789_PARCTRL	ST7789_PARCTRL112,3326
#define ST7789_GCTRL	ST7789_GCTRL113,3384
#define ST7789_GTADJ	ST7789_GTADJ114,3432
#define ST7789_DGMEN	ST7789_DGMEN115,3493
#define ST7789_VCOMS	ST7789_VCOMS116,3549
#define ST7789_LCMCTRL	ST7789_LCMCTRL117,3598
#define ST7789_IDSET	ST7789_IDSET118,3647
#define ST7789_VDVVRHEN	ST7789_VDVVRHEN119,3693
#define ST7789_VRHS	ST7789_VRHS120,3758
#define ST7789_VDVSET	ST7789_VDVSET121,3801
#define ST7789_VCMOFSET	ST7789_VCMOFSET122,3849
#define ST7789_FRCTR2	ST7789_FRCTR2123,3904
#define ST7789_CABCCTRL	ST7789_CABCCTRL124,3953
#define ST7789_REGSEL1	ST7789_REGSEL1125,4004
#define ST7789_REGSEL2	ST7789_REGSEL2126,4066
#define ST7789_PWMFRSEL	ST7789_PWMFRSEL127,4128
#define ST7789_PWCTRL1	ST7789_PWCTRL1128,4190
#define ST7789_VAPVANEN	ST7789_VAPVANEN129,4243
#define ST7789_CMD2EN	ST7789_CMD2EN130,4310
#define ST7789_PVGAMCTRL	ST7789_PVGAMCTRL131,4363
#define ST7789_NVGAMCTRL	ST7789_NVGAMCTRL132,4432
#define ST7789_DGMLUTR	ST7789_DGMLUTR133,4501
#define ST7789_DGMLUTB	ST7789_DGMLUTB134,4574
#define ST7789_GATECTRL	ST7789_GATECTRL135,4648
#define ST7789_SPI2EN	ST7789_SPI2EN136,4699
#define ST7789_PWCTRL2	ST7789_PWCTRL2137,4747
#define ST7789_EQCTRL	ST7789_EQCTRL138,4800
#define ST7789_PROMCTRL	ST7789_PROMCTRL139,4858
#define ST7789_PROMEN	ST7789_PROMEN140,4912
#define ST7789_NVMSET	ST7789_NVMSET141,4968
#define ST7789_PROMACT	ST7789_PROMACT142,5016

lib/TFT_eSPI/TFT_Drivers/RM68140_Rotation.h,44
  writecommand(TFT_MADCTL);TFT_MADCTL4,85

lib/TFT_eSPI/TFT_Drivers/ILI9225_Defines.h,3305
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define TFT_NOP TFT_NOP7,206
#define TFT_SWRST TFT_SWRST8,231
#define TFT_CASET TFT_CASET10,257
#define TFT_PASET TFT_PASET11,277
#define TFT_CASET1 TFT_CASET113,298
#define TFT_CASET2 TFT_CASET214,353
#define TFT_PASET1 TFT_PASET116,409
#define TFT_PASET2 TFT_PASET217,462
#define TFT_RAM_ADDR1 TFT_RAM_ADDR119,516
#define TFT_RAM_ADDR2 TFT_RAM_ADDR220,561
#define TFT_RAMWR TFT_RAMWR22,607
#define TFT_MAD_BGR TFT_MAD_BGR24,653
#define TFT_MAD_RGB TFT_MAD_RGB25,678
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER29,752
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER31,804
  #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER34,863
#define TFT_INVOFF TFT_INVOFF38,925
#define TFT_INVON TFT_INVON39,950
#define TFT_RAMRD TFT_RAMRD40,975
#define TFT_IDXRD TFT_IDXRD41,1000
#define ILI9225_DRIVER_OUTPUT_CTRL ILI9225_DRIVER_OUTPUT_CTRL44,1050
#define ILI9225_LCD_AC_DRIVING_CTRL ILI9225_LCD_AC_DRIVING_CTRL45,1121
#define ILI9225_ENTRY_MODE ILI9225_ENTRY_MODE46,1193
#define ILI9225_DISP_CTRL1 ILI9225_DISP_CTRL147,1253
#define ILI9225_BLANK_PERIOD_CTRL1 ILI9225_BLANK_PERIOD_CTRL148,1320
#define ILI9225_FRAME_CYCLE_CTRL ILI9225_FRAME_CYCLE_CTRL49,1390
#define ILI9225_INTERFACE_CTRL ILI9225_INTERFACE_CTRL50,1459
#define ILI9225_OSC_CTRL ILI9225_OSC_CTRL51,1526
#define ILI9225_POWER_CTRL1 ILI9225_POWER_CTRL152,1587
#define ILI9225_POWER_CTRL2 ILI9225_POWER_CTRL253,1652
#define ILI9225_POWER_CTRL3 ILI9225_POWER_CTRL354,1717
#define ILI9225_POWER_CTRL4 ILI9225_POWER_CTRL455,1782
#define ILI9225_POWER_CTRL5 ILI9225_POWER_CTRL556,1847
#define ILI9225_VCI_RECYCLING ILI9225_VCI_RECYCLING57,1912
#define ILI9225_RAM_ADDR_SET1 ILI9225_RAM_ADDR_SET158,1975
#define ILI9225_RAM_ADDR_SET2 ILI9225_RAM_ADDR_SET259,2052
#define ILI9225_GRAM_DATA_REG ILI9225_GRAM_DATA_REG60,2127
#define ILI9225_GATE_SCAN_CTRL ILI9225_GATE_SCAN_CTRL61,2195
#define ILI9225_VERTICAL_SCROLL_CTRL1 ILI9225_VERTICAL_SCROLL_CTRL162,2271
#define ILI9225_VERTICAL_SCROLL_CTRL2 ILI9225_VERTICAL_SCROLL_CTRL263,2355
#define ILI9225_VERTICAL_SCROLL_CTRL3 ILI9225_VERTICAL_SCROLL_CTRL364,2439
#define ILI9225_PARTIAL_DRIVING_POS1 ILI9225_PARTIAL_DRIVING_POS165,2523
#define ILI9225_PARTIAL_DRIVING_POS2 ILI9225_PARTIAL_DRIVING_POS266,2608
#define ILI9225_HORIZONTAL_WINDOW_ADDR1 ILI9225_HORIZONTAL_WINDOW_ADDR167,2693
#define ILI9225_HORIZONTAL_WINDOW_ADDR2 ILI9225_HORIZONTAL_WINDOW_ADDR268,2776
#define ILI9225_VERTICAL_WINDOW_ADDR1 ILI9225_VERTICAL_WINDOW_ADDR169,2857
#define ILI9225_VERTICAL_WINDOW_ADDR2 ILI9225_VERTICAL_WINDOW_ADDR270,2938
#define ILI9225_GAMMA_CTRL1 ILI9225_GAMMA_CTRL171,3017
#define ILI9225_GAMMA_CTRL2 ILI9225_GAMMA_CTRL272,3082
#define ILI9225_GAMMA_CTRL3 ILI9225_GAMMA_CTRL373,3147
#define ILI9225_GAMMA_CTRL4 ILI9225_GAMMA_CTRL474,3212
#define ILI9225_GAMMA_CTRL5 ILI9225_GAMMA_CTRL575,3277
#define ILI9225_GAMMA_CTRL6 ILI9225_GAMMA_CTRL676,3342
#define ILI9225_GAMMA_CTRL7 ILI9225_GAMMA_CTRL777,3407
#define ILI9225_GAMMA_CTRL8 ILI9225_GAMMA_CTRL878,3472
#define ILI9225_GAMMA_CTRL9 ILI9225_GAMMA_CTRL979,3537
#define ILI9225_GAMMA_CTRL10 ILI9225_GAMMA_CTRL1080,3602
#define TFT_INIT_DELAY TFT_INIT_DELAY83,3715

lib/TFT_eSPI/TFT_Drivers/HX8357D_Rotation.h,44
  writecommand(TFT_MADCTL);TFT_MADCTL3,84

lib/TFT_eSPI/TFT_Drivers/ILI9481_Init.h,1818
#define ILI9481_INIT_1 ILI9481_INIT_18,218
    writecommand(TFT_SLPOUT);TFT_SLPOUT19,579
    writecommand(TFT_MADCTL);TFT_MADCTL60,1321
      writecommand(TFT_INVON);TFT_INVON71,1641
    writecommand(TFT_CASET);TFT_CASET74,1684
    writecommand(TFT_PASET);TFT_PASET80,1798
    writecommand(TFT_DISPON);TFT_DISPON87,1928
    writecommand(TFT_SLPOUT);TFT_SLPOUT95,2165
    writecommand(TFT_MADCTL);TFT_MADCTL149,3116
      writecommand(TFT_INVON);TFT_INVON160,3436
    writecommand(TFT_CASET);TFT_CASET163,3479
    writecommand(TFT_PASET);TFT_PASET169,3593
    writecommand(TFT_DISPON);TFT_DISPON176,3723
    writecommand(TFT_SLPOUT);TFT_SLPOUT184,3960
    writecommand(TFT_MADCTL);TFT_MADCTL238,4911
      writecommand(TFT_INVON);TFT_INVON249,5231
    writecommand(TFT_CASET);TFT_CASET252,5274
    writecommand(TFT_PASET);TFT_PASET258,5388
    writecommand(TFT_DISPON);TFT_DISPON265,5518
    writecommand(TFT_SLPOUT);TFT_SLPOUT273,5755
    writecommand(TFT_MADCTL);TFT_MADCTL323,6639
      writecommand(TFT_INVON);TFT_INVON334,6959
    writecommand(TFT_CASET);TFT_CASET337,7002
    writecommand(TFT_PASET);TFT_PASET343,7116
    writecommand(TFT_DISPON);TFT_DISPON350,7246
    writecommand(TFT_SLPOUT);TFT_SLPOUT358,7483
    writecommand(TFT_MADCTL);TFT_MADCTL411,8413
      writecommand(TFT_INVON);TFT_INVON422,8733
    writecommand(TFT_CASET);TFT_CASET425,8776
    writecommand(TFT_PASET);TFT_PASET431,8890
    writecommand(TFT_DISPON);TFT_DISPON438,9020
    writecommand(TFT_SLPOUT);TFT_SLPOUT446,9257
    writecommand(TFT_MADCTL);TFT_MADCTL523,10589
      writecommand(TFT_INVON);TFT_INVON534,10909
    writecommand(TFT_CASET);TFT_CASET537,10952
    writecommand(TFT_PASET);TFT_PASET543,11066
    writecommand(TFT_DISPON);TFT_DISPON550,11196

lib/TFT_eSPI/TFT_Drivers/ILI9488_Defines.h,975
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define TFT_INIT_DELAY TFT_INIT_DELAY8,212
#define TFT_NOP TFT_NOP12,322
#define TFT_SWRST TFT_SWRST13,347
#define TFT_SLPIN TFT_SLPIN15,373
#define TFT_SLPOUT TFT_SLPOUT16,398
#define TFT_INVOFF TFT_INVOFF18,424
#define TFT_INVON TFT_INVON19,449
#define TFT_DISPOFF TFT_DISPOFF21,475
#define TFT_DISPON TFT_DISPON22,500
#define TFT_CASET TFT_CASET24,526
#define TFT_PASET TFT_PASET25,551
#define TFT_RAMWR TFT_RAMWR26,576
#define TFT_RAMRD TFT_RAMRD28,602
#define TFT_MADCTL TFT_MADCTL30,628
#define TFT_MAD_MY TFT_MAD_MY32,654
#define TFT_MAD_MX TFT_MAD_MX33,679
#define TFT_MAD_MV TFT_MAD_MV34,704
#define TFT_MAD_ML TFT_MAD_ML35,729
#define TFT_MAD_RGB TFT_MAD_RGB36,754
#define TFT_MAD_BGR TFT_MAD_BGR37,779
#define TFT_MAD_MH TFT_MAD_MH38,804
#define TFT_MAD_SS TFT_MAD_SS39,829
#define TFT_MAD_GS TFT_MAD_GS40,854
#define TFT_IDXRD TFT_IDXRD42,880

lib/TFT_eSPI/TFT_Drivers/ILI9481_Rotation.h,44
  writecommand(TFT_MADCTL);TFT_MADCTL3,84

lib/TFT_eSPI/TFT_Drivers/ILI9488_Rotation.h,44
  writecommand(TFT_MADCTL);TFT_MADCTL3,84

lib/TFT_eSPI/TFT_Drivers/GC9A01_Rotation.h,45
  writecommand(TFT_MADCTL);TFT_MADCTL6,103

lib/TFT_eSPI/TFT_Drivers/ST7789_Defines.h,4518
  #define TFT_WIDTH TFT_WIDTH4,136
  #define TFT_HEIGHT TFT_HEIGHT7,187
  #define CGRAM_OFFSETCGRAM_OFFSET11,266
#define TFT_INIT_DELAY TFT_INIT_DELAY15,343
#define TFT_NOP TFT_NOP19,453
#define TFT_SWRST TFT_SWRST20,478
#define TFT_SLPIN TFT_SLPIN22,504
#define TFT_SLPOUT TFT_SLPOUT23,529
#define TFT_NORON TFT_NORON24,554
#define TFT_INVOFF TFT_INVOFF26,580
#define TFT_INVON TFT_INVON27,605
#define TFT_DISPOFF TFT_DISPOFF28,630
#define TFT_DISPON TFT_DISPON29,655
#define TFT_CASET TFT_CASET30,680
#define TFT_PASET TFT_PASET31,705
#define TFT_RAMWR TFT_RAMWR32,730
#define TFT_RAMRD TFT_RAMRD33,755
#define TFT_MADCTL TFT_MADCTL34,780
#define TFT_COLMOD TFT_COLMOD35,805
#define TFT_MAD_MY TFT_MAD_MY38,855
#define TFT_MAD_MX TFT_MAD_MX39,880
#define TFT_MAD_MV TFT_MAD_MV40,905
#define TFT_MAD_ML TFT_MAD_ML41,930
#define TFT_MAD_RGB TFT_MAD_RGB42,955
#define TFT_MAD_BGR TFT_MAD_BGR43,980
#define TFT_MAD_MH TFT_MAD_MH44,1005
#define TFT_MAD_SS TFT_MAD_SS45,1030
#define TFT_MAD_GS TFT_MAD_GS46,1055
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER50,1129
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER52,1181
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER56,1262
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER58,1314
#define TFT_IDXRD TFT_IDXRD62,1375
#define ST7789_NOP	ST7789_NOP65,1489
#define ST7789_SWRESET	ST7789_SWRESET66,1515
#define ST7789_RDDID	ST7789_RDDID67,1544
#define ST7789_RDDST	ST7789_RDDST68,1571
#define ST7789_RDDPM	ST7789_RDDPM70,1599
#define ST7789_RDD_MADCTL	ST7789_RDD_MADCTL71,1658
#define ST7789_RDD_COLMOD	ST7789_RDD_COLMOD72,1717
#define ST7789_RDDIM	ST7789_RDDIM73,1782
#define ST7789_RDDSM	ST7789_RDDSM74,1841
#define ST7789_RDDSR	ST7789_RDDSR75,1901
#define ST7789_SLPIN	ST7789_SLPIN77,1983
#define ST7789_SLPOUT	ST7789_SLPOUT78,2010
#define ST7789_PTLON	ST7789_PTLON79,2038
#define ST7789_NORON	ST7789_NORON80,2065
#define ST7789_INVOFF	ST7789_INVOFF82,2093
#define ST7789_INVON	ST7789_INVON83,2121
#define ST7789_GAMSET	ST7789_GAMSET84,2148
#define ST7789_DISPOFF	ST7789_DISPOFF85,2194
#define ST7789_DISPON	ST7789_DISPON86,2223
#define ST7789_CASET	ST7789_CASET87,2251
#define ST7789_RASET	ST7789_RASET88,2278
#define ST7789_RAMWR	ST7789_RAMWR89,2305
#define ST7789_RGBSET	ST7789_RGBSET90,2332
#define ST7789_RAMRD	ST7789_RAMRD91,2412
#define ST7789_PTLAR	ST7789_PTLAR93,2440
#define ST7789_VSCRDEF	ST7789_VSCRDEF94,2467
#define ST7789_TEOFF	ST7789_TEOFF95,2544
#define ST7789_TEON	ST7789_TEON96,2603
#define ST7789_MADCTL	ST7789_MADCTL97,2661
#define ST7789_IDMOFF	ST7789_IDMOFF98,2724
#define ST7789_IDMON	ST7789_IDMON99,2774
#define ST7789_RAMWRC	ST7789_RAMWRC100,2822
#define ST7789_RAMRDC	ST7789_RAMRDC101,2890
#define ST7789_COLMOD	ST7789_COLMOD102,2957
#define ST7789_RAMCTRL	ST7789_RAMCTRL104,2986
#define ST7789_RGBCTRL	ST7789_RGBCTRL105,3035
#define ST7789_PORCTRL	ST7789_PORCTRL106,3084
#define ST7789_FRCTRL1	ST7789_FRCTRL1107,3135
#define ST7789_PARCTRL	ST7789_PARCTRL108,3191
#define ST7789_GCTRL	ST7789_GCTRL109,3249
#define ST7789_GTADJ	ST7789_GTADJ110,3297
#define ST7789_DGMEN	ST7789_DGMEN111,3358
#define ST7789_VCOMS	ST7789_VCOMS112,3414
#define ST7789_LCMCTRL	ST7789_LCMCTRL113,3463
#define ST7789_IDSET	ST7789_IDSET114,3512
#define ST7789_VDVVRHEN	ST7789_VDVVRHEN115,3558
#define ST7789_VRHS	ST7789_VRHS116,3623
#define ST7789_VDVSET	ST7789_VDVSET117,3666
#define ST7789_VCMOFSET	ST7789_VCMOFSET118,3714
#define ST7789_FRCTR2	ST7789_FRCTR2119,3769
#define ST7789_CABCCTRL	ST7789_CABCCTRL120,3818
#define ST7789_REGSEL1	ST7789_REGSEL1121,3869
#define ST7789_REGSEL2	ST7789_REGSEL2122,3931
#define ST7789_PWMFRSEL	ST7789_PWMFRSEL123,3993
#define ST7789_PWCTRL1	ST7789_PWCTRL1124,4055
#define ST7789_VAPVANEN	ST7789_VAPVANEN125,4108
#define ST7789_CMD2EN	ST7789_CMD2EN126,4175
#define ST7789_PVGAMCTRL	ST7789_PVGAMCTRL127,4228
#define ST7789_NVGAMCTRL	ST7789_NVGAMCTRL128,4297
#define ST7789_DGMLUTR	ST7789_DGMLUTR129,4366
#define ST7789_DGMLUTB	ST7789_DGMLUTB130,4439
#define ST7789_GATECTRL	ST7789_GATECTRL131,4513
#define ST7789_SPI2EN	ST7789_SPI2EN132,4564
#define ST7789_PWCTRL2	ST7789_PWCTRL2133,4612
#define ST7789_EQCTRL	ST7789_EQCTRL134,4665
#define ST7789_PROMCTRL	ST7789_PROMCTRL135,4723
#define ST7789_PROMEN	ST7789_PROMEN136,4777
#define ST7789_NVMSET	ST7789_NVMSET137,4833
#define ST7789_PROMACT	ST7789_PROMACT138,4881

lib/TFT_eSPI/TFT_Drivers/HX8357D_Defines.h,2425
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define TFT_INIT_DELAY TFT_INIT_DELAY8,212
#define TFT_NOP TFT_NOP12,323
#define TFT_SWRST TFT_SWRST13,348
#define TFT_SLPIN TFT_SLPIN15,374
#define TFT_SLPOUT TFT_SLPOUT16,399
#define TFT_INVOFF TFT_INVOFF18,425
#define TFT_INVON TFT_INVON19,450
#define TFT_DISPOFF TFT_DISPOFF21,476
#define TFT_DISPON TFT_DISPON22,501
#define TFT_CASET TFT_CASET24,527
#define TFT_PASET TFT_PASET25,552
#define TFT_RAMWR TFT_RAMWR26,577
#define TFT_RAMRD TFT_RAMRD28,603
#define TFT_MADCTL TFT_MADCTL30,629
#define TFT_MAD_MY TFT_MAD_MY32,655
#define TFT_MAD_MX TFT_MAD_MX33,680
#define TFT_MAD_MV TFT_MAD_MV34,705
#define TFT_MAD_ML TFT_MAD_ML35,730
#define TFT_MAD_RGB TFT_MAD_RGB36,755
#define TFT_MAD_BGR TFT_MAD_BGR37,780
#define TFT_MAD_MH TFT_MAD_MH38,805
#define TFT_MAD_SS TFT_MAD_SS39,830
#define TFT_MAD_GS TFT_MAD_GS40,855
#define TFT_IDXRD TFT_IDXRD42,881
#define HX8357_NOP HX8357_NOP45,955
#define HX8357_SWRESET HX8357_SWRESET46,983
#define HX8357_RDDID HX8357_RDDID47,1011
#define HX8357_RDDST HX8357_RDDST48,1039
#define HX8357_RDPOWMODE HX8357_RDPOWMODE50,1068
#define HX8357_RDMADCTL HX8357_RDMADCTL51,1099
#define HX8357_RDCOLMOD HX8357_RDCOLMOD52,1129
#define HX8357_RDDIM HX8357_RDDIM53,1159
#define HX8357_RDDSDR HX8357_RDDSDR54,1186
#define HX8357_SLPIN HX8357_SLPIN56,1215
#define HX8357_SLPOUT HX8357_SLPOUT57,1243
#define HX8357_INVOFF HX8357_INVOFF59,1272
#define HX8357_INVON HX8357_INVON60,1300
#define HX8357_DISPOFF HX8357_DISPOFF61,1328
#define HX8357_DISPON HX8357_DISPON62,1356
#define HX8357_CASET HX8357_CASET64,1385
#define HX8357_PASET HX8357_PASET65,1413
#define HX8357_RAMWR HX8357_RAMWR66,1441
#define HX8357_RAMRD HX8357_RAMRD67,1469
#define HX8357_TEON HX8357_TEON69,1498
#define HX8357_TEARLINE HX8357_TEARLINE70,1524
#define HX8357_MADCTL HX8357_MADCTL71,1554
#define HX8357_COLMOD HX8357_COLMOD72,1582
#define HX8357_SETOSC HX8357_SETOSC74,1611
#define HX8357_SETPWR1 HX8357_SETPWR175,1638
#define HX8357_SETRGB HX8357_SETRGB76,1666
#define HX8357D_SETCOM HX8357D_SETCOM77,1693
#define HX8357D_SETCYC HX8357D_SETCYC79,1723
#define HX8357D_SETC HX8357D_SETC80,1752
#define HX8357D_SETSTBA HX8357D_SETSTBA82,1779
#define HX8357_SETPANEL HX8357_SETPANEL84,1809
#define HX8357D_SETGAMMA HX8357D_SETGAMMA86,1840

lib/TFT_eSPI/TFT_Drivers/S6D02A1_Defines.h,1648
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define S6D02A1_BLACK S6D02A1_BLACK9,305
#define S6D02A1_NAVY S6D02A1_NAVY10,365
#define S6D02A1_DARKGREEN S6D02A1_DARKGREEN11,425
#define S6D02A1_DARKCYAN S6D02A1_DARKCYAN12,485
#define S6D02A1_MAROON S6D02A1_MAROON13,545
#define S6D02A1_PURPLE S6D02A1_PURPLE14,605
#define S6D02A1_OLIVE S6D02A1_OLIVE15,665
#define S6D02A1_LIGHTGREY S6D02A1_LIGHTGREY16,725
#define S6D02A1_DARKGREY S6D02A1_DARKGREY17,785
#define S6D02A1_BLUE S6D02A1_BLUE18,845
#define S6D02A1_GREEN S6D02A1_GREEN19,905
#define S6D02A1_CYAN S6D02A1_CYAN20,965
#define S6D02A1_RED S6D02A1_RED21,1025
#define S6D02A1_MAGENTA S6D02A1_MAGENTA22,1085
#define S6D02A1_YELLOW S6D02A1_YELLOW23,1145
#define S6D02A1_WHITE S6D02A1_WHITE24,1205
#define S6D02A1_ORANGE S6D02A1_ORANGE25,1265
#define S6D02A1_GREENYELLOW S6D02A1_GREENYELLOW26,1325
#define S6D02A1_PINK S6D02A1_PINK27,1385
#define TFT_INIT_DELAY TFT_INIT_DELAY31,1468
#define TFT_NOP TFT_NOP35,1539
#define TFT_SWRST TFT_SWRST36,1564
#define TFT_CASET TFT_CASET38,1590
#define TFT_PASET TFT_PASET39,1615
#define TFT_RAMWR TFT_RAMWR40,1640
#define TFT_RAMRD TFT_RAMRD42,1666
#define TFT_IDXRD TFT_IDXRD43,1691
#define TFT_MADCTL TFT_MADCTL45,1771
#define TFT_MAD_MY TFT_MAD_MY46,1796
#define TFT_MAD_MX TFT_MAD_MX47,1821
#define TFT_MAD_MV TFT_MAD_MV48,1846
#define TFT_MAD_ML TFT_MAD_ML49,1871
#define TFT_MAD_BGR TFT_MAD_BGR50,1896
#define TFT_MAD_MH TFT_MAD_MH51,1921
#define TFT_MAD_RGB TFT_MAD_RGB52,1946
#define TFT_INVOFF TFT_INVOFF54,1972
#define TFT_INVON TFT_INVON55,1997

lib/TFT_eSPI/TFT_Drivers/R61581_Rotation.h,44
  writecommand(TFT_MADCTL);TFT_MADCTL3,83

lib/TFT_eSPI/TFT_Drivers/ST7735_Init.h,0

lib/TFT_eSPI/TFT_Drivers/R61581_Init.h,240
    writecommand(TFT_SLPOUT);TFT_SLPOUT11,247
    writecommand(TFT_MADCTL);TFT_MADCTL55,1035
    writecommand(TFT_CASET);TFT_CASET61,1133
    writecommand(TFT_PASET);TFT_PASET67,1247
    writecommand(TFT_DISPON);TFT_DISPON74,1377

lib/TFT_eSPI/TFT_Drivers/HX8357D_Init.h,915
    writecommand(HX8357D_SETC);HX8357D_SETC12,264
    writecommand(HX8357_SETRGB); HX8357_SETRGB19,413
    writecommand(HX8357D_SETCOM);HX8357D_SETCOM26,591
    writecommand(HX8357_SETOSC);HX8357_SETOSC29,662
    writecommand(HX8357_SETPANEL); //Set PanelHX8357_SETPANEL32,759
    writecommand(HX8357_SETPWR1);HX8357_SETPWR135,864
    writecommand(HX8357D_SETSTBA);  HX8357D_SETSTBA43,1080
    writecommand(HX8357D_SETCYC);  HX8357D_SETCYC51,1307
    writecommand(HX8357D_SETGAMMA); HX8357D_SETGAMMA60,1547
    writecommand(HX8357_COLMOD);HX8357_COLMOD96,2303
    writecommand(HX8357_MADCTL);  HX8357_MADCTL99,2373
    writecommand(HX8357_TEON);  // TE offHX8357_TEON102,2435
    writecommand(HX8357_TEARLINE);  // tear lineHX8357_TEARLINE105,2504
    writecommand(HX8357_SLPOUT);  //Exit SleepHX8357_SLPOUT109,2597
    writecommand(HX8357_DISPON);  // display onHX8357_DISPON112,2665

lib/TFT_eSPI/TFT_Drivers/ILI9163_Defines.h,1698
  #define TFT_WIDTH TFT_WIDTH4,136
  #define TFT_HEIGHT TFT_HEIGHT7,187
  #define CGRAM_OFFSETCGRAM_OFFSET11,266
#define ILI9163_BLACK ILI9163_BLACK16,436
#define ILI9163_NAVY ILI9163_NAVY17,496
#define ILI9163_DARKGREEN ILI9163_DARKGREEN18,556
#define ILI9163_DARKCYAN ILI9163_DARKCYAN19,616
#define ILI9163_MAROON ILI9163_MAROON20,676
#define ILI9163_PURPLE ILI9163_PURPLE21,736
#define ILI9163_OLIVE ILI9163_OLIVE22,796
#define ILI9163_LIGHTGREY ILI9163_LIGHTGREY23,856
#define ILI9163_DARKGREY ILI9163_DARKGREY24,916
#define ILI9163_BLUE ILI9163_BLUE25,976
#define ILI9163_GREEN ILI9163_GREEN26,1036
#define ILI9163_CYAN ILI9163_CYAN27,1096
#define ILI9163_RED ILI9163_RED28,1156
#define ILI9163_MAGENTA ILI9163_MAGENTA29,1216
#define ILI9163_YELLOW ILI9163_YELLOW30,1276
#define ILI9163_WHITE ILI9163_WHITE31,1336
#define ILI9163_ORANGE ILI9163_ORANGE32,1396
#define ILI9163_GREENYELLOW ILI9163_GREENYELLOW33,1456
#define ILI9163_PINK ILI9163_PINK34,1516
#define TFT_INIT_DELAY TFT_INIT_DELAY38,1599
#define TFT_NOP TFT_NOP42,1670
#define TFT_SWRST TFT_SWRST43,1695
#define TFT_CASET TFT_CASET45,1721
#define TFT_PASET TFT_PASET46,1746
#define TFT_RAMWR TFT_RAMWR47,1771
#define TFT_RAMRD TFT_RAMRD49,1797
#define TFT_IDXRD TFT_IDXRD50,1822
#define TFT_MADCTL TFT_MADCTL52,1902
#define TFT_MAD_MY TFT_MAD_MY53,1927
#define TFT_MAD_MX TFT_MAD_MX54,1952
#define TFT_MAD_MV TFT_MAD_MV55,1977
#define TFT_MAD_ML TFT_MAD_ML56,2002
#define TFT_MAD_BGR TFT_MAD_BGR57,2027
#define TFT_MAD_MH TFT_MAD_MH58,2052
#define TFT_MAD_RGB TFT_MAD_RGB59,2077
#define TFT_INVOFF TFT_INVOFF61,2103
#define TFT_INVON TFT_INVON62,2128

lib/TFT_eSPI/TFT_Drivers/ST7796_Defines.h,3106
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define TFT_NOP TFT_NOP7,206
#define TFT_SWRST TFT_SWRST8,231
#define TFT_CASET TFT_CASET10,257
#define TFT_PASET TFT_PASET11,282
#define TFT_RAMWR TFT_RAMWR12,307
#define TFT_RAMRD TFT_RAMRD13,332
#define TFT_MADCTL TFT_MADCTL15,358
#define TFT_MAD_MY TFT_MAD_MY16,383
#define TFT_MAD_MX TFT_MAD_MX17,408
#define TFT_MAD_MV TFT_MAD_MV18,433
#define TFT_MAD_ML TFT_MAD_ML19,458
#define TFT_MAD_BGR TFT_MAD_BGR20,483
#define TFT_MAD_MH TFT_MAD_MH21,508
#define TFT_MAD_RGB TFT_MAD_RGB22,533
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER26,607
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER28,659
  #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER31,718
#define TFT_INVOFF TFT_INVOFF34,768
#define TFT_INVON TFT_INVON35,793
#define ST7796_NOP ST7796_NOP39,848
#define ST7796_SWRESET ST7796_SWRESET40,876
#define ST7796_RDDID ST7796_RDDID41,904
#define ST7796_RDDST ST7796_RDDST42,932
#define ST7796_SLPIN ST7796_SLPIN44,961
#define ST7796_SLPOUT ST7796_SLPOUT45,989
#define ST7796_PTLON ST7796_PTLON46,1017
#define ST7796_NORON ST7796_NORON47,1045
#define ST7796_RDMODE ST7796_RDMODE49,1074
#define ST7796_RDMADCTL ST7796_RDMADCTL50,1102
#define ST7796_RDPIXFMT ST7796_RDPIXFMT51,1132
#define ST7796_RDIMGFMT ST7796_RDIMGFMT52,1162
#define ST7796_RDSELFDIAG ST7796_RDSELFDIAG53,1192
#define ST7796_INVOFF ST7796_INVOFF55,1225
#define ST7796_INVON ST7796_INVON56,1253
#define ST7796_DISPOFF ST7796_DISPOFF58,1282
#define ST7796_DISPON ST7796_DISPON59,1310
#define ST7796_CASET ST7796_CASET61,1339
#define ST7796_PASET ST7796_PASET62,1367
#define ST7796_RAMWR ST7796_RAMWR63,1395
#define ST7796_RAMRD ST7796_RAMRD64,1423
#define ST7796_PTLAR ST7796_PTLAR66,1452
#define ST7796_VSCRDEF ST7796_VSCRDEF67,1480
#define ST7796_MADCTL ST7796_MADCTL68,1508
#define ST7796_VSCRSADD ST7796_VSCRSADD69,1536
#define ST7796_PIXFMT ST7796_PIXFMT70,1565
#define ST7796_WRDISBV ST7796_WRDISBV72,1594
#define ST7796_RDDISBV ST7796_RDDISBV73,1623
#define ST7796_WRCTRLD ST7796_WRCTRLD74,1652
#define ST7796_FRMCTR1 ST7796_FRMCTR176,1682
#define ST7796_FRMCTR2 ST7796_FRMCTR277,1710
#define ST7796_FRMCTR3 ST7796_FRMCTR378,1738
#define ST7796_INVCTR ST7796_INVCTR79,1766
#define ST7796_DFUNCTR ST7796_DFUNCTR80,1794
#define ST7796_PWCTR1 ST7796_PWCTR182,1823
#define ST7796_PWCTR2 ST7796_PWCTR283,1851
#define ST7796_PWCTR3 ST7796_PWCTR384,1879
#define ST7796_VMCTR1 ST7796_VMCTR186,1908
#define ST7796_VMCOFF ST7796_VMCOFF87,1936
#define ST7796_RDID4 ST7796_RDID489,1965
#define ST7796_GMCTRP1 ST7796_GMCTRP191,1994
#define ST7796_GMCTRN1 ST7796_GMCTRN192,2022
#define ST7796_MADCTL_MY ST7796_MADCTL_MY94,2051
#define ST7796_MADCTL_MX ST7796_MADCTL_MX95,2082
#define ST7796_MADCTL_MV ST7796_MADCTL_MV96,2113
#define ST7796_MADCTL_ML ST7796_MADCTL_ML97,2144
#define ST7796_MADCTL_RGB ST7796_MADCTL_RGB98,2175
#define ST7796_MADCTL_BGR ST7796_MADCTL_BGR99,2206
#define ST7796_MADCTL_MH ST7796_MADCTL_MH100,2237

lib/TFT_eSPI/TFT_Drivers/GC9A01_Init.h,0

lib/TFT_eSPI/TFT_Drivers/ILI9225_Init.h,0

lib/TFT_eSPI/TFT_Drivers/ILI9486_Rotation.h,44
  writecommand(TFT_MADCTL);TFT_MADCTL3,84

lib/TFT_eSPI/TFT_Drivers/ILI9488_Init.h,200
    writecommand(TFT_MADCTL); // Memory Access ControlTFT_MADCTL57,1236
    writecommand(TFT_SLPOUT);  //Exit SleepTFT_SLPOUT90,2083
    writecommand(TFT_DISPON);  //Display onTFT_DISPON93,2140

lib/TFT_eSPI/TFT_Drivers/S6D02A1_Init.h,0

lib/TFT_eSPI/TFT_Drivers/ST7735_Defines.h,4663
  #define TFT_WIDTH TFT_WIDTH4,136
  #define TFT_HEIGHT TFT_HEIGHT7,187
#define INITR_GREENTAB INITR_GREENTAB12,263
#define INITR_REDTAB INITR_REDTAB13,296
#define INITR_BLACKTAB INITR_BLACKTAB14,329
#define INITR_GREENTAB2 INITR_GREENTAB215,389
#define INITR_GREENTAB3 INITR_GREENTAB316,488
#define INITR_GREENTAB128 INITR_GREENTAB12817,582
#define INITR_GREENTAB160x80 INITR_GREENTAB160x8018,679
#define INITR_REDTAB160x80 INITR_REDTAB160x8019,776
#define INITB INITB20,950
  #define TAB_COLOUR TAB_COLOUR25,1105
  #define TAB_COLOUR TAB_COLOUR28,1167
  #define CGRAM_OFFSETCGRAM_OFFSET29,1203
  #define TAB_COLOUR TAB_COLOUR32,1262
  #define CGRAM_OFFSETCGRAM_OFFSET33,1299
  #define TAB_COLOUR TAB_COLOUR36,1356
  #define CGRAM_OFFSETCGRAM_OFFSET37,1393
  #define TAB_COLOUR TAB_COLOUR40,1452
  #define CGRAM_OFFSETCGRAM_OFFSET41,1491
  #define TAB_COLOUR TAB_COLOUR44,1554
  #define CGRAM_OFFSETCGRAM_OFFSET45,1596
  #define TAB_COLOUR TAB_COLOUR48,1656
  #define CGRAM_OFFSETCGRAM_OFFSET49,1696
  #define TAB_COLOUR TAB_COLOUR52,1751
  #define TAB_COLOUR TAB_COLOUR55,1820
  #define TAB_COLOUR TAB_COLOUR58,1896
#define ST7735_BLACK ST7735_BLACK64,2080
#define ST7735_NAVY ST7735_NAVY65,2139
#define ST7735_DARKGREEN ST7735_DARKGREEN66,2198
#define ST7735_DARKCYAN ST7735_DARKCYAN67,2257
#define ST7735_MAROON ST7735_MAROON68,2316
#define ST7735_PURPLE ST7735_PURPLE69,2375
#define ST7735_OLIVE ST7735_OLIVE70,2434
#define ST7735_LIGHTGREY ST7735_LIGHTGREY71,2493
#define ST7735_DARKGREY ST7735_DARKGREY72,2552
#define ST7735_BLUE ST7735_BLUE73,2611
#define ST7735_GREEN ST7735_GREEN74,2670
#define ST7735_CYAN ST7735_CYAN75,2729
#define ST7735_RED ST7735_RED76,2788
#define ST7735_MAGENTA ST7735_MAGENTA77,2847
#define ST7735_YELLOW ST7735_YELLOW78,2906
#define ST7735_WHITE ST7735_WHITE79,2965
#define ST7735_ORANGE ST7735_ORANGE80,3024
#define ST7735_GREENYELLOW ST7735_GREENYELLOW81,3083
#define ST7735_PINK ST7735_PINK82,3142
#define TFT_INIT_DELAY TFT_INIT_DELAY86,3224
#define TFT_NOP TFT_NOP90,3295
#define TFT_SWRST TFT_SWRST91,3320
#define TFT_CASET TFT_CASET93,3346
#define TFT_PASET TFT_PASET94,3371
#define TFT_RAMWR TFT_RAMWR95,3396
#define TFT_RAMRD TFT_RAMRD97,3422
#define TFT_IDXRD TFT_IDXRD98,3447
#define TFT_MADCTL TFT_MADCTL100,3527
#define TFT_MAD_MY TFT_MAD_MY101,3552
#define TFT_MAD_MX TFT_MAD_MX102,3577
#define TFT_MAD_MV TFT_MAD_MV103,3602
#define TFT_MAD_ML TFT_MAD_ML104,3627
#define TFT_MAD_BGR TFT_MAD_BGR105,3652
#define TFT_MAD_MH TFT_MAD_MH106,3677
#define TFT_MAD_RGB TFT_MAD_RGB107,3702
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER111,3826
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER113,3878
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER117,3964
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER119,4016
#define TFT_INVOFF TFT_INVOFF123,4077
#define TFT_INVON TFT_INVON124,4102
#define ST7735_NOP ST7735_NOP127,4169
#define ST7735_SWRESET ST7735_SWRESET128,4197
#define ST7735_RDDID ST7735_RDDID129,4225
#define ST7735_RDDST ST7735_RDDST130,4253
#define ST7735_SLPIN ST7735_SLPIN132,4282
#define ST7735_SLPOUT ST7735_SLPOUT133,4310
#define ST7735_PTLON ST7735_PTLON134,4338
#define ST7735_NORON ST7735_NORON135,4366
#define ST7735_INVOFF ST7735_INVOFF137,4395
#define ST7735_INVON ST7735_INVON138,4423
#define ST7735_DISPOFF ST7735_DISPOFF139,4451
#define ST7735_DISPON ST7735_DISPON140,4479
#define ST7735_CASET ST7735_CASET141,4507
#define ST7735_RASET ST7735_RASET142,4535
#define ST7735_RAMWR ST7735_RAMWR143,4572
#define ST7735_RAMRD ST7735_RAMRD144,4600
#define ST7735_PTLAR ST7735_PTLAR146,4629
#define ST7735_COLMOD ST7735_COLMOD147,4657
#define ST7735_MADCTL ST7735_MADCTL148,4685
#define ST7735_FRMCTR1 ST7735_FRMCTR1150,4714
#define ST7735_FRMCTR2 ST7735_FRMCTR2151,4742
#define ST7735_FRMCTR3 ST7735_FRMCTR3152,4770
#define ST7735_INVCTR ST7735_INVCTR153,4798
#define ST7735_DISSET5 ST7735_DISSET5154,4826
#define ST7735_PWCTR1 ST7735_PWCTR1156,4855
#define ST7735_PWCTR2 ST7735_PWCTR2157,4883
#define ST7735_PWCTR3 ST7735_PWCTR3158,4911
#define ST7735_PWCTR4 ST7735_PWCTR4159,4939
#define ST7735_PWCTR5 ST7735_PWCTR5160,4967
#define ST7735_VMCTR1 ST7735_VMCTR1161,4995
#define ST7735_RDID1 ST7735_RDID1163,5024
#define ST7735_RDID2 ST7735_RDID2164,5052
#define ST7735_RDID3 ST7735_RDID3165,5080
#define ST7735_RDID4 ST7735_RDID4166,5108
#define ST7735_PWCTR6 ST7735_PWCTR6168,5137
#define ST7735_GMCTRP1 ST7735_GMCTRP1170,5166
#define ST7735_GMCTRN1 ST7735_GMCTRN1171,5194

lib/TFT_eSPI/TFT_Drivers/ILI9481_Defines.h,975
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define TFT_INIT_DELAY TFT_INIT_DELAY8,212
#define TFT_NOP TFT_NOP12,322
#define TFT_SWRST TFT_SWRST13,347
#define TFT_SLPIN TFT_SLPIN15,373
#define TFT_SLPOUT TFT_SLPOUT16,398
#define TFT_INVOFF TFT_INVOFF18,424
#define TFT_INVON TFT_INVON19,449
#define TFT_DISPOFF TFT_DISPOFF21,475
#define TFT_DISPON TFT_DISPON22,500
#define TFT_CASET TFT_CASET24,526
#define TFT_PASET TFT_PASET25,551
#define TFT_RAMWR TFT_RAMWR26,576
#define TFT_RAMRD TFT_RAMRD28,602
#define TFT_MADCTL TFT_MADCTL30,628
#define TFT_MAD_MY TFT_MAD_MY32,654
#define TFT_MAD_MX TFT_MAD_MX33,679
#define TFT_MAD_MV TFT_MAD_MV34,704
#define TFT_MAD_ML TFT_MAD_ML35,729
#define TFT_MAD_RGB TFT_MAD_RGB36,754
#define TFT_MAD_BGR TFT_MAD_BGR37,779
#define TFT_MAD_MH TFT_MAD_MH38,804
#define TFT_MAD_SS TFT_MAD_SS39,829
#define TFT_MAD_GS TFT_MAD_GS40,854
#define TFT_IDXRD TFT_IDXRD42,880

lib/TFT_eSPI/TFT_Drivers/RM68140_Defines.h,975
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define TFT_INIT_DELAY TFT_INIT_DELAY8,212
#define TFT_NOP TFT_NOP12,322
#define TFT_SWRST TFT_SWRST13,347
#define TFT_SLPIN TFT_SLPIN15,373
#define TFT_SLPOUT TFT_SLPOUT16,398
#define TFT_INVOFF TFT_INVOFF18,424
#define TFT_INVON TFT_INVON19,449
#define TFT_DISPOFF TFT_DISPOFF21,475
#define TFT_DISPON TFT_DISPON22,500
#define TFT_CASET TFT_CASET24,526
#define TFT_PASET TFT_PASET25,551
#define TFT_RAMWR TFT_RAMWR26,576
#define TFT_RAMRD TFT_RAMRD28,602
#define TFT_MADCTL TFT_MADCTL30,628
#define TFT_MAD_MY TFT_MAD_MY32,654
#define TFT_MAD_MX TFT_MAD_MX33,679
#define TFT_MAD_MV TFT_MAD_MV34,704
#define TFT_MAD_ML TFT_MAD_ML35,729
#define TFT_MAD_RGB TFT_MAD_RGB36,754
#define TFT_MAD_BGR TFT_MAD_BGR37,779
#define TFT_MAD_MH TFT_MAD_MH38,804
#define TFT_MAD_SS TFT_MAD_SS39,829
#define TFT_MAD_GS TFT_MAD_GS40,854
#define TFT_IDXRD TFT_IDXRD42,880

lib/TFT_eSPI/TFT_Drivers/GC9A01_Defines.h,752
  #define TFT_WIDTH TFT_WIDTH4,136
  #define TFT_HEIGHT TFT_HEIGHT7,187
#define TFT_INIT_DELAY TFT_INIT_DELAY11,266
#define TFT_NOP TFT_NOP14,336
#define TFT_SWRST TFT_SWRST15,361
#define TFT_CASET TFT_CASET17,387
#define TFT_PASET TFT_PASET18,412
#define TFT_RAMWR TFT_RAMWR19,437
#define TFT_RAMRD TFT_RAMRD21,463
#define TFT_IDXRD TFT_IDXRD22,488
#define TFT_MADCTL TFT_MADCTL24,568
#define TFT_MAD_MY TFT_MAD_MY25,593
#define TFT_MAD_MX TFT_MAD_MX26,618
#define TFT_MAD_MV TFT_MAD_MV27,643
#define TFT_MAD_ML TFT_MAD_ML28,668
#define TFT_MAD_BGR TFT_MAD_BGR29,693
#define TFT_MAD_MH TFT_MAD_MH30,718
#define TFT_MAD_RGB TFT_MAD_RGB31,743
#define TFT_INVOFF TFT_INVOFF33,769
#define TFT_INVON TFT_INVON34,794

lib/TFT_eSPI/TFT_Drivers/ILI9341_Defines.h,4601
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define ILI9341_BLACK ILI9341_BLACK9,305
#define ILI9341_NAVY ILI9341_NAVY10,365
#define ILI9341_DARKGREEN ILI9341_DARKGREEN11,425
#define ILI9341_DARKCYAN ILI9341_DARKCYAN12,485
#define ILI9341_MAROON ILI9341_MAROON13,545
#define ILI9341_PURPLE ILI9341_PURPLE14,605
#define ILI9341_OLIVE ILI9341_OLIVE15,665
#define ILI9341_LIGHTGREY ILI9341_LIGHTGREY16,725
#define ILI9341_DARKGREY ILI9341_DARKGREY17,785
#define ILI9341_BLUE ILI9341_BLUE18,845
#define ILI9341_GREEN ILI9341_GREEN19,905
#define ILI9341_CYAN ILI9341_CYAN20,965
#define ILI9341_RED ILI9341_RED21,1025
#define ILI9341_MAGENTA ILI9341_MAGENTA22,1085
#define ILI9341_YELLOW ILI9341_YELLOW23,1145
#define ILI9341_WHITE ILI9341_WHITE24,1205
#define ILI9341_ORANGE ILI9341_ORANGE25,1265
#define ILI9341_GREENYELLOW ILI9341_GREENYELLOW26,1325
#define ILI9341_PINK ILI9341_PINK27,1385
#define TFT_INIT_DELAY TFT_INIT_DELAY31,1468
#define TFT_NOP TFT_NOP35,1578
#define TFT_SWRST TFT_SWRST36,1603
#define TFT_CASET TFT_CASET38,1629
#define TFT_PASET TFT_PASET39,1654
#define TFT_RAMWR TFT_RAMWR40,1679
#define TFT_RAMRD TFT_RAMRD42,1705
#define TFT_IDXRD TFT_IDXRD43,1730
#define TFT_MADCTL TFT_MADCTL45,1803
#define TFT_MAD_MY TFT_MAD_MY46,1828
#define TFT_MAD_MX TFT_MAD_MX47,1853
#define TFT_MAD_MV TFT_MAD_MV48,1878
#define TFT_MAD_ML TFT_MAD_ML49,1903
#define TFT_MAD_BGR TFT_MAD_BGR50,1928
#define TFT_MAD_MH TFT_MAD_MH51,1953
#define TFT_MAD_RGB TFT_MAD_RGB52,1978
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER56,2052
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER58,2104
  #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER61,2163
#define TFT_INVOFF TFT_INVOFF64,2213
#define TFT_INVON TFT_INVON65,2238
#define ILI9341_NOP ILI9341_NOP69,2322
#define ILI9341_SWRESET ILI9341_SWRESET70,2351
#define ILI9341_RDDID ILI9341_RDDID71,2380
#define ILI9341_RDDST ILI9341_RDDST72,2409
#define ILI9341_SLPIN ILI9341_SLPIN74,2439
#define ILI9341_SLPOUT ILI9341_SLPOUT75,2468
#define ILI9341_PTLON ILI9341_PTLON76,2497
#define ILI9341_NORON ILI9341_NORON77,2526
#define ILI9341_RDMODE ILI9341_RDMODE79,2556
#define ILI9341_RDMADCTL ILI9341_RDMADCTL80,2585
#define ILI9341_RDPIXFMT ILI9341_RDPIXFMT81,2616
#define ILI9341_RDIMGFMT ILI9341_RDIMGFMT82,2647
#define ILI9341_RDSELFDIAG ILI9341_RDSELFDIAG83,2678
#define ILI9341_INVOFF ILI9341_INVOFF85,2712
#define ILI9341_INVON ILI9341_INVON86,2741
#define ILI9341_GAMMASET ILI9341_GAMMASET87,2770
#define ILI9341_DISPOFF ILI9341_DISPOFF88,2800
#define ILI9341_DISPON ILI9341_DISPON89,2829
#define ILI9341_CASET ILI9341_CASET91,2859
#define ILI9341_PASET ILI9341_PASET92,2888
#define ILI9341_RAMWR ILI9341_RAMWR93,2917
#define ILI9341_RAMRD ILI9341_RAMRD94,2946
#define ILI9341_PTLAR ILI9341_PTLAR96,2976
#define ILI9341_VSCRDEF ILI9341_VSCRDEF97,3005
#define ILI9341_MADCTL ILI9341_MADCTL98,3034
#define ILI9341_VSCRSADD ILI9341_VSCRSADD99,3063
#define ILI9341_PIXFMT ILI9341_PIXFMT100,3093
#define ILI9341_WRDISBV ILI9341_WRDISBV102,3123
#define ILI9341_RDDISBV ILI9341_RDDISBV103,3153
#define ILI9341_WRCTRLD ILI9341_WRCTRLD104,3183
#define ILI9341_FRMCTR1 ILI9341_FRMCTR1106,3214
#define ILI9341_FRMCTR2 ILI9341_FRMCTR2107,3243
#define ILI9341_FRMCTR3 ILI9341_FRMCTR3108,3272
#define ILI9341_INVCTR ILI9341_INVCTR109,3301
#define ILI9341_DFUNCTR ILI9341_DFUNCTR110,3330
#define ILI9341_PWCTR1 ILI9341_PWCTR1112,3360
#define ILI9341_PWCTR2 ILI9341_PWCTR2113,3389
#define ILI9341_PWCTR3 ILI9341_PWCTR3114,3418
#define ILI9341_PWCTR4 ILI9341_PWCTR4115,3447
#define ILI9341_PWCTR5 ILI9341_PWCTR5116,3476
#define ILI9341_VMCTR1 ILI9341_VMCTR1117,3505
#define ILI9341_VMCTR2 ILI9341_VMCTR2118,3534
#define ILI9341_RDID4 ILI9341_RDID4120,3564
#define ILI9341_RDINDEX ILI9341_RDINDEX121,3593
#define ILI9341_RDID1 ILI9341_RDID1122,3622
#define ILI9341_RDID2 ILI9341_RDID2123,3651
#define ILI9341_RDID3 ILI9341_RDID3124,3680
#define ILI9341_RDIDX ILI9341_RDIDX125,3709
#define ILI9341_GMCTRP1 ILI9341_GMCTRP1127,3746
#define ILI9341_GMCTRN1 ILI9341_GMCTRN1128,3775
#define ILI9341_MADCTL_MY ILI9341_MADCTL_MY130,3805
#define ILI9341_MADCTL_MX ILI9341_MADCTL_MX131,3837
#define ILI9341_MADCTL_MV ILI9341_MADCTL_MV132,3869
#define ILI9341_MADCTL_ML ILI9341_MADCTL_ML133,3901
#define ILI9341_MADCTL_RGB ILI9341_MADCTL_RGB134,3933
#define ILI9341_MADCTL_BGR ILI9341_MADCTL_BGR135,3965
#define ILI9341_MADCTL_MH ILI9341_MADCTL_MH136,3997

lib/TFT_eSPI/TFT_Drivers/R61581_Defines.h,975
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
#define TFT_INIT_DELAY TFT_INIT_DELAY8,212
#define TFT_NOP TFT_NOP12,322
#define TFT_SWRST TFT_SWRST13,347
#define TFT_SLPIN TFT_SLPIN15,373
#define TFT_SLPOUT TFT_SLPOUT16,398
#define TFT_INVOFF TFT_INVOFF18,424
#define TFT_INVON TFT_INVON19,449
#define TFT_DISPOFF TFT_DISPOFF21,475
#define TFT_DISPON TFT_DISPON22,500
#define TFT_CASET TFT_CASET24,526
#define TFT_PASET TFT_PASET25,551
#define TFT_RAMWR TFT_RAMWR26,576
#define TFT_RAMRD TFT_RAMRD28,602
#define TFT_MADCTL TFT_MADCTL30,628
#define TFT_MAD_MY TFT_MAD_MY32,654
#define TFT_MAD_MX TFT_MAD_MX33,679
#define TFT_MAD_MV TFT_MAD_MV34,704
#define TFT_MAD_ML TFT_MAD_ML35,729
#define TFT_MAD_RGB TFT_MAD_RGB36,754
#define TFT_MAD_BGR TFT_MAD_BGR37,779
#define TFT_MAD_MH TFT_MAD_MH38,804
#define TFT_MAD_SS TFT_MAD_SS39,829
#define TFT_MAD_GS TFT_MAD_GS40,854
#define TFT_IDXRD TFT_IDXRD42,880

lib/TFT_eSPI/TFT_Drivers/SSD1963_Rotation.h,45
  writecommand(TFT_MADCTL);TFT_MADCTL6,140

lib/TFT_eSPI/TFT_Drivers/ILI9486_Init.h,0

lib/TFT_eSPI/TFT_Drivers/ILI9341_Rotation.h,45
  writecommand(TFT_MADCTL);TFT_MADCTL6,140

lib/TFT_eSPI/TFT_Drivers/ILI9225_Rotation.h,0

lib/TFT_eSPI/TFT_Drivers/S6D02A1_Rotation.h,45
  writecommand(TFT_MADCTL);TFT_MADCTL6,104

lib/TFT_eSPI/TFT_Drivers/ST7735_Rotation.h,45
  writecommand(TFT_MADCTL);TFT_MADCTL6,139

lib/TFT_eSPI/TFT_Drivers/SSD1963_Init.h,0

lib/TFT_eSPI/TFT_Drivers/ILI9341_Init.h,0

lib/TFT_eSPI/TFT_Drivers/ST7789_2_Init.h,0

lib/TFT_eSPI/TFT_Drivers/RM68140_Init.h,239
    writecommand(TFT_SLPOUT);TFT_SLPOUT11,249
    writecommand(TFT_MADCTL);TFT_MADCTL52,991
    writecommand(TFT_CASET);TFT_CASET58,1089
    writecommand(TFT_PASET);TFT_PASET64,1203
    writecommand(TFT_DISPON);TFT_DISPON71,1333

lib/TFT_eSPI/TFT_Drivers/ST7789_2_Rotation.h,44
  writecommand(TFT_MADCTL);TFT_MADCTL3,83

lib/TFT_eSPI/TFT_Drivers/ST7789_Rotation.h,42
writecommand(TFT_MADCTL);TFT_MADCTL3,81

lib/TFT_eSPI/TFT_Drivers/SSD1963_Defines.h,1220
  #define TFT_WIDTH TFT_WIDTH4,151
  #define TFT_HEIGHT TFT_HEIGHT5,176
  #define TFT_WIDTH TFT_WIDTH7,236
  #define TFT_HEIGHT TFT_HEIGHT8,261
  #define TFT_WIDTH TFT_WIDTH10,324
  #define TFT_HEIGHT TFT_HEIGHT11,349
  #define TFT_WIDTH TFT_WIDTH13,411
  #define TFT_HEIGHT TFT_HEIGHT14,436
  #define SSD1963_DRIVERSSD1963_DRIVER19,547
#define TFT_INIT_DELAY TFT_INIT_DELAY23,626
#define TFT_NOP TFT_NOP26,735
#define TFT_SWRST TFT_SWRST27,760
#define TFT_CASET TFT_CASET29,786
#define TFT_PASET TFT_PASET30,811
#define TFT_RAMWR TFT_RAMWR31,836
#define TFT_RAMRD TFT_RAMRD33,862
#define TFT_IDXRD TFT_IDXRD34,887
#define TFT_MADCTL TFT_MADCTL36,960
#define TFT_MAD_MY TFT_MAD_MY37,985
#define TFT_MAD_MX TFT_MAD_MX38,1010
#define TFT_MAD_MV TFT_MAD_MV39,1035
#define TFT_MAD_ML TFT_MAD_ML40,1060
#define TFT_MAD_BGR TFT_MAD_BGR41,1085
#define TFT_MAD_MH TFT_MAD_MH42,1110
#define TFT_MAD_RGB TFT_MAD_RGB43,1135
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER47,1209
    #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER49,1261
  #define TFT_MAD_COLOR_ORDER TFT_MAD_COLOR_ORDER52,1320
#define TFT_INVOFF TFT_INVOFF55,1370
#define TFT_INVON TFT_INVON56,1395

lib/TFT_eSPI/TFT_Drivers/ILI9486_Defines.h,1780
#define TFT_WIDTH TFT_WIDTH3,118
#define TFT_HEIGHT TFT_HEIGHT4,141
  #define RPI_WRITE_STROBERPI_WRITE_STROBE8,296
#define ILI9486_BLACK ILI9486_BLACK13,470
#define ILI9486_NAVY ILI9486_NAVY14,530
#define ILI9486_DARKGREEN ILI9486_DARKGREEN15,590
#define ILI9486_DARKCYAN ILI9486_DARKCYAN16,650
#define ILI9486_MAROON ILI9486_MAROON17,710
#define ILI9486_PURPLE ILI9486_PURPLE18,770
#define ILI9486_OLIVE ILI9486_OLIVE19,830
#define ILI9486_LIGHTGREY ILI9486_LIGHTGREY20,890
#define ILI9486_DARKGREY ILI9486_DARKGREY21,950
#define ILI9486_BLUE ILI9486_BLUE22,1010
#define ILI9486_GREEN ILI9486_GREEN23,1070
#define ILI9486_CYAN ILI9486_CYAN24,1130
#define ILI9486_RED ILI9486_RED25,1190
#define ILI9486_MAGENTA ILI9486_MAGENTA26,1250
#define ILI9486_YELLOW ILI9486_YELLOW27,1310
#define ILI9486_WHITE ILI9486_WHITE28,1370
#define ILI9486_ORANGE ILI9486_ORANGE29,1430
#define ILI9486_GREENYELLOW ILI9486_GREENYELLOW30,1490
#define ILI9486_PINK ILI9486_PINK31,1550
#define TFT_INIT_DELAY TFT_INIT_DELAY35,1633
#define TFT_NOP TFT_NOP39,1743
#define TFT_SWRST TFT_SWRST40,1768
#define TFT_CASET TFT_CASET42,1794
#define TFT_PASET TFT_PASET43,1819
#define TFT_RAMWR TFT_RAMWR44,1844
#define TFT_RAMRD TFT_RAMRD46,1870
#define TFT_IDXRD TFT_IDXRD47,1895
#define TFT_MADCTL TFT_MADCTL49,1968
#define TFT_MAD_MY TFT_MAD_MY50,1993
#define TFT_MAD_MX TFT_MAD_MX51,2018
#define TFT_MAD_MV TFT_MAD_MV52,2043
#define TFT_MAD_ML TFT_MAD_ML53,2068
#define TFT_MAD_BGR TFT_MAD_BGR54,2093
#define TFT_MAD_MH TFT_MAD_MH55,2118
#define TFT_MAD_SS TFT_MAD_SS56,2143
#define TFT_MAD_GS TFT_MAD_GS57,2168
#define TFT_MAD_RGB TFT_MAD_RGB58,2193
#define TFT_INVOFF TFT_INVOFF60,2219
#define TFT_INVON TFT_INVON61,2244

lib/TFT_eSPI/TFT_Drivers/ST7796_Init.h,45
#define TFT_INIT_DELAY TFT_INIT_DELAY8,217

lib/TFT_eSPI/TFT_Drivers/ST7796_Rotation.h,45
  writecommand(TFT_MADCTL);TFT_MADCTL6,139

lib/TFT_eSPI/TFT_Drivers/ST7789_Init.h,0

lib/TFT_eSPI/TFT_Drivers/EPD_Defines.h,741
#define TFT_WIDTH TFT_WIDTH2,23
#define TFT_HEIGHT TFT_HEIGHT3,47
#define TFT_INIT_DELAY TFT_INIT_DELAY5,72
#define TFT_NOP TFT_NOP7,98
#define TFT_SWRST TFT_SWRST8,123
#define TFT_CASET TFT_CASET10,149
#define TFT_PASET TFT_PASET11,174
#define TFT_RAMWR TFT_RAMWR12,199
#define TFT_RAMRD TFT_RAMRD14,225
#define TFT_IDXRD TFT_IDXRD15,250
#define TFT_MADCTL TFT_MADCTL17,276
#define TFT_MAD_MY TFT_MAD_MY18,301
#define TFT_MAD_MX TFT_MAD_MX19,326
#define TFT_MAD_MV TFT_MAD_MV20,351
#define TFT_MAD_ML TFT_MAD_ML21,376
#define TFT_MAD_BGR TFT_MAD_BGR22,401
#define TFT_MAD_MH TFT_MAD_MH23,426
#define TFT_MAD_RGB TFT_MAD_RGB24,451
#define TFT_INVOFF TFT_INVOFF26,477
#define TFT_INVON TFT_INVON27,502

lib/TFT_eSPI/TFT_Drivers/ILI9163_Init.h,0

lib/TFT_eSPI/TFT_eSPI.h,10849
#define _TFT_eSPIH__TFT_eSPIH_17,512
#define TFT_ESPI_VERSION TFT_ESPI_VERSION19,533
#define TFT_ESPI_FEATURES TFT_ESPI_FEATURES23,629
  #define PROGMEMPROGMEM47,1550
  #define TAB_COLOUR TAB_COLOUR65,2117
  #define SPI_FREQUENCY SPI_FREQUENCY70,2224
  #define SPI_READ_FREQUENCY SPI_READ_FREQUENCY75,2352
  #define TFT_SPI_MODE TFT_SPI_MODE80,2499
  #define TFT_SPI_MODE TFT_SPI_MODE82,2538
  #define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY87,2669
    #define LOAD_GLCDLOAD_GLCD97,3123
  #define LOAD_RLELOAD_RLE113,3440
    #define LOAD_RLELOAD_RLE119,3535
    #define LOAD_RLELOAD_RLE126,3641
    #define LOAD_RLELOAD_RLE133,3747
  #define LOAD_FONT8LOAD_FONT8136,3832
    #define LOAD_RLELOAD_RLE139,3906
const  uint8_t widtbl_null[1] = {0};widtbl_null152,4288
PROGMEM const uint8_t chr_null[1] = {0};chr_null153,4325
PROGMEM const uint8_t* const chrtbl_null[1] = {chr_null};chrtbl_null154,4366
    const uint8_t *chartbl;chartbl159,4599
    const uint8_t *widthtbl;widthtbl160,4627
    uint8_t height;height161,4656
    uint8_t baseline;baseline162,4676
    } fontinfo;fontinfo163,4698
const PROGMEM fontinfo fontdata [] = {fontdata166,4741
#define TL_DATUM TL_DATUM216,6352
#define TC_DATUM TC_DATUM217,6393
#define TR_DATUM TR_DATUM218,6426
#define ML_DATUM ML_DATUM219,6458
#define CL_DATUM CL_DATUM220,6492
#define MC_DATUM MC_DATUM221,6541
#define CC_DATUM CC_DATUM222,6577
#define MR_DATUM MR_DATUM223,6628
#define CR_DATUM CR_DATUM224,6663
#define BL_DATUM BL_DATUM225,6713
#define BC_DATUM BC_DATUM226,6747
#define BR_DATUM BR_DATUM227,6783
#define L_BASELINE L_BASELINE228,6818
#define C_BASELINE C_BASELINE229,6905
#define R_BASELINE R_BASELINE230,6956
#define TFT_BLACK TFT_BLACK236,7271
#define TFT_NAVY TFT_NAVY237,7327
#define TFT_DARKGREEN TFT_DARKGREEN238,7383
#define TFT_DARKCYAN TFT_DARKCYAN239,7439
#define TFT_MAROON TFT_MAROON240,7495
#define TFT_PURPLE TFT_PURPLE241,7551
#define TFT_OLIVE TFT_OLIVE242,7607
#define TFT_LIGHTGREY TFT_LIGHTGREY243,7663
#define TFT_DARKGREY TFT_DARKGREY244,7719
#define TFT_BLUE TFT_BLUE245,7775
#define TFT_GREEN TFT_GREEN246,7831
#define TFT_CYAN TFT_CYAN247,7887
#define TFT_RED TFT_RED248,7943
#define TFT_MAGENTA TFT_MAGENTA249,7999
#define TFT_YELLOW TFT_YELLOW250,8055
#define TFT_WHITE TFT_WHITE251,8111
#define TFT_ORANGE TFT_ORANGE252,8167
#define TFT_GREENYELLOW TFT_GREENYELLOW253,8223
#define TFT_PINK TFT_PINK254,8279
#define TFT_BROWN TFT_BROWN255,8368
#define TFT_GOLD TFT_GOLD256,8424
#define TFT_SILVER TFT_SILVER257,8480
#define TFT_SKYBLUE TFT_SKYBLUE258,8536
#define TFT_VIOLET TFT_VIOLET259,8592
#define TFT_TRANSPARENT TFT_TRANSPARENT264,8824
static const uint16_t default_4bit_palette[] PROGMEM = {PROGMEM267,8933
String  version = TFT_ESPI_VERSION;version296,10110
int32_t esp;         // Processor codeesp297,10146
uint8_t trans;       // SPI transaction supoorttrans298,10185
uint8_t serial;      // Serial (SPI) or parallelserial299,10233
uint8_t overlap;     // ESP8266 overlap modeoverlap300,10282
    uint8_t  port = HSPI;port304,10422
    uint8_t  port = VSPI;port306,10456
uint16_t tft_driver; // Hexadecimal codetft_driver310,10499
uint16_t tft_width;  // Rotation 0 width and heighttft_width311,10540
uint16_t tft_height;tft_height312,10592
uint8_t r0_x_offset; // Display offsets, not all used yetr0_x_offset314,10614
uint8_t r0_y_offset;r0_y_offset315,10672
uint8_t r1_x_offset;r1_x_offset316,10693
uint8_t r1_y_offset;r1_y_offset317,10714
uint8_t r2_x_offset;r2_x_offset318,10735
uint8_t r2_y_offset;r2_y_offset319,10756
uint8_t r3_x_offset;r3_x_offset320,10777
uint8_t r3_y_offset;r3_y_offset321,10798
int8_t pin_tft_mosi; // SPI pinspin_tft_mosi323,10820
int8_t pin_tft_miso;pin_tft_miso324,10853
int8_t pin_tft_clk;pin_tft_clk325,10874
int8_t pin_tft_cs;pin_tft_cs326,10894
int8_t pin_tft_dc;   // Control pinspin_tft_dc328,10914
int8_t pin_tft_rd;pin_tft_rd329,10951
int8_t pin_tft_wr;pin_tft_wr330,10970
int8_t pin_tft_rst;pin_tft_rst331,10989
int8_t pin_tft_d0;   // Parallel port pinspin_tft_d0333,11010
int8_t pin_tft_d1;pin_tft_d1334,11053
int8_t pin_tft_d2;pin_tft_d2335,11072
int8_t pin_tft_d3;pin_tft_d3336,11091
int8_t pin_tft_d4;pin_tft_d4337,11110
int8_t pin_tft_d5;pin_tft_d5338,11129
int8_t pin_tft_d6;pin_tft_d6339,11148
int8_t pin_tft_d7;pin_tft_d7340,11167
int8_t pin_tft_led;pin_tft_led342,11187
int8_t pin_tft_led_on;pin_tft_led_on343,11207
int8_t pin_tch_cs;   // Touch chip select pinpin_tch_cs345,11231
int16_t tft_spi_freq;// TFT write SPI frequencytft_spi_freq347,11278
int16_t tft_rd_freq; // TFT read  SPI frequencytft_rd_freq348,11326
int16_t tch_spi_freq;// Touch controller read/write SPI frequencytch_spi_freq349,11374
} setup_t;setup_t350,11440
swap_coord(T& a, T& b) { T t = a; a = b; b = t; }swap_coord357,11761
typedef uint16_t (*getColorCallback)(uint16_t x, uint16_t y);getColorCallback360,11868
class TFT_eSPI : public Print { friend class TFT_eSprite; // Sprite class has access to protected membersTFT_eSPI363,11964
  bool     DMA_Enabled = false;   // Flag for DMA enabled stateDMA_Enabled641,29947
  uint8_t  spiBusyCheck = 0;      // Number of ESP32 transfer buffers to checkspiBusyCheck642,30011
           #define CP437_SWITCH CP437_SWITCH655,30854
           #define UTF8_SWITCH UTF8_SWITCH656,30888
           #define PSRAM_ENABLE PSRAM_ENABLE657,30922
  uint32_t textcolor, textbgcolor;         // Text foreground and background colourstextcolor667,31397
  uint32_t textcolor, textbgcolor;         // Text foreground and background colourstextbgcolor667,31397
  uint32_t bitmap_fg, bitmap_bg;           // Bitmap foreground (bit=1) and background (bit=0) coloursbitmap_fg669,31483
  uint32_t bitmap_fg, bitmap_bg;           // Bitmap foreground (bit=1) and background (bit=0) coloursbitmap_bg669,31483
  uint8_t  textfont,  // Current selected font numbertextfont671,31587
           textsize,  // Current font size multipliertextsize672,31641
           textdatum, // Text reference datumtextdatum673,31695
           rotation;  // Display rotation (0-3)rotation674,31741
  uint8_t  decoderState = 0;   // UTF8 decoder state        - not for user accessdecoderState676,31790
  uint16_t decoderBuffer;      // Unicode code-point buffer - not for user accessdecoderBuffer677,31872
  uint8_t  tabcolor,                   // ST7735 screen protector "tab" colour (now invalid)tabcolor715,33396
           colstart = 0, rowstart = 0; // Screen display area to CGRAM area coordinate offsetscolstart716,33489
           colstart = 0, rowstart = 0; // Screen display area to CGRAM area coordinate offsetsrowstart716,33489
  volatile uint32_t *dcport, *csport;dcport719,33681
  volatile uint32_t *dcport, *csport;csport719,33681
  uint32_t cspinmask, dcpinmask, wrpinmask, sclkpinmask;cspinmask720,33719
  uint32_t cspinmask, dcpinmask, wrpinmask, sclkpinmask;dcpinmask720,33719
  uint32_t cspinmask, dcpinmask, wrpinmask, sclkpinmask;wrpinmask720,33719
  uint32_t cspinmask, dcpinmask, wrpinmask, sclkpinmask;sclkpinmask720,33719
  uint32_t xclr_mask, xdir_mask; // Port set/clear and direction control masksxclr_mask724,33873
  uint32_t xclr_mask, xdir_mask; // Port set/clear and direction control masksxdir_mask724,33873
  uint32_t xset_mask[256]; // Makes Sprite rendering test 33% faster, for slower macro equivalentxset_mask727,34030
  getColorCallback getColor = nullptr; // Smooth font callback function pointergetColor733,34329
  int32_t  _init_width, _init_height; // Display w/h as input, used by setRotation()_init_width740,34585
  int32_t  _init_width, _init_height; // Display w/h as input, used by setRotation()_init_height740,34585
  int32_t  _width, _height;           // Display w/h as modified by current rotation_width741,34670
  int32_t  _width, _height;           // Display w/h as modified by current rotation_height741,34670
  int32_t  addr_row, addr_col;        // Window position - used to minimise window commandsaddr_row742,34755
  int32_t  addr_row, addr_col;        // Window position - used to minimise window commandsaddr_col742,34755
  int16_t  _xPivot;   // TFT x pivot point coordinate for rotated Sprites_xPivot744,34848
  int16_t  _yPivot;   // TFT x pivot point coordinate for rotated Sprites_yPivot745,34922
  int32_t  _vpX, _vpY, _vpW, _vpH;    // Note: x start, y start, x end + 1, y end + 1_vpX748,35021
  int32_t  _vpX, _vpY, _vpW, _vpH;    // Note: x start, y start, x end + 1, y end + 1_vpY748,35021
  int32_t  _vpX, _vpY, _vpW, _vpH;    // Note: x start, y start, x end + 1, y end + 1_vpW748,35021
  int32_t  _vpX, _vpY, _vpW, _vpH;    // Note: x start, y start, x end + 1, y end + 1_vpH748,35021
  int32_t  _xDatum;_xDatum749,35107
  int32_t  _yDatum;_yDatum750,35127
  int32_t  _xWidth;_xWidth751,35147
  int32_t  _yHeight;_yHeight752,35167
  bool     _vpDatum;_vpDatum753,35188
  bool     _vpOoB;_vpOoB754,35209
  int32_t  cursor_x, cursor_y, padX;       // Text cursor x,y and padding settingcursor_x756,35229
  int32_t  cursor_x, cursor_y, padX;       // Text cursor x,y and padding settingcursor_y756,35229
  int32_t  cursor_x, cursor_y, padX;       // Text cursor x,y and padding settingpadX756,35229
  uint32_t fontsloaded;               // Bit field of fonts loadedfontsloaded758,35312
  uint8_t  glyph_ab,   // Smooth font glyph delta Y (height) above baselineglyph_ab760,35380
           glyph_bb;   // Smooth font glyph delta Y (height) below baselineglyph_bb761,35456
  bool     isDigits;   // adjust bounding box for numbers to reduce visual jigglingisDigits763,35533
  bool     textwrapX, textwrapY;  // If set, 'wrap' text at right and optionally bottom edge of displaytextwrapX764,35617
  bool     textwrapX, textwrapY;  // If set, 'wrap' text at right and optionally bottom edge of displaytextwrapY764,35617
  bool     _swapBytes; // Swap the byte order for TFT pushImage()_swapBytes765,35721
  bool     locked, inTransaction; // SPI transaction and mutex lock flagslocked766,35787
  bool     locked, inTransaction; // SPI transaction and mutex lock flagsinTransaction766,35787
  bool     _booted;    // init() or begin() has already run once_booted768,35862
  bool     _cp437;        // If set, use correct CP437 charset (default is ON)_cp437771,36005
  bool     _utf8;         // If set, use UTF-8 decoder in print stream 'write()' function (default ON)_utf8772,36084
  bool     _psram_enable; // Enable PSRAM use for library functions (TBD) and Sprites_psram_enable773,36187
  uint32_t _lastColor; // Buffered value of last colour used_lastColor775,36274
  GFXfont  *gfxFont;gfxFont778,36354

lib/TFT_eSPI/User_Setup_Select.h,1873
#define TFT_BGR TFT_BGR97,6226
#define TFT_RGB TFT_RGB98,6277
    #define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE103,6450
    #define ILI9486_DRIVERILI9486_DRIVER111,6705
    #define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE114,6775
    #define SPI_18BIT_DRIVERSPI_18BIT_DRIVER121,7048
     #define  TFT_DRIVER TFT_DRIVER128,7230
     #define  TFT_DRIVER TFT_DRIVER131,7337
     #define  TFT_DRIVER TFT_DRIVER134,7446
     #define  TFT_DRIVER TFT_DRIVER137,7555
      #define  TFT_DRIVER TFT_DRIVER140,7663
     #define  TFT_DRIVER TFT_DRIVER143,7773
     #define  TFT_DRIVER TFT_DRIVER146,7882
     #define  TFT_DRIVER TFT_DRIVER149,7991
     #define  TFT_DRIVER TFT_DRIVER152,8100
     #define  TFT_DRIVER TFT_DRIVER155,8201
     #define  TFT_DRIVER TFT_DRIVER158,8307
     #define  TFT_DRIVER TFT_DRIVER161,8414
     #define  TFT_DRIVER TFT_DRIVER164,8525
     #define  TFT_DRIVER TFT_DRIVER167,8634
     #define  TFT_DRIVER TFT_DRIVER170,8747
     #define  TFT_DRIVER TFT_DRIVER173,8860
     #define  TFT_DRIVER TFT_DRIVER176,8976
     #define  TFT_DRIVER TFT_DRIVER179,9091
     #define  TFT_DRIVER TFT_DRIVER182,9198
     #define  TFT_DRIVER TFT_DRIVER185,9307
     #define  TFT_DRIVER TFT_DRIVER190,9592
     #define  TFT_DRIVER TFT_DRIVER192,9630
#define PIN_D0 PIN_D0197,9756
#define PIN_D1 PIN_D1198,9797
#define PIN_D2 PIN_D2199,9846
#define PIN_D3 PIN_D3200,9895
#define PIN_D4 PIN_D4201,9966
#define PIN_D5 PIN_D5202,10056
#define PIN_D6 PIN_D6203,10098
#define PIN_D7 PIN_D7204,10140
#define PIN_D8 PIN_D8205,10188
#define PIN_D9 PIN_D9206,10284
#define PIN_D10 PIN_D10207,10325
#define PIN_MOSI PIN_MOSI209,10367
#define PIN_MISO PIN_MISO210,10426
#define PIN_SCLK PIN_SCLK211,10453
#define PIN_HWCS PIN_HWCS212,10480
#define PIN_D11 PIN_D11214,10507
#define PIN_D12 PIN_D12215,10534

lib/TFT_eSPI/Fonts/Font72x53rle.h,200
#define nr_chrs_f72 nr_chrs_f723,33
#define chr_hgt_f72 chr_hgt_f724,56
#define baseline_f72 baseline_f725,79
#define data_size_f72 data_size_f726,103
#define firstchr_f72 firstchr_f727,127

lib/TFT_eSPI/Fonts/Font72x53rle.c,1099
PROGMEM const unsigned char widtbl_f72[96] =          // character width tablewidtbl_f7211,346
PROGMEM const unsigned char chr_f72_20[] = chr_f72_2029,1183
PROGMEM const unsigned char chr_f72_2D[] = chr_f72_2D36,1336
PROGMEM const unsigned char chr_f72_2E[] = chr_f72_2E44,1565
PROGMEM const unsigned char chr_f72_30[] = chr_f72_3053,1816
PROGMEM const unsigned char chr_f72_31[] = chr_f72_3173,3365
PROGMEM const unsigned char chr_f72_32[] = chr_f72_3287,4371
PROGMEM const unsigned char chr_f72_33[] = chr_f72_33102,5414
PROGMEM const unsigned char chr_f72_34[] = chr_f72_34118,6614
PROGMEM const unsigned char chr_f72_35[] = chr_f72_35134,7808
PROGMEM const unsigned char chr_f72_36[] = chr_f72_36150,8978
PROGMEM const unsigned char chr_f72_37[] = chr_f72_37170,10482
PROGMEM const unsigned char chr_f72_38[] = chr_f72_38183,11379
PROGMEM const unsigned char chr_f72_39[] = chr_f72_39202,12846
PROGMEM const unsigned char chr_f72_3A[] = chr_f72_3A221,14349
PROGMEM const unsigned char * const chrtbl_f72[96] =        // character pointer tablechrtbl_f72231,14697

lib/TFT_eSPI/Fonts/Font32rle.h,200
#define nr_chrs_f32 nr_chrs_f323,30
#define chr_hgt_f32 chr_hgt_f324,53
#define baseline_f32 baseline_f325,76
#define data_size_f32 data_size_f326,100
#define firstchr_f32 firstchr_f327,124

lib/TFT_eSPI/Fonts/Font32rle.c,6404
PROGMEM const unsigned char widtbl_f32[96] =         // character width tablewidtbl_f328,127
PROGMEM const unsigned char chr_f32_20[] = chr_f32_2026,946
PROGMEM const unsigned char chr_f32_21[] = chr_f32_2131,1006
PROGMEM const unsigned char chr_f32_22[] = chr_f32_2240,1257
PROGMEM const unsigned char chr_f32_23[] = chr_f32_2348,1489
PROGMEM const unsigned char chr_f32_24[] = chr_f32_2461,1941
PROGMEM const unsigned char chr_f32_25[] = chr_f32_2571,2265
PROGMEM const unsigned char chr_f32_26[] = chr_f32_2687,2888
PROGMEM const unsigned char chr_f32_27[] = chr_f32_27100,3359
PROGMEM const unsigned char chr_f32_28[] = chr_f32_28106,3487
PROGMEM const unsigned char chr_f32_29[] = chr_f32_29117,3835
PROGMEM const unsigned char chr_f32_2A[] = chr_f32_2A128,4183
PROGMEM const unsigned char chr_f32_2B[] = chr_f32_2B136,4427
PROGMEM const unsigned char chr_f32_2C[] = chr_f32_2C143,4580
PROGMEM const unsigned char chr_f32_2D[] = chr_f32_2D149,4720
PROGMEM const unsigned char chr_f32_2E[] = chr_f32_2E154,4799
PROGMEM const unsigned char chr_f32_2F[] = chr_f32_2F159,4890
PROGMEM const unsigned char chr_f32_30[] = chr_f32_30169,5190
PROGMEM const unsigned char chr_f32_31[] = chr_f32_31181,5612
PROGMEM const unsigned char chr_f32_32[] = chr_f32_32190,5875
PROGMEM const unsigned char chr_f32_33[] = chr_f32_33200,6187
PROGMEM const unsigned char chr_f32_34[] = chr_f32_34211,6536
PROGMEM const unsigned char chr_f32_35[] = chr_f32_35222,6885
PROGMEM const unsigned char chr_f32_36[] = chr_f32_36232,7221
PROGMEM const unsigned char chr_f32_37[] = chr_f32_37244,7619
PROGMEM const unsigned char chr_f32_38[] = chr_f32_38253,7882
PROGMEM const unsigned char chr_f32_39[] = chr_f32_39265,8280
PROGMEM const unsigned char chr_f32_3A[] = chr_f32_3A277,8678
PROGMEM const unsigned char chr_f32_3B[] = chr_f32_3B283,8806
PROGMEM const unsigned char chr_f32_3C[] = chr_f32_3C290,8983
PROGMEM const unsigned char chr_f32_3D[] = chr_f32_3D297,9153
PROGMEM const unsigned char chr_f32_3E[] = chr_f32_3E303,9257
PROGMEM const unsigned char chr_f32_3F[] = chr_f32_3F310,9428
PROGMEM const unsigned char chr_f32_40[] = chr_f32_40320,9728
PROGMEM const unsigned char chr_f32_41[] = chr_f32_41339,10505
PROGMEM const unsigned char chr_f32_42[] = chr_f32_42351,10939
PROGMEM const unsigned char chr_f32_43[] = chr_f32_43363,11361
PROGMEM const unsigned char chr_f32_44[] = chr_f32_44374,11751
PROGMEM const unsigned char chr_f32_45[] = chr_f32_45387,12203
PROGMEM const unsigned char chr_f32_46[] = chr_f32_46396,12478
PROGMEM const unsigned char chr_f32_47[] = chr_f32_47405,12753
PROGMEM const unsigned char chr_f32_48[] = chr_f32_48417,13192
PROGMEM const unsigned char chr_f32_49[] = chr_f32_49430,13663
PROGMEM const unsigned char chr_f32_4A[] = chr_f32_4A439,13938
PROGMEM const unsigned char chr_f32_4B[] = chr_f32_4B449,14262
PROGMEM const unsigned char chr_f32_4C[] = chr_f32_4C462,14745
PROGMEM const unsigned char chr_f32_4D[] = chr_f32_4D471,15020
PROGMEM const unsigned char chr_f32_4E[] = chr_f32_4E491,15828
PROGMEM const unsigned char chr_f32_4F[] = chr_f32_4F507,16446
PROGMEM const unsigned char chr_f32_50[] = chr_f32_50520,16898
PROGMEM const unsigned char chr_f32_51[] = chr_f32_51531,17247
PROGMEM const unsigned char chr_f32_52[] = chr_f32_52545,17743
PROGMEM const unsigned char chr_f32_53[] = chr_f32_53558,18190
PROGMEM const unsigned char chr_f32_54[] = chr_f32_54569,18563
PROGMEM const unsigned char chr_f32_55[] = chr_f32_55578,18826
PROGMEM const unsigned char chr_f32_56[] = chr_f32_56591,19302
PROGMEM const unsigned char chr_f32_57[] = chr_f32_57604,19761
PROGMEM const unsigned char chr_f32_58[] = chr_f32_58624,20593
PROGMEM const unsigned char chr_f32_59[] = chr_f32_59637,21052
PROGMEM const unsigned char chr_f32_5A[] = chr_f32_5A648,21425
PROGMEM const unsigned char chr_f32_5B[] = chr_f32_5B657,21700
PROGMEM const unsigned char chr_f32_5C[] = chr_f32_5C667,22036
PROGMEM const unsigned char chr_f32_5D[] = chr_f32_5D678,22396
PROGMEM const unsigned char chr_f32_5E[] = chr_f32_5E688,22732
PROGMEM const unsigned char chr_f32_5F[] = chr_f32_5F695,22903
PROGMEM const unsigned char chr_f32_60[] = chr_f32_60700,22982
PROGMEM const unsigned char chr_f32_61[] = chr_f32_61708,23190
PROGMEM const unsigned char chr_f32_62[] = chr_f32_62718,23502
PROGMEM const unsigned char chr_f32_63[] = chr_f32_63730,23936
PROGMEM const unsigned char chr_f32_64[] = chr_f32_64739,24211
PROGMEM const unsigned char chr_f32_65[] = chr_f32_65751,24645
PROGMEM const unsigned char chr_f32_66[] = chr_f32_66760,24920
PROGMEM const unsigned char chr_f32_67[] = chr_f32_67769,25195
PROGMEM const unsigned char chr_f32_68[] = chr_f32_68782,25678
PROGMEM const unsigned char chr_f32_69[] = chr_f32_69794,26112
PROGMEM const unsigned char chr_f32_6A[] = chr_f32_6A803,26363
PROGMEM const unsigned char chr_f32_6B[] = chr_f32_6B813,26686
PROGMEM const unsigned char chr_f32_6C[] = chr_f32_6C825,27084
PROGMEM const unsigned char chr_f32_6D[] = chr_f32_6D834,27359
PROGMEM const unsigned char chr_f32_6E[] = chr_f32_6E849,27904
PROGMEM const unsigned char chr_f32_6F[] = chr_f32_6F860,28277
PROGMEM const unsigned char chr_f32_70[] = chr_f32_70870,28601
PROGMEM const unsigned char chr_f32_71[] = chr_f32_71882,29035
PROGMEM const unsigned char chr_f32_72[] = chr_f32_72894,29469
PROGMEM const unsigned char chr_f32_73[] = chr_f32_73902,29695
PROGMEM const unsigned char chr_f32_74[] = chr_f32_74911,29958
PROGMEM const unsigned char chr_f32_75[] = chr_f32_75920,30221
PROGMEM const unsigned char chr_f32_76[] = chr_f32_76931,30594
PROGMEM const unsigned char chr_f32_77[] = chr_f32_77941,30930
PROGMEM const unsigned char chr_f32_78[] = chr_f32_78957,31529
PROGMEM const unsigned char chr_f32_79[] = chr_f32_79967,31865
PROGMEM const unsigned char chr_f32_7A[] = chr_f32_7A979,32299
PROGMEM const unsigned char chr_f32_7B[] = chr_f32_7B987,32513
PROGMEM const unsigned char chr_f32_7C[] = chr_f32_7C998,32873
PROGMEM const unsigned char chr_f32_7D[] = chr_f32_7D1009,33234
PROGMEM const unsigned char chr_f32_7E[] = chr_f32_7E1020,33595
PROGMEM const unsigned char chr_f32_7F[] = chr_f32_7F1028,33797
PROGMEM const unsigned char* const chrtbl_f32[96] =       // character pointer tablechrtbl_f321032,33851

lib/TFT_eSPI/Fonts/Font64rle.c,1286
PROGMEM const unsigned char widtbl_f64[96] =          // character width tablewidtbl_f6410,304
PROGMEM const unsigned char chr_f64_20[] = chr_f64_2026,1115
PROGMEM const unsigned char chr_f64_2D[] = chr_f64_2D31,1194
PROGMEM const unsigned char chr_f64_2E[] = chr_f64_2E37,1328
PROGMEM const unsigned char chr_f64_30[] = chr_f64_3043,1468
PROGMEM const unsigned char chr_f64_31[] = chr_f64_3164,2319
PROGMEM const unsigned char chr_f64_32[] = chr_f64_3278,2839
PROGMEM const unsigned char chr_f64_33[] = chr_f64_3394,3433
PROGMEM const unsigned char chr_f64_34[] = chr_f64_34111,4112
PROGMEM const unsigned char chr_f64_35[] = chr_f64_35128,4779
PROGMEM const unsigned char chr_f64_36[] = chr_f64_36144,5409
PROGMEM const unsigned char chr_f64_37[] = chr_f64_37164,6211
PROGMEM const unsigned char chr_f64_38[] = chr_f64_38177,6694
PROGMEM const unsigned char chr_f64_39[] = chr_f64_39197,7496
PROGMEM const unsigned char chr_f64_3A[] = chr_f64_3A217,8298
PROGMEM const unsigned char chr_f64_61[] = chr_f64_61224,8493
PROGMEM const unsigned char chr_f64_6D[] = chr_f64_6D240,9129
PROGMEM const unsigned char chr_f64_70[] = chr_f64_70265,10200
PROGMEM const unsigned char* const chrtbl_f64[96] =        // character pointer tablechrtbl_f64285,11062

lib/TFT_eSPI/Fonts/Font16.h,199
#define nr_chrs_f16 nr_chrs_f163,27
#define chr_hgt_f16 chr_hgt_f164,50
#define baseline_f16 baseline_f165,73
#define data_size_f16 data_size_f166,97
#define firstchr_f16 firstchr_f167,121

lib/TFT_eSPI/Fonts/Font7srle.h,200
#define nr_chrs_f7s nr_chrs_f7s3,30
#define chr_hgt_f7s chr_hgt_f7s4,53
#define baseline_f7s baseline_f7s5,76
#define data_size_f7s data_size_f7s6,100
#define firstchr_f7s firstchr_f7s7,124

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBoldOblique12pt7b.h,222
const uint8_t FreeSansBoldOblique12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBoldOblique12pt7bGlyphs[] PROGMEM = {PROGMEM215,15698
const GFXfont FreeSansBoldOblique12pt7b PROGMEM = {PROGMEM312,20890

lib/TFT_eSPI/Fonts/GFXFF/FreeSans9pt7b.h,184
const uint8_t FreeSans9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSans9pt7bGlyphs[] PROGMEM = {PROGMEM99,7144
const GFXfont FreeSans9pt7b PROGMEM = {PROGMEM196,12324

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBold24pt7b.h,201
const uint8_t FreeMonoBold24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBold24pt7bGlyphs[] PROGMEM = {PROGMEM570,41973
const GFXfont FreeMonoBold24pt7b PROGMEM = {PROGMEM667,47158

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBold9pt7b.h,197
const uint8_t FreeSansBold9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBold9pt7bGlyphs[] PROGMEM = {PROGMEM106,7642
const GFXfont FreeSansBold9pt7b PROGMEM = {PROGMEM203,12826

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoOblique9pt7b.h,205
const uint8_t FreeMonoOblique9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoOblique9pt7bGlyphs[] PROGMEM = {PROGMEM85,6115
const GFXfont FreeMonoOblique9pt7b PROGMEM = {PROGMEM182,11302

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBoldOblique24pt7b.h,222
const uint8_t FreeSansBoldOblique24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBoldOblique24pt7bGlyphs[] PROGMEM = {PROGMEM791,58322
const GFXfont FreeSansBoldOblique24pt7b PROGMEM = {PROGMEM888,63514

lib/TFT_eSPI/Fonts/GFXFF/FreeSansOblique9pt7b.h,206
const uint8_t FreeSansOblique9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansOblique9pt7bGlyphs[] PROGMEM = {PROGMEM118,8503
const GFXfont FreeSansOblique9pt7b PROGMEM = {PROGMEM215,13690

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBold18pt7b.h,201
const uint8_t FreeSansBold18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBold18pt7bGlyphs[] PROGMEM = {PROGMEM379,27827
const GFXfont FreeSansBold18pt7b PROGMEM = {PROGMEM476,33012

lib/TFT_eSPI/Fonts/GFXFF/TomThumb.h,236
#define TOMTHUMB_USE_EXTENDED TOMTHUMB_USE_EXTENDED49,2329
const uint8_t TomThumbBitmaps[] PROGMEM = {PROGMEM51,2362
const GFXglyph TomThumbGlyphs[] PROGMEM = {PROGMEM262,14336
const GFXfont TomThumb PROGMEM = {PROGMEM471,23996

lib/TFT_eSPI/Fonts/GFXFF/FreeSerif18pt7b.h,192
const uint8_t FreeSerif18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerif18pt7bGlyphs[] PROGMEM = {PROGMEM327,24018
const GFXfont FreeSerif18pt7b PROGMEM = {PROGMEM424,29200

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoOblique24pt7b.h,210
const uint8_t FreeMonoOblique24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoOblique24pt7bGlyphs[] PROGMEM = {PROGMEM541,39848
const GFXfont FreeMonoOblique24pt7b PROGMEM = {PROGMEM638,45036

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifItalic12pt7b.h,210
const uint8_t FreeSerifItalic12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifItalic12pt7bGlyphs[] PROGMEM = {PROGMEM169,12296
const GFXfont FreeSerifItalic12pt7b PROGMEM = {PROGMEM266,17484

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBoldOblique12pt7b.h,222
const uint8_t FreeMonoBoldOblique12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBoldOblique12pt7bGlyphs[] PROGMEM = {PROGMEM167,12188
const GFXfont FreeMonoBoldOblique12pt7b PROGMEM = {PROGMEM264,17380

lib/TFT_eSPI/Fonts/GFXFF/FreeMono12pt7b.h,188
const uint8_t FreeMono12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMono12pt7bGlyphs[] PROGMEM = {PROGMEM125,9057
const GFXfont FreeMono12pt7b PROGMEM = {PROGMEM222,14238

lib/TFT_eSPI/Fonts/GFXFF/FreeSansOblique24pt7b.h,210
const uint8_t FreeSansOblique24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansOblique24pt7bGlyphs[] PROGMEM = {PROGMEM738,54396
const GFXfont FreeSansOblique24pt7b PROGMEM = {PROGMEM835,59584

lib/TFT_eSPI/Fonts/GFXFF/FreeMono24pt7b.h,189
const uint8_t FreeMono24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMono24pt7bGlyphs[] PROGMEM = {PROGMEM475,34945
const GFXfont FreeMono24pt7b PROGMEM = {PROGMEM572,40126

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBold12pt7b.h,204
const uint8_t FreeSerifBold12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBold12pt7bGlyphs[] PROGMEM = {PROGMEM169,12336
const GFXfont FreeSerifBold12pt7b PROGMEM = {PROGMEM266,17522

lib/TFT_eSPI/Fonts/GFXFF/FreeSansOblique12pt7b.h,210
const uint8_t FreeSansOblique12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansOblique12pt7bGlyphs[] PROGMEM = {PROGMEM200,14626
const GFXfont FreeSansOblique12pt7b PROGMEM = {PROGMEM297,19814

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBold9pt7b.h,196
const uint8_t FreeMonoBold9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBold9pt7bGlyphs[] PROGMEM = {PROGMEM87,6224
const GFXfont FreeMonoBold9pt7b PROGMEM = {PROGMEM184,11408

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBold12pt7b.h,201
const uint8_t FreeMonoBold12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBold12pt7bGlyphs[] PROGMEM = {PROGMEM148,10727
const GFXfont FreeMonoBold12pt7b PROGMEM = {PROGMEM245,15912

lib/TFT_eSPI/Fonts/GFXFF/FreeSansOblique18pt7b.h,210
const uint8_t FreeSansOblique18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansOblique18pt7bGlyphs[] PROGMEM = {PROGMEM416,30592
const GFXfont FreeSansOblique18pt7b PROGMEM = {PROGMEM513,35780

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBold24pt7b.h,201
const uint8_t FreeSansBold24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBold24pt7bGlyphs[] PROGMEM = {PROGMEM682,50273
const GFXfont FreeSansBold24pt7b PROGMEM = {PROGMEM779,55458

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBoldOblique9pt7b.h,218
const uint8_t FreeSansBoldOblique9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBoldOblique9pt7bGlyphs[] PROGMEM = {PROGMEM125,9091
const GFXfont FreeSansBoldOblique9pt7b PROGMEM = {PROGMEM222,14282

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoOblique18pt7b.h,210
const uint8_t FreeMonoOblique18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoOblique18pt7bGlyphs[] PROGMEM = {PROGMEM296,21730
const GFXfont FreeMonoOblique18pt7b PROGMEM = {PROGMEM393,26918

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBoldItalic9pt7b.h,218
const uint8_t FreeSerifBoldItalic9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBoldItalic9pt7bGlyphs[] PROGMEM = {PROGMEM113,8143
const GFXfont FreeSerifBoldItalic9pt7b PROGMEM = {PROGMEM210,13334

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBoldItalic18pt7b.h,222
const uint8_t FreeSerifBoldItalic18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBoldItalic18pt7bGlyphs[] PROGMEM = {PROGMEM398,29282
const GFXfont FreeSerifBoldItalic18pt7b PROGMEM = {PROGMEM495,34474

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBold9pt7b.h,200
const uint8_t FreeSerifBold9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBold9pt7bGlyphs[] PROGMEM = {PROGMEM100,7223
const GFXfont FreeSerifBold9pt7b PROGMEM = {PROGMEM197,12408

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBold18pt7b.h,201
const uint8_t FreeMonoBold18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBold18pt7bGlyphs[] PROGMEM = {PROGMEM321,23571
const GFXfont FreeMonoBold18pt7b PROGMEM = {PROGMEM418,28756

lib/TFT_eSPI/Fonts/GFXFF/FreeMono18pt7b.h,189
const uint8_t FreeMono18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMono18pt7bGlyphs[] PROGMEM = {PROGMEM261,19103
const GFXfont FreeMono18pt7b PROGMEM = {PROGMEM358,24284

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBoldItalic24pt7b.h,222
const uint8_t FreeSerifBoldItalic24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBoldItalic24pt7bGlyphs[] PROGMEM = {PROGMEM691,50910
const GFXfont FreeSerifBoldItalic24pt7b PROGMEM = {PROGMEM788,56102

lib/TFT_eSPI/Fonts/GFXFF/FreeSerif9pt7b.h,187
const uint8_t FreeSerif9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerif9pt7bGlyphs[] PROGMEM = {PROGMEM93,6713
const GFXfont FreeSerif9pt7b PROGMEM = {PROGMEM190,11894

lib/TFT_eSPI/Fonts/GFXFF/FreeSans12pt7b.h,189
const uint8_t FreeSans12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSans12pt7bGlyphs[] PROGMEM = {PROGMEM168,12197
const GFXfont FreeSans12pt7b PROGMEM = {PROGMEM265,17378

lib/TFT_eSPI/Fonts/GFXFF/FreeSans24pt7b.h,189
const uint8_t FreeSans24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSans24pt7bGlyphs[] PROGMEM = {PROGMEM625,46081
const GFXfont FreeSans24pt7b PROGMEM = {PROGMEM722,51262

lib/TFT_eSPI/Fonts/GFXFF/FreeSans18pt7b.h,189
const uint8_t FreeSans18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSans18pt7bGlyphs[] PROGMEM = {PROGMEM350,25701
const GFXfont FreeSans18pt7b PROGMEM = {PROGMEM447,30882

lib/TFT_eSPI/Fonts/GFXFF/FreeMono9pt7b.h,184
const uint8_t FreeMono9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMono9pt7bGlyphs[] PROGMEM = {PROGMEM74,5258
const GFXfont FreeMono9pt7b PROGMEM = {PROGMEM171,10438

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifItalic24pt7b.h,210
const uint8_t FreeSerifItalic24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifItalic24pt7bGlyphs[] PROGMEM = {PROGMEM635,46798
const GFXfont FreeSerifItalic24pt7b PROGMEM = {PROGMEM732,51986

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBold24pt7b.h,204
const uint8_t FreeSerifBold24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBold24pt7bGlyphs[] PROGMEM = {PROGMEM657,48448
const GFXfont FreeSerifBold24pt7b PROGMEM = {PROGMEM754,53634

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifItalic9pt7b.h,206
const uint8_t FreeSerifItalic9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifItalic9pt7bGlyphs[] PROGMEM = {PROGMEM100,7231
const GFXfont FreeSerifItalic9pt7b PROGMEM = {PROGMEM197,12418

lib/TFT_eSPI/Fonts/GFXFF/FreeSerif12pt7b.h,192
const uint8_t FreeSerif12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerif12pt7bGlyphs[] PROGMEM = {PROGMEM157,11396
const GFXfont FreeSerif12pt7b PROGMEM = {PROGMEM254,16578

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBold18pt7b.h,204
const uint8_t FreeSerifBold18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBold18pt7bGlyphs[] PROGMEM = {PROGMEM360,26410
const GFXfont FreeSerifBold18pt7b PROGMEM = {PROGMEM457,31596

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBold12pt7b.h,201
const uint8_t FreeSansBold12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBold12pt7bGlyphs[] PROGMEM = {PROGMEM186,13539
const GFXfont FreeSansBold12pt7b PROGMEM = {PROGMEM283,18724

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBoldOblique24pt7b.h,222
const uint8_t FreeMonoBoldOblique24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBoldOblique24pt7bGlyphs[] PROGMEM = {PROGMEM640,47148
const GFXfont FreeMonoBoldOblique24pt7b PROGMEM = {PROGMEM737,52340

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBoldOblique18pt7b.h,222
const uint8_t FreeMonoBoldOblique18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBoldOblique18pt7bGlyphs[] PROGMEM = {PROGMEM358,26310
const GFXfont FreeMonoBoldOblique18pt7b PROGMEM = {PROGMEM455,31502

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifBoldItalic12pt7b.h,222
const uint8_t FreeSerifBoldItalic12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifBoldItalic12pt7bGlyphs[] PROGMEM = {PROGMEM190,13866
const GFXfont FreeSerifBoldItalic12pt7b PROGMEM = {PROGMEM287,19058

lib/TFT_eSPI/Fonts/GFXFF/FreeSerifItalic18pt7b.h,210
const uint8_t FreeSerifItalic18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerifItalic18pt7bGlyphs[] PROGMEM = {PROGMEM348,25548
const GFXfont FreeSerifItalic18pt7b PROGMEM = {PROGMEM445,30736

lib/TFT_eSPI/Fonts/GFXFF/FreeSerif24pt7b.h,192
const uint8_t FreeSerif24pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSerif24pt7bGlyphs[] PROGMEM = {PROGMEM588,43284
const GFXfont FreeSerif24pt7b PROGMEM = {PROGMEM685,48466

lib/TFT_eSPI/Fonts/GFXFF/gfxfont.h,858
#define _GFXFONT_H__GFXFONT_H_10,373
	uint32_t bitmapOffset;     // Pointer into GFXfont->bitmapbitmapOffset15,455
	uint8_t  width, height;    // Bitmap dimensions in pixelswidth16,515
	uint8_t  width, height;    // Bitmap dimensions in pixelsheight16,515
	uint8_t  xAdvance;         // Distance to advance cursor (x axis)xAdvance17,574
	int8_t   xOffset, yOffset; // Dist from cursor pos to UL cornerxOffset18,641
	int8_t   xOffset, yOffset; // Dist from cursor pos to UL corneryOffset18,641
} GFXglyph;GFXglyph19,706
	uint8_t  *bitmap;      // Glyph bitmaps, concatenatedbitmap22,772
	GFXglyph *glyph;       // Glyph arrayglyph23,827
	uint16_t  first, last; // ASCII extentsfirst24,866
	uint16_t  first, last; // ASCII extentslast24,866
	uint8_t   yAdvance;    // Newline distance (y axis)yAdvance25,907
} GFXfont;GFXfont26,960

lib/TFT_eSPI/Fonts/GFXFF/FreeSansBoldOblique18pt7b.h,222
const uint8_t FreeSansBoldOblique18pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeSansBoldOblique18pt7bGlyphs[] PROGMEM = {PROGMEM443,32570
const GFXfont FreeSansBoldOblique18pt7b PROGMEM = {PROGMEM540,37762

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoOblique12pt7b.h,210
const uint8_t FreeMonoOblique12pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoOblique12pt7bGlyphs[] PROGMEM = {PROGMEM146,10588
const GFXfont FreeMonoOblique12pt7b PROGMEM = {PROGMEM243,15776

lib/TFT_eSPI/Fonts/GFXFF/FreeMonoBoldOblique9pt7b.h,218
const uint8_t FreeMonoBoldOblique9pt7bBitmaps[] PROGMEM = {PROGMEM1,0
const GFXglyph FreeMonoBoldOblique9pt7bGlyphs[] PROGMEM = {PROGMEM101,7261
const GFXfont FreeMonoBoldOblique9pt7b PROGMEM = {PROGMEM198,12452

lib/TFT_eSPI/Fonts/Font7srle.c,1093
PROGMEM const unsigned char widtbl_f7s[96] =          // character width tablewidtbl_f7s10,263
PROGMEM const unsigned char chr_f7s_20[] = chr_f7s_2028,1100
PROGMEM const unsigned char chr_f7s_2D[] = chr_f7s_2D34,1214
PROGMEM const unsigned char chr_f7s_2E[] = chr_f7s_2E41,1391
PROGMEM const unsigned char chr_f7s_30[] = chr_f7s_3047,1525
PROGMEM const unsigned char chr_f7s_31[] = chr_f7s_3173,2609
PROGMEM const unsigned char chr_f7s_32[] = chr_f7s_3287,3129
PROGMEM const unsigned char chr_f7s_33[] = chr_f7s_33105,3833
PROGMEM const unsigned char chr_f7s_34[] = chr_f7s_34123,4525
PROGMEM const unsigned char chr_f7s_35[] = chr_f7s_35143,5327
PROGMEM const unsigned char chr_f7s_36[] = chr_f7s_36160,6006
PROGMEM const unsigned char chr_f7s_37[] = chr_f7s_37182,6918
PROGMEM const unsigned char chr_f7s_38[] = chr_f7s_38197,7493
PROGMEM const unsigned char chr_f7s_39[] = chr_f7s_39224,8638
PROGMEM const unsigned char chr_f7s_3A[] = chr_f7s_3A246,9550
PROGMEM const unsigned char* const chrtbl_f7s[96] =        // character pointer tablechrtbl_f7s252,9744

lib/TFT_eSPI/Fonts/glcdfont.c,93
#define FONT5X7_HFONT5X7_H4,53
static const unsigned char font[] PROGMEM = {PROGMEM8,100

lib/TFT_eSPI/Fonts/Font72rle.h,200
#define nr_chrs_f72 nr_chrs_f723,30
#define chr_hgt_f72 chr_hgt_f724,53
#define baseline_f72 baseline_f725,76
#define data_size_f72 data_size_f726,100
#define firstchr_f72 firstchr_f727,124

lib/TFT_eSPI/Fonts/Custom/Orbitron_Light_24.h,200
const uint8_t Orbitron_Light_24Bitmaps[] PROGMEM = {PROGMEM3,155
const GFXglyph Orbitron_Light_24Glyphs[] PROGMEM = {PROGMEM101,13734
const GFXfont Orbitron_Light_24 PROGMEM = {PROGMEM198,18360

lib/TFT_eSPI/Fonts/Custom/Yellowtail_32.h,188
const uint8_t Yellowtail_32Bitmaps[] PROGMEM = {PROGMEM3,155
const GFXglyph Yellowtail_32Glyphs[] PROGMEM = {PROGMEM101,24580
const GFXfont Yellowtail_32 PROGMEM = {PROGMEM198,29202

lib/TFT_eSPI/Fonts/Custom/Satisfy_24.h,179
const uint8_t Satisfy_24Bitmaps[] PROGMEM = {PROGMEM3,155
const GFXglyph Satisfy_24Glyphs[] PROGMEM = {PROGMEM101,14192
const GFXfont Satisfy_24 PROGMEM = {PROGMEM198,18811

lib/TFT_eSPI/Fonts/Custom/Orbitron_Light_32.h,200
const uint8_t Orbitron_Light_32Bitmaps[] PROGMEM = {PROGMEM3,155
const GFXglyph Orbitron_Light_32Glyphs[] PROGMEM = {PROGMEM101,24144
const GFXfont Orbitron_Light_32 PROGMEM = {PROGMEM198,28770

lib/TFT_eSPI/Fonts/Custom/Roboto_Thin_24.h,191
const uint8_t Roboto_Thin_24Bitmaps[] PROGMEM = {PROGMEM3,155
const GFXglyph Roboto_Thin_24Glyphs[] PROGMEM = {PROGMEM101,10486
const GFXfont Roboto_Thin_24 PROGMEM = {PROGMEM198,15109

lib/TFT_eSPI/Fonts/Font64rle.h,200
#define nr_chrs_f64 nr_chrs_f643,30
#define chr_hgt_f64 chr_hgt_f644,53
#define baseline_f64 baseline_f645,76
#define data_size_f64 data_size_f646,100
#define firstchr_f64 firstchr_f647,124

lib/TFT_eSPI/Fonts/Font72rle.c,1100
PROGMEM const unsigned char widtbl_f72[96] =          // character width tablewidtbl_f7210,272
PROGMEM const unsigned char chr_f72_20[] = chr_f72_2028,1109
PROGMEM const unsigned char chr_f72_2D[] = chr_f72_2D35,1262
PROGMEM const unsigned char chr_f72_2E[] = chr_f72_2E43,1491
PROGMEM const unsigned char chr_f72_30[] = chr_f72_3052,1742
PROGMEM const unsigned char chr_f72_31[] = chr_f72_3188,3322
PROGMEM const unsigned char chr_f72_32[] = chr_f72_32112,4343
PROGMEM const unsigned char chr_f72_33[] = chr_f72_33137,5396
PROGMEM const unsigned char chr_f72_34[] = chr_f72_34165,6608
PROGMEM const unsigned char chr_f72_35[] = chr_f72_35193,7814
PROGMEM const unsigned char chr_f72_36[] = chr_f72_36221,8996
PROGMEM const unsigned char chr_f72_37[] = chr_f72_37255,10514
PROGMEM const unsigned char chr_f72_38[] = chr_f72_38277,11419
PROGMEM const unsigned char chr_f72_39[] = chr_f72_39311,12901
PROGMEM const unsigned char chr_f72_3A[] = chr_f72_3A345,14419
PROGMEM const unsigned char * const chrtbl_f72[96] =        // character pointer tablechrtbl_f72355,14767

lib/TFT_eSPI/Fonts/Font16.c,9981
#define TFT_ESPI_FONT2_DOLLARTFT_ESPI_FONT2_DOLLAR4,55
#define TFT_ESPI_GRAVE_IS_DEGREETFT_ESPI_GRAVE_IS_DEGREE8,229
PROGMEM const unsigned char widtbl_f16[96] =         // character width tablewidtbl_f1613,373
PROGMEM const unsigned char chr_f16_20[16] =         // 1 unsigned char per rowchr_f16_2035,1351
PROGMEM const unsigned char chr_f16_21[16] =         // 1 unsigned char per rowchr_f16_2141,1620
PROGMEM const unsigned char chr_f16_22[16] =         // 1 unsigned char per rowchr_f16_2247,1889
PROGMEM const unsigned char chr_f16_23[16] =         // 1 unsigned char per rowchr_f16_2353,2158
PROGMEM const unsigned char chr_f16_24[16] =         // 1 unsigned char per rowchr_f16_2459,2427
PROGMEM const unsigned char chr_f16_25[16] =         // 1 unsigned char per rowchr_f16_2570,2935
PROGMEM const unsigned char chr_f16_26[16] =         // 1 unsigned char per rowchr_f16_2676,3204
PROGMEM const unsigned char chr_f16_27[16] =         // 1 unsigned char per rowchr_f16_2782,3473
PROGMEM const unsigned char chr_f16_28[16] =         // 1 unsigned char per rowchr_f16_2888,3742
PROGMEM const unsigned char chr_f16_29[16] =         // 1 unsigned char per rowchr_f16_2994,4011
PROGMEM const unsigned char chr_f16_2A[16] =         // 1 unsigned char per rowchr_f16_2A100,4280
PROGMEM const unsigned char chr_f16_2B[16] =         // 1 unsigned char per rowchr_f16_2B106,4549
PROGMEM const unsigned char chr_f16_2C[16] =         // 1 unsigned char per rowchr_f16_2C112,4818
PROGMEM const unsigned char chr_f16_2D[16] =         // 1 unsigned char per rowchr_f16_2D118,5087
PROGMEM const unsigned char chr_f16_2E[16] =         // 1 unsigned char per rowchr_f16_2E124,5356
PROGMEM const unsigned char chr_f16_2F[16] =         // 1 unsigned char per rowchr_f16_2F130,5625
PROGMEM const unsigned char chr_f16_30[16] =         // 1 unsigned char per rowchr_f16_30136,5894
PROGMEM const unsigned char chr_f16_31[16] =         // 1 unsigned char per rowchr_f16_31142,6163
PROGMEM const unsigned char chr_f16_32[16] =         // 1 unsigned char per rowchr_f16_32148,6432
PROGMEM const unsigned char chr_f16_33[16] =         // 1 unsigned char per rowchr_f16_33154,6701
PROGMEM const unsigned char chr_f16_34[16] =         // 1 unsigned char per rowchr_f16_34160,6970
PROGMEM const unsigned char chr_f16_35[16] =         // 1 unsigned char per rowchr_f16_35166,7239
PROGMEM const unsigned char chr_f16_36[16] =         // 1 unsigned char per rowchr_f16_36172,7508
PROGMEM const unsigned char chr_f16_37[16] =         // 1 unsigned char per rowchr_f16_37178,7777
PROGMEM const unsigned char chr_f16_38[16] =         // 1 unsigned char per rowchr_f16_38184,8046
PROGMEM const unsigned char chr_f16_39[16] =         // 1 unsigned char per rowchr_f16_39190,8315
PROGMEM const unsigned char chr_f16_3A[16] =         // 1 unsigned char per rowchr_f16_3A196,8584
PROGMEM const unsigned char chr_f16_3B[16] =         // 1 unsigned char per rowchr_f16_3B202,8853
PROGMEM const unsigned char chr_f16_3C[16] =         // 1 unsigned char per rowchr_f16_3C208,9122
PROGMEM const unsigned char chr_f16_3D[16] =         // 1 unsigned char per rowchr_f16_3D214,9391
PROGMEM const unsigned char chr_f16_3E[16] =         // 1 unsigned char per rowchr_f16_3E220,9660
PROGMEM const unsigned char chr_f16_3F[16] =         // 1 unsigned char per rowchr_f16_3F226,9929
PROGMEM const unsigned char chr_f16_40[16] =         // 1 unsigned char per rowchr_f16_40232,10198
PROGMEM const unsigned char chr_f16_41[16] =         // 1 unsigned char per rowchr_f16_41237,10466
PROGMEM const unsigned char chr_f16_42[16] =         // 1 unsigned char per rowchr_f16_42243,10735
PROGMEM const unsigned char chr_f16_43[16] =         // 1 unsigned char per rowchr_f16_43249,11004
PROGMEM const unsigned char chr_f16_44[16] =         // 1 unsigned char per rowchr_f16_44254,11272
PROGMEM const unsigned char chr_f16_45[16] =         // 1 unsigned char per rowchr_f16_45260,11541
PROGMEM const unsigned char chr_f16_46[16] =         // 1 unsigned char per rowchr_f16_46266,11810
PROGMEM const unsigned char chr_f16_47[16] =         // 1 unsigned char per rowchr_f16_47271,12078
PROGMEM const unsigned char chr_f16_48[16] =         // 1 unsigned char per rowchr_f16_48277,12347
PROGMEM const unsigned char chr_f16_49[16] =         // 1 unsigned char per rowchr_f16_49283,12616
PROGMEM const unsigned char chr_f16_4A[16] =         // 1 unsigned char per rowchr_f16_4A289,12885
PROGMEM const unsigned char chr_f16_4B[16] =         // 1 unsigned char per rowchr_f16_4B295,13154
PROGMEM const unsigned char chr_f16_4C[16] =         // 1 unsigned char per rowchr_f16_4C301,13423
PROGMEM const unsigned char chr_f16_4D[32] =         // 2 unsigned chars per rowchr_f16_4D307,13692
PROGMEM const unsigned char chr_f16_4E[16] =         // 1 unsigned char per rowchr_f16_4E314,14070
PROGMEM const unsigned char chr_f16_4F[16] =         // 1 unsigned char per rowchr_f16_4F320,14339
PROGMEM const unsigned char chr_f16_50[16] =         // 1 unsigned char per rowchr_f16_50326,14608
PROGMEM const unsigned char chr_f16_51[16] =         // 1 unsigned char per rowchr_f16_51331,14876
PROGMEM const unsigned char chr_f16_52[16] =         // 1 unsigned char per rowchr_f16_52337,15145
PROGMEM const unsigned char chr_f16_53[16] =         // 1 unsigned char per rowchr_f16_53343,15414
PROGMEM const unsigned char chr_f16_54[16] =         // 1 unsigned char per rowchr_f16_54349,15683
PROGMEM const unsigned char chr_f16_55[16] =         // 1 unsigned char per rowchr_f16_55355,15952
PROGMEM const unsigned char chr_f16_56[16] =         // 1 unsigned char per rowchr_f16_56361,16221
PROGMEM const unsigned char chr_f16_57[32] =         // 2 unsigned chars per rowchr_f16_57367,16490
PROGMEM const unsigned char chr_f16_58[16] =         // 1 unsigned char per rowchr_f16_58374,16868
PROGMEM const unsigned char chr_f16_59[16] =         // 1 unsigned char per rowchr_f16_59380,17137
PROGMEM const unsigned char chr_f16_5A[16] =         // 1 unsigned char per rowchr_f16_5A386,17406
PROGMEM const unsigned char chr_f16_5B[16] =         // 1 unsigned char per rowchr_f16_5B392,17675
PROGMEM const unsigned char chr_f16_5C[16] =         // 1 unsigned char per rowchr_f16_5C398,17944
PROGMEM const unsigned char chr_f16_5D[16] =         // 1 unsigned char per rowchr_f16_5D404,18213
PROGMEM const unsigned char chr_f16_5E[32] =         // 1 unsigned chars per rowchr_f16_5E410,18482
PROGMEM const unsigned char chr_f16_5F[32] =         // 1 unsigned chars per rowchr_f16_5F416,18752
PROGMEM const unsigned char chr_f16_60[16] =         // 1 unsigned char per rowchr_f16_60422,19022
PROGMEM const unsigned char chr_f16_61[16] =         // 1 unsigned char per rowchr_f16_61433,19495
PROGMEM const unsigned char chr_f16_62[16] =         // 1 unsigned char per rowchr_f16_62439,19764
PROGMEM const unsigned char chr_f16_63[16] =         // 1 unsigned char per rowchr_f16_63445,20033
PROGMEM const unsigned char chr_f16_64[16] =         // 1 unsigned char per rowchr_f16_64451,20302
PROGMEM const unsigned char chr_f16_65[16] =         // 1 unsigned char per rowchr_f16_65457,20571
PROGMEM const unsigned char chr_f16_66[16] =         // 1 unsigned char per rowchr_f16_66463,20840
PROGMEM const unsigned char chr_f16_67[16] =         // 1 unsigned char per rowchr_f16_67468,21108
PROGMEM const unsigned char chr_f16_68[16] =         // 1 unsigned char per rowchr_f16_68474,21377
PROGMEM const unsigned char chr_f16_69[16] =         // 1 unsigned char per rowchr_f16_69480,21646
PROGMEM const unsigned char chr_f16_6A[16] =         // 1 unsigned char per rowchr_f16_6A486,21915
PROGMEM const unsigned char chr_f16_6B[16] =         // 1 unsigned char per rowchr_f16_6B492,22184
PROGMEM const unsigned char chr_f16_6C[16] =         // 1 unsigned char per rowchr_f16_6C498,22453
PROGMEM const unsigned char chr_f16_6D[16] =         // 1 unsigned char per rowchr_f16_6D504,22722
PROGMEM const unsigned char chr_f16_6E[16] =         // 1 unsigned char per rowchr_f16_6E510,22991
PROGMEM const unsigned char chr_f16_6F[16] =         // 1 unsigned char per rowchr_f16_6F516,23260
PROGMEM const unsigned char chr_f16_70[16] =         // 1 unsigned char per rowchr_f16_70522,23529
PROGMEM const unsigned char chr_f16_71[16] =         // 1 unsigned char per rowchr_f16_71528,23798
PROGMEM const unsigned char chr_f16_72[16] =         // 1 unsigned char per rowchr_f16_72534,24067
PROGMEM const unsigned char chr_f16_73[16] =         // 1 unsigned char per rowchr_f16_73540,24336
PROGMEM const unsigned char chr_f16_74[16] =         // 1 unsigned char per rowchr_f16_74546,24605
PROGMEM const unsigned char chr_f16_75[16] =         // 1 unsigned char per rowchr_f16_75552,24874
PROGMEM const unsigned char chr_f16_76[16] =         // 1 unsigned char per rowchr_f16_76558,25143
PROGMEM const unsigned char chr_f16_77[16] =         // 1 unsigned char per rowchr_f16_77564,25412
PROGMEM const unsigned char chr_f16_78[16] =         // 1 unsigned char per rowchr_f16_78570,25681
PROGMEM const unsigned char chr_f16_79[16] =         // 1 unsigned char per rowchr_f16_79576,25950
PROGMEM const unsigned char chr_f16_7A[16] =         // 1 unsigned char per rowchr_f16_7A582,26219
PROGMEM const unsigned char chr_f16_7B[16] =         // 1 unsigned char per rowchr_f16_7B588,26488
PROGMEM const unsigned char chr_f16_7C[16] =         // 1 unsigned char per rowchr_f16_7C594,26757
PROGMEM const unsigned char chr_f16_7D[16] =         // 1 unsigned char per rowchr_f16_7D600,27026
PROGMEM const unsigned char chr_f16_7E[16] =         // 1 unsigned char per rowchr_f16_7E606,27295
PROGMEM const unsigned char chr_f16_7F[16] =         // 1 unsigned char per rowchr_f16_7F612,27564
PROGMEM const unsigned char* const chrtbl_f16[96] =       // character pointer tablechrtbl_f16618,27833

lib/TFT_eSPI/Extensions/Smooth_font.cpp,576
void TFT_eSPI::loadFont(const uint8_t array[])loadFont13,682
void TFT_eSPI::loadFont(String fontName, fs::FS &ffs)loadFont25,1125
void TFT_eSPI::loadFont(String fontName, bool flash)loadFont36,1517
void TFT_eSPI::loadMetrics(void)loadMetrics153,6682
void TFT_eSPI::unloadFont( void )unloadFont255,11498
uint32_t TFT_eSPI::readInt32(void)readInt32313,12372
bool TFT_eSPI::getUnicodeIndex(uint16_t unicode, uint16_t *index)getUnicodeIndex341,13108
void TFT_eSPI::drawGlyph(uint16_t code)drawGlyph360,13647
void TFT_eSPI::showFont(uint32_t td)showFont485,17043

lib/TFT_eSPI/Extensions/Button.h,1164
class TFT_eSPI_Button {TFT_eSPI_Button9,468
  TFT_eSPI *_gfx;_gfx35,1337
  int16_t  _x1, _y1; // Coordinates of top-left corner of button_x136,1355
  int16_t  _x1, _y1; // Coordinates of top-left corner of button_y136,1355
  int16_t  _xd, _yd; // Button text datum offsets (wrt center of button)_xd37,1420
  int16_t  _xd, _yd; // Button text datum offsets (wrt center of button)_yd37,1420
  uint16_t _w, _h;   // Width and height of button_w38,1493
  uint16_t _w, _h;   // Width and height of button_h38,1493
  uint8_t  _textsize, _textdatum; // Text size multiplier and text datum for button_textsize39,1544
  uint8_t  _textsize, _textdatum; // Text size multiplier and text datum for button_textdatum39,1544
  uint16_t _outlinecolor, _fillcolor, _textcolor;_outlinecolor40,1628
  uint16_t _outlinecolor, _fillcolor, _textcolor;_fillcolor40,1628
  uint16_t _outlinecolor, _fillcolor, _textcolor;_textcolor40,1628
  char     _label[10]; // Button text is 9 chars maximum unless long_name used_label41,1678
  bool  currstate, laststate; // Button statescurrstate43,1758
  bool  currstate, laststate; // Button stateslaststate43,1758

lib/TFT_eSPI/Extensions/Smooth_font.h,1732
    const uint8_t* gArray;           //array start pointergArray22,614
    uint16_t gCount;                 // Total number of charactersgCount23,673
    uint16_t yAdvance;               // Line advanceyAdvance24,740
    uint16_t spaceWidth;             // Width of a space characterspaceWidth25,793
    int16_t  ascent;                 // Height of top of 'd' above baseline, other characters may be tallerascent26,860
    int16_t  descent;                // Offset to bottom of 'p', other characters may have a larger descentdescent27,968
    uint16_t maxAscent;              // Maximum ascent found in fontmaxAscent28,1076
    uint16_t maxDescent;             // Maximum descent found in fontmaxDescent29,1145
  } fontMetrics;fontMetrics30,1215
fontMetrics gFont = { nullptr, 0, 0, 0, 0, 0, 0, 0 };gFont32,1233
  uint16_t* gUnicode = NULL;  //UTF-16 code, the codes are searched so do not need to be sequentialgUnicode35,1400
  uint8_t*  gHeight = NULL;   //cheightgHeight36,1500
  uint8_t*  gWidth = NULL;    //cwidthgWidth37,1540
  uint8_t*  gxAdvance = NULL; //setWidthgxAdvance38,1579
  int16_t*  gdY = NULL;       //topExtentgdY39,1620
  int8_t*   gdX = NULL;       //leftExtentgdX40,1662
  uint32_t* gBitmap = NULL;   //file pointer to greyscale bitmapgBitmap41,1705
  bool     fontLoaded = false; // Flags when a anti-aliased font is loadedfontLoaded43,1771
  fs::File fontFile;fontFile46,1872
  fs::FS   &fontFS  = SPIFFS;fontFS47,1893
  bool     spiffs   = true;spiffs48,1923
  bool     fs_font = false;    // For ESP32/8266 use smooth font file or FLASH (PROGMEM) arrayfs_font49,1951
  bool     fontFile = true;fontFile52,2053
  uint8_t* fontPtr = nullptr;fontPtr60,2160

lib/TFT_eSPI/Extensions/Sprite.h,2116
class TFT_eSprite : public TFT_eSPI {TFT_eSprite8,497
  TFT_eSPI *_tft;_tft147,7680
  uint8_t  _bpp;     // bits per pixel (1, 8 or 16)_bpp154,7854
  uint16_t *_img;    // pointer to 16 bit sprite_img155,7906
  uint8_t  *_img8;   // pointer to  8 bit sprite frame 1 or frame 2_img8156,7955
  uint8_t  *_img4;   // pointer to  4 bit sprite (uses color map)_img4157,8023
  uint8_t  *_img8_1; // pointer to frame 1_img8_1158,8089
  uint8_t  *_img8_2; // pointer to frame 2_img8_2159,8132
  uint16_t *_colorMap; // color map: 16 entries, used with 4 bit color map._colorMap161,8176
  int32_t  _sinra;_sinra163,8253
  int32_t  _cosra;_cosra164,8272
  bool     _created;    // A Sprite has been created and memory reserved_created166,8292
  bool     _gFont = false; _gFont167,8365
  int32_t  _xs, _ys, _xe, _ye, _xptr, _yptr; // for setWindow_xs169,8394
  int32_t  _xs, _ys, _xe, _ye, _xptr, _yptr; // for setWindow_ys169,8394
  int32_t  _xs, _ys, _xe, _ye, _xptr, _yptr; // for setWindow_xe169,8394
  int32_t  _xs, _ys, _xe, _ye, _xptr, _yptr; // for setWindow_ye169,8394
  int32_t  _xs, _ys, _xe, _ye, _xptr, _yptr; // for setWindow_xptr169,8394
  int32_t  _xs, _ys, _xe, _ye, _xptr, _yptr; // for setWindow_yptr169,8394
  int32_t  _sx, _sy; // x,y for scroll zone_sx170,8456
  int32_t  _sx, _sy; // x,y for scroll zone_sy170,8456
  uint32_t _sw, _sh; // w,h for scroll zone_sw171,8500
  uint32_t _sw, _sh; // w,h for scroll zone_sh171,8500
  uint32_t _scolor;  // gap fill colour for scroll zone_scolor172,8544
  int32_t  _iwidth, _iheight; // Sprite memory image bit width and height (swapped during rotations)_iwidth174,8601
  int32_t  _iwidth, _iheight; // Sprite memory image bit width and height (swapped during rotations)_iheight174,8601
  int32_t  _dwidth, _dheight; // Real display width and height (for <8bpp Sprites)_dwidth175,8702
  int32_t  _dwidth, _dheight; // Real display width and height (for <8bpp Sprites)_dheight175,8702
  int32_t  _bitwidth;         // Sprite image bit width for drawPixel (for <8bpp Sprites, not swapped)_bitwidth176,8785

lib/TFT_eSPI/Extensions/Sprite.cpp,4523
TFT_eSprite::TFT_eSprite(TFT_eSPI *tft)TFT_eSprite17,1135
void* TFT_eSprite::createSprite(int16_t w, int16_t h, uint8_t frames)createSprite48,2036
void* TFT_eSprite::getPointer(void)getPointer115,3868
bool TFT_eSprite::created(void)created126,4243
TFT_eSprite::~TFT_eSprite(void)~TFT_eSprite136,4564
void* TFT_eSprite::callocSprite(int16_t w, int16_t h, uint8_t frames)callocSprite150,4982
void TFT_eSprite::createPalette(uint16_t colorMap[], uint8_t colors)createPalette221,7633
void TFT_eSprite::createPalette(const uint16_t colorMap[], uint8_t colors)createPalette252,8457
void* TFT_eSprite::frameBuffer(int8_t f)frameBuffer278,9248
void* TFT_eSprite::setColorDepth(int8_t b)setColorDepth299,9815
int8_t TFT_eSprite::getColorDepth(void)getColorDepth328,10690
void TFT_eSprite::setBitmapColor(uint16_t c, uint16_t b)setBitmapColor339,11088
void TFT_eSprite::setPaletteColor(uint8_t index, uint16_t color)setPaletteColor351,11515
uint16_t TFT_eSprite::getPaletteColor(uint8_t index)getPaletteColor363,11987
void TFT_eSprite::deleteSprite(void)deleteSprite375,12432
#define FP_SCALE FP_SCALE397,13046
bool TFT_eSprite::pushRotated(int16_t angle, int32_t transp)pushRotated398,13066
bool TFT_eSprite::pushRotated(TFT_eSprite *spr, int16_t angle, int32_t transp)pushRotated468,15653
bool TFT_eSprite::getRotatedBounds(int16_t angle, int16_t *min_x, int16_t *min_y,getRotatedBounds530,17963
bool TFT_eSprite::getRotatedBounds(TFT_eSprite *spr, int16_t angle, int16_t *min_x, int16_t *min_y,getRotatedBounds562,19281
void TFT_eSprite::getRotatedBounds(int16_t angle, int16_t w, int16_t h, int16_t xp, int16_t yp,getRotatedBounds599,20827
void TFT_eSprite::pushSprite(int32_t x, int32_t y)pushSprite653,22578
void TFT_eSprite::pushSprite(int32_t x, int32_t y, uint16_t transp)pushSprite676,23335
bool TFT_eSprite::pushToSprite(TFT_eSprite *dspr, int32_t x, int32_t y)pushToSprite712,24678
bool TFT_eSprite::pushToSprite(TFT_eSprite *dspr, int32_t x, int32_t y, uint16_t transp)pushToSprite744,25810
bool TFT_eSprite::pushSprite(int32_t tx, int32_t ty, int32_t sx, int32_t sy, int32_t sw, int32_t sh)pushSprite795,27500
uint16_t TFT_eSprite::readPixelValue(int32_t x, int32_t y)readPixelValue892,30478
uint16_t TFT_eSprite::readPixel(int32_t x, int32_t y)readPixel954,31969
void  TFT_eSprite::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t *data, uint8_t sbpp)pushImage1025,33733
void  TFT_eSprite::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, const uint16_t *data)pushImage1164,37725
void TFT_eSprite::setWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)setWindow1247,40078
void TFT_eSprite::pushColor(uint32_t color)pushColor1284,40939
void TFT_eSprite::pushColor(uint32_t color, uint16_t len)pushColor1326,42173
void TFT_eSprite::writeColor(uint16_t color)writeColor1348,42871
void TFT_eSprite::setScrollRect(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t color)setScrollRect1387,44120
void TFT_eSprite::scroll(int16_t dx, int16_t dy)scroll1412,44832
void TFT_eSprite::fillSprite(uint32_t color)fillSprite1510,47722
int16_t TFT_eSprite::width(void)width1548,49010
int16_t TFT_eSprite::height(void)height1571,49556
void TFT_eSprite::setRotation(uint8_t r)setRotation1595,50169
uint8_t TFT_eSprite::getRotation(void)getRotation1614,50615
void TFT_eSprite::drawPixel(int32_t x, int32_t y, uint32_t color)drawPixel1624,50968
void TFT_eSprite::drawLine(int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t color)drawLine1684,52454
void TFT_eSprite::drawFastVLine(int32_t x, int32_t y, int32_t h, uint32_t color)drawFastVLine1742,53954
void TFT_eSprite::drawFastHLine(int32_t x, int32_t y, int32_t w, uint32_t color)drawFastHLine1803,55535
void TFT_eSprite::fillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)fillRect1866,57076
void TFT_eSprite::drawChar(int32_t x, int32_t y, uint16_t c, uint32_t color, uint32_t bg, uint8_t size)drawChar1978,59805
int16_t TFT_eSprite::drawChar(uint16_t uniCode, int32_t x, int32_t y)drawChar2122,63820
int16_t TFT_eSprite::drawChar(uint16_t uniCode, int32_t x, int32_t y, uint8_t font)drawChar2128,64002
void TFT_eSprite::drawGlyph(uint16_t code)drawGlyph2380,72609
void TFT_eSprite::printToSprite(String string)printToSprite2507,75821
void TFT_eSprite::printToSprite(char *cbuffer, uint16_t len) //String string)printToSprite2518,76250
int16_t TFT_eSprite::printToSprite(int16_t x, int16_t y, uint16_t index)printToSprite2569,77635

lib/TFT_eSPI/Extensions/Button.cpp,757
TFT_eSPI_Button::TFT_eSPI_Button(void) {TFT_eSPI_Button5,291
void TFT_eSPI_Button::initButton(initButton13,467
void TFT_eSPI_Button::initButtonUL(initButtonUL24,883
void TFT_eSPI_Button::setLabelDatum(int16_t x_delta, int16_t y_delta, uint8_t datum)setLabelDatum42,1357
void TFT_eSPI_Button::drawButton(bool inverted, String long_name) {drawButton49,1517
bool TFT_eSPI_Button::contains(int16_t x, int16_t y) {contains83,2443
void TFT_eSPI_Button::press(bool p) {press88,2588
bool TFT_eSPI_Button::isPressed()    { return currstate; }isPressed93,2671
bool TFT_eSPI_Button::justPressed()  { return (currstate && !laststate); }justPressed94,2730
bool TFT_eSPI_Button::justReleased() { return (!currstate && laststate); }justReleased95,2805

lib/TFT_eSPI/Extensions/Touch.cpp,1001
inline void TFT_eSPI::begin_touch_read_write(void){begin_touch_read_write18,755
inline void TFT_eSPI::end_touch_read_write(void){end_touch_read_write34,1466
void TFT_eSPI::spi_begin_touch() {begin_touch_read_write();}spi_begin_touch48,2028
void TFT_eSPI::spi_end_touch()   {  end_touch_read_write();}spi_end_touch49,2089
uint8_t TFT_eSPI::getTouchRaw(uint16_t *x, uint16_t *y){getTouchRaw55,2444
uint16_t TFT_eSPI::getTouchRawZ(void){getTouchRawZ98,4366
#define _RAWERR _RAWERR117,5014
uint8_t TFT_eSPI::validTouch(uint16_t *x, uint16_t *y, uint16_t threshold){validTouch118,5090
#define Z_THRESHOLD Z_THRESHOLD162,6525
uint8_t TFT_eSPI::getTouch(uint16_t *x, uint16_t *y, uint16_t threshold){getTouch163,6600
void TFT_eSPI::convertRawXY(uint16_t *x, uint16_t *y)convertRawXY195,7462
void TFT_eSPI::calibrateTouch(uint16_t *parameters, uint32_t color_fg, uint32_t color_bg, uint8_t size){calibrateTouch222,8422
void TFT_eSPI::setTouch(uint16_t *parameters){setTouch329,12615

lib/TFT_eSPI/Extensions/Touch.h,1282
  uint16_t touchCalibration_x0 = 300, touchCalibration_x1 = 3600, touchCalibration_y0 = 300, touchCalibration_y1 = 3600;touchCalibration_x033,1662
  uint16_t touchCalibration_x0 = 300, touchCalibration_x1 = 3600, touchCalibration_y0 = 300, touchCalibration_y1 = 3600;touchCalibration_x133,1662
  uint16_t touchCalibration_x0 = 300, touchCalibration_x1 = 3600, touchCalibration_y0 = 300, touchCalibration_y1 = 3600;touchCalibration_y033,1662
  uint16_t touchCalibration_x0 = 300, touchCalibration_x1 = 3600, touchCalibration_y0 = 300, touchCalibration_y1 = 3600;touchCalibration_y133,1662
  uint8_t  touchCalibration_rotate = 1, touchCalibration_invert_x = 2, touchCalibration_invert_y = 0;touchCalibration_rotate34,1783
  uint8_t  touchCalibration_rotate = 1, touchCalibration_invert_x = 2, touchCalibration_invert_y = 0;touchCalibration_invert_x34,1783
  uint8_t  touchCalibration_rotate = 1, touchCalibration_invert_x = 2, touchCalibration_invert_y = 0;touchCalibration_invert_y34,1783
  uint32_t _pressTime;        // Press and hold time-out_pressTime36,1886
  uint16_t _pressX, _pressY;  // For future use (last sampled calibrated coordinates)_pressX37,1943
  uint16_t _pressX, _pressY;  // For future use (last sampled calibrated coordinates)_pressY37,1943

lib/TFT_eSPI/examples/320 x 240/All_Free_Fonts_Demo/Free_Fonts.h,7519
#define LOAD_GFXFFLOAD_GFXFF42,1354
#define GFXFF GFXFF47,1542
#define GLCD GLCD48,1558
#define FONT2 FONT249,1574
#define FONT4 FONT450,1590
#define FONT6 FONT651,1606
#define FONT7 FONT752,1622
#define FONT8 FONT853,1638
#define TT1 TT160,1740
#define FM9 FM962,1763
#define FM12 FM1263,1790
#define FM18 FM1864,1819
#define FM24 FM2465,1848
#define FMB9 FMB967,1878
#define FMB12 FMB1268,1910
#define FMB18 FMB1869,1944
#define FMB24 FMB2470,1978
#define FMO9 FMO972,2013
#define FMO12 FMO1273,2048
#define FMO18 FMO1874,2085
#define FMO24 FMO2475,2122
#define FMBO9 FMBO977,2160
#define FMBO12 FMBO1278,2200
#define FMBO18 FMBO1879,2242
#define FMBO24 FMBO2480,2284
#define FSS9 FSS982,2327
#define FSS12 FSS1283,2355
#define FSS18 FSS1884,2385
#define FSS24 FSS2485,2415
#define FSSB9 FSSB987,2446
#define FSSB12 FSSB1288,2479
#define FSSB18 FSSB1889,2514
#define FSSB24 FSSB2490,2549
#define FSSO9 FSSO992,2585
#define FSSO12 FSSO1293,2621
#define FSSO18 FSSO1894,2659
#define FSSO24 FSSO2495,2697
#define FSSBO9 FSSBO997,2736
#define FSSBO12 FSSBO1298,2777
#define FSSBO18 FSSBO1899,2820
#define FSSBO24 FSSBO24100,2863
#define FS9 FS9102,2907
#define FS12 FS12103,2935
#define FS18 FS18104,2965
#define FS24 FS24105,2995
#define FSI9 FSI9107,3026
#define FSI12 FSI12108,3061
#define FSI19 FSI19109,3098
#define FSI24 FSI24110,3135
#define FSB9 FSB9112,3173
#define FSB12 FSB12113,3206
#define FSB18 FSB18114,3241
#define FSB24 FSB24115,3276
#define FSBI9 FSBI9117,3312
#define FSBI12 FSBI12118,3352
#define FSBI18 FSBI18119,3394
#define FSBI24 FSBI24120,3436
#define FF0 FF0122,3479
#define FF1 FF1123,3520
#define FF2 FF2124,3547
#define FF3 FF3125,3575
#define FF4 FF4126,3603
#define FF5 FF5128,3632
#define FF6 FF6129,3663
#define FF7 FF7130,3695
#define FF8 FF8131,3727
#define FF9 FF9133,3760
#define FF10 FF10134,3794
#define FF11 FF11135,3830
#define FF12 FF12136,3866
#define FF13 FF13138,3903
#define FF14 FF14139,3942
#define FF15 FF15140,3982
#define FF16 FF16141,4022
#define FF17 FF17143,4063
#define FF18 FF18144,4091
#define FF19 FF19145,4120
#define FF20 FF20146,4149
#define FF21 FF21148,4179
#define FF22 FF22149,4211
#define FF23 FF23150,4244
#define FF24 FF24151,4277
#define FF25 FF25153,4311
#define FF26 FF26154,4346
#define FF27 FF27155,4382
#define FF28 FF28156,4418
#define FF29 FF29158,4455
#define FF30 FF30159,4494
#define FF31 FF31160,4534
#define FF32 FF32161,4574
#define FF33 FF33163,4615
#define FF34 FF34164,4644
#define FF35 FF35165,4674
#define FF36 FF36166,4704
#define FF37 FF37168,4735
#define FF38 FF38169,4770
#define FF39 FF39170,4806
#define FF40 FF40171,4842
#define FF41 FF41173,4879
#define FF42 FF42174,4912
#define FF43 FF43175,4946
#define FF44 FF44176,4980
#define FF45 FF45178,5015
#define FF46 FF46179,5054
#define FF47 FF47180,5094
#define FF48 FF48181,5134
#define sFF0 sFF0190,5475
#define sTT1 sTT1191,5495
#define sFF1 sFF1192,5520
#define sFF2 sFF2193,5542
#define sFF3 sFF3194,5565
#define sFF4 sFF4195,5588
#define sFF5 sFF5197,5612
#define sFF6 sFF6198,5639
#define sFF7 sFF7199,5667
#define sFF8 sFF8200,5695
#define sFF9 sFF9202,5724
#define sFF10 sFF10203,5754
#define sFF11 sFF11204,5786
#define sFF12 sFF12205,5818
#define sFF13 sFF13207,5851
#define sFF14 sFF14208,5887
#define sFF15 sFF15209,5924
#define sFF16 sFF16210,5961
#define sFF17 sFF17212,6054
#define sFF18 sFF18213,6077
#define sFF19 sFF19214,6101
#define sFF20 sFF20215,6125
#define sFF21 sFF21217,6150
#define sFF22 sFF22218,6178
#define sFF23 sFF23219,6207
#define sFF24 sFF24220,6236
#define sFF25 sFF25222,6266
#define sFF26 sFF26223,6297
#define sFF27 sFF27224,6329
#define sFF28 sFF28225,6361
#define sFF29 sFF29227,6394
#define sFF30 sFF30228,6430
#define sFF31 sFF31229,6467
#define sFF32 sFF32230,6504
#define sFF33 sFF33232,6542
#define sFF34 sFF34233,6566
#define sFF35 sFF35234,6591
#define sFF36 sFF36235,6616
#define sFF37 sFF37237,6642
#define sFF38 sFF38238,6673
#define sFF39 sFF39239,6705
#define sFF40 sFF40240,6737
#define sFF41 sFF41242,6770
#define sFF42 sFF42243,6799
#define sFF43 sFF43244,6829
#define sFF44 sFF44245,6859
#define sFF45 sFF45247,6890
#define sFF46 sFF46248,6926
#define sFF47 sFF47249,6963
#define sFF48 sFF48250,7000
#define GFXFF GFXFF259,7400
#define GLCD GLCD260,7416
#define FONT2 FONT2261,7432
#define FONT4 FONT4262,7448
#define FONT6 FONT6263,7464
#define FONT7 FONT7264,7480
#define FONT8 FONT8265,7496
#define FF0 FF0267,7513
#define FF1 FF1268,7527
#define FF2 FF2269,7541
#define FF3 FF3270,7555
#define FF4 FF4271,7569
#define FF5 FF5272,7583
#define FF6 FF6273,7597
#define FF7 FF7274,7611
#define FF8 FF8275,7625
#define FF9 FF9276,7639
#define FF10 FF10277,7653
#define FF11 FF11278,7668
#define FF12 FF12279,7683
#define FF13 FF13280,7698
#define FF14 FF14281,7713
#define FF15 FF15282,7728
#define FF16 FF16283,7743
#define FF17 FF17284,7758
#define FF18 FF18285,7773
#define FF19 FF19286,7788
#define FF20 FF20287,7803
#define FF21 FF21288,7818
#define FF22 FF22289,7833
#define FF23 FF23290,7848
#define FF24 FF24291,7863
#define FF25 FF25292,7878
#define FF26 FF26293,7893
#define FF27 FF27294,7908
#define FF28 FF28295,7923
#define FF29 FF29296,7938
#define FF30 FF30297,7953
#define FF31 FF31298,7968
#define FF32 FF32299,7983
#define FF33 FF33300,7998
#define FF34 FF34301,8013
#define FF35 FF35302,8028
#define FF36 FF36303,8043
#define FF37 FF37304,8058
#define FF38 FF38305,8073
#define FF39 FF39306,8088
#define FF40 FF40307,8103
#define FF41 FF41308,8118
#define FF42 FF42309,8133
#define FF43 FF43310,8148
#define FF44 FF44311,8163
#define FF45 FF45312,8178
#define FF46 FF46313,8193
#define FF47 FF47314,8208
#define FF48 FF48315,8223
#define FM9 FM9317,8239
#define FM12 FM12318,8254
#define FM18 FM18319,8269
#define FM24 FM24320,8284
#define FMB9 FMB9322,8300
#define FMB12 FMB12323,8316
#define FMB18 FMB18324,8332
#define FMB24 FMB24325,8348
#define FMO9 FMO9327,8365
#define FMO12 FMO12328,8381
#define FMO18 FMO18329,8397
#define FMO24 FMO24330,8413
#define FMBO9 FMBO9332,8430
#define FMBO12 FMBO12333,8447
#define FMBO18 FMBO18334,8464
#define FMBO24 FMBO24335,8481
#define FSS9 FSS9337,8499
#define FSS12 FSS12338,8515
#define FSS18 FSS18339,8531
#define FSS24 FSS24340,8547
#define FSSB9 FSSB9342,8564
#define FSSB12 FSSB12343,8581
#define FSSB18 FSSB18344,8598
#define FSSB24 FSSB24345,8615
#define FSSO9 FSSO9347,8633
#define FSSO12 FSSO12348,8650
#define FSSO18 FSSO18349,8667
#define FSSO24 FSSO24350,8684
#define FSSBO9 FSSBO9352,8702
#define FSSBO12 FSSBO12353,8720
#define FSSBO18 FSSBO18354,8738
#define FSSBO24 FSSBO24355,8756
#define FS9 FS9357,8775
#define FS12 FS12358,8790
#define FS18 FS18359,8805
#define FS24 FS24360,8820
#define FSI9 FSI9362,8836
#define FSI12 FSI12363,8852
#define FSI19 FSI19364,8868
#define FSI24 FSI24365,8884
#define FSB9 FSB9367,8901
#define FSB12 FSB12368,8917
#define FSB18 FSB18369,8933
#define FSB24 FSB24370,8949
#define FSBI9 FSBI9372,8966
#define FSBI12 FSBI12373,8983
#define FSBI18 FSBI18374,9000
#define FSBI24 FSBI24375,9017

lib/TFT_eSPI/examples/320 x 240/Free_Font_Demo/Free_Fonts.h,7506
#define GFXFF GFXFF45,1522
#define GLCD GLCD46,1538
#define FONT2 FONT247,1554
#define FONT4 FONT448,1570
#define FONT6 FONT649,1586
#define FONT7 FONT750,1602
#define FONT8 FONT851,1618
#define TT1 TT158,1720
#define FM9 FM960,1743
#define FM12 FM1261,1770
#define FM18 FM1862,1799
#define FM24 FM2463,1828
#define FMB9 FMB965,1858
#define FMB12 FMB1266,1890
#define FMB18 FMB1867,1924
#define FMB24 FMB2468,1958
#define FMO9 FMO970,1993
#define FMO12 FMO1271,2028
#define FMO18 FMO1872,2065
#define FMO24 FMO2473,2102
#define FMBO9 FMBO975,2140
#define FMBO12 FMBO1276,2180
#define FMBO18 FMBO1877,2222
#define FMBO24 FMBO2478,2264
#define FSS9 FSS980,2307
#define FSS12 FSS1281,2335
#define FSS18 FSS1882,2365
#define FSS24 FSS2483,2395
#define FSSB9 FSSB985,2426
#define FSSB12 FSSB1286,2459
#define FSSB18 FSSB1887,2494
#define FSSB24 FSSB2488,2529
#define FSSO9 FSSO990,2565
#define FSSO12 FSSO1291,2601
#define FSSO18 FSSO1892,2639
#define FSSO24 FSSO2493,2677
#define FSSBO9 FSSBO995,2716
#define FSSBO12 FSSBO1296,2757
#define FSSBO18 FSSBO1897,2800
#define FSSBO24 FSSBO2498,2843
#define FS9 FS9100,2887
#define FS12 FS12101,2915
#define FS18 FS18102,2945
#define FS24 FS24103,2975
#define FSI9 FSI9105,3006
#define FSI12 FSI12106,3041
#define FSI19 FSI19107,3078
#define FSI24 FSI24108,3115
#define FSB9 FSB9110,3153
#define FSB12 FSB12111,3186
#define FSB18 FSB18112,3221
#define FSB24 FSB24113,3256
#define FSBI9 FSBI9115,3292
#define FSBI12 FSBI12116,3332
#define FSBI18 FSBI18117,3374
#define FSBI24 FSBI24118,3416
#define FF0 FF0120,3459
#define FF1 FF1121,3500
#define FF2 FF2122,3527
#define FF3 FF3123,3555
#define FF4 FF4124,3583
#define FF5 FF5126,3612
#define FF6 FF6127,3643
#define FF7 FF7128,3675
#define FF8 FF8129,3707
#define FF9 FF9131,3740
#define FF10 FF10132,3774
#define FF11 FF11133,3810
#define FF12 FF12134,3846
#define FF13 FF13136,3883
#define FF14 FF14137,3922
#define FF15 FF15138,3962
#define FF16 FF16139,4002
#define FF17 FF17141,4043
#define FF18 FF18142,4071
#define FF19 FF19143,4100
#define FF20 FF20144,4129
#define FF21 FF21146,4159
#define FF22 FF22147,4191
#define FF23 FF23148,4224
#define FF24 FF24149,4257
#define FF25 FF25151,4291
#define FF26 FF26152,4326
#define FF27 FF27153,4362
#define FF28 FF28154,4398
#define FF29 FF29156,4435
#define FF30 FF30157,4474
#define FF31 FF31158,4514
#define FF32 FF32159,4554
#define FF33 FF33161,4595
#define FF34 FF34162,4624
#define FF35 FF35163,4654
#define FF36 FF36164,4684
#define FF37 FF37166,4715
#define FF38 FF38167,4750
#define FF39 FF39168,4786
#define FF40 FF40169,4822
#define FF41 FF41171,4859
#define FF42 FF42172,4892
#define FF43 FF43173,4926
#define FF44 FF44174,4960
#define FF45 FF45176,4995
#define FF46 FF46177,5034
#define FF47 FF47178,5074
#define FF48 FF48179,5114
#define sFF0 sFF0188,5455
#define sTT1 sTT1189,5475
#define sFF1 sFF1190,5500
#define sFF2 sFF2191,5522
#define sFF3 sFF3192,5545
#define sFF4 sFF4193,5568
#define sFF5 sFF5195,5592
#define sFF6 sFF6196,5619
#define sFF7 sFF7197,5647
#define sFF8 sFF8198,5675
#define sFF9 sFF9200,5704
#define sFF10 sFF10201,5734
#define sFF11 sFF11202,5766
#define sFF12 sFF12203,5798
#define sFF13 sFF13205,5831
#define sFF14 sFF14206,5867
#define sFF15 sFF15207,5904
#define sFF16 sFF16208,5941
#define sFF17 sFF17210,6031
#define sFF18 sFF18211,6054
#define sFF19 sFF19212,6078
#define sFF20 sFF20213,6102
#define sFF21 sFF21215,6127
#define sFF22 sFF22216,6155
#define sFF23 sFF23217,6184
#define sFF24 sFF24218,6213
#define sFF25 sFF25220,6243
#define sFF26 sFF26221,6274
#define sFF27 sFF27222,6306
#define sFF28 sFF28223,6338
#define sFF29 sFF29225,6371
#define sFF30 sFF30226,6407
#define sFF31 sFF31227,6444
#define sFF32 sFF32228,6481
#define sFF33 sFF33230,6519
#define sFF34 sFF34231,6543
#define sFF35 sFF35232,6568
#define sFF36 sFF36233,6593
#define sFF37 sFF37235,6619
#define sFF38 sFF38236,6650
#define sFF39 sFF39237,6682
#define sFF40 sFF40238,6714
#define sFF41 sFF41240,6747
#define sFF42 sFF42241,6776
#define sFF43 sFF43242,6806
#define sFF44 sFF44243,6836
#define sFF45 sFF45245,6867
#define sFF46 sFF46246,6903
#define sFF47 sFF47247,6940
#define sFF48 sFF48248,6977
#define GFXFF GFXFF257,7377
#define GLCD GLCD258,7393
#define FONT2 FONT2259,7409
#define FONT4 FONT4260,7425
#define FONT6 FONT6261,7441
#define FONT7 FONT7262,7457
#define FONT8 FONT8263,7473
#define TT1 TT1265,7490
#define FF0 FF0267,7505
#define FF1 FF1268,7519
#define FF2 FF2269,7533
#define FF3 FF3270,7547
#define FF4 FF4271,7561
#define FF5 FF5272,7575
#define FF6 FF6273,7589
#define FF7 FF7274,7603
#define FF8 FF8275,7617
#define FF9 FF9276,7631
#define FF10 FF10277,7645
#define FF11 FF11278,7660
#define FF12 FF12279,7675
#define FF13 FF13280,7690
#define FF14 FF14281,7705
#define FF15 FF15282,7720
#define FF16 FF16283,7735
#define FF17 FF17284,7750
#define FF18 FF18285,7765
#define FF19 FF19286,7780
#define FF20 FF20287,7795
#define FF21 FF21288,7810
#define FF22 FF22289,7825
#define FF23 FF23290,7840
#define FF24 FF24291,7855
#define FF25 FF25292,7870
#define FF26 FF26293,7885
#define FF27 FF27294,7900
#define FF28 FF28295,7915
#define FF29 FF29296,7930
#define FF30 FF30297,7945
#define FF31 FF31298,7960
#define FF32 FF32299,7975
#define FF33 FF33300,7990
#define FF34 FF34301,8005
#define FF35 FF35302,8020
#define FF36 FF36303,8035
#define FF37 FF37304,8050
#define FF38 FF38305,8065
#define FF39 FF39306,8080
#define FF40 FF40307,8095
#define FF41 FF41308,8110
#define FF42 FF42309,8125
#define FF43 FF43310,8140
#define FF44 FF44311,8155
#define FF45 FF45312,8170
#define FF46 FF46313,8185
#define FF47 FF47314,8200
#define FF48 FF48315,8215
#define FM9 FM9317,8231
#define FM12 FM12318,8246
#define FM18 FM18319,8261
#define FM24 FM24320,8276
#define FMB9 FMB9322,8292
#define FMB12 FMB12323,8308
#define FMB18 FMB18324,8324
#define FMB24 FMB24325,8340
#define FMO9 FMO9327,8357
#define FMO12 FMO12328,8373
#define FMO18 FMO18329,8389
#define FMO24 FMO24330,8405
#define FMBO9 FMBO9332,8422
#define FMBO12 FMBO12333,8439
#define FMBO18 FMBO18334,8456
#define FMBO24 FMBO24335,8473
#define FSS9 FSS9337,8491
#define FSS12 FSS12338,8507
#define FSS18 FSS18339,8523
#define FSS24 FSS24340,8539
#define FSSB9 FSSB9342,8556
#define FSSB12 FSSB12343,8573
#define FSSB18 FSSB18344,8590
#define FSSB24 FSSB24345,8607
#define FSSO9 FSSO9347,8625
#define FSSO12 FSSO12348,8642
#define FSSO18 FSSO18349,8659
#define FSSO24 FSSO24350,8676
#define FSSBO9 FSSBO9352,8694
#define FSSBO12 FSSBO12353,8712
#define FSSBO18 FSSBO18354,8730
#define FSSBO24 FSSBO24355,8748
#define FS9 FS9357,8767
#define FS12 FS12358,8782
#define FS18 FS18359,8797
#define FS24 FS24360,8812
#define FSI9 FSI9362,8828
#define FSI12 FSI12363,8844
#define FSI19 FSI19364,8860
#define FSI24 FSI24365,8876
#define FSB9 FSB9367,8893
#define FSB12 FSB12368,8909
#define FSB18 FSB18369,8925
#define FSB24 FSB24370,8941
#define FSBI9 FSBI9372,8958
#define FSBI12 FSBI12373,8975
#define FSBI18 FSBI18374,8992
#define FSBI24 FSBI24375,9009

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_4_Array/NotoSansBold36.h,59
const uint8_t  NotoSansBold36[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_4_Array/NotoSansBold15.h,59
const uint8_t  NotoSansBold15[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Unicode_test/Unicode_Test_72.h,60
const uint8_t  Unicode_Test_72[] PROGMEM = {PROGMEM22,490

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Unicode_test/Latin_Hiragana_24.h,62
const uint8_t  Latin_Hiragana_24[] PROGMEM = {PROGMEM22,490

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Unicode_test/Final_Frontier_28.h,62
const uint8_t  Final_Frontier_28[] PROGMEM = {PROGMEM22,490

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_2_Array/NotoSansBold36.h,59
const uint8_t  NotoSansBold36[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_2_Array/NotoSansBold15.h,59
const uint8_t  NotoSansBold15[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Smooth_font_gradient/NotoSansBold36.h,59
const uint8_t  NotoSansBold36[] PROGMEM = {PROGMEM22,488

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Smooth_font_gradient/NotoSansBold15.h,59
const uint8_t  NotoSansBold15[] PROGMEM = {PROGMEM22,488

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Smooth_font_reading_TFT/NotoSansBold36.h,59
const uint8_t  NotoSansBold36[] PROGMEM = {PROGMEM22,490

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Smooth_font_reading_TFT/NotoSansBold15.h,59
const uint8_t  NotoSansBold15[] PROGMEM = {PROGMEM22,490

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Print_Smooth_Font/Final_Frontier_28.h,62
const uint8_t  Final_Frontier_28[] PROGMEM = {PROGMEM22,488

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_1_Array/NotoSansBold36.h,59
const uint8_t  NotoSansBold36[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_1_Array/NotoSansBold15.h,59
const uint8_t  NotoSansBold15[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_3_Array/NotoSansBold36.h,59
const uint8_t  NotoSansBold36[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_3_Array/NotoSansBold15.h,59
const uint8_t  NotoSansBold15[] PROGMEM = {PROGMEM22,461

lib/TFT_eSPI/examples/Smooth Fonts/FLASH_Array/Font_Demo_3_Array/NotoSansMonoSCB20.h,62
const uint8_t  NotoSansMonoSCB20[] PROGMEM = {PROGMEM22,464

lib/TFT_eSPI/examples/ePaper/Floyd_Steinberg/EPD_Support.h,1309
  #define COLORED COLORED31,1039
  #define UNCOLORED UNCOLORED32,1102
  #define COLORED COLORED34,1132
  #define UNCOLORED UNCOLORED35,1156
  #define EPD_WIDTH EPD_WIDTH43,1470
  #define EPD_HEIGHT EPD_HEIGHT44,1530
  #define INIT_LUT INIT_LUT45,1560
  #define EPD_WIDTH EPD_WIDTH48,1631
  #define EPD_HEIGHT EPD_HEIGHT49,1699
  #define INIT_LUTINIT_LUT50,1729
  #define EPD_WIDTH EPD_WIDTH53,1799
  #define EPD_HEIGHT EPD_HEIGHT54,1859
  #define INIT_LUTINIT_LUT55,1889
  #define EPD_WIDTH EPD_WIDTH58,1935
  #define EPD_HEIGHT EPD_HEIGHT59,1995
  #define INIT_LUT INIT_LUT60,2025
  #define EPD_WIDTH EPD_WIDTH63,2095
  #define EPD_HEIGHT EPD_HEIGHT64,2155
  #define INIT_LUTINIT_LUT65,2185
  #define EPD_WIDTH EPD_WIDTH68,2232
  #define EPD_HEIGHT EPD_HEIGHT69,2292
  #define INIT_LUT INIT_LUT70,2322
  #define EPD_WIDTH EPD_WIDTH73,2393
  #define EPD_HEIGHT EPD_HEIGHT74,2461
  #define INIT_LUTINIT_LUT75,2491
  #define EPD_WIDTH EPD_WIDTH78,2561
  #define EPD_HEIGHT EPD_HEIGHT79,2622
  #define INIT_LUTINIT_LUT80,2652
  #define EPD_WIDTH EPD_WIDTH86,2900
  #define EPD_HEIGHT EPD_HEIGHT87,2971
  #define INIT_LUTINIT_LUT88,3042
  void updateDisplay(uint8_t* blackFrame = blackFramePtr, uint8_t* redFrame = redFramePtr)updateDisplay101,3559

lib/TFT_eSPI/examples/480 x 320/TFT_flash_jpg/jpeg2.h,51
const uint8_t Mouse480[] PROGMEM = {PROGMEM5,139

lib/TFT_eSPI/examples/480 x 320/TFT_flash_jpg/jpeg3.h,50
const uint8_t lena20k[] PROGMEM = {PROGMEM5,139

lib/TFT_eSPI/examples/480 x 320/TFT_flash_jpg/jpeg4.h,51
const uint8_t EagleEye[] PROGMEM = {PROGMEM5,139

lib/TFT_eSPI/examples/480 x 320/TFT_flash_jpg/jpeg1.h,51
const uint8_t Baboon40[] PROGMEM = {PROGMEM5,139

lib/TFT_eSPI/examples/480 x 320/TFT_ring_meter/Alert.h,158
const uint16_t alertWidth = 32;alertWidth5,124
const uint16_t alertHeight = 32;alertHeight6,156
const unsigned short  alert[1024] PROGMEM={PROGMEM9,320

lib/TFT_eSPI/examples/480 x 320/Free_Font_Demo/Free_Fonts.h,7507
#define GFXFF GFXFF47,1567
#define GLCD GLCD48,1583
#define FONT2 FONT249,1599
#define FONT4 FONT450,1615
#define FONT6 FONT651,1631
#define FONT7 FONT752,1647
#define FONT8 FONT853,1663
#define TT1 TT160,1773
#define FM9 FM962,1796
#define FM12 FM1263,1823
#define FM18 FM1864,1852
#define FM24 FM2465,1881
#define FMB9 FMB967,1911
#define FMB12 FMB1268,1943
#define FMB18 FMB1869,1977
#define FMB24 FMB2470,2011
#define FMO9 FMO972,2046
#define FMO12 FMO1273,2081
#define FMO18 FMO1874,2118
#define FMO24 FMO2475,2155
#define FMBO9 FMBO977,2193
#define FMBO12 FMBO1278,2233
#define FMBO18 FMBO1879,2275
#define FMBO24 FMBO2480,2317
#define FSS9 FSS982,2360
#define FSS12 FSS1283,2388
#define FSS18 FSS1884,2418
#define FSS24 FSS2485,2448
#define FSSB9 FSSB987,2479
#define FSSB12 FSSB1288,2512
#define FSSB18 FSSB1889,2547
#define FSSB24 FSSB2490,2582
#define FSSO9 FSSO992,2618
#define FSSO12 FSSO1293,2654
#define FSSO18 FSSO1894,2692
#define FSSO24 FSSO2495,2730
#define FSSBO9 FSSBO997,2769
#define FSSBO12 FSSBO1298,2810
#define FSSBO18 FSSBO1899,2853
#define FSSBO24 FSSBO24100,2896
#define FS9 FS9102,2940
#define FS12 FS12103,2968
#define FS18 FS18104,2998
#define FS24 FS24105,3028
#define FSI9 FSI9107,3059
#define FSI12 FSI12108,3094
#define FSI19 FSI19109,3131
#define FSI24 FSI24110,3168
#define FSB9 FSB9112,3206
#define FSB12 FSB12113,3239
#define FSB18 FSB18114,3274
#define FSB24 FSB24115,3309
#define FSBI9 FSBI9117,3345
#define FSBI12 FSBI12118,3385
#define FSBI18 FSBI18119,3427
#define FSBI24 FSBI24120,3469
#define FF0 FF0122,3512
#define FF1 FF1123,3553
#define FF2 FF2124,3580
#define FF3 FF3125,3608
#define FF4 FF4126,3636
#define FF5 FF5128,3665
#define FF6 FF6129,3696
#define FF7 FF7130,3728
#define FF8 FF8131,3760
#define FF9 FF9133,3793
#define FF10 FF10134,3827
#define FF11 FF11135,3863
#define FF12 FF12136,3899
#define FF13 FF13138,3936
#define FF14 FF14139,3975
#define FF15 FF15140,4015
#define FF16 FF16141,4055
#define FF17 FF17143,4096
#define FF18 FF18144,4124
#define FF19 FF19145,4153
#define FF20 FF20146,4182
#define FF21 FF21148,4212
#define FF22 FF22149,4244
#define FF23 FF23150,4277
#define FF24 FF24151,4310
#define FF25 FF25153,4344
#define FF26 FF26154,4379
#define FF27 FF27155,4415
#define FF28 FF28156,4451
#define FF29 FF29158,4488
#define FF30 FF30159,4527
#define FF31 FF31160,4567
#define FF32 FF32161,4607
#define FF33 FF33163,4648
#define FF34 FF34164,4677
#define FF35 FF35165,4707
#define FF36 FF36166,4737
#define FF37 FF37168,4768
#define FF38 FF38169,4803
#define FF39 FF39170,4839
#define FF40 FF40171,4875
#define FF41 FF41173,4912
#define FF42 FF42174,4945
#define FF43 FF43175,4979
#define FF44 FF44176,5013
#define FF45 FF45178,5048
#define FF46 FF46179,5087
#define FF47 FF47180,5127
#define FF48 FF48181,5167
#define sFF0 sFF0190,5508
#define sTT1 sTT1191,5528
#define sFF1 sFF1192,5553
#define sFF2 sFF2193,5575
#define sFF3 sFF3194,5598
#define sFF4 sFF4195,5621
#define sFF5 sFF5197,5645
#define sFF6 sFF6198,5672
#define sFF7 sFF7199,5700
#define sFF8 sFF8200,5728
#define sFF9 sFF9202,5757
#define sFF10 sFF10203,5787
#define sFF11 sFF11204,5819
#define sFF12 sFF12205,5851
#define sFF13 sFF13207,5884
#define sFF14 sFF14208,5920
#define sFF15 sFF15209,5957
#define sFF16 sFF16210,5994
#define sFF17 sFF17212,6087
#define sFF18 sFF18213,6110
#define sFF19 sFF19214,6134
#define sFF20 sFF20215,6158
#define sFF21 sFF21217,6183
#define sFF22 sFF22218,6211
#define sFF23 sFF23219,6240
#define sFF24 sFF24220,6269
#define sFF25 sFF25222,6299
#define sFF26 sFF26223,6330
#define sFF27 sFF27224,6362
#define sFF28 sFF28225,6394
#define sFF29 sFF29227,6427
#define sFF30 sFF30228,6463
#define sFF31 sFF31229,6500
#define sFF32 sFF32230,6537
#define sFF33 sFF33232,6575
#define sFF34 sFF34233,6599
#define sFF35 sFF35234,6624
#define sFF36 sFF36235,6649
#define sFF37 sFF37237,6675
#define sFF38 sFF38238,6706
#define sFF39 sFF39239,6738
#define sFF40 sFF40240,6770
#define sFF41 sFF41242,6803
#define sFF42 sFF42243,6832
#define sFF43 sFF43244,6862
#define sFF44 sFF44245,6892
#define sFF45 sFF45247,6923
#define sFF46 sFF46248,6959
#define sFF47 sFF47249,6996
#define sFF48 sFF48250,7033
#define GFXFF GFXFF259,7433
#define GLCD GLCD260,7449
#define FONT2 FONT2261,7465
#define FONT4 FONT4262,7481
#define FONT6 FONT6263,7497
#define FONT7 FONT7264,7513
#define FONT8 FONT8265,7529
#define TT1 TT1267,7546
#define FF0 FF0269,7561
#define FF1 FF1270,7575
#define FF2 FF2271,7589
#define FF3 FF3272,7603
#define FF4 FF4273,7617
#define FF5 FF5274,7631
#define FF6 FF6275,7645
#define FF7 FF7276,7659
#define FF8 FF8277,7673
#define FF9 FF9278,7687
#define FF10 FF10279,7701
#define FF11 FF11280,7716
#define FF12 FF12281,7731
#define FF13 FF13282,7746
#define FF14 FF14283,7761
#define FF15 FF15284,7776
#define FF16 FF16285,7791
#define FF17 FF17286,7806
#define FF18 FF18287,7821
#define FF19 FF19288,7836
#define FF20 FF20289,7851
#define FF21 FF21290,7866
#define FF22 FF22291,7881
#define FF23 FF23292,7896
#define FF24 FF24293,7911
#define FF25 FF25294,7926
#define FF26 FF26295,7941
#define FF27 FF27296,7956
#define FF28 FF28297,7971
#define FF29 FF29298,7986
#define FF30 FF30299,8001
#define FF31 FF31300,8016
#define FF32 FF32301,8031
#define FF33 FF33302,8046
#define FF34 FF34303,8061
#define FF35 FF35304,8076
#define FF36 FF36305,8091
#define FF37 FF37306,8106
#define FF38 FF38307,8121
#define FF39 FF39308,8136
#define FF40 FF40309,8151
#define FF41 FF41310,8166
#define FF42 FF42311,8181
#define FF43 FF43312,8196
#define FF44 FF44313,8211
#define FF45 FF45314,8226
#define FF46 FF46315,8241
#define FF47 FF47316,8256
#define FF48 FF48317,8271
#define FM9 FM9319,8287
#define FM12 FM12320,8302
#define FM18 FM18321,8317
#define FM24 FM24322,8332
#define FMB9 FMB9324,8348
#define FMB12 FMB12325,8364
#define FMB18 FMB18326,8380
#define FMB24 FMB24327,8396
#define FMO9 FMO9329,8413
#define FMO12 FMO12330,8429
#define FMO18 FMO18331,8445
#define FMO24 FMO24332,8461
#define FMBO9 FMBO9334,8478
#define FMBO12 FMBO12335,8495
#define FMBO18 FMBO18336,8512
#define FMBO24 FMBO24337,8529
#define FSS9 FSS9339,8547
#define FSS12 FSS12340,8563
#define FSS18 FSS18341,8579
#define FSS24 FSS24342,8595
#define FSSB9 FSSB9344,8612
#define FSSB12 FSSB12345,8629
#define FSSB18 FSSB18346,8646
#define FSSB24 FSSB24347,8663
#define FSSO9 FSSO9349,8681
#define FSSO12 FSSO12350,8698
#define FSSO18 FSSO18351,8715
#define FSSO24 FSSO24352,8732
#define FSSBO9 FSSBO9354,8750
#define FSSBO12 FSSBO12355,8768
#define FSSBO18 FSSBO18356,8786
#define FSSBO24 FSSBO24357,8804
#define FS9 FS9359,8823
#define FS12 FS12360,8838
#define FS18 FS18361,8853
#define FS24 FS24362,8868
#define FSI9 FSI9364,8884
#define FSI12 FSI12365,8900
#define FSI19 FSI19366,8916
#define FSI24 FSI24367,8932
#define FSB9 FSB9369,8949
#define FSB12 FSB12370,8965
#define FSB18 FSB18371,8981
#define FSB24 FSB24372,8997
#define FSBI9 FSBI9374,9014
#define FSBI12 FSBI12375,9031
#define FSBI18 FSBI18376,9048
#define FSBI24 FSBI24377,9065

lib/TFT_eSPI/examples/160 x 128/TFT_flash_jpg/jpeg2.h,47
const uint8_t Tiger[] PROGMEM = {PROGMEM4,98

lib/TFT_eSPI/examples/160 x 128/TFT_flash_jpg/jpeg3.h,48
const uint8_t Baboon[] PROGMEM = {PROGMEM4,98

lib/TFT_eSPI/examples/160 x 128/TFT_flash_jpg/jpeg4.h,50
const uint8_t Mouse160[] PROGMEM = {PROGMEM4,98

lib/TFT_eSPI/examples/160 x 128/TFT_flash_jpg/jpeg1.h,50
const uint8_t EagleEye[] PROGMEM = {PROGMEM4,98

lib/TFT_eSPI/examples/Sprite/Orrery/astronomy.h,19815
#define __ASTRONOMY_H__ASTRONOMY_H29,1270
    ASTRO_SUCCESS,                  /**< The operation was successful. */ASTRO_SUCCESS44,1505
    ASTRO_NOT_INITIALIZED,          /**< A placeholder that can be used for data that is not yet initialized. */ASTRO_NOT_INITIALIZED45,1579
    ASTRO_INVALID_BODY,             /**< The celestial body was not valid. Different sets of bodies are supported depending on the function. */ASTRO_INVALID_BODY46,1692
    ASTRO_NO_CONVERGE,              /**< A numeric solver failed to converge. This should not happen unless there is a bug in Astronomy Engine. */ASTRO_NO_CONVERGE47,1836
    ASTRO_BAD_TIME,                 /**< The provided date/time is outside the range allowed by this function. */ASTRO_BAD_TIME48,1983
    ASTRO_BAD_VECTOR,               /**< Vector magnitude is too small to be normalized into a unit vector. */ASTRO_BAD_VECTOR49,2097
    ASTRO_SEARCH_FAILURE,           /**< Search was not able to find an ascending root crossing of the function in the specified time interval. */ASTRO_SEARCH_FAILURE50,2208
    ASTRO_EARTH_NOT_ALLOWED,        /**< The Earth cannot be treated as a celestial body seen from an observer on the Earth itself. */ASTRO_EARTH_NOT_ALLOWED51,2355
    ASTRO_NO_MOON_QUARTER,          /**< No lunar quarter occurs inside the specified time range. */ASTRO_NO_MOON_QUARTER52,2490
    ASTRO_WRONG_MOON_QUARTER,       /**< Internal error: Astronomy_NextMoonQuarter found the wrong moon quarter. */ASTRO_WRONG_MOON_QUARTER53,2591
    ASTRO_INTERNAL_ERROR,           /**< A self-check failed inside the code somewhere, indicating a bug needs to be fixed. */ASTRO_INTERNAL_ERROR54,2707
    ASTRO_INVALID_PARAMETER,        /**< A parameter value passed to a function was not valid. */ASTRO_INVALID_PARAMETER55,2834
    ASTRO_FAIL_APSIS,               /**< Special-case logic for finding Neptune/Pluto apsis failed. */ASTRO_FAIL_APSIS56,2932
    ASTRO_BUFFER_TOO_SMALL,         /**< A provided buffer's size is too small to receive the requested data. */ASTRO_BUFFER_TOO_SMALL57,3035
    ASTRO_OUT_OF_MEMORY             /**< An attempt to allocate memory failed. */ASTRO_OUT_OF_MEMORY58,3148
astro_status_t;astro_status_t60,3232
    double ut;ut121,6457
    double tt;tt137,7255
    double psi;psi142,7368
    double eps;eps147,7483
astro_time_t;astro_time_t149,7501
    int     year;       /**< The year value, e.g. 2019. */year156,7594
    int     month;      /**< The month value: 1=January, 2=February, ..., 12=December. */month157,7653
    int     day;        /**< The day of the month in the range 1..31. */day158,7743
    int     hour;       /**< The hour of the day in the range 0..23. */hour159,7816
    int     minute;     /**< The minute of the hour in the range 0..59. */minute160,7888
    double  second;     /**< The floating point number of seconds in the range [0,60). */second161,7963
astro_utc_t;astro_utc_t163,8055
    astro_status_t status;  /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status170,8185
    double x;               /**< The Cartesian x-coordinate of the vector in AU. */x171,8287
    double y;               /**< The Cartesian y-coordinate of the vector in AU. */y172,8371
    double z;               /**< The Cartesian z-coordinate of the vector in AU. */z173,8455
    astro_time_t t;         /**< The date and time at which this vector is valid. */t174,8539
astro_vector_t;astro_vector_t176,8626
    astro_status_t status;  /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status183,8732
    double lat;             /**< The latitude angle: -90..+90 degrees. */lat184,8834
    double lon;             /**< The longitude angle: 0..360 degrees. */lon185,8908
    double dist;            /**< Distance in AU. */dist186,8981
astro_spherical_t;astro_spherical_t188,9035
    astro_status_t status;  /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status195,9129
    double angle;           /**< An angle expressed in degrees. */angle196,9231
astro_angle_result_t;astro_angle_result_t198,9300
    BODY_INVALID = -1,      /**< An invalid or undefined celestial body. */BODY_INVALID205,9374
    BODY_MERCURY,           /**< Mercury */BODY_MERCURY206,9450
    BODY_VENUS,             /**< Venus */BODY_VENUS207,9494
    BODY_EARTH,             /**< Earth */BODY_EARTH208,9536
    BODY_MARS,              /**< Mars */BODY_MARS209,9578
    BODY_JUPITER,           /**< Jupiter */BODY_JUPITER210,9619
    BODY_SATURN,            /**< Saturn */BODY_SATURN211,9663
    BODY_URANUS,            /**< Uranus */BODY_URANUS212,9706
    BODY_NEPTUNE,           /**< Neptune */BODY_NEPTUNE213,9749
    BODY_PLUTO,             /**< Pluto */BODY_PLUTO214,9793
    BODY_SUN,               /**< Sun */BODY_SUN215,9835
    BODY_MOON,              /**< Moon */BODY_MOON216,9875
    BODY_EMB,               /**< Earth/Moon Barycenter */BODY_EMB217,9916
    BODY_SSB                /**< Solar System Barycenter */BODY_SSB218,9974
astro_body_t;astro_body_t220,10036
#define MIN_BODY MIN_BODY222,10051
#define MAX_BODY MAX_BODY223,10151
#define MIN_YEAR MIN_YEAR225,10252
#define MAX_YEAR MAX_YEAR226,10338
    double latitude;        /**< Geographic latitude in degrees north (positive) or south (negative) of the equator. */latitude239,10787
    double longitude;       /**< Geographic longitude in degrees east (positive) or west (negative) of the prime meridian at Greenwich, England. */longitude240,10907
    double height;          /**< The height above (positive) or below (negative) sea level, expressed in meters. */height241,11055
astro_observer_t;astro_observer_t243,11173
    astro_status_t status;  /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status253,11451
    double ra;              /**< right ascension in sidereal hours. */ra254,11553
    double dec;             /**< declination in degrees */dec255,11624
    double dist;            /**< distance to the celestial body in AU. */dist256,11683
astro_equatorial_t;astro_equatorial_t258,11759
    astro_status_t status;  /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status268,12038
    double ex;              /**< Cartesian x-coordinate: in the direction of the equinox along the ecliptic plane. */ex269,12140
    double ey;              /**< Cartesian y-coordinate: in the ecliptic plane 90 degrees prograde from the equinox. */ey270,12258
    double ez;              /**< Cartesian z-coordinate: perpendicular to the ecliptic plane. Positive is north. */ez271,12378
    double elat;            /**< Latitude in degrees north (positive) or south (negative) of the ecliptic plane. */elat272,12494
    double elon;            /**< Longitude in degrees around the ecliptic plane prograde from the equinox. */elon273,12610
astro_ecliptic_t;astro_ecliptic_t275,12722
    double azimuth;     /**< Compass direction around the horizon in degrees. 0=North, 90=East, 180=South, 270=West. */azimuth286,13033
    double altitude;    /**< Angle in degrees above (positive) or below (negative) the observer's horizon. */altitude287,13153
    double ra;          /**< Right ascension in sidereal hours. */ra288,13263
    double dec;         /**< Declination in degrees. */dec289,13330
astro_horizon_t;astro_horizon_t291,13388
    astro_status_t status;  /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status298,13532
    double rot[3][3];       /**< A normalized 3x3 rotation matrix. */rot299,13634
astro_rotation_t;astro_rotation_t301,13706
    REFRACTION_NONE,    /**< No atmospheric refraction correction (airless). */REFRACTION_NONE308,13829
    REFRACTION_NORMAL,  /**< Recommended correction for standard atmospheric refraction. */REFRACTION_NORMAL309,13909
    REFRACTION_JPLHOR   /**< Used only for compatibility testing with JPL Horizons online tool. */REFRACTION_JPLHOR310,14001
astro_refraction_t;astro_refraction_t312,14102
    astro_status_t  status;     /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status319,14208
    astro_time_t    time;       /**< The time at which a searched-for event occurs. */time320,14314
astro_search_result_t;astro_search_result_t322,14403
    astro_status_t  status;         /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status331,14621
    astro_time_t    mar_equinox;    /**< The date and time of the March equinox for the specified year. */mar_equinox332,14731
    astro_time_t    jun_solstice;   /**< The date and time of the June soltice for the specified year. */jun_solstice333,14838
    astro_time_t    sep_equinox;    /**< The date and time of the September equinox for the specified year. */sep_equinox334,14944
    astro_time_t    dec_solstice;   /**< The date and time of the December solstice for the specified year. */dec_solstice335,15055
astro_seasons_t;astro_seasons_t337,15168
    astro_status_t  status;     /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status344,15328
    int             quarter;    /**< 0=new moon, 1=first quarter, 2=full moon, 3=third quarter. */quarter345,15434
    astro_time_t    time;       /**< The date and time of the lunar quarter. */time346,15533
astro_moon_quarter_t;astro_moon_quarter_t348,15615
    astro_status_t status;      /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status364,16421
    double value;               /**< The value returned by a function whose ascending root is to be found. */value365,16527
astro_func_result_t;astro_func_result_t367,16639
typedef astro_func_result_t (* astro_search_func_t) (void *context, astro_time_t time);astro_search_func_t389,17967
typedef double (* astro_deltat_func) (double ut);astro_deltat_func403,18656
    VISIBLE_MORNING,    /**< The body is best visible in the morning, before sunrise. */VISIBLE_MORNING415,18992
    VISIBLE_EVENING     /**< The body is best visible in the evening, after sunset. */VISIBLE_EVENING416,19081
astro_visibility_t;astro_visibility_t418,19170
    astro_status_t      status;                 /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status428,19520
    astro_time_t        time;                   /**< The date and time of the observation. */time429,19642
    astro_visibility_t  visibility;             /**< Whether the body is best seen in the morning or the evening. */visibility430,19736
    double              elongation;             /**< The angle in degrees between the body and the Sun, as seen from the Earth. */elongation431,19853
    double              ecliptic_separation;    /**< The difference between the ecliptic longitudes of the body and the Sun, as seen from the Earth. */ecliptic_separation432,19984
astro_elongation_t;astro_elongation_t434,20138
    astro_status_t      status;     /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status444,20442
    astro_time_t        time;       /**< The date and time when the body crosses the specified hour angle. */time445,20552
    astro_horizon_t     hor;        /**< Apparent coordinates of the body at the time it crosses the specified hour angle. */hor446,20662
astro_hour_angle_t;astro_hour_angle_t448,20790
    astro_status_t      status;         /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status458,21118
    astro_time_t        time;           /**< The date and time of the observation. */time459,21232
    double              mag;            /**< The visual magnitude of the body. Smaller values are brighter. */mag460,21318
    double              phase_angle;    /**< The angle in degrees between the Sun and the Earth, as seen from the body. Indicates the body's phase as seen from the Earth. */phase_angle461,21429
    double              helio_dist;     /**< The distance between the Sun and the body at the observation time. */helio_dist462,21603
    double              ring_tilt;      /**< For Saturn, the tilt angle in degrees of its rings as seen from Earth. For all other bodies, 0. */ring_tilt463,21718
astro_illum_t;astro_illum_t465,21864
    APSIS_PERICENTER,   /**< The body is at its closest approach to the object it orbits. */APSIS_PERICENTER472,21996
    APSIS_APOCENTER,    /**< The body is at its farthest distance from the object it orbits. */APSIS_APOCENTER473,22089
    APSIS_INVALID       /**< Undefined or invalid apsis. */APSIS_INVALID474,22185
astro_apsis_kind_t;astro_apsis_kind_t476,22247
    astro_status_t      status;     /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status495,23115
    astro_time_t        time;       /**< The date and time of the apsis. */time496,23225
    astro_apsis_kind_t  kind;       /**< Whether this is a pericenter or apocenter event. */kind497,23301
    double              dist_au;    /**< The distance between the centers of the bodies in astronomical units. */dist_au498,23394
    double              dist_km;    /**< The distance between the centers of the bodies in kilometers. */dist_km499,23508
astro_apsis_t;astro_apsis_t501,23616
    ECLIPSE_NONE,       /**< No eclipse found. */ECLIPSE_NONE508,23710
    ECLIPSE_PENUMBRAL,  /**< A penumbral lunar eclipse. (Never used for a solar eclipse.) */ECLIPSE_PENUMBRAL509,23760
    ECLIPSE_PARTIAL,    /**< A partial lunar/solar eclipse. */ECLIPSE_PARTIAL510,23853
    ECLIPSE_ANNULAR,    /**< An annular solar eclipse. (Never used for a lunar eclipse.) */ECLIPSE_ANNULAR511,23916
    ECLIPSE_TOTAL       /**< A total lunar/solar eclipse. */ECLIPSE_TOTAL512,24008
astro_eclipse_kind_t;astro_eclipse_kind_t514,24071
    astro_status_t          status;         /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status543,25559
    astro_eclipse_kind_t    kind;           /**< The type of lunar eclipse found. */kind544,25677
    astro_time_t            peak;           /**< The time of the eclipse at its peak. */peak545,25762
    double                  sd_penum;       /**< The semi-duration of the penumbral phase in minutes. */sd_penum546,25851
    double                  sd_partial;     /**< The semi-duration of the partial phase in minutes, or 0.0 if none. */sd_partial547,25956
    double                  sd_total;       /**< The semi-duration of the total phase in minutes, or 0.0 if none. */sd_total548,26075
astro_lunar_eclipse_t;astro_lunar_eclipse_t550,26194
    astro_status_t          status;         /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status586,28070
    astro_eclipse_kind_t    kind;           /**< The type of solar eclipse found. */kind587,28188
    astro_time_t            peak;           /**< The date and time of the eclipse at its peak. */peak588,28273
    double                  distance;       /**< The distance between the Sun/Moon shadow axis and the center of the Earth, in kilometers. */distance589,28371
    double                  latitude;       /**< The geographic latitude at the center of the peak eclipse shadow. */latitude590,28513
    double                  longitude;      /**< The geographic longitude at the center of the peak eclipse shadow. */longitude591,28631
astro_global_solar_eclipse_t;astro_global_solar_eclipse_t593,28752
    astro_time_t    time;       /**< The date and time of the event. */time612,29530
    double          altitude;   /**< The angular altitude of the center of the Sun above/below the horizon, at `time`, corrected for atmospheric refraction and expressed in degrees. */altitude613,29602
astro_eclipse_event_t;astro_eclipse_event_t615,29789
    astro_status_t          status;         /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status647,31638
    astro_eclipse_kind_t    kind;           /**< The type of solar eclipse found: `ECLIPSE_PARTIAL`, `ECLIPSE_ANNULAR`, or `ECLIPSE_TOTAL`. */kind648,31756
    astro_eclipse_event_t   partial_begin;  /**< The time and Sun altitude at the beginning of the eclipse. */partial_begin649,31899
    astro_eclipse_event_t   total_begin;    /**< If this is an annular or a total eclipse, the time and Sun altitude when annular/total phase begins; otherwise invalid. */total_begin650,32010
    astro_eclipse_event_t   peak;           /**< The time and Sun altitude when the eclipse reaches its peak. */peak651,32182
    astro_eclipse_event_t   total_end;      /**< If this is an annular or a total eclipse, the time and Sun altitude when annular/total phase ends; otherwise invalid. */total_end652,32295
    astro_eclipse_event_t   partial_end;    /**< The time and Sun altitude at the end of the eclipse. */partial_end653,32465
astro_local_solar_eclipse_t;astro_local_solar_eclipse_t655,32572
    astro_status_t  status;         /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status677,33405
    astro_time_t    start;          /**< Date and time at the beginning of the transit. */start678,33515
    astro_time_t    peak;           /**< Date and time of the peak of the transit. */peak679,33606
    astro_time_t    finish;         /**< Date and time at the end of the transit. */finish680,33692
    double          separation;     /**< Angular separation in arcminutes between the centers of the Sun and the planet at time `peak`. */separation681,33777
astro_transit_t;astro_transit_t683,33918
    ABERRATION,     /**< Request correction for aberration. */ABERRATION707,34941
    NO_ABERRATION   /**< Do not correct for aberration. */NO_ABERRATION708,35004
astro_aberration_t;astro_aberration_t710,35065
    EQUATOR_J2000,      /**< Represent equatorial coordinates in the J2000 epoch. */EQUATOR_J2000730,36031
    EQUATOR_OF_DATE     /**< Represent equatorial coordinates using the Earth's equator at the given date and time. */EQUATOR_OF_DATE731,36116
astro_equator_date_t;astro_equator_date_t733,36237
    DIRECTION_RISE = +1,    /**< Search for the time a body begins to rise above the horizon. */DIRECTION_RISE743,36487
    DIRECTION_SET  = -1,    /**< Search for the time a body finishes sinking below the horizon. */DIRECTION_SET744,36584
astro_direction_t;astro_direction_t746,36685
    astro_status_t status;      /**< `ASTRO_SUCCESS` if this struct is valid; otherwise an error code. */status760,37184
    const char    *symbol;      /**< 3-character mnemonic symbol for the constellation, e.g. "Ori". */symbol761,37290
    const char    *name;        /**< Full name of constellation, e.g. "Orion". */name762,37393
    double         ra_1875;     /**< Right ascension expressed in B1875 coordinates. */ra_1875763,37475
    double         dec_1875;    /**< Declination expressed in B1875 coordinates. */dec_1875764,37563
astro_constellation_t;astro_constellation_t766,37649
    TIME_FORMAT_DAY,    /**< Truncate to UTC calendar date only, e.g. `2020-12-31`. Buffer size must be at least 11 characters. */TIME_FORMAT_DAY774,37772
    TIME_FORMAT_MINUTE, /**< Round to nearest UTC minute, e.g. `2020-12-31T15:47Z`. Buffer size must be at least 18 characters. */TIME_FORMAT_MINUTE775,37903
    TIME_FORMAT_SECOND, /**< Round to nearest UTC second, e.g. `2020-12-31T15:47:32Z`. Buffer size must be at least 21 characters. */TIME_FORMAT_SECOND776,38034
    TIME_FORMAT_MILLI   /**< Round to nearest UTC millisecond, e.g. `2020-12-31T15:47:32.397Z`. Buffer size must be at least 25 characters. */TIME_FORMAT_MILLI777,38168
astro_time_format_t;astro_time_format_t779,38313
#define TIME_TEXT_BYTES TIME_TEXT_BYTES781,38335

lib/TFT_eSPI/examples/Sprite/Orrery/astronomy.c,35504
#define PI PI40,1433
    double x;x44,1490
    double y;y45,1504
    double z;z46,1518
terse_vector_t;terse_vector_t48,1534
static const terse_vector_t VecZero;VecZero50,1551
static terse_vector_t VecAdd(terse_vector_t a, terse_vector_t b)VecAdd52,1589
static terse_vector_t VecSub(terse_vector_t a, terse_vector_t b)VecSub61,1758
static void VecIncr(terse_vector_t *target, terse_vector_t source)VecIncr70,1927
static void VecDecr(terse_vector_t *target, terse_vector_t source)VecDecr77,2080
static terse_vector_t VecMul(double s, terse_vector_t v)VecMul84,2233
static void VecScale(terse_vector_t *target, double scalar)VecScale93,2388
static terse_vector_t VecRamp(terse_vector_t a, terse_vector_t b, double ramp)VecRamp100,2528
static terse_vector_t VecMean(terse_vector_t a, terse_vector_t b)VecMean109,2753
static astro_vector_t PublicVec(astro_time_t time, terse_vector_t terse)PublicVec118,2941
    double          tt;  /* Terrestrial Time in J2000 days */tt133,3212
    terse_vector_t  r;   /* position [au] */r134,3274
    terse_vector_t  v;   /* velocity [au/day] */v135,3319
body_state_t;body_state_t137,3370
static const double DAYS_PER_TROPICAL_YEAR = 365.24217;DAYS_PER_TROPICAL_YEAR140,3401
static const double DEG2RAD = 0.017453292519943296;DEG2RAD141,3457
static const double RAD2DEG = 57.295779513082321;RAD2DEG142,3509
static const double ASEC360 = 1296000.0;ASEC360143,3559
static const double ASEC2RAD = 4.848136811095359935899141e-6;ASEC2RAD144,3600
static const double PI2 = 2.0 * PI;PI2145,3662
static const double ARC = 3600.0 * 180.0 / PI;          /* arcseconds per radian */ARC146,3698
static const double C_AUDAY = 173.1446326846693;        /* speed of light in AU/day */C_AUDAY147,3782
static const double KM_PER_AU = 1.4959787069098932e+8;KM_PER_AU148,3869
static const double SECONDS_PER_DAY = 24.0 * 3600.0;SECONDS_PER_DAY149,3924
static const double SOLAR_DAYS_PER_SIDEREAL_DAY = 0.9972695717592592;SOLAR_DAYS_PER_SIDEREAL_DAY150,3977
static const double MEAN_SYNODIC_MONTH = 29.530588;     /* average number of days for Moon to return to the same phase */MEAN_SYNODIC_MONTH151,4047
static const double EARTH_ORBITAL_PERIOD = 365.256;EARTH_ORBITAL_PERIOD152,4169
static const double NEPTUNE_ORBITAL_PERIOD = 60189.0;NEPTUNE_ORBITAL_PERIOD153,4221
static const double REFRACTION_NEAR_HORIZON = 34.0 / 60.0;   /* degrees of refractive "lift" seen for objects near horizon */REFRACTION_NEAR_HORIZON154,4275
static const double SUN_RADIUS_KM  = 695700.0;SUN_RADIUS_KM156,4402
#define             SUN_RADIUS_AU SUN_RADIUS_AU157,4449
#define EARTH_FLATTENING EARTH_FLATTENING159,4513
#define EARTH_EQUATORIAL_RADIUS_KM EARTH_EQUATORIAL_RADIUS_KM160,4567
#define EARTH_EQUATORIAL_RADIUS_AU EARTH_EQUATORIAL_RADIUS_AU161,4613
#define EARTH_MEAN_RADIUS_KM EARTH_MEAN_RADIUS_KM162,4690
#define EARTH_ATMOSPHERE_KM EARTH_ATMOSPHERE_KM163,4803
#define EARTH_ECLIPSE_RADIUS_KM EARTH_ECLIPSE_RADIUS_KM164,4913
#define MOON_EQUATORIAL_RADIUS_KM MOON_EQUATORIAL_RADIUS_KM167,5099
#define MOON_MEAN_RADIUS_KM MOON_MEAN_RADIUS_KM168,5142
#define MOON_POLAR_RADIUS_KM MOON_POLAR_RADIUS_KM169,5185
#define MOON_EQUATORIAL_RADIUS_AU MOON_EQUATORIAL_RADIUS_AU170,5228
static const double ASEC180 = 180.0 * 60.0 * 60.0;      /* arcseconds per 180 degrees (or pi radians) */ASEC180172,5305
static const double EARTH_MOON_MASS_RATIO = 81.30056;EARTH_MOON_MASS_RATIO173,5410
static const double SUN_GM     = 0.2959122082855911e-03;SUN_GM187,6014
static const double JUPITER_GM = 0.2825345909524226e-06;JUPITER_GM188,6071
static const double SATURN_GM  = 0.8459715185680659e-07;SATURN_GM189,6128
static const double URANUS_GM  = 0.1292024916781969e-07;URANUS_GM190,6185
static const double NEPTUNE_GM = 0.1524358900784276e-07;NEPTUNE_GM191,6242
#define ARRAYSIZE(ARRAYSIZE194,6326
#define AU_PER_PARSEC AU_PER_PARSEC195,6377
#define Y2000_IN_MJD Y2000_IN_MJD196,6479
static double LongitudeOffset(double diff)LongitudeOffset204,6757
static double NormalizeLongitude(double lon)NormalizeLongitude217,6959
double Astronomy_VectorLength(astro_vector_t vector)Astronomy_VectorLength238,7452
const char *Astronomy_BodyName(astro_body_t body)Astronomy_BodyName248,7793
astro_body_t Astronomy_BodyCode(const char *name)Astronomy_BodyCode274,8821
static int IsSuperiorPlanet(astro_body_t body)IsSuperiorPlanet298,9804
static double PlanetOrbitalPeriod(astro_body_t body)PlanetOrbitalPeriod318,10152
static void FatalError(const char *message)FatalError335,10711
static astro_vector_t VecError(astro_status_t status, astro_time_t time)VecError341,10818
static astro_spherical_t SphereError(astro_status_t status)SphereError350,11012
static astro_equatorial_t EquError(astro_status_t status)EquError358,11203
static astro_ecliptic_t EclError(astro_status_t status)EclError366,11374
static astro_angle_result_t AngleError(astro_status_t status)AngleError374,11560
static astro_func_result_t FuncError(astro_status_t status)FuncError382,11731
static astro_time_t TimeError(void)TimeError390,11899
static astro_rotation_t RotationErr(astro_status_t status)RotationErr397,12031
static astro_moon_quarter_t MoonQuarterError(astro_status_t status)MoonQuarterError410,12283
static astro_elongation_t ElongError(astro_status_t status)ElongError419,12492
static astro_hour_angle_t HourAngleError(astro_status_t status)HourAngleError432,12785
static astro_illum_t IllumError(astro_status_t status)IllumError443,13050
static astro_apsis_t ApsisError(astro_status_t status)ApsisError457,13325
static astro_search_result_t SearchError(astro_status_t status)SearchError469,13567
static astro_constellation_t ConstelErr(astro_status_t status)ConstelErr477,13748
static astro_transit_t TransitErr(astro_status_t status)TransitErr486,13988
static astro_func_result_t SynodicPeriod(astro_body_t body)SynodicPeriod495,14223
static astro_angle_result_t AngleBetween(astro_vector_t a, astro_vector_t b)AngleBetween520,14932
double Astronomy_DeltaT_EspenakMeeus(double ut)Astronomy_DeltaT_EspenakMeeus556,15999
double Astronomy_DeltaT_JplHorizons(double ut)Astronomy_DeltaT_JplHorizons676,19674
static astro_deltat_func DeltaTFunc = Astronomy_DeltaT_EspenakMeeus;DeltaTFunc684,19861
void Astronomy_SetDeltaTFunction(astro_deltat_func func)Astronomy_SetDeltaTFunction701,20622
static double TerrestrialTime(double ut)TerrestrialTime706,20707
astro_time_t Astronomy_TimeFromDays(double ut)Astronomy_TimeFromDays724,21144
astro_time_t Astronomy_CurrentTime(void)Astronomy_CurrentTime741,21719
astro_time_t Astronomy_MakeTime(int year, int month, int day, int hour, int minute, double second)Astronomy_MakeTime775,23103
astro_time_t Astronomy_AddDays(astro_time_t time, double days)Astronomy_AddDays814,24832
astro_time_t Astronomy_TimeFromUtc(astro_utc_t utc)Astronomy_TimeFromUtc846,26003
astro_utc_t Astronomy_UtcFromTime(astro_time_t time)Astronomy_UtcFromTime863,26806
astro_status_t Astronomy_FormatTime(Astronomy_FormatTime933,29481
astro_observer_t Astronomy_MakeObserver(double latitude, double longitude, double height)Astronomy_MakeObserver1046,33338
static void iau2000b(astro_time_t *time)iau2000b1057,33587
static double mean_obliq(double tt)mean_obliq1177,44429
    double tt;tt1193,44775
    double dpsi;dpsi1194,44790
    double deps;deps1195,44807
    double ee;ee1196,44824
    double mobl;mobl1197,44839
    double tobl;tobl1198,44856
earth_tilt_t;earth_tilt_t1200,44875
static earth_tilt_t e_tilt(astro_time_t *time)e_tilt1203,44906
static void ecl2equ_vec(astro_time_t time, const double ecl[3], double equ[3])ecl2equ_vec1218,45221
static astro_rotation_t precession_rot(double tt1, double tt2)precession_rot1230,45530
static void precession(double tt1, const double pos1[3], double tt2, double pos2[3])precession1318,48070
static astro_equatorial_t vector2radec(const double pos[3])vector2radec1327,48449
static astro_rotation_t nutation_rot(astro_time_t *time, int direction)nutation_rot1366,49284
static void nutation(astro_time_t *time, int direction, const double inpos[3], double outpos[3])nutation1421,50833
static double era(double ut)        /* Earth Rotation Angle */era1429,51243
static double sidereal_time(astro_time_t *time)sidereal_time1440,51525
static void terra(astro_observer_t observer, double st, double pos[3])terra1459,52099
static void geo_pos(astro_time_t *time, astro_observer_t observer, double outpos[3])geo_pos1487,53131
static void spin(double angle, const double pos1[3], double vec2[3])spin1497,53403
#define DECLARE_PASCAL_ARRAY_1(DECLARE_PASCAL_ARRAY_11511,53772
#define DECLARE_PASCAL_ARRAY_2(DECLARE_PASCAL_ARRAY_21514,53866
#define ACCESS_PASCAL_ARRAY_1(ACCESS_PASCAL_ARRAY_11517,53987
#define ACCESS_PASCAL_ARRAY_2(ACCESS_PASCAL_ARRAY_21520,54058
    double t;t1525,54165
    double dgam;dgam1526,54179
    double dlam, n, gam1c, sinpi;dlam1527,54196
    double dlam, n, gam1c, sinpi;n1527,54196
    double dlam, n, gam1c, sinpi;gam1c1527,54196
    double dlam, n, gam1c, sinpi;sinpi1527,54196
    double l0, l, ls, f, d, s;l01528,54230
    double l0, l, ls, f, d, s;l1528,54230
    double l0, l, ls, f, d, s;ls1528,54230
    double l0, l, ls, f, d, s;f1528,54230
    double l0, l, ls, f, d, s;d1528,54230
    double l0, l, ls, f, d, s;s1528,54230
    double dl0, dl, dls, df, dd, ds;dl01529,54261
    double dl0, dl, dls, df, dd, ds;dl1529,54261
    double dl0, dl, dls, df, dd, ds;dls1529,54261
    double dl0, dl, dls, df, dd, ds;df1529,54261
    double dl0, dl, dls, df, dd, ds;dd1529,54261
    double dl0, dl, dls, df, dd, ds;ds1529,54261
MoonContext;MoonContext1533,54464
#define T T1535,54478
#define DGAM DGAM1536,54507
#define DLAM DLAM1537,54539
#define N N1538,54571
#define GAM1C GAM1C1539,54600
#define SINPI SINPI1540,54633
#define L0 L01541,54666
#define L L1542,54696
#define LS LS1543,54725
#define F F1544,54755
#define D D1545,54784
#define S S1546,54813
#define DL0 DL01547,54842
#define DL DL1548,54873
#define DLS DLS1549,54903
#define DF DF1550,54934
#define DD DD1551,54964
#define DS DS1552,54994
#define CO(CO1553,55024
#define SI(SI1554,55084
static double Frac(double x)Frac1556,55145
static void AddThe(AddThe1561,55204
static double Sine(double phi)Sine1569,55351
static void LongPeriodic(MoonContext *ctx)LongPeriodic1575,55465
static void Init(MoonContext *ctx)Init1595,56218
static void Term(MoonContext *ctx, int p, int q, int r, int s, double *x, double *y)Term1635,57469
    #define I(I1639,57609
    #undef II1652,57852
static void AddSol(AddSol1655,57868
#define ADDN(ADDN1674,58175
static void SolarN(MoonContext *ctx)SolarN1676,58264
static void Planetary(MoonContext *ctx)Planetary1693,58647
int _CalcMoonCount;     /* Undocumented global for performance tuning. */_CalcMoonCount1704,59089
static void CalcMoon(CalcMoon1706,59164
#undef TT1836,67965
#undef DGAMDGAM1837,67974
#undef DLAMDLAM1838,67986
#undef NN1839,67998
#undef GAM1CGAM1C1840,68007
#undef SINPISINPI1841,68020
#undef L0L01842,68033
#undef LL1843,68043
#undef LSLS1844,68052
#undef FF1845,68062
#undef DD1846,68071
#undef SS1847,68080
#undef DL0DL01848,68089
#undef DLDL1849,68100
#undef DLSDLS1850,68110
#undef DFDF1851,68121
#undef DDDD1852,68131
#undef DSDS1853,68141
#undef COCO1854,68151
#undef SISI1855,68161
astro_vector_t Astronomy_GeoMoon(astro_time_t time)Astronomy_GeoMoon1875,69028
    double amplitude;amplitude1911,70096
    double phase;phase1912,70118
    double frequency;frequency1913,70136
vsop_term_t;vsop_term_t1915,70160
    int nterms;nterms1919,70191
    const vsop_term_t *term;term1920,70207
vsop_series_t;vsop_series_t1922,70238
    int nseries;nseries1926,70271
    const vsop_series_t *series;series1927,70288
vsop_formula_t;vsop_formula_t1929,70323
    const vsop_formula_t formula[3];formula1933,70357
vsop_model_t;vsop_model_t1935,70396
static const vsop_term_t vsop_lon_Mercury_0[] =vsop_lon_Mercury_01938,70427
static const vsop_term_t vsop_lon_Mercury_1[] =vsop_lon_Mercury_11949,70878
static const vsop_series_t vsop_lon_Mercury[] =vsop_lon_Mercury1958,71217
static const vsop_term_t vsop_lat_Mercury_0[] =vsop_lat_Mercury_01964,71332
static const vsop_term_t vsop_lat_Mercury_1[] =vsop_lat_Mercury_11975,71783
static const vsop_series_t vsop_lat_Mercury[] =vsop_lat_Mercury1981,71946
static const vsop_term_t vsop_rad_Mercury_0[] =vsop_rad_Mercury_01987,72061
static const vsop_term_t vsop_rad_Mercury_1[] =vsop_rad_Mercury_11997,72454
static const vsop_series_t vsop_rad_Mercury[] =vsop_rad_Mercury2003,72621
static const vsop_term_t vsop_lon_Venus_0[] =vsop_lon_Venus_02010,72738
static const vsop_term_t vsop_lon_Venus_1[] =vsop_lon_Venus_12024,73348
static const vsop_series_t vsop_lon_Venus[] =vsop_lon_Venus2031,73570
static const vsop_term_t vsop_lat_Venus_0[] =vsop_lat_Venus_02037,73680
static const vsop_term_t vsop_lat_Venus_1[] =vsop_lat_Venus_12044,73898
static const vsop_series_t vsop_lat_Venus[] =vsop_lat_Venus2049,74006
static const vsop_term_t vsop_rad_Venus_0[] =vsop_rad_Venus_02055,74115
static const vsop_term_t vsop_rad_Venus_1[] =vsop_rad_Venus_12067,74616
static const vsop_series_t vsop_rad_Venus[] =vsop_rad_Venus2072,74724
static const vsop_term_t vsop_lon_Earth_0[] =vsop_lon_Earth_02079,74835
static const vsop_term_t vsop_lon_Earth_1[] =vsop_lon_Earth_12111,76442
static const vsop_term_t vsop_lon_Earth_2[] =vsop_lon_Earth_22118,76662
static const vsop_series_t vsop_lon_Earth[] =vsop_lon_Earth2123,76769
static const vsop_term_t vsop_lat_Earth_1[] =vsop_lat_Earth_12130,76908
static const vsop_series_t vsop_lat_Earth[] =vsop_lat_Earth2136,77072
static const vsop_term_t vsop_rad_Earth_0[] =vsop_rad_Earth_02142,77169
static const vsop_term_t vsop_rad_Earth_1[] =vsop_rad_Earth_12160,78010
static const vsop_term_t vsop_rad_Earth_2[] =vsop_rad_Earth_22166,78174
static const vsop_series_t vsop_rad_Earth[] =vsop_rad_Earth2171,78281
static const vsop_term_t vsop_lon_Mars_0[] =vsop_lon_Mars_02179,78422
static const vsop_term_t vsop_lon_Mars_1[] =vsop_lon_Mars_12232,81196
static const vsop_term_t vsop_lon_Mars_2[] =vsop_lon_Mars_22243,81637
static const vsop_series_t vsop_lon_Mars[] =vsop_lon_Mars2249,81799
static const vsop_term_t vsop_lat_Mars_0[] =vsop_lat_Mars_02256,81934
static const vsop_term_t vsop_lat_Mars_1[] =vsop_lat_Mars_12265,82263
static const vsop_series_t vsop_lat_Mars[] =vsop_lat_Mars2272,82478
static const vsop_term_t vsop_rad_Mars_0[] =vsop_rad_Mars_02278,82584
static const vsop_term_t vsop_rad_Mars_1[] =vsop_rad_Mars_12301,83694
static const vsop_term_t vsop_rad_Mars_2[] =vsop_rad_Mars_22309,83966
static const vsop_series_t vsop_rad_Mars[] =vsop_rad_Mars2315,84128
static const vsop_term_t vsop_lon_Jupiter_0[] =vsop_lon_Jupiter_02323,84265
static const vsop_term_t vsop_lon_Jupiter_1[] =vsop_lon_Jupiter_12356,85909
static const vsop_term_t vsop_lon_Jupiter_2[] =vsop_lon_Jupiter_22369,86455
static const vsop_series_t vsop_lon_Jupiter[] =vsop_lon_Jupiter2376,86669
static const vsop_term_t vsop_lat_Jupiter_0[] =vsop_lat_Jupiter_02383,86816
static const vsop_term_t vsop_lat_Jupiter_1[] =vsop_lat_Jupiter_12393,87199
static const vsop_series_t vsop_lat_Jupiter[] =vsop_lat_Jupiter2398,87307
static const vsop_term_t vsop_rad_Jupiter_0[] =vsop_rad_Jupiter_02404,87422
static const vsop_term_t vsop_rad_Jupiter_1[] =vsop_rad_Jupiter_12427,88522
static const vsop_series_t vsop_rad_Jupiter[] =vsop_rad_Jupiter2436,88849
static const vsop_term_t vsop_lon_Saturn_0[] =vsop_lon_Saturn_02443,88967
static const vsop_term_t vsop_lon_Saturn_1[] =vsop_lon_Saturn_12480,90822
static const vsop_term_t vsop_lon_Saturn_2[] =vsop_lon_Saturn_22496,91529
static const vsop_series_t vsop_lon_Saturn[] =vsop_lon_Saturn2504,91797
static const vsop_term_t vsop_lat_Saturn_0[] =vsop_lat_Saturn_02511,91941
static const vsop_term_t vsop_lat_Saturn_1[] =vsop_lat_Saturn_12524,92484
static const vsop_series_t vsop_lat_Saturn[] =vsop_lat_Saturn2531,92699
static const vsop_term_t vsop_rad_Saturn_0[] =vsop_rad_Saturn_02537,92811
static const vsop_term_t vsop_rad_Saturn_1[] =vsop_rad_Saturn_12564,94127
static const vsop_term_t vsop_rad_Saturn_2[] =vsop_rad_Saturn_22574,94505
static const vsop_series_t vsop_rad_Saturn[] =vsop_rad_Saturn2579,94612
static const vsop_term_t vsop_lon_Uranus_0[] =vsop_lon_Uranus_02587,94757
static const vsop_term_t vsop_lon_Uranus_1[] =vsop_lon_Uranus_12630,96922
static const vsop_series_t vsop_lon_Uranus[] =vsop_lon_Uranus2640,97298
static const vsop_term_t vsop_lat_Uranus_0[] =vsop_lat_Uranus_02646,97411
static const vsop_term_t vsop_lat_Uranus_1[] =vsop_lat_Uranus_12655,97733
static const vsop_series_t vsop_lat_Uranus[] =vsop_lat_Uranus2660,97839
static const vsop_term_t vsop_rad_Uranus_0[] =vsop_rad_Uranus_02666,97951
static const vsop_term_t vsop_rad_Uranus_1[] =vsop_rad_Uranus_12694,99310
static const vsop_series_t vsop_rad_Uranus[] =vsop_rad_Uranus2699,99416
static const vsop_term_t vsop_lon_Neptune_0[] =vsop_lon_Neptune_02706,99531
static const vsop_term_t vsop_lon_Neptune_1[] =vsop_lon_Neptune_12720,100123
static const vsop_series_t vsop_lon_Neptune[] =vsop_lon_Neptune2727,100337
static const vsop_term_t vsop_lat_Neptune_0[] =vsop_lat_Neptune_02733,100453
static const vsop_series_t vsop_lat_Neptune[] =vsop_lat_Neptune2742,100775
static const vsop_term_t vsop_rad_Neptune_0[] =vsop_rad_Neptune_02747,100859
static const vsop_series_t vsop_rad_Neptune[] =vsop_rad_Neptune2763,101564
#define VSOPFORMULA(VSOPFORMULA2771,101678
static const vsop_model_t vsop[] =vsop2774,101741
#define CalcEarth(CalcEarth2787,102663
#define LON_INDEX LON_INDEX2788,102727
#define LAT_INDEX LAT_INDEX2789,102747
#define RAD_INDEX RAD_INDEX2790,102767
static void VsopCoords(const vsop_model_t *model, double t, double sphere[3])VsopCoords2793,102804
static terse_vector_t VsopRotate(const double ecl[3])VsopRotate2818,103498
static void VsopSphereToRect(double lon, double lat, double radius, double pos[3])VsopSphereToRect2836,104047
static const double DAYS_PER_MILLENNIUM = 365250.0;DAYS_PER_MILLENNIUM2844,104276
static astro_vector_t CalcVsop(const vsop_model_t *model, astro_time_t time)CalcVsop2847,104330
static void VsopDeriv(const vsop_model_t *model, double t, double deriv[3])VsopDeriv2875,105190
static body_state_t CalcVsopPosVel(const vsop_model_t *model, double tt)CalcVsopPosVel2906,106193
static double VsopHelioDistance(const vsop_model_t *model, astro_time_t time)VsopHelioDistance2955,107807
static void AdjustBarycenter(astro_vector_t *ssb, astro_time_t time, astro_body_t body, double planet_gm)AdjustBarycenter2985,108709
static astro_vector_t CalcSolarSystemBarycenter(astro_time_t time)CalcSolarSystemBarycenter2998,109051
    double          tt;   /* J2000 terrestrial time [days] */tt3019,109596
    terse_vector_t  r;    /* position [au] */r3020,109658
    terse_vector_t  v;    /* velocity [au/day] */v3021,109704
    terse_vector_t  a;    /* acceleration [au/day^2] */a3022,109754
} body_grav_calc_t;body_grav_calc_t3023,109810
#define PLUTO_NUM_STATES PLUTO_NUM_STATES3026,109847
#define PLUTO_TIME_STEP PLUTO_TIME_STEP3027,109876
static const body_state_t PlutoStateTable[] =PlutoStateTable3029,109909
static terse_vector_t UpdatePosition(double dt, terse_vector_t r, terse_vector_t v, terse_vector_t a)UpdatePosition3075,115948
static body_state_t AdjustBarycenterPosVel(body_state_t *ssb, double tt, astro_body_t body, double planet_gm)AdjustBarycenterPosVel3084,116172
static void MajorBodyBary(body_state_t bary[5], double tt)MajorBodyBary3104,116754
static void AddAcceleration(terse_vector_t *acc, terse_vector_t small_pos, double gm, terse_vector_t major_pos)AddAcceleration3132,117657
static terse_vector_t SmallBodyAcceleration(terse_vector_t small_pos, const body_state_t bary[5])SmallBodyAcceleration3149,118059
body_grav_calc_t GravSim(           /* out: [pos, vel, acc] of the simulated body at time tt2 */GravSim3164,118629
#define PLUTO_DT PLUTO_DT3197,120128
#define PLUTO_NSTEPS PLUTO_NSTEPS3202,120260
    body_grav_calc_t   step[PLUTO_NSTEPS];step3207,120363
body_segment_t;body_segment_t3209,120408
static body_segment_t *pluto_cache[PLUTO_NUM_STATES-1];pluto_cache3214,120560
static int ClampIndex(double frac, int nsteps)ClampIndex3217,120618
static body_grav_calc_t GravFromState(body_state_t bary[5], const body_state_t *state)GravFromState3228,120811
static astro_status_t GetSegment(int *seg_index, body_segment_t *cache[], double tt)GetSegment3243,121243
static terse_vector_t CalcPlutoOneWay(body_state_t bary[5], const body_state_t *init_state, double target_tt, double dt)CalcPlutoOneWay3301,123479
static astro_vector_t CalcPluto(astro_time_t time)CalcPluto3315,123864
astro_vector_t Astronomy_HelioVector(astro_body_t body, astro_time_t time)Astronomy_HelioVector3388,126926
astro_func_result_t Astronomy_HelioDistance(astro_body_t body, astro_time_t time)Astronomy_HelioDistance3458,129012
astro_vector_t Astronomy_GeoVector(astro_body_t body, astro_time_t time, astro_aberration_t aberration)Astronomy_GeoVector3520,131559
astro_equatorial_t Astronomy_Equator(Astronomy_Equator3627,135983
astro_horizon_t Astronomy_Horizon(Astronomy_Horizon3714,139462
astro_ecliptic_t Astronomy_SunPosition(astro_time_t time)Astronomy_SunPosition3838,143405
astro_ecliptic_t Astronomy_Ecliptic(astro_vector_t equ)Astronomy_Ecliptic3883,145093
astro_angle_result_t Astronomy_EclipticLongitude(astro_body_t body, astro_time_t time)Astronomy_EclipticLongitude3918,146342
static astro_ecliptic_t RotateEquatorialToEcliptic(const double pos[3], double obliq_radians)RotateEquatorialToEcliptic3937,146961
static astro_func_result_t sun_offset(void *context, astro_time_t time)sun_offset3965,147638
astro_search_result_t Astronomy_SearchSunLongitude(Astronomy_SearchSunLongitude4014,149999
#define CALLFUNC(CALLFUNC4024,150290
astro_search_result_t Astronomy_Search(Astronomy_Search4110,154727
static int QuadInterp(QuadInterp4221,158480
static astro_status_t FindSeasonChange(double targetLon, int year, int month, int day, astro_time_t *time)FindSeasonChange4268,159810
astro_seasons_t Astronomy_Seasons(int year)Astronomy_Seasons4313,162269
astro_angle_result_t Astronomy_AngleFromSun(astro_body_t body, astro_time_t time)Astronomy_AngleFromSun4356,163864
astro_elongation_t Astronomy_Elongation(astro_body_t body, astro_time_t time)Astronomy_Elongation4405,165968
static astro_func_result_t neg_elong_slope(void *context, astro_time_t time)neg_elong_slope4436,166765
astro_elongation_t Astronomy_SearchMaxElongation(astro_body_t body, astro_time_t startTime)Astronomy_SearchMaxElongation4486,169142
astro_angle_result_t Astronomy_LongitudeFromSun(astro_body_t body, astro_time_t time)Astronomy_LongitudeFromSun4654,175615
astro_angle_result_t Astronomy_MoonPhase(astro_time_t time)Astronomy_MoonPhase4702,177320
static astro_func_result_t moon_offset(void *context, astro_time_t time)moon_offset4707,177441
astro_search_result_t Astronomy_SearchMoonPhase(double targetLon, astro_time_t startTime, double limitDays)Astronomy_SearchMoonPhase4755,179718
astro_moon_quarter_t Astronomy_SearchMoonQuarter(astro_time_t startTime)Astronomy_SearchMoonQuarter4813,182324
astro_moon_quarter_t Astronomy_NextMoonQuarter(astro_moon_quarter_t mq)Astronomy_NextMoonQuarter4852,183899
static astro_func_result_t rlon_offset(astro_body_t body, astro_time_t time, int direction, double targetRelLon)rlon_offset4875,184757
astro_search_result_t Astronomy_SearchRelativeLongitude(astro_body_t body, double targetRelLon, astro_time_t startTime)Astronomy_SearchRelativeLongitude4940,188088
astro_hour_angle_t Astronomy_SearchHourAngle(Astronomy_SearchHourAngle5049,192727
    astro_body_t        body;body5122,195259
    int                 direction;direction5123,195289
    astro_observer_t    observer;observer5124,195324
    double              body_radius_au;body_radius_au5125,195358
context_peak_altitude_t;context_peak_altitude_t5127,195400
static astro_func_result_t peak_altitude(void *context, astro_time_t time)peak_altitude5130,195442
astro_search_result_t Astronomy_SearchRiseSet(Astronomy_SearchRiseSet5207,199307
static double MoonMagnitude(double phase, double helio_dist, double geo_dist)MoonMagnitude5330,204061
static astro_status_t SaturnMagnitude(SaturnMagnitude5343,204599
static astro_status_t VisualMagnitude(VisualMagnitude5384,205856
astro_illum_t Astronomy_Illumination(astro_body_t body, astro_time_t time)Astronomy_Illumination5450,208662
static astro_func_result_t mag_slope(void *context, astro_time_t time)mag_slope5557,211842
astro_illum_t Astronomy_SearchPeakMagnitude(astro_body_t body, astro_time_t startTime)Astronomy_SearchPeakMagnitude5611,214149
static double MoonDistance(astro_time_t t)MoonDistance5726,218783
static astro_func_result_t moon_distance_slope(void *context, astro_time_t time)moon_distance_slope5733,218924
astro_apsis_t Astronomy_SearchLunarApsis(astro_time_t startTime)Astronomy_SearchLunarApsis5778,220968
astro_apsis_t Astronomy_NextLunarApsis(astro_apsis_t apsis)Astronomy_NextLunarApsis5872,224641
    int direction;direction5899,225454
    astro_body_t body;body5900,225473
planet_distance_context_t;planet_distance_context_t5902,225498
static astro_func_result_t planet_distance_slope(void *context, astro_time_t time)planet_distance_slope5906,225543
static astro_apsis_t PlanetExtreme(PlanetExtreme5927,226226
static astro_apsis_t BruteSearchPlanetApsis(astro_body_t body, astro_time_t startTime)BruteSearchPlanetApsis5982,227889
astro_apsis_t Astronomy_SearchPlanetApsis(astro_body_t body, astro_time_t startTime)Astronomy_SearchPlanetApsis6110,232995
astro_apsis_t Astronomy_NextPlanetApsis(astro_body_t body, astro_apsis_t apsis)Astronomy_NextPlanetApsis6218,236960
astro_rotation_t Astronomy_InverseRotation(astro_rotation_t rotation)Astronomy_InverseRotation6258,238296
astro_rotation_t Astronomy_CombineRotation(astro_rotation_t a, astro_rotation_t b)Astronomy_CombineRotation6294,239352
astro_vector_t Astronomy_VectorFromSphere(astro_spherical_t sphere, astro_time_t time)Astronomy_VectorFromSphere6338,241295
astro_spherical_t Astronomy_SphereFromVector(astro_vector_t vector)Astronomy_SphereFromVector6371,242177
astro_vector_t Astronomy_VectorFromEquator(astro_equatorial_t equ, astro_time_t time)Astronomy_VectorFromEquator6417,243389
astro_equatorial_t Astronomy_EquatorFromVector(astro_vector_t vector)Astronomy_EquatorFromVector6443,244090
static double ToggleAzimuthDirection(double az)ToggleAzimuthDirection6461,244534
astro_spherical_t Astronomy_HorizonFromVector(astro_vector_t vector, astro_refraction_t refraction)Astronomy_HorizonFromVector6506,246423
astro_vector_t Astronomy_VectorFromHorizon(astro_spherical_t sphere, astro_time_t time, astro_refraction_t refraction)Astronomy_VectorFromHorizon6543,247806
double Astronomy_Refraction(astro_refraction_t refraction, double altitude)Astronomy_Refraction6580,249349
double Astronomy_InverseRefraction(astro_refraction_t refraction, double bent_altitude)Astronomy_InverseRefraction6644,251817
astro_vector_t Astronomy_RotateVector(astro_rotation_t rotation, astro_vector_t vector)Astronomy_RotateVector6680,252939
astro_rotation_t Astronomy_Rotation_EQJ_ECL(void)Astronomy_Rotation_EQJ_ECL6709,254021
astro_rotation_t Astronomy_Rotation_ECL_EQJ(void)Astronomy_Rotation_ECL_EQJ6735,254976
astro_rotation_t Astronomy_Rotation_EQJ_EQD(astro_time_t time)Astronomy_Rotation_EQJ_EQD6764,256064
astro_rotation_t Astronomy_Rotation_EQD_EQJ(astro_time_t time)Astronomy_Rotation_EQD_EQJ6788,256853
astro_rotation_t Astronomy_Rotation_EQD_HOR(astro_time_t time, astro_observer_t observer)Astronomy_Rotation_EQD_HOR6820,257996
astro_rotation_t Astronomy_Rotation_HOR_EQD(astro_time_t time, astro_observer_t observer)Astronomy_Rotation_HOR_EQD6876,259727
astro_rotation_t Astronomy_Rotation_HOR_EQJ(astro_time_t time, astro_observer_t observer)Astronomy_Rotation_HOR_EQJ6901,260571
astro_rotation_t Astronomy_Rotation_EQJ_HOR(astro_time_t time, astro_observer_t observer)Astronomy_Rotation_EQJ_HOR6933,261781
astro_rotation_t Astronomy_Rotation_EQD_ECL(astro_time_t time)Astronomy_Rotation_EQD_ECL6955,262484
astro_rotation_t Astronomy_Rotation_ECL_EQD(astro_time_t time)Astronomy_Rotation_ECL_EQD6981,263256
astro_rotation_t Astronomy_Rotation_ECL_HOR(astro_time_t time, astro_observer_t observer)Astronomy_Rotation_ECL_HOR7009,264328
astro_rotation_t Astronomy_Rotation_HOR_ECL(astro_time_t time, astro_observer_t observer)Astronomy_Rotation_HOR_ECL7034,265160
    const char *symbol;symbol7044,265413
    const char *name;name7045,265437
constel_info_t;constel_info_t7047,265461
    int    index;index7052,265496
    double ra_lo;ra_lo7053,265514
    double ra_hi;ra_hi7054,265532
    double dec_lo;dec_lo7055,265550
constel_boundary_t;constel_boundary_t7057,265571
#define NUM_CONSTELLATIONS NUM_CONSTELLATIONS7060,265608
static const constel_info_t ConstelInfo[] = {ConstelInfo7062,265641
static const constel_boundary_t ConstelBounds[] = {ConstelBounds7153,269827
#define NUM_CONSTEL_BOUNDARIES NUM_CONSTEL_BOUNDARIES7513,298946
astro_constellation_t Astronomy_Constellation(double ra, double dec)Astronomy_Constellation7535,299640
static astro_lunar_eclipse_t LunarEclipseError(astro_status_t status)LunarEclipseError7617,302598
    astro_status_t status;status7631,302934
    astro_time_t time;time7632,302961
    double  u;              /* dot product of (heliocentric earth) and (geocentric moon): defines the shadow plane where the Moon is */u7633,302984
    double  r;              /* km distance between center of Moon/Earth (shaded body) and the line passing through the centers of the Sun and Earth/Moon (casting body). */r7634,303120
    double  k;              /* umbra radius in km, at the shadow plane */k7635,303292
    double  p;              /* penumbra radius in km, at the shadow plane */p7636,303366
    astro_vector_t target;  /* coordinates of target body relative to shadow-casting body at 'time' */target7637,303443
    astro_vector_t dir;     /* heliocentric coordinates of shadow-casting body at 'time' */dir7638,303546
shadow_t;               /* Represents alignment of the Moon/Earth with the Earth's/Moon's shadow, for finding eclipses. */shadow_t7640,303640
    double radius_limit;radius_limit7644,303781
    double direction;direction7645,303806
shadow_context_t;shadow_context_t7647,303830
static shadow_t ShadowError(astro_status_t status)ShadowError7651,303866
static shadow_t CalcShadow(CalcShadow7660,304031
static shadow_t PlanetShadow(astro_body_t body, double planet_radius_km, astro_time_t time)PlanetShadow7688,304796
static shadow_t EarthShadow(astro_time_t time)EarthShadow7717,305647
static shadow_t MoonShadow(astro_time_t time)MoonShadow7729,306065
typedef shadow_t (* shadow_func_t) (astro_time_t time);shadow_func_t7761,306860
static astro_func_result_t shadow_distance_slope(void *context, astro_time_t time)shadow_distance_slope7765,306934
static shadow_t PeakEarthShadow(astro_time_t search_center_time)PeakEarthShadow7790,307599
static shadow_t PeakMoonShadow(astro_time_t search_center_time)PeakMoonShadow7809,308246
    astro_body_t    body;body7831,308929
    double          planet_radius_km;planet_radius_km7832,308955
    double          direction;          /* used for transit start/finish search only */direction7833,308993
planet_shadow_context_t;planet_shadow_context_t7835,309083
static astro_func_result_t planet_shadow_distance_slope(void *context, astro_time_t time)planet_shadow_distance_slope7839,309126
static shadow_t PeakPlanetShadow(astro_body_t body, double planet_radius_km, astro_time_t search_center_time)PeakPlanetShadow7864,309870
static astro_func_result_t shadow_distance(void *context, astro_time_t time)shadow_distance7888,310767
static double ShadowSemiDurationMinutes(astro_time_t center_time, double radius_limit, double window_minutes)ShadowSemiDurationMinutes7902,311164
astro_lunar_eclipse_t Astronomy_SearchLunarEclipse(astro_time_t startTime)Astronomy_SearchLunarEclipse7945,312906
astro_lunar_eclipse_t Astronomy_NextLunarEclipse(astro_time_t prevEclipseTime)Astronomy_NextLunarEclipse8033,316995
static astro_global_solar_eclipse_t GlobalSolarEclipseError(astro_status_t status)GlobalSolarEclipseError8040,317203
#define EclipseKindFromUmbra(EclipseKindFromUmbra8055,317749
static astro_global_solar_eclipse_t GeoidIntersect(shadow_t shadow)GeoidIntersect8057,317836
astro_global_solar_eclipse_t Astronomy_SearchGlobalSolarEclipse(astro_time_t startTime)Astronomy_SearchGlobalSolarEclipse8197,323386
astro_global_solar_eclipse_t Astronomy_NextGlobalSolarEclipse(astro_time_t prevEclipseTime)Astronomy_NextGlobalSolarEclipse8260,326258
static astro_eclipse_event_t EclipseEventError(void)EclipseEventError8267,326485
static astro_local_solar_eclipse_t LocalSolarEclipseError(astro_status_t status)LocalSolarEclipseError8276,326643
static shadow_t LocalMoonShadow(astro_time_t time, astro_observer_t observer)LocalMoonShadow8293,327101
static astro_func_result_t local_shadow_distance_slope(void *context, astro_time_t time)local_shadow_distance_slope8322,327954
static shadow_t PeakLocalMoonShadow(astro_time_t search_center_time, astro_observer_t observer)PeakLocalMoonShadow8347,328665
static double local_partial_distance(const shadow_t *shadow)local_partial_distance8369,329327
static double local_total_distance(const shadow_t *shadow)local_total_distance8374,329427
typedef double (* local_distance_func) (const shadow_t *shadow);local_distance_func8382,329681
    local_distance_func     func;func8386,329764
    double                  direction;direction8387,329798
    astro_observer_t        observer;observer8388,329837
eclipse_transition_t;eclipse_transition_t8390,329877
static astro_func_result_t local_eclipse_func(void *context, astro_time_t time)local_eclipse_func8394,329916
astro_func_result_t SunAltitude(SunAltitude8410,330354
static astro_status_t CalcEvent(CalcEvent8429,330863
static astro_status_t LocalEclipseTransition(LocalEclipseTransition8450,331290
static astro_local_solar_eclipse_t LocalEclipse(LocalEclipse8477,331921
astro_local_solar_eclipse_t Astronomy_SearchLocalSolarEclipse(Astronomy_SearchLocalSolarEclipse8552,334802
astro_local_solar_eclipse_t Astronomy_NextLocalSolarEclipse(Astronomy_NextLocalSolarEclipse8625,338010
static astro_func_result_t planet_transit_bound(void *context, astro_time_t time)planet_transit_bound8634,338280
static astro_search_result_t PlanetTransitBoundary(PlanetTransitBoundary8650,338726
astro_transit_t Astronomy_SearchTransit(astro_body_t body, astro_time_t startTime)Astronomy_SearchTransit8688,340124
astro_transit_t Astronomy_NextTransit(astro_body_t body, astro_time_t prevTransitTime)Astronomy_NextTransit8788,344249
void Astronomy_Reset(void)Astronomy_Reset8809,345095

lib/TFT_eSPI/examples/Sprite/Animated_dial/NotoSansBold36.h,59
const uint8_t  NotoSansBold36[] PROGMEM = {PROGMEM22,480

lib/TFT_eSPI/examples/Sprite/Animated_dial/dial.h,48
const uint8_t dial[] PROGMEM = {PROGMEM21,468

lib/TFT_eSPI/examples/Sprite/Sprite_image_4bit/starImage.cpp,52
const uint8_t stars[12800] PROGMEM = {PROGMEM5,60

lib/TFT_eSPI/examples/Sprite/Sprite_image_4bit/sample_images.h,0

lib/TFT_eSPI/examples/DMA test/boing_ball/graphic.h,218
const uint8_t background[SCREENHEIGHT][SCREENWIDTH/8] = {background4,141
#define BALLWIDTH BALLWIDTH806,59402
#define BALLHEIGHT BALLHEIGHT807,59425
const uint8_t ball[BALLHEIGHT][BALLWIDTH/2] = {ball809,59449

lib/TFT_eSPI/examples/DMA test/Flash_Jpg_DMA/panda.h,49
const uint8_t panda[] PROGMEM = {PROGMEM26,737

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/user_xmas.cpp,0

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/user_bat.cpp,0

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/naugaEye.h,802
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,21
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4,43
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5,69
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM7,97
#define SCLERA_WIDTH SCLERA_WIDTH11,298
#define SCLERA_HEIGHT SCLERA_HEIGHT12,324
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM14,351
#define SCREEN_WIDTH SCREEN_WIDTH4066,267717
#define SCREEN_HEIGHT SCREEN_HEIGHT4067,267743
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM4070,267771
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5438,368871
#define IRIS_WIDTH IRIS_WIDTH6806,469971
#define IRIS_HEIGHT IRIS_HEIGHT6807,469994
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM6809,470018

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/logo.h,309
#define LOGO_TOP_WIDTH LOGO_TOP_WIDTH3,53
#define LOGO_TOP_HEIGHT LOGO_TOP_HEIGHT4,80
const uint8_t logo_top[472] PROGMEM= {PROGMEM6,108
#define LOGO_BOTTOM_WIDTH LOGO_BOTTOM_WIDTH48,3063
#define LOGO_BOTTOM_HEIGHT LOGO_BOTTOM_HEIGHT49,3094
const uint8_t logo_bottom[592] PROGMEM= {PROGMEM51,3125

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/noScleraEye.h,988
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,68
#define SCLERA_WIDTH SCLERA_WIDTH4,90
#define SCLERA_HEIGHT SCLERA_HEIGHT5,116
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,143
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH3209,211409
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT3210,211437
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM3212,211465
#define SCREEN_WIDTH SCREEN_WIDTH8334,549453
#define SCREEN_HEIGHT SCREEN_HEIGHT8335,549479
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8339,549533
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9707,650633
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11077,751740
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM12445,852840
#define IRIS_WIDTH IRIS_WIDTH13815,953970
#define IRIS_HEIGHT IRIS_HEIGHT13816,953994
const uint16_t polar[160 * 160] PROGMEM= {PROGMEM13818,954019

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/newtEye.h,985
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,68
#define SCLERA_WIDTH SCLERA_WIDTH4,90
#define SCLERA_HEIGHT SCLERA_HEIGHT5,116
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,143
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH5009,330209
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5010,330237
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM5012,330265
#define SCREEN_WIDTH SCREEN_WIDTH7062,465501
#define SCREEN_HEIGHT SCREEN_HEIGHT7063,465527
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7067,465581
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8435,566681
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9805,667788
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11173,768888
#define IRIS_WIDTH IRIS_WIDTH12543,870018
#define IRIS_HEIGHT IRIS_HEIGHT12544,870041
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM12546,870065

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/goatEye.h,920
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM4,53
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH2054,135287
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT2055,135315
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM2057,135343
#define SCREEN_WIDTH SCREEN_WIDTH5275,347667
#define SCREEN_HEIGHT SCREEN_HEIGHT5276,347693
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5280,347747
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM6648,448847
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8018,549954
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9386,651054
#define IRIS_WIDTH IRIS_WIDTH10756,752184
#define IRIS_HEIGHT IRIS_HEIGHT10757,752208
const uint16_t polar[128 * 128] PROGMEM= {PROGMEM10759,752233

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/defaultEye.h,919
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM4,53
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH5006,330119
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5007,330147
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM5009,330175
#define SCREEN_WIDTH SCREEN_WIDTH7061,465466
#define SCREEN_HEIGHT SCREEN_HEIGHT7062,465492
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7066,465546
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8434,566646
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9804,667753
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11173,768903
#define IRIS_WIDTH IRIS_WIDTH12544,870083
#define IRIS_HEIGHT IRIS_HEIGHT12545,870106
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM12547,870130

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/catEye.h,966
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4,41
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5,67
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM7,95
#define SCLERA_WIDTH SCLERA_WIDTH12,297
#define SCLERA_HEIGHT SCLERA_HEIGHT13,323
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM15,350
#define SCREEN_WIDTH SCREEN_WIDTH4068,267717
#define SCREEN_HEIGHT SCREEN_HEIGHT4069,267743
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM4073,267797
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5441,368897
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM6811,470004
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8179,571104
#define IRIS_WIDTH IRIS_WIDTH9549,672234
#define IRIS_HEIGHT IRIS_HEIGHT9550,672258
const uint16_t polar[128 * 128] PROGMEM= {PROGMEM9552,672283

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/dragonEye.h,988
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,68
#define SCLERA_WIDTH SCLERA_WIDTH4,90
#define SCLERA_HEIGHT SCLERA_HEIGHT5,116
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,143
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH3209,211409
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT3210,211437
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM3212,211465
#define SCREEN_WIDTH SCREEN_WIDTH8334,549453
#define SCREEN_HEIGHT SCREEN_HEIGHT8335,549479
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8339,549533
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9707,650633
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11077,751740
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM12445,852840
#define IRIS_WIDTH IRIS_WIDTH13815,953970
#define IRIS_HEIGHT IRIS_HEIGHT13816,953994
const uint16_t polar[160 * 160] PROGMEM= {PROGMEM13818,954019

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/terminatorEye.h,983
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define SCLERA_WIDTH SCLERA_WIDTH4,42
#define SCLERA_HEIGHT SCLERA_HEIGHT5,68
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,95
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH5009,330161
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5010,330189
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM5012,330217
#define SCREEN_WIDTH SCREEN_WIDTH7062,465453
#define SCREEN_HEIGHT SCREEN_HEIGHT7063,465479
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7067,465533
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8435,566633
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9805,667740
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11173,768840
#define IRIS_WIDTH IRIS_WIDTH12543,869970
#define IRIS_HEIGHT IRIS_HEIGHT12544,869993
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM12546,870017

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/owlEye.h,802
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4,42
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5,68
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM7,96
#define SCLERA_WIDTH SCLERA_WIDTH11,311
#define SCLERA_HEIGHT SCLERA_HEIGHT12,337
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM14,364
#define SCREEN_WIDTH SCREEN_WIDTH4066,267730
#define SCREEN_HEIGHT SCREEN_HEIGHT4067,267756
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM4070,267784
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5438,368884
#define IRIS_WIDTH IRIS_WIDTH6806,469984
#define IRIS_HEIGHT IRIS_HEIGHT6807,470007
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM6809,470031

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/data/doeEye.h,985
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define SCLERA_WIDTH SCLERA_WIDTH4,42
#define SCLERA_HEIGHT SCLERA_HEIGHT5,68
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,95
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4059,267461
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT4060,267489
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM4062,267517
#define SCREEN_WIDTH SCREEN_WIDTH6112,402753
#define SCREEN_HEIGHT SCREEN_HEIGHT6113,402779
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM6117,402833
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7485,503933
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8855,605040
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM10223,706140
#define IRIS_WIDTH IRIS_WIDTH11593,807270
#define IRIS_HEIGHT IRIS_HEIGHT11594,807294
const uint16_t polar[180 * 180] PROGMEM= {PROGMEM11596,807319

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/config.h,919
#define TFT_COUNT TFT_COUNT27,1405
#define TFT1_CS TFT1_CS28,1462
#define TFT2_CS TFT2_CS29,1548
#define TFT_1_ROT TFT_1_ROT30,1634
#define TFT_2_ROT TFT_2_ROT31,1679
#define EYE_1_XPOSITION EYE_1_XPOSITION32,1724
#define EYE_2_XPOSITION EYE_2_XPOSITION33,1797
#define DISPLAY_BACKLIGHT DISPLAY_BACKLIGHT35,1871
#define BACKLIGHT_MAX BACKLIGHT_MAX36,1944
#define NUM_EYES NUM_EYES39,2051
#define BLINK_PIN BLINK_PIN41,2109
#define LH_WINK_PIN LH_WINK_PIN42,2175
#define RH_WINK_PIN RH_WINK_PIN43,2238
  eyeInfo_t eyeInfo[] = {eyeInfo52,2683
  eyeInfo_t eyeInfo[] = {eyeInfo57,2955
#define TRACKING TRACKING79,4110
#define AUTOBLINK AUTOBLINK80,4173
  #define LIGHT_CURVE LIGHT_CURVE83,4296
  #define LIGHT_MIN LIGHT_MIN84,4357
  #define LIGHT_MAX LIGHT_MAX85,4429
#define IRIS_SMOOTH IRIS_SMOOTH87,4496
  #define IRIS_MIN IRIS_MIN89,4633
  #define IRIS_MAX IRIS_MAX92,4732

lib/TFT_eSPI/examples/Generic/Animated_Eyes_1/user.cpp,83
void user_setup(void) {user_setup13,585
void user_loop(void) {user_loop28,1418

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/user_xmas.cpp,0

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/user_bat.cpp,0

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/naugaEye.h,802
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,21
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4,43
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5,69
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM7,97
#define SCLERA_WIDTH SCLERA_WIDTH11,298
#define SCLERA_HEIGHT SCLERA_HEIGHT12,324
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM14,351
#define SCREEN_WIDTH SCREEN_WIDTH4066,267717
#define SCREEN_HEIGHT SCREEN_HEIGHT4067,267743
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM4070,267771
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5438,368871
#define IRIS_WIDTH IRIS_WIDTH6806,469971
#define IRIS_HEIGHT IRIS_HEIGHT6807,469994
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM6809,470018

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/logo.h,309
#define LOGO_TOP_WIDTH LOGO_TOP_WIDTH3,53
#define LOGO_TOP_HEIGHT LOGO_TOP_HEIGHT4,80
const uint8_t logo_top[472] PROGMEM= {PROGMEM6,108
#define LOGO_BOTTOM_WIDTH LOGO_BOTTOM_WIDTH48,3063
#define LOGO_BOTTOM_HEIGHT LOGO_BOTTOM_HEIGHT49,3094
const uint8_t logo_bottom[592] PROGMEM= {PROGMEM51,3125

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/noScleraEye.h,988
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,68
#define SCLERA_WIDTH SCLERA_WIDTH4,90
#define SCLERA_HEIGHT SCLERA_HEIGHT5,116
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,143
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH3209,211409
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT3210,211437
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM3212,211465
#define SCREEN_WIDTH SCREEN_WIDTH8334,549453
#define SCREEN_HEIGHT SCREEN_HEIGHT8335,549479
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8339,549533
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9707,650633
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11077,751740
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM12445,852840
#define IRIS_WIDTH IRIS_WIDTH13815,953970
#define IRIS_HEIGHT IRIS_HEIGHT13816,953994
const uint16_t polar[160 * 160] PROGMEM= {PROGMEM13818,954019

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/newtEye.h,985
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,68
#define SCLERA_WIDTH SCLERA_WIDTH4,90
#define SCLERA_HEIGHT SCLERA_HEIGHT5,116
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,143
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH5009,330209
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5010,330237
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM5012,330265
#define SCREEN_WIDTH SCREEN_WIDTH7062,465501
#define SCREEN_HEIGHT SCREEN_HEIGHT7063,465527
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7067,465581
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8435,566681
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9805,667788
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11173,768888
#define IRIS_WIDTH IRIS_WIDTH12543,870018
#define IRIS_HEIGHT IRIS_HEIGHT12544,870041
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM12546,870065

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/goatEye.h,920
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM4,53
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH2054,135287
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT2055,135315
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM2057,135343
#define SCREEN_WIDTH SCREEN_WIDTH5275,347667
#define SCREEN_HEIGHT SCREEN_HEIGHT5276,347693
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5280,347747
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM6648,448847
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8018,549954
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9386,651054
#define IRIS_WIDTH IRIS_WIDTH10756,752184
#define IRIS_HEIGHT IRIS_HEIGHT10757,752208
const uint16_t polar[128 * 128] PROGMEM= {PROGMEM10759,752233

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/defaultEye.h,919
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM4,53
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH5006,330119
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5007,330147
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM5009,330175
#define SCREEN_WIDTH SCREEN_WIDTH7061,465466
#define SCREEN_HEIGHT SCREEN_HEIGHT7062,465492
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7066,465546
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8434,566646
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9804,667753
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11173,768903
#define IRIS_WIDTH IRIS_WIDTH12544,870083
#define IRIS_HEIGHT IRIS_HEIGHT12545,870106
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM12547,870130

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/catEye.h,966
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4,41
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5,67
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM7,95
#define SCLERA_WIDTH SCLERA_WIDTH12,297
#define SCLERA_HEIGHT SCLERA_HEIGHT13,323
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM15,350
#define SCREEN_WIDTH SCREEN_WIDTH4068,267717
#define SCREEN_HEIGHT SCREEN_HEIGHT4069,267743
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM4073,267797
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5441,368897
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM6811,470004
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8179,571104
#define IRIS_WIDTH IRIS_WIDTH9549,672234
#define IRIS_HEIGHT IRIS_HEIGHT9550,672258
const uint16_t polar[128 * 128] PROGMEM= {PROGMEM9552,672283

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/dragonEye.h,988
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,68
#define SCLERA_WIDTH SCLERA_WIDTH4,90
#define SCLERA_HEIGHT SCLERA_HEIGHT5,116
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,143
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH3209,211409
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT3210,211437
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM3212,211465
#define SCREEN_WIDTH SCREEN_WIDTH8334,549453
#define SCREEN_HEIGHT SCREEN_HEIGHT8335,549479
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8339,549533
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9707,650633
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11077,751740
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM12445,852840
#define IRIS_WIDTH IRIS_WIDTH13815,953970
#define IRIS_HEIGHT IRIS_HEIGHT13816,953994
const uint16_t polar[160 * 160] PROGMEM= {PROGMEM13818,954019

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/terminatorEye.h,983
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define SCLERA_WIDTH SCLERA_WIDTH4,42
#define SCLERA_HEIGHT SCLERA_HEIGHT5,68
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,95
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH5009,330161
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5010,330189
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM5012,330217
#define SCREEN_WIDTH SCREEN_WIDTH7062,465453
#define SCREEN_HEIGHT SCREEN_HEIGHT7063,465479
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7067,465533
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8435,566633
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9805,667740
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM11173,768840
#define IRIS_WIDTH IRIS_WIDTH12543,869970
#define IRIS_HEIGHT IRIS_HEIGHT12544,869993
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM12546,870017

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/owlEye.h,802
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4,42
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5,68
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM7,96
#define SCLERA_WIDTH SCLERA_WIDTH11,311
#define SCLERA_HEIGHT SCLERA_HEIGHT12,337
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM14,364
#define SCREEN_WIDTH SCREEN_WIDTH4066,267730
#define SCREEN_HEIGHT SCREEN_HEIGHT4067,267756
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM4070,267784
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5438,368884
#define IRIS_WIDTH IRIS_WIDTH6806,469984
#define IRIS_HEIGHT IRIS_HEIGHT6807,470007
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM6809,470031

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/data/doeEye.h,985
#define IRIS_MIN IRIS_MIN1,0
#define IRIS_MAX IRIS_MAX2,20
#define SCLERA_WIDTH SCLERA_WIDTH4,42
#define SCLERA_HEIGHT SCLERA_HEIGHT5,68
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM7,95
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH4059,267461
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT4060,267489
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM4062,267517
#define SCREEN_WIDTH SCREEN_WIDTH6112,402753
#define SCREEN_HEIGHT SCREEN_HEIGHT6113,402779
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM6117,402833
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7485,503933
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8855,605040
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM10223,706140
#define IRIS_WIDTH IRIS_WIDTH11593,807270
#define IRIS_HEIGHT IRIS_HEIGHT11594,807294
const uint16_t polar[180 * 180] PROGMEM= {PROGMEM11596,807319

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/config.h,919
#define TFT_COUNT TFT_COUNT27,1405
#define TFT1_CS TFT1_CS28,1462
#define TFT2_CS TFT2_CS29,1548
#define TFT_1_ROT TFT_1_ROT30,1634
#define TFT_2_ROT TFT_2_ROT31,1679
#define EYE_1_XPOSITION EYE_1_XPOSITION32,1724
#define EYE_2_XPOSITION EYE_2_XPOSITION33,1789
#define DISPLAY_BACKLIGHT DISPLAY_BACKLIGHT35,1855
#define BACKLIGHT_MAX BACKLIGHT_MAX36,1928
#define NUM_EYES NUM_EYES39,2035
#define BLINK_PIN BLINK_PIN41,2093
#define LH_WINK_PIN LH_WINK_PIN42,2159
#define RH_WINK_PIN RH_WINK_PIN43,2222
  eyeInfo_t eyeInfo[] = {eyeInfo52,2667
  eyeInfo_t eyeInfo[] = {eyeInfo57,2939
#define TRACKING TRACKING79,4094
#define AUTOBLINK AUTOBLINK80,4157
  #define LIGHT_CURVE LIGHT_CURVE83,4280
  #define LIGHT_MIN LIGHT_MIN84,4341
  #define LIGHT_MAX LIGHT_MAX85,4413
#define IRIS_SMOOTH IRIS_SMOOTH87,4480
  #define IRIS_MIN IRIS_MIN89,4617
  #define IRIS_MAX IRIS_MAX92,4716

lib/TFT_eSPI/examples/Generic/Animated_Eyes_2/user.cpp,83
void user_setup(void) {user_setup13,585
void user_loop(void) {user_loop28,1418

lib/TFT_eSPI/examples/Generic/ESP8266_uncannyEyes/noScleraEye.h,759
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM6,76
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH3208,211342
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT3209,211370
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM3211,211398
#define SCREEN_WIDTH SCREEN_WIDTH8333,549386
#define SCREEN_HEIGHT SCREEN_HEIGHT8334,549412
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM8336,549439
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM10386,651903
#define IRIS_WIDTH IRIS_WIDTH12436,754367
#define IRIS_HEIGHT IRIS_HEIGHT12437,754391
const uint16_t polar[160 * 160] PROGMEM= {PROGMEM12439,754416

lib/TFT_eSPI/examples/Generic/ESP8266_uncannyEyes/goatEye.h,755
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM6,76
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH2056,135310
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT2057,135338
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM2059,135366
#define SCREEN_WIDTH SCREEN_WIDTH5277,347690
#define SCREEN_HEIGHT SCREEN_HEIGHT5278,347716
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM5280,347743
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7330,450207
#define IRIS_WIDTH IRIS_WIDTH9380,552671
#define IRIS_HEIGHT IRIS_HEIGHT9381,552695
const uint16_t polar[128 * 128] PROGMEM= {PROGMEM9383,552720

lib/TFT_eSPI/examples/Generic/ESP8266_uncannyEyes/defaultEye.h,756
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT * SCLERA_WIDTH] PROGMEM= {PROGMEM6,76
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH5008,330142
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT5009,330170
const uint16_t iris[IRIS_MAP_HEIGHT * IRIS_MAP_WIDTH] PROGMEM= {PROGMEM5011,330198
#define SCREEN_WIDTH SCREEN_WIDTH7061,465434
#define SCREEN_HEIGHT SCREEN_HEIGHT7062,465460
const uint8_t upper[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM7064,465487
const uint8_t lower[SCREEN_HEIGHT * SCREEN_WIDTH] PROGMEM= {PROGMEM9114,567951
#define IRIS_WIDTH IRIS_WIDTH11164,670415
#define IRIS_HEIGHT IRIS_HEIGHT11165,670438
const uint16_t polar[80 * 80] PROGMEM= {PROGMEM11167,670462

lib/TFT_eSPI/examples/Generic/ESP8266_uncannyEyes/dragonEye.h,749
#define SCLERA_WIDTH SCLERA_WIDTH1,0
#define SCLERA_HEIGHT SCLERA_HEIGHT2,26
const uint16_t sclera[SCLERA_HEIGHT*SCLERA_WIDTH] PROGMEM= {PROGMEM6,76
#define IRIS_MAP_WIDTH IRIS_MAP_WIDTH3208,211340
#define IRIS_MAP_HEIGHT IRIS_MAP_HEIGHT3209,211368
const uint16_t iris[IRIS_MAP_HEIGHT*IRIS_MAP_WIDTH] PROGMEM= {PROGMEM3211,211396
#define SCREEN_WIDTH SCREEN_WIDTH8333,549382
#define SCREEN_HEIGHT SCREEN_HEIGHT8334,549408
const uint8_t upper[SCREEN_HEIGHT*SCREEN_WIDTH] PROGMEM= {PROGMEM8336,549435
const uint8_t lower[SCREEN_HEIGHT*SCREEN_WIDTH] PROGMEM= {PROGMEM10386,651897
#define IRIS_WIDTH IRIS_WIDTH12436,754359
#define IRIS_HEIGHT IRIS_HEIGHT12437,754383
const uint16_t polar[160*160] PROGMEM= {PROGMEM12439,754408

lib/TFT_eSPI/examples/Generic/TFT_Flash_Bitmap/Info.h,153
const uint16_t infoWidth = 32;infoWidth5,124
const uint16_t infoHeight = 32;infoHeight6,155
const unsigned short  info[1024] PROGMEM={PROGMEM8,188

lib/TFT_eSPI/examples/Generic/TFT_Flash_Bitmap/Close.h,159
const uint16_t closeWidth = 32;closeWidth5,124
const uint16_t closeHeight = 32;closeHeight6,156
const unsigned short  closeX[1024] PROGMEM={PROGMEM8,190

lib/TFT_eSPI/examples/Generic/TFT_Flash_Bitmap/Alert.h,158
const uint16_t alertWidth = 32;alertWidth5,124
const uint16_t alertHeight = 32;alertHeight6,156
const unsigned short  alert[1024] PROGMEM={PROGMEM8,190

lib/TFT_eSPI/examples/Generic/Local_Custom_Fonts/MyFont.h,189
const uint8_t myFont32pt8bBitmaps[] PROGMEM = {PROGMEM8,216
const GFXglyph myFont32pt8bGlyphs[] PROGMEM = {PROGMEM3135,231475
const GFXfont myFont32pt8b PROGMEM = {PROGMEM3361,243104

lib/TFT_eSPI/examples/Generic/drawXBitmap/xbm.h,125
#define logoWidth logoWidth17,721
#define logoHeight logoHeight18,758
PROGMEM const unsigned char logo[] = {logo21,830

lib/TFT_eSPI/Tools/Images/bmp2array4bit.py,3967
debug = Nonedebug33,882
def debugOut(s):debugOut35,896
parser = argparse.ArgumentParser(description="Convert bmp file to C array")parser40,965
args = parser.parse_args()args44,1238
    output = args.outputoutput54,1501
debug = args.verbosedebug56,1527
    infile = open(args.input,"rb") #b is for binaryinfile61,1669
    contents = bytearray(infile.read())contents62,1721
upto = 2upto69,1899
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data71,1936
fileSize = struct.unpack("I", bytearray(data))fileSize72,2033
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data82,2209
offset = struct.unpack("I", bytearray(data))offset83,2306
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data88,2404
headersize = struct.unpack("I", bytearray(data))headersize89,2501
headerLength = headersize[0]headerLength90,2550
startOfDefinitions = headerLength + uptostartOfDefinitions91,2579
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data95,2740
t = struct.unpack("I", bytearray(data))t96,2837
width = t[0]width98,2912
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data101,2936
t = struct.unpack("I", bytearray(data))t102,3033
height = t[0]height104,3109
data = struct.pack("BB", contents[upto], contents[upto+1])data109,3140
t = struct.unpack("H", bytearray(data))t110,3199
upto = upto + 2upto113,3276
data = struct.pack("BB", contents[upto], contents[upto+1])data114,3292
t = struct.unpack("H", bytearray(data))t115,3351
bitsPerPixel = t[0]bitsPerPixel117,3435
upto = upto + 2upto119,3456
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data120,3472
t = struct.unpack("I", bytearray(data))t121,3569
upto = upto + 4upto124,3653
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data125,3669
t = struct.unpack("I", bytearray(data))t126,3766
upto = upto + 4upto129,3848
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data130,3864
t = struct.unpack("I", bytearray(data))t131,3961
upto = upto + 4upto134,4047
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data135,4063
t = struct.unpack("I", bytearray(data))t136,4160
upto = upto + 4upto139,4246
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data140,4262
t = struct.unpack("I", bytearray(data))t141,4359
colorsUsed = tcolorsUsed143,4438
upto = upto + 4upto145,4454
data = struct.pack("BBBB", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])data146,4470
t = struct.unpack("I", bytearray(data))t147,4567
colorIndex = [] #(colorsUsed[0])colorIndex155,4851
    upto =  startOfDefinitions + (i * 4)upto162,5044
    blue = contents[upto]blue163,5085
    green = contents[upto + 1]green164,5111
    red = contents[upto + 2]red165,5142
arraySize = (len(contents) - offset[0]) arraySize182,5793
outputString = "/* This was generated using a script based on the SparkFun BMPtoArray python script" + '\n'outputString183,5834
outputString = outputString[:-2]outputString192,6284
dropLastNumber = True #(width % 4) == 2 or (width % 4) == 1dropLastNumber203,6717
paddedWidth = int(math.ceil(bitsPerPixel * width / 32.0) * 4)paddedWidth204,6777
r = 0r207,6989
width = int(width / 2)width208,6995
    i = 0i213,7238
        colorCode1 = contents[row + col*paddedWidth + offset[0]]  colorCode1215,7277
            i = 0i218,7382
            i = 0i222,7501
        r = r + 1r226,7582
        i = i + 1i227,7600
outputString = outputString[:-2]outputString235,7869
    outfile = open(output, "w")outfile240,7977

lib/TFT_eSPI/User_Setups/Setup6_RPi_Wr_ILI9486.h,579
#define RPI_ILI9486_DRIVER RPI_ILI9486_DRIVER3,52
#define TFT_CS TFT_CS7,194
#define TFT_DC TFT_DC8,249
#define TFT_RST TFT_RST9,302
#define TFT_WR TFT_WR12,488
#define LOAD_GLCD LOAD_GLCD15,569
#define LOAD_FONT2 LOAD_FONT216,658
#define LOAD_FONT4 LOAD_FONT417,757
#define LOAD_FONT6 LOAD_FONT618,857
#define LOAD_FONT7 LOAD_FONT719,970
#define LOAD_FONT8 LOAD_FONT820,1083
#define LOAD_GFXFF LOAD_GFXFF21,1192
#define SMOOTH_FONTSMOOTH_FONT23,1305
#define SPI_FREQUENCY SPI_FREQUENCY26,1327
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY28,1360

lib/TFT_eSPI/User_Setups/Setup47_ST7735.h,839
#define ST7735_DRIVER ST7735_DRIVER3,71
#define TFT_WIDTH TFT_WIDTH5,125
#define TFT_HEIGHT TFT_HEIGHT6,148
 #define ST7735_GREENTAB3ST7735_GREENTAB311,251
#define TFT_RGB_ORDER TFT_RGB_ORDER19,613
#define TFT_MISO TFT_MISO25,755
#define TFT_MOSI TFT_MOSI26,775
#define TFT_SCLK TFT_SCLK27,795
#define TFT_DC TFT_DC29,892
#define TFT_RST TFT_RST30,912
#define LOAD_GLCD LOAD_GLCD32,981
#define LOAD_FONT2 LOAD_FONT233,1070
#define LOAD_FONT4 LOAD_FONT434,1169
#define LOAD_FONT6 LOAD_FONT635,1269
#define LOAD_FONT7 LOAD_FONT736,1382
#define LOAD_FONT8 LOAD_FONT837,1495
#define LOAD_GFXFF LOAD_GFXFF39,1717
#define SMOOTH_FONTSMOOTH_FONT41,1830
#define SPI_FREQUENCY SPI_FREQUENCY44,1852
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY47,1919
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY49,1957

lib/TFT_eSPI/User_Setups/Setup18_ST7789.h,516
#define ST7789_DRIVERST7789_DRIVER3,52
#define TFT_DC TFT_DC21,870
#define TFT_RST TFT_RST22,923
#define LOAD_GLCD LOAD_GLCD25,1009
#define LOAD_FONT2 LOAD_FONT226,1098
#define LOAD_FONT4 LOAD_FONT427,1197
#define LOAD_FONT6 LOAD_FONT628,1297
#define LOAD_FONT7 LOAD_FONT729,1410
#define LOAD_FONT8 LOAD_FONT830,1524
#define LOAD_GFXFF LOAD_GFXFF31,1633
#define SMOOTH_FONTSMOOTH_FONT33,1746
#define SPI_FREQUENCY SPI_FREQUENCY37,1803
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY41,1906

lib/TFT_eSPI/User_Setups/SetupX_Template.h,634
#define ILI9341_DRIVERILI9341_DRIVER39,1550
#define TFT_CS TFT_CS153,6896
#define TFT_DC TFT_DC154,6951
#define TFT_RST TFT_RST155,7004
#define LOAD_GLCD LOAD_GLCD276,12457
#define LOAD_FONT2 LOAD_FONT2277,12546
#define LOAD_FONT4 LOAD_FONT4278,12645
#define LOAD_FONT6 LOAD_FONT6279,12745
#define LOAD_FONT7 LOAD_FONT7280,12858
#define LOAD_FONT8 LOAD_FONT8281,12972
#define LOAD_GFXFF LOAD_GFXFF283,13194
#define SMOOTH_FONTSMOOTH_FONT287,13444
#define SPI_FREQUENCY SPI_FREQUENCY306,14163
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY312,14394
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY315,14513

lib/TFT_eSPI/User_Setups/Setup13_ILI9481_Parallel.h,785
#define ESP32_PARALLELESP32_PARALLEL3,52
#define ILI9481_DRIVERILI9481_DRIVER6,77
#define TFT_CS TFT_CS10,142
#define TFT_DC TFT_DC11,190
#define TFT_RST TFT_RST12,274
#define TFT_WR TFT_WR14,309
#define TFT_RD TFT_RD15,393
#define TFT_D0 TFT_D017,414
#define TFT_D1 TFT_D118,487
#define TFT_D2 TFT_D219,559
#define TFT_D3 TFT_D320,579
#define TFT_D4 TFT_D421,599
#define TFT_D5 TFT_D522,619
#define TFT_D6 TFT_D623,639
#define TFT_D7 TFT_D724,659
#define LOAD_GLCD LOAD_GLCD27,681
#define LOAD_FONT2 LOAD_FONT228,770
#define LOAD_FONT4 LOAD_FONT429,869
#define LOAD_FONT6 LOAD_FONT630,969
#define LOAD_FONT7 LOAD_FONT731,1082
#define LOAD_FONT8 LOAD_FONT832,1195
#define LOAD_GFXFF LOAD_GFXFF33,1304
#define SMOOTH_FONTSMOOTH_FONT35,1417

lib/TFT_eSPI/User_Setups/Setup22_TTGO_T4.h,677
#define ILI9341_DRIVERILI9341_DRIVER5,141
#define TFT_MISO TFT_MISO10,254
#define TFT_MOSI TFT_MOSI11,274
#define TFT_SCLK TFT_SCLK12,294
#define TFT_CS TFT_CS14,315
#define TFT_DC TFT_DC15,335
#define TFT_RST TFT_RST16,382
#define LOAD_GLCDLOAD_GLCD18,403
#define LOAD_FONT2LOAD_FONT219,421
#define LOAD_FONT4LOAD_FONT420,440
#define LOAD_FONT6LOAD_FONT621,459
#define LOAD_FONT7LOAD_FONT722,478
#define LOAD_FONT8LOAD_FONT823,497
#define LOAD_GFXFFLOAD_GFXFF24,516
#define SMOOTH_FONTSMOOTH_FONT26,536
  #define SPI_FREQUENCY SPI_FREQUENCY29,591
#define USE_HSPI_PORTUSE_HSPI_PORT31,651
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY33,674

lib/TFT_eSPI/User_Setups/Setup32_ILI9341_STM32F103.h,667
#define STM32STM328,298
#define ILI9341_DRIVERILI9341_DRIVER11,346
#define TFT_CS TFT_CS23,879
#define TFT_DC TFT_DC24,936
#define TFT_RST TFT_RST25,1033
#define TOUCH_CS TOUCH_CS31,1365
#define LOAD_GLCD LOAD_GLCD40,1961
#define LOAD_FONT2 LOAD_FONT241,2050
#define LOAD_FONT4 LOAD_FONT442,2149
#define LOAD_FONT6 LOAD_FONT643,2249
#define LOAD_FONT7 LOAD_FONT744,2362
#define LOAD_FONT8 LOAD_FONT845,2476
#define LOAD_GFXFF LOAD_GFXFF46,2585
#define SMOOTH_FONTSMOOTH_FONT49,2766
#define SPI_FREQUENCY SPI_FREQUENCY52,2829
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY55,2938
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY57,3009

lib/TFT_eSPI/User_Setups/Setup34_ILI9481_Parallel_STM32.h,879
#define STM32STM328,298
#define NUCLEO_64_TFTNUCLEO_64_TFT12,430
#define TFT_PARALLEL_8_BITTFT_PARALLEL_8_BIT16,552
#define ILI9481_DRIVERILI9481_DRIVER20,644
#define TFT_CS TFT_CS25,834
#define TFT_DC TFT_DC26,882
#define TFT_RST TFT_RST27,931
#define TFT_WR TFT_WR29,966
#define TFT_RD TFT_RD30,1016
#define TFT_D0 TFT_D032,1050
#define TFT_D1 TFT_D133,1100
#define TFT_D2 TFT_D234,1120
#define TFT_D3 TFT_D335,1140
#define TFT_D4 TFT_D436,1160
#define TFT_D5 TFT_D537,1180
#define TFT_D6 TFT_D638,1200
#define TFT_D7 TFT_D739,1220
#define LOAD_GLCD LOAD_GLCD42,1266
#define LOAD_FONT2 LOAD_FONT243,1355
#define LOAD_FONT4 LOAD_FONT444,1454
#define LOAD_FONT6 LOAD_FONT645,1554
#define LOAD_FONT7 LOAD_FONT746,1667
#define LOAD_FONT8 LOAD_FONT847,1780
#define LOAD_GFXFF LOAD_GFXFF48,1889
#define SMOOTH_FONTSMOOTH_FONT51,2070

lib/TFT_eSPI/User_Setups/Setup22_TTGO_T4_v1.3.h,755
#define ILI9341_DRIVERILI9341_DRIVER5,121
#define TFT_BACKLIGHT_ON TFT_BACKLIGHT_ON7,145
#define TFT_BL TFT_BL8,175
#define TFT_MISO TFT_MISO10,193
#define TFT_MOSI TFT_MOSI11,213
#define TFT_SCLK TFT_SCLK12,233
#define TFT_CS TFT_CS14,254
#define TFT_DC TFT_DC15,274
#define TFT_RST TFT_RST16,338
#define LOAD_GLCDLOAD_GLCD18,359
#define LOAD_FONT2LOAD_FONT219,377
#define LOAD_FONT4LOAD_FONT420,396
#define LOAD_FONT6LOAD_FONT621,415
#define LOAD_FONT7LOAD_FONT722,434
#define LOAD_FONT8LOAD_FONT823,453
#define LOAD_GFXFFLOAD_GFXFF24,472
#define SMOOTH_FONTSMOOTH_FONT26,492
  #define SPI_FREQUENCY SPI_FREQUENCY29,547
#define USE_HSPI_PORTUSE_HSPI_PORT31,607
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY33,630

lib/TFT_eSPI/User_Setups/Setup10_RPi_touch_ILI9486.h,622
#define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE4,67
#define ILI9486_DRIVERILI9486_DRIVER5,92
#define TFT_CS TFT_CS8,208
#define TFT_DC TFT_DC9,263
#define TFT_RST TFT_RST10,316
#define TOUCH_CS TOUCH_CS13,502
#define LOAD_GLCD LOAD_GLCD16,574
#define LOAD_FONT2 LOAD_FONT217,663
#define LOAD_FONT4 LOAD_FONT418,762
#define LOAD_FONT6 LOAD_FONT619,862
#define LOAD_FONT7 LOAD_FONT720,975
#define LOAD_FONT8 LOAD_FONT821,1088
#define LOAD_GFXFF LOAD_GFXFF22,1197
#define SMOOTH_FONTSMOOTH_FONT24,1310
#define SPI_FREQUENCY SPI_FREQUENCY27,1332
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY29,1417

lib/TFT_eSPI/User_Setups/Setup31_ST7796_Parallel_STM32.h,877
#define STM32STM329,299
#define NUCLEO_64_TFTNUCLEO_64_TFT13,431
#define TFT_PARALLEL_8_BITTFT_PARALLEL_8_BIT17,552
#define ST7796_DRIVERST7796_DRIVER20,619
#define TFT_CS TFT_CS26,833
#define TFT_DC TFT_DC27,881
#define TFT_RST TFT_RST28,930
#define TFT_WR TFT_WR30,965
#define TFT_RD TFT_RD31,1015
#define TFT_D0 TFT_D033,1049
#define TFT_D1 TFT_D134,1099
#define TFT_D2 TFT_D235,1119
#define TFT_D3 TFT_D336,1139
#define TFT_D4 TFT_D437,1159
#define TFT_D5 TFT_D538,1179
#define TFT_D6 TFT_D639,1199
#define TFT_D7 TFT_D740,1219
#define LOAD_GLCD LOAD_GLCD43,1265
#define LOAD_FONT2 LOAD_FONT244,1354
#define LOAD_FONT4 LOAD_FONT445,1453
#define LOAD_FONT6 LOAD_FONT646,1553
#define LOAD_FONT7 LOAD_FONT747,1666
#define LOAD_FONT8 LOAD_FONT848,1779
#define LOAD_GFXFF LOAD_GFXFF49,1888
#define SMOOTH_FONTSMOOTH_FONT52,2069

lib/TFT_eSPI/User_Setups/Setup43_ST7735.h,819
#define ST7735_DRIVERST7735_DRIVER5,96
#define TFT_WIDTH TFT_WIDTH8,120
#define TFT_HEIGHT TFT_HEIGHT9,142
#define ST7735_GREENTAB160x80ST7735_GREENTAB160x8012,167
#define TFT_MISO TFT_MISO21,535
#define TFT_MOSI TFT_MOSI22,555
#define TFT_SCLK TFT_SCLK23,575
#define TFT_CS TFT_CS24,595
#define TFT_DC TFT_DC25,644
#define TFT_RST TFT_RST26,693
#define TFT_CS TFT_CS34,1059
#define TFT_DC TFT_DC35,1114
#define TFT_RST TFT_RST36,1167
#define LOAD_GLCD LOAD_GLCD39,1259
#define LOAD_FONT2 LOAD_FONT240,1348
#define LOAD_FONT4 LOAD_FONT441,1447
#define LOAD_FONT6 LOAD_FONT642,1547
#define LOAD_FONT7 LOAD_FONT743,1660
#define LOAD_FONT8 LOAD_FONT844,1773
#define LOAD_GFXFF LOAD_GFXFF46,1995
#define SMOOTH_FONTSMOOTH_FONT48,2108
  #define SPI_FREQUENCY SPI_FREQUENCY52,2164

lib/TFT_eSPI/User_Setups/Setup12_M5Stack.h,698
#define ILI9341_DRIVERILI9341_DRIVER3,52
#define M5STACKM5STACK6,77
#define TFT_MISO TFT_MISO9,95
#define TFT_MOSI TFT_MOSI10,115
#define TFT_SCLK TFT_SCLK11,135
#define TFT_CS TFT_CS12,155
#define TFT_DC TFT_DC13,203
#define TFT_RST TFT_RST14,252
#define TFT_BL TFT_BL15,323
#define LOAD_GLCD LOAD_GLCD18,364
#define LOAD_FONT2 LOAD_FONT219,453
#define LOAD_FONT4 LOAD_FONT420,552
#define LOAD_FONT6 LOAD_FONT621,652
#define LOAD_FONT7 LOAD_FONT722,765
#define LOAD_FONT8 LOAD_FONT823,878
#define LOAD_GFXFF LOAD_GFXFF24,987
#define SMOOTH_FONTSMOOTH_FONT26,1100
#define SPI_FREQUENCY SPI_FREQUENCY29,1122
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY32,1205

lib/TFT_eSPI/User_Setups/Setup7_ST7735_128x128.h,668
#define ST7735_DRIVERST7735_DRIVER3,52
#define TFT_WIDTH TFT_WIDTH6,76
#define TFT_HEIGHT TFT_HEIGHT7,99
#define ST7735_GREENTAB128 ST7735_GREENTAB12810,124
#define TFT_CS TFT_CS19,593
#define TFT_DC TFT_DC20,648
#define TFT_RST TFT_RST21,701
#define LOAD_GLCD LOAD_GLCD25,888
#define LOAD_FONT2 LOAD_FONT226,977
#define LOAD_FONT4 LOAD_FONT427,1076
#define LOAD_FONT6 LOAD_FONT628,1176
#define LOAD_FONT7 LOAD_FONT729,1289
#define LOAD_FONT8 LOAD_FONT830,1402
#define LOAD_GFXFF LOAD_GFXFF32,1624
#define SMOOTH_FONTSMOOTH_FONT35,1738
#define SPI_FREQUENCY SPI_FREQUENCY39,1795
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY41,1828

lib/TFT_eSPI/User_Setups/Setup14_ILI9341_Parallel.h,793
#define TFT_PARALLEL_8_BITTFT_PARALLEL_8_BIT3,52
#define ILI9341_DRIVERILI9341_DRIVER6,81
#define TFT_CS TFT_CS10,156
#define TFT_DC TFT_DC11,204
#define TFT_RST TFT_RST12,288
#define TFT_WR TFT_WR14,323
#define TFT_RD TFT_RD15,407
#define TFT_D0 TFT_D017,428
#define TFT_D1 TFT_D118,501
#define TFT_D2 TFT_D219,573
#define TFT_D3 TFT_D320,593
#define TFT_D4 TFT_D421,613
#define TFT_D5 TFT_D522,633
#define TFT_D6 TFT_D623,653
#define TFT_D7 TFT_D724,673
#define LOAD_GLCD LOAD_GLCD27,695
#define LOAD_FONT2 LOAD_FONT228,784
#define LOAD_FONT4 LOAD_FONT429,883
#define LOAD_FONT6 LOAD_FONT630,983
#define LOAD_FONT7 LOAD_FONT731,1096
#define LOAD_FONT8 LOAD_FONT832,1209
#define LOAD_GFXFF LOAD_GFXFF33,1318
#define SMOOTH_FONTSMOOTH_FONT35,1431

lib/TFT_eSPI/User_Setups/Setup17_ePaper.h,347
#define EPD_DRIVER EPD_DRIVER3,52
#define LOAD_GLCD LOAD_GLCD32,1492
#define LOAD_FONT2 LOAD_FONT233,1581
#define LOAD_FONT4 LOAD_FONT434,1680
#define LOAD_FONT6 LOAD_FONT635,1780
#define LOAD_FONT7 LOAD_FONT736,1893
#define LOAD_FONT8 LOAD_FONT837,2007
#define LOAD_GFXFF LOAD_GFXFF38,2116
#define SMOOTH_FONTSMOOTH_FONT40,2229

lib/TFT_eSPI/User_Setups/Setup16_ILI9488_Parallel.h,785
#define ESP32_PARALLELESP32_PARALLEL3,52
#define ILI9488_DRIVERILI9488_DRIVER6,77
#define TFT_CS TFT_CS10,121
#define TFT_DC TFT_DC11,169
#define TFT_RST TFT_RST12,253
#define TFT_WR TFT_WR14,288
#define TFT_RD TFT_RD15,372
#define TFT_D0 TFT_D017,393
#define TFT_D1 TFT_D118,466
#define TFT_D2 TFT_D219,538
#define TFT_D3 TFT_D320,558
#define TFT_D4 TFT_D421,578
#define TFT_D5 TFT_D522,598
#define TFT_D6 TFT_D623,618
#define TFT_D7 TFT_D724,638
#define LOAD_GLCD LOAD_GLCD27,660
#define LOAD_FONT2 LOAD_FONT228,749
#define LOAD_FONT4 LOAD_FONT429,848
#define LOAD_FONT6 LOAD_FONT630,948
#define LOAD_FONT7 LOAD_FONT731,1061
#define LOAD_FONT8 LOAD_FONT832,1174
#define LOAD_GFXFF LOAD_GFXFF33,1283
#define SMOOTH_FONTSMOOTH_FONT35,1396

lib/TFT_eSPI/User_Setups/Setup33_RPi_ILI9486_STM32.h,630
#define STM32STM3217,673
#define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE20,721
#define ILI9486_DRIVERILI9486_DRIVER21,746
#define TFT_CS TFT_CS29,1096
#define TFT_DC TFT_DC30,1153
#define TFT_RST TFT_RST31,1250
#define LOAD_GLCD LOAD_GLCD45,1878
#define LOAD_FONT2 LOAD_FONT246,1967
#define LOAD_FONT4 LOAD_FONT447,2066
#define LOAD_FONT6 LOAD_FONT648,2166
#define LOAD_FONT7 LOAD_FONT749,2279
#define LOAD_FONT8 LOAD_FONT850,2393
#define LOAD_GFXFF LOAD_GFXFF51,2502
#define SMOOTH_FONTSMOOTH_FONT54,2683
#define SPI_FREQUENCY SPI_FREQUENCY59,2780
#define SUPPORT_TRANSACTIONSSUPPORT_TRANSACTIONS67,3183

lib/TFT_eSPI/User_Setups/Setup4_S6D02A1.h,539
#define S6D02A1_DRIVERS6D02A1_DRIVER3,52
#define TFT_CS TFT_CS7,169
#define TFT_DC TFT_DC8,224
#define TFT_RST TFT_RST9,277
#define LOAD_GLCD LOAD_GLCD13,464
#define LOAD_FONT2 LOAD_FONT214,553
#define LOAD_FONT4 LOAD_FONT415,652
#define LOAD_FONT6 LOAD_FONT616,752
#define LOAD_FONT7 LOAD_FONT717,865
#define LOAD_FONT8 LOAD_FONT818,978
#define LOAD_GFXFF LOAD_GFXFF20,1200
#define SMOOTH_FONTSMOOTH_FONT22,1313
#define SPI_FREQUENCY SPI_FREQUENCY26,1370
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY29,1438

lib/TFT_eSPI/User_Setups/Setup21_ILI9488.h,696
#define ILI9488_DRIVERILI9488_DRIVER3,52
#define TFT_MISO TFT_MISO7,105
#define TFT_MOSI TFT_MOSI8,189
#define TFT_SCLK TFT_SCLK9,209
#define TFT_CS TFT_CS10,229
#define TFT_DC TFT_DC11,278
#define TFT_RST TFT_RST12,327
#define LOAD_GLCD LOAD_GLCD15,390
#define LOAD_FONT2 LOAD_FONT216,479
#define LOAD_FONT4 LOAD_FONT417,578
#define LOAD_FONT6 LOAD_FONT618,678
#define LOAD_FONT7 LOAD_FONT719,791
#define LOAD_FONT8 LOAD_FONT820,904
#define LOAD_GFXFF LOAD_GFXFF21,1013
#define SMOOTH_FONTSMOOTH_FONT23,1126
#define SPI_FREQUENCY SPI_FREQUENCY27,1183
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY32,1336
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY34,1374

lib/TFT_eSPI/User_Setups/Setup5_RPi_ILI9486.h,549
#define RPI_ILI9486_DRIVER RPI_ILI9486_DRIVER3,52
#define TFT_CS TFT_CS7,194
#define TFT_DC TFT_DC8,249
#define TFT_RST TFT_RST9,302
#define LOAD_GLCD LOAD_GLCD13,491
#define LOAD_FONT2 LOAD_FONT214,580
#define LOAD_FONT4 LOAD_FONT415,679
#define LOAD_FONT6 LOAD_FONT616,779
#define LOAD_FONT7 LOAD_FONT717,892
#define LOAD_FONT8 LOAD_FONT818,1005
#define LOAD_GFXFF LOAD_GFXFF19,1114
#define SMOOTH_FONTSMOOTH_FONT21,1227
#define SPI_FREQUENCY SPI_FREQUENCY24,1249
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY26,1282

lib/TFT_eSPI/User_Setups/Setup28_RPi_ST7796_ESP8266.h,697
#define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE17,754
#define ST7796_DRIVERST7796_DRIVER20,806
#define TFT_CS TFT_CS35,1387
#define TFT_DC TFT_DC36,1442
#define TFT_RST TFT_RST37,1495
#define TOUCH_CS TOUCH_CS40,1681
#define LOAD_GLCD LOAD_GLCD60,2504
#define LOAD_FONT2 LOAD_FONT261,2593
#define LOAD_FONT4 LOAD_FONT462,2692
#define LOAD_FONT6 LOAD_FONT663,2792
#define LOAD_FONT7 LOAD_FONT764,2905
#define LOAD_FONT8 LOAD_FONT865,3018
#define LOAD_GFXFF LOAD_GFXFF67,3240
#define SMOOTH_FONTSMOOTH_FONT71,3490
   #define SPI_FREQUENCY SPI_FREQUENCY91,4200
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY93,4236
#define SUPPORT_TRANSACTIONSSUPPORT_TRANSACTIONS105,4789

lib/TFT_eSPI/User_Setups/Setup30_ILI9341_Parallel_STM32.h,879
#define STM32STM328,298
#define NUCLEO_64_TFTNUCLEO_64_TFT12,430
#define TFT_PARALLEL_8_BITTFT_PARALLEL_8_BIT16,552
#define ILI9341_DRIVERILI9341_DRIVER19,619
#define TFT_CS TFT_CS25,834
#define TFT_DC TFT_DC26,882
#define TFT_RST TFT_RST27,931
#define TFT_WR TFT_WR29,966
#define TFT_RD TFT_RD30,1016
#define TFT_D0 TFT_D032,1050
#define TFT_D1 TFT_D133,1100
#define TFT_D2 TFT_D234,1120
#define TFT_D3 TFT_D335,1140
#define TFT_D4 TFT_D436,1160
#define TFT_D5 TFT_D537,1180
#define TFT_D6 TFT_D638,1200
#define TFT_D7 TFT_D739,1220
#define LOAD_GLCD LOAD_GLCD42,1266
#define LOAD_FONT2 LOAD_FONT243,1355
#define LOAD_FONT4 LOAD_FONT444,1454
#define LOAD_FONT6 LOAD_FONT645,1554
#define LOAD_FONT7 LOAD_FONT746,1667
#define LOAD_FONT8 LOAD_FONT847,1780
#define LOAD_GFXFF LOAD_GFXFF48,1889
#define SMOOTH_FONTSMOOTH_FONT51,2070

lib/TFT_eSPI/User_Setups/Setup46_GC9A01_ESP32.h,685
#define GC9A01_DRIVERGC9A01_DRIVER1,0
#define TFT_MISO TFT_MISO3,23
#define TFT_MOSI TFT_MOSI4,43
#define TFT_SCLK TFT_SCLK5,63
#define TFT_CS TFT_CS6,83
#define TFT_DC TFT_DC7,132
#define TFT_RST TFT_RST8,181
#define LOAD_GLCD LOAD_GLCD11,336
#define LOAD_FONT2 LOAD_FONT212,425
#define LOAD_FONT4 LOAD_FONT413,524
#define LOAD_FONT6 LOAD_FONT614,624
#define LOAD_FONT7 LOAD_FONT715,737
#define LOAD_FONT8 LOAD_FONT816,850
#define LOAD_GFXFF LOAD_GFXFF17,959
#define SMOOTH_FONTSMOOTH_FONT18,1071
#define SPI_FREQUENCY SPI_FREQUENCY20,1092
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY22,1125
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY24,1163

lib/TFT_eSPI/User_Setups/Setup19_RM68140_Parallel.h,785
#define ESP32_PARALLELESP32_PARALLEL3,52
#define RM68140_DRIVERRM68140_DRIVER6,77
#define TFT_CS TFT_CS10,142
#define TFT_DC TFT_DC11,190
#define TFT_RST TFT_RST12,274
#define TFT_WR TFT_WR14,309
#define TFT_RD TFT_RD15,393
#define TFT_D0 TFT_D017,414
#define TFT_D1 TFT_D118,487
#define TFT_D2 TFT_D219,559
#define TFT_D3 TFT_D320,579
#define TFT_D4 TFT_D421,599
#define TFT_D5 TFT_D522,619
#define TFT_D6 TFT_D623,639
#define TFT_D7 TFT_D724,659
#define LOAD_GLCD LOAD_GLCD27,681
#define LOAD_FONT2 LOAD_FONT228,770
#define LOAD_FONT4 LOAD_FONT429,869
#define LOAD_FONT6 LOAD_FONT630,969
#define LOAD_FONT7 LOAD_FONT731,1082
#define LOAD_FONT8 LOAD_FONT832,1195
#define LOAD_GFXFF LOAD_GFXFF33,1304
#define SMOOTH_FONTSMOOTH_FONT35,1417

lib/TFT_eSPI/User_Setups/Setup26_TTGO_T_Wristband.h,791
#define ST7735_DRIVERST7735_DRIVER1,0
#define TFT_WIDTH TFT_WIDTH3,23
#define TFT_HEIGHT TFT_HEIGHT4,45
#define TFT_RST TFT_RST7,70
#define TFT_MISO TFT_MISO8,181
#define TFT_MOSI TFT_MOSI9,212
#define TFT_SCLK TFT_SCLK10,243
#define TFT_CS TFT_CS11,274
#define TFT_DC TFT_DC12,304
#define TFT_BL TFT_BL13,335
#define TFT_BACKLIGHT_ON TFT_BACKLIGHT_ON15,401
#define ST7735_GREENTAB160x80 ST7735_GREENTAB160x8017,460
#define LOAD_GLCD LOAD_GLCD19,542
#define LOAD_FONT2 LOAD_FONT220,631
#define LOAD_FONT4 LOAD_FONT421,730
#define LOAD_FONT6 LOAD_FONT622,830
#define LOAD_FONT7 LOAD_FONT723,943
#define LOAD_FONT8 LOAD_FONT824,1056
#define LOAD_GFXFF LOAD_GFXFF26,1278
#define SMOOTH_FONTSMOOTH_FONT30,1528
#define SPI_FREQUENCY SPI_FREQUENCY32,1549

lib/TFT_eSPI/User_Setups/Setup24_ST7789.h,776
#define ST7789_DRIVER ST7789_DRIVER3,54
#define TFT_WIDTH TFT_WIDTH5,108
#define TFT_HEIGHT TFT_HEIGHT6,131
#define TFT_MISO TFT_MISO21,473
#define TFT_MOSI TFT_MOSI22,493
#define TFT_SCLK TFT_SCLK23,513
#define TFT_CS TFT_CS24,533
#define TFT_DC TFT_DC25,571
#define TFT_RST TFT_RST26,591
#define LOAD_GLCD LOAD_GLCD35,1058
#define LOAD_FONT2 LOAD_FONT236,1147
#define LOAD_FONT4 LOAD_FONT437,1246
#define LOAD_FONT6 LOAD_FONT638,1346
#define LOAD_FONT7 LOAD_FONT739,1459
#define LOAD_FONT8 LOAD_FONT840,1572
#define LOAD_GFXFF LOAD_GFXFF42,1794
#define SMOOTH_FONTSMOOTH_FONT44,1907
#define SPI_FREQUENCY SPI_FREQUENCY48,1964
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY50,1997
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY52,2035

lib/TFT_eSPI/User_Setups/Setup35_ILI9341_STM32_Port_Bus.h,1045
#define STM32STM328,298
#define STM_PORTA_DATA_BUSSTM_PORTA_DATA_BUS12,442
#define TFT_PARALLEL_8_BITTFT_PARALLEL_8_BIT16,627
#define ILI9341_DRIVERILI9341_DRIVER19,700
#define TFT_CS TFT_CS25,823
#define TFT_DC TFT_DC26,870
#define TFT_RST TFT_RST27,918
#define TFT_WR TFT_WR28,951
#define TFT_RD TFT_RD29,999
#define TFT_D0 TFT_D031,1032
#define TFT_D1 TFT_D132,1087
#define TFT_D2 TFT_D233,1106
#define TFT_D3 TFT_D334,1125
#define TFT_D4 TFT_D435,1144
#define TFT_D5 TFT_D536,1163
#define TFT_D6 TFT_D637,1182
#define TFT_D7 TFT_D738,1201
#define LOAD_GLCD LOAD_GLCD40,1221
#define LOAD_FONT2 LOAD_FONT241,1310
#define LOAD_FONT4 LOAD_FONT442,1409
#define LOAD_FONT6 LOAD_FONT643,1509
#define LOAD_FONT7 LOAD_FONT744,1622
#define LOAD_FONT8 LOAD_FONT845,1736
#define LOAD_GFXFF LOAD_GFXFF46,1845
#define SMOOTH_FONTSMOOTH_FONT49,2026
#define SPI_FREQUENCY SPI_FREQUENCY52,2089
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY55,2198
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY57,2269

lib/TFT_eSPI/User_Setups/Setup45_TTGO_T_Watch.h,615
#define ST7789_DRIVERST7789_DRIVER1,0
#define TFT_WIDTH TFT_WIDTH3,23
#define TFT_HEIGHT TFT_HEIGHT4,46
#define TFT_MISO TFT_MISO6,70
#define TFT_MOSI TFT_MOSI7,101
#define TFT_SCLK TFT_SCLK8,132
#define TFT_CS TFT_CS9,163
#define TFT_DC TFT_DC10,193
#define LOAD_GLCD LOAD_GLCD12,225
#define LOAD_FONT2 LOAD_FONT213,314
#define LOAD_FONT4 LOAD_FONT414,413
#define LOAD_FONT6 LOAD_FONT615,513
#define LOAD_FONT7 LOAD_FONT716,626
#define LOAD_FONT8 LOAD_FONT817,739
#define LOAD_GFXFF LOAD_GFXFF18,848
#define SMOOTH_FONTSMOOTH_FONT19,960
#define SPI_FREQUENCY SPI_FREQUENCY26,1194

lib/TFT_eSPI/User_Setups/Setup50_SSD1963_Parallel.h,873
#define TFT_PARALLEL_8_BITTFT_PARALLEL_8_BIT17,740
#define SSD1963_800BD_DRIVER SSD1963_800BD_DRIVER23,1003
#define TFT_RGB_ORDER TFT_RGB_ORDER26,1230
#define TFT_CS TFT_CS35,1570
#define TFT_DC TFT_DC36,1618
#define TFT_RST TFT_RST37,1702
#define TFT_WR TFT_WR39,1737
#define TFT_RD TFT_RD40,1821
#define TFT_D0 TFT_D042,1842
#define TFT_D1 TFT_D143,1915
#define TFT_D2 TFT_D244,1987
#define TFT_D3 TFT_D345,2007
#define TFT_D4 TFT_D446,2027
#define TFT_D5 TFT_D547,2047
#define TFT_D6 TFT_D648,2067
#define TFT_D7 TFT_D749,2087
#define LOAD_GLCD LOAD_GLCD69,2905
#define LOAD_FONT2 LOAD_FONT270,2994
#define LOAD_FONT4 LOAD_FONT471,3093
#define LOAD_FONT6 LOAD_FONT672,3193
#define LOAD_FONT7 LOAD_FONT773,3306
#define LOAD_FONT8 LOAD_FONT874,3419
#define LOAD_GFXFF LOAD_GFXFF76,3641
#define SMOOTH_FONTSMOOTH_FONT80,3891

lib/TFT_eSPI/User_Setups/Setup29_ILI9341_STM32.h,728
#define STM32STM3216,586
#define ILI9341_DRIVERILI9341_DRIVER19,634
#define TFT_CS TFT_CS57,1685
#define TFT_DC TFT_DC58,1742
#define TFT_RST TFT_RST59,1839
#define TOUCH_CS TOUCH_CS71,2444
#define LOAD_GLCD LOAD_GLCD73,2465
#define LOAD_FONT2 LOAD_FONT274,2554
#define LOAD_FONT4 LOAD_FONT475,2653
#define LOAD_FONT6 LOAD_FONT676,2753
#define LOAD_FONT7 LOAD_FONT777,2866
#define LOAD_FONT8 LOAD_FONT878,2980
#define LOAD_GFXFF LOAD_GFXFF79,3089
#define SMOOTH_FONTSMOOTH_FONT82,3270
#define SPI_FREQUENCY SPI_FREQUENCY87,3367
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY90,3519
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY92,3635
#define SUPPORT_TRANSACTIONSSUPPORT_TRANSACTIONS95,3766

lib/TFT_eSPI/User_Setups/Setup27_RPi_ST7796_ESP32.h,747
#define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE17,754
#define ST7796_DRIVERST7796_DRIVER20,806
#define TFT_MISO TFT_MISO32,1262
#define TFT_MOSI TFT_MOSI33,1282
#define TFT_SCLK TFT_SCLK34,1302
#define TFT_CS TFT_CS35,1322
#define TFT_DC TFT_DC36,1371
#define TFT_RST TFT_RST37,1421
#define TOUCH_CS TOUCH_CS40,1576
#define LOAD_GLCD LOAD_GLCD60,2395
#define LOAD_FONT2 LOAD_FONT261,2484
#define LOAD_FONT4 LOAD_FONT462,2583
#define LOAD_FONT6 LOAD_FONT663,2683
#define LOAD_FONT7 LOAD_FONT764,2796
#define LOAD_FONT8 LOAD_FONT865,2909
#define LOAD_GFXFF LOAD_GFXFF67,3131
#define SMOOTH_FONTSMOOTH_FONT71,3381
   #define SPI_FREQUENCY SPI_FREQUENCY92,4126
   #define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY100,4462

lib/TFT_eSPI/User_Setups/Setup8_ILI9163_128x128.h,614
#define ILI9163_DRIVERILI9163_DRIVER3,52
#define TFT_WIDTH TFT_WIDTH6,77
#define TFT_HEIGHT TFT_HEIGHT7,100
#define TFT_CS TFT_CS11,217
#define TFT_DC TFT_DC12,272
#define TFT_RST TFT_RST13,325
#define LOAD_GLCD LOAD_GLCD17,512
#define LOAD_FONT2 LOAD_FONT218,601
#define LOAD_FONT4 LOAD_FONT419,700
#define LOAD_FONT6 LOAD_FONT620,800
#define LOAD_FONT7 LOAD_FONT721,913
#define LOAD_FONT8 LOAD_FONT822,1026
#define LOAD_GFXFF LOAD_GFXFF24,1248
#define SMOOTH_FONTSMOOTH_FONT26,1361
#define SPI_FREQUENCY SPI_FREQUENCY30,1418
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY32,1490

lib/TFT_eSPI/User_Setups/Setup23_TTGO_TM.h,883
#define ST7789_DRIVERST7789_DRIVER5,124
#define TFT_SDA_READ TFT_SDA_READ7,147
#define TFT_MISO TFT_MISO9,219
#define TFT_MOSI TFT_MOSI10,286
#define TFT_SCLK TFT_SCLK11,340
#define TFT_CS TFT_CS13,361
#define TFT_DC TFT_DC14,381
#define TFT_RST TFT_RST15,401
#define TFT_WIDTH TFT_WIDTH17,422
#define TFT_HEIGHT TFT_HEIGHT18,445
#define TFT_RGB_ORDER TFT_RGB_ORDER21,533
#define TFT_INVERSION_OFFTFT_INVERSION_OFF25,653
#define LOAD_GLCDLOAD_GLCD27,680
#define LOAD_FONT2LOAD_FONT228,698
#define LOAD_FONT4LOAD_FONT429,717
#define LOAD_FONT6LOAD_FONT630,736
#define LOAD_FONT7LOAD_FONT731,755
#define LOAD_FONT8LOAD_FONT832,774
#define LOAD_GFXFFLOAD_GFXFF33,793
#define SMOOTH_FONTSMOOTH_FONT35,813
#define SPI_FREQUENCY SPI_FREQUENCY37,834
#define SPI_FREQUENCY SPI_FREQUENCY38,923
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY40,956

lib/TFT_eSPI/User_Setups/Setup20_ILI9488.h,539
#define ILI9488_DRIVERILI9488_DRIVER3,52
#define TFT_CS TFT_CS7,169
#define TFT_DC TFT_DC8,224
#define TFT_RST TFT_RST9,277
#define LOAD_GLCD LOAD_GLCD13,464
#define LOAD_FONT2 LOAD_FONT214,553
#define LOAD_FONT4 LOAD_FONT415,652
#define LOAD_FONT6 LOAD_FONT616,752
#define LOAD_FONT7 LOAD_FONT717,865
#define LOAD_FONT8 LOAD_FONT818,978
#define LOAD_GFXFF LOAD_GFXFF19,1087
#define SMOOTH_FONTSMOOTH_FONT21,1200
#define SPI_FREQUENCY SPI_FREQUENCY25,1257
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY29,1326

lib/TFT_eSPI/User_Setups/Setup15_HX8357D.h,539
#define HX8357D_DRIVERHX8357D_DRIVER3,52
#define TFT_CS TFT_CS7,169
#define TFT_DC TFT_DC8,224
#define TFT_RST TFT_RST9,277
#define LOAD_GLCD LOAD_GLCD13,464
#define LOAD_FONT2 LOAD_FONT214,553
#define LOAD_FONT4 LOAD_FONT415,652
#define LOAD_FONT6 LOAD_FONT616,752
#define LOAD_FONT7 LOAD_FONT717,865
#define LOAD_FONT8 LOAD_FONT818,978
#define LOAD_GFXFF LOAD_GFXFF19,1087
#define SMOOTH_FONTSMOOTH_FONT21,1200
#define SPI_FREQUENCY SPI_FREQUENCY25,1257
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY28,1325

lib/TFT_eSPI/User_Setups/Setup44_TTGO_CameraPlus.h,647
#define ST7789_DRIVERST7789_DRIVER2,1
#define TFT_WIDTH TFT_WIDTH4,24
#define TFT_HEIGHT TFT_HEIGHT5,47
#define TFT_MOSI TFT_MOSI7,71
#define TFT_MISO TFT_MISO8,94
#define TFT_SCLK TFT_SCLK9,117
#define TFT_CS TFT_CS10,140
#define TFT_DC TFT_DC11,163
#define TFT_RST TFT_RST12,186
#define LOAD_GLCD LOAD_GLCD14,210
#define LOAD_FONT2 LOAD_FONT215,299
#define LOAD_FONT4 LOAD_FONT416,398
#define LOAD_FONT6 LOAD_FONT617,498
#define LOAD_FONT7 LOAD_FONT718,611
#define LOAD_FONT8 LOAD_FONT819,725
#define LOAD_GFXFF LOAD_GFXFF20,834
#define SMOOTH_FONTSMOOTH_FONT22,947
#define SPI_FREQUENCY SPI_FREQUENCY29,1181

lib/TFT_eSPI/User_Setups/Setup36_RPi_touch_ST7796.h,722
#define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE3,52
#define ST7796_DRIVER ST7796_DRIVER4,77
#define TFT_MISO TFT_MISO7,122
#define TFT_MOSI TFT_MOSI8,142
#define TFT_SCLK TFT_SCLK9,162
#define TFT_CS TFT_CS10,182
#define TFT_DC TFT_DC11,230
#define TFT_RST TFT_RST12,279
#define TOUCH_CS TOUCH_CS15,434
#define LOAD_GLCD LOAD_GLCD18,502
#define LOAD_FONT2 LOAD_FONT219,591
#define LOAD_FONT4 LOAD_FONT420,690
#define LOAD_FONT6 LOAD_FONT621,790
#define LOAD_FONT7 LOAD_FONT722,903
#define LOAD_FONT8 LOAD_FONT823,1016
#define LOAD_GFXFF LOAD_GFXFF24,1125
#define SMOOTH_FONTSMOOTH_FONT26,1238
#define SPI_FREQUENCY SPI_FREQUENCY29,1260
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY31,1293

lib/TFT_eSPI/User_Setups/Setup25_TTGO_T_Display.h,833
#define ST7789_DRIVERST7789_DRIVER5,136
#define TFT_SDA_READ TFT_SDA_READ6,158
#define TFT_WIDTH TFT_WIDTH8,221
#define TFT_HEIGHT TFT_HEIGHT9,244
#define CGRAM_OFFSET CGRAM_OFFSET11,268
#define TFT_MOSI TFT_MOSI15,355
#define TFT_SCLK TFT_SCLK16,386
#define TFT_CS TFT_CS17,417
#define TFT_DC TFT_DC18,447
#define TFT_RST TFT_RST19,478
#define TFT_BL TFT_BL21,510
#define TFT_BACKLIGHT_ON TFT_BACKLIGHT_ON23,571
#define LOAD_GLCDLOAD_GLCD25,630
#define LOAD_FONT2LOAD_FONT226,648
#define LOAD_FONT4LOAD_FONT427,667
#define LOAD_FONT6LOAD_FONT628,686
#define LOAD_FONT7LOAD_FONT729,705
#define LOAD_FONT8LOAD_FONT830,724
#define LOAD_GFXFFLOAD_GFXFF31,743
#define SMOOTH_FONTSMOOTH_FONT33,763
  #define SPI_FREQUENCY SPI_FREQUENCY36,818
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY39,879

lib/TFT_eSPI/User_Setups/Setup3_ILI9163.h,614
#define ILI9163_DRIVERILI9163_DRIVER3,52
#define TFT_WIDTH TFT_WIDTH6,77
#define TFT_HEIGHT TFT_HEIGHT7,100
#define TFT_CS TFT_CS11,217
#define TFT_DC TFT_DC12,272
#define TFT_RST TFT_RST13,325
#define LOAD_GLCD LOAD_GLCD17,512
#define LOAD_FONT2 LOAD_FONT218,601
#define LOAD_FONT4 LOAD_FONT419,700
#define LOAD_FONT6 LOAD_FONT620,800
#define LOAD_FONT7 LOAD_FONT721,913
#define LOAD_FONT8 LOAD_FONT822,1026
#define LOAD_GFXFF LOAD_GFXFF24,1248
#define SMOOTH_FONTSMOOTH_FONT26,1361
#define SPI_FREQUENCY SPI_FREQUENCY30,1418
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY33,1486

lib/TFT_eSPI/User_Setups/Setup135_ST7789.h,716
#define ST7789_DRIVER ST7789_DRIVER3,54
#define TFT_WIDTH TFT_WIDTH5,108
#define TFT_HEIGHT TFT_HEIGHT6,131
#define CGRAM_OFFSET CGRAM_OFFSET8,155
#define TFT_CS TFT_CS31,828
#define TFT_DC TFT_DC32,875
#define TFT_RST TFT_RST34,1018
#define LOAD_GLCD LOAD_GLCD37,1130
#define LOAD_FONT2 LOAD_FONT238,1219
#define LOAD_FONT4 LOAD_FONT439,1318
#define LOAD_FONT6 LOAD_FONT640,1418
#define LOAD_FONT7 LOAD_FONT741,1531
#define LOAD_FONT8 LOAD_FONT842,1644
#define LOAD_GFXFF LOAD_GFXFF44,1866
#define SMOOTH_FONTSMOOTH_FONT46,1979
#define SPI_FREQUENCY SPI_FREQUENCY50,2036
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY52,2069
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY54,2107

lib/TFT_eSPI/User_Setups/Setup1_ILI9341.h,592
#define ILI9341_DRIVERILI9341_DRIVER3,52
#define TFT_CS TFT_CS6,77
#define TFT_DC TFT_DC7,132
#define TFT_RST TFT_RST8,185
#define LOAD_GLCD LOAD_GLCD12,374
#define LOAD_FONT2 LOAD_FONT213,463
#define LOAD_FONT4 LOAD_FONT414,562
#define LOAD_FONT6 LOAD_FONT615,662
#define LOAD_FONT7 LOAD_FONT716,775
#define LOAD_FONT8 LOAD_FONT817,888
#define LOAD_GFXFF LOAD_GFXFF18,997
#define SMOOTH_FONTSMOOTH_FONT21,1111
#define SPI_FREQUENCY SPI_FREQUENCY25,1168
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY28,1236
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY30,1274

lib/TFT_eSPI/User_Setups/User_Custom_Fonts.h,0

lib/TFT_eSPI/User_Setups/Setup11_RPi_touch_ILI9486.h,722
#define RPI_DISPLAY_TYPERPI_DISPLAY_TYPE3,64
#define ILI9486_DRIVERILI9486_DRIVER4,89
#define TFT_MISO TFT_MISO6,113
#define TFT_MOSI TFT_MOSI7,133
#define TFT_SCLK TFT_SCLK8,153
#define TFT_CS TFT_CS9,173
#define TFT_DC TFT_DC10,221
#define TFT_RST TFT_RST11,270
#define TOUCH_CS TOUCH_CS14,425
#define LOAD_GLCD LOAD_GLCD17,493
#define LOAD_FONT2 LOAD_FONT218,582
#define LOAD_FONT4 LOAD_FONT419,681
#define LOAD_FONT6 LOAD_FONT620,781
#define LOAD_FONT7 LOAD_FONT721,894
#define LOAD_FONT8 LOAD_FONT822,1007
#define LOAD_GFXFF LOAD_GFXFF23,1116
#define SMOOTH_FONTSMOOTH_FONT25,1229
#define SPI_FREQUENCY SPI_FREQUENCY28,1251
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY30,1336

lib/TFT_eSPI/User_Setups/Setup9_ST7735_Overlap.h,708
#define ST7735_DRIVERST7735_DRIVER3,52
#define TFT_WIDTH TFT_WIDTH6,76
#define TFT_HEIGHT TFT_HEIGHT7,99
#define ST7735_REDTABST7735_REDTAB10,124
#define TFT_SPI_OVERLAPTFT_SPI_OVERLAP24,888
#define TFT_CS TFT_CS27,983
#define TFT_DC TFT_DC28,1007
#define TFT_RST TFT_RST29,1060
#define LOAD_GLCD LOAD_GLCD35,1249
#define LOAD_FONT2 LOAD_FONT236,1338
#define LOAD_FONT4 LOAD_FONT437,1437
#define LOAD_FONT6 LOAD_FONT638,1537
#define LOAD_FONT7 LOAD_FONT739,1650
#define LOAD_FONT8 LOAD_FONT840,1763
#define LOAD_GFXFF LOAD_GFXFF42,1985
#define SMOOTH_FONTSMOOTH_FONT44,2098
#define SPI_FREQUENCY SPI_FREQUENCY48,2155
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY50,2188

lib/TFT_eSPI/User_Setups/Setup2_ST7735.h,657
#define ST7735_DRIVERST7735_DRIVER3,52
#define TFT_WIDTH TFT_WIDTH6,76
#define TFT_HEIGHT TFT_HEIGHT7,99
#define ST7735_REDTABST7735_REDTAB10,124
#define TFT_CS TFT_CS19,563
#define TFT_DC TFT_DC20,618
#define TFT_RST TFT_RST21,671
#define LOAD_GLCD LOAD_GLCD25,860
#define LOAD_FONT2 LOAD_FONT226,949
#define LOAD_FONT4 LOAD_FONT427,1048
#define LOAD_FONT6 LOAD_FONT628,1148
#define LOAD_FONT7 LOAD_FONT729,1261
#define LOAD_FONT8 LOAD_FONT830,1374
#define LOAD_GFXFF LOAD_GFXFF32,1596
#define SMOOTH_FONTSMOOTH_FONT34,1709
#define SPI_FREQUENCY SPI_FREQUENCY38,1766
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY41,1834

lib/TFT_eSPI/User_Setup.h,634
#define ILI9341_DRIVERILI9341_DRIVER39,1550
#define TFT_CS TFT_CS157,7011
#define TFT_DC TFT_DC158,7066
#define TFT_RST TFT_RST159,7119
#define LOAD_GLCD LOAD_GLCD280,12572
#define LOAD_FONT2 LOAD_FONT2281,12661
#define LOAD_FONT4 LOAD_FONT4282,12760
#define LOAD_FONT6 LOAD_FONT6283,12860
#define LOAD_FONT7 LOAD_FONT7284,12973
#define LOAD_FONT8 LOAD_FONT8285,13087
#define LOAD_GFXFF LOAD_GFXFF287,13309
#define SMOOTH_FONTSMOOTH_FONT291,13559
#define SPI_FREQUENCY SPI_FREQUENCY310,14278
#define SPI_READ_FREQUENCY SPI_READ_FREQUENCY316,14509
#define SPI_TOUCH_FREQUENCY SPI_TOUCH_FREQUENCY319,14628

lib/TFT_eSPI/TFT_eSPI.cpp,11529
#define PI_CLIP PI_CLIP30,802
inline void TFT_eSPI::begin_tft_write(void){begin_tft_write54,2182
inline void TFT_eSPI::end_tft_write(void){end_tft_write73,2838
inline void TFT_eSPI::begin_tft_read(void){begin_tft_read93,3554
void TFT_eSPI::setViewport(int32_t x, int32_t y, int32_t w, int32_t h, bool vpDatum)setViewport114,4340
bool TFT_eSPI::checkViewport(int32_t x, int32_t y, int32_t w, int32_t h)checkViewport179,6906
void TFT_eSPI::resetViewport(void)resetViewport207,7706
int32_t  TFT_eSPI::getViewportX(void)getViewportX226,8263
int32_t  TFT_eSPI::getViewportY(void)getViewportY235,8608
int32_t TFT_eSPI::getViewportWidth(void)getViewportWidth244,8946
int32_t TFT_eSPI::getViewportHeight(void)getViewportHeight253,9289
bool  TFT_eSPI::getViewportDatum(void)getViewportDatum262,9662
void TFT_eSPI::frameViewport(uint16_t color, int32_t w)frameViewport271,10028
inline void TFT_eSPI::end_tft_read(void){end_tft_read325,11939
  void TFT_eSPI::spi_begin()       {begin_tft_write();}spi_begin352,12761
  void TFT_eSPI::spi_end()         {  end_tft_write();}spi_end353,12817
  void TFT_eSPI::spi_begin_read()  {begin_tft_read(); }spi_begin_read354,12873
  void TFT_eSPI::spi_end_read()    {  end_tft_read(); }spi_end_read355,12929
TFT_eSPI::TFT_eSPI(int16_t w, int16_t h)TFT_eSPI361,13273
void TFT_eSPI::begin(uint8_t tc)begin502,17088
void TFT_eSPI::init(uint8_t tc)init512,17470
void TFT_eSPI::setRotation(uint8_t m)setRotation680,21651
void TFT_eSPI::commandList (const uint8_t *addr)commandList752,23597
void TFT_eSPI::spiwrite(uint8_t c)spiwrite786,24705
void TFT_eSPI::writecommand(uint8_t c)writecommand798,25084
void TFT_eSPI::writedata(uint8_t d)writedata817,25487
uint8_t TFT_eSPI::readcommand8(uint8_t cmd_function, uint8_t index)readcommand8835,26015
uint16_t TFT_eSPI::readcommand16(uint8_t cmd_function, uint8_t index)readcommand16878,27095
uint32_t TFT_eSPI::readcommand32(uint8_t cmd_function, uint8_t index)readcommand32893,27621
uint16_t TFT_eSPI::readPixel(int32_t x0, int32_t y0)readPixel910,28320
void TFT_eSPI::setCallback(getColorCallback getCol)setCallback1030,31120
void TFT_eSPI::readRect(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t *data)readRect1040,31537
void TFT_eSPI::pushRect(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t *data)pushRect1189,35462
void TFT_eSPI::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t *data)pushImage1201,35938
void TFT_eSPI::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t *data, uint16_t transp)pushImage1231,36712
void TFT_eSPI::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, const uint16_t *data)pushImage1290,38062
void TFT_eSPI::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, const uint16_t *data, uint16_t transp)pushImage1320,38962
void TFT_eSPI::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, uint8_t *data, bool bpp8,  uint16_t *cmap)pushImage1377,40365
void TFT_eSPI::pushImage(int32_t x, int32_t y, int32_t w, int32_t h, uint8_t *data, uint8_t transp, bool bpp8, uint16_t *cmap)pushImage1510,43880
void TFT_eSPI::setSwapBytes(bool swap)setSwapBytes1712,48906
bool TFT_eSPI::getSwapBytes(void)getSwapBytes1722,49258
void  TFT_eSPI::readRectRGB(int32_t x0, int32_t y0, int32_t w, int32_t h, uint8_t *data)readRectRGB1733,49743
void TFT_eSPI::drawCircle(int32_t x0, int32_t y0, int32_t r, uint32_t color)drawCircle1807,51645
void TFT_eSPI::drawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)drawCircleHelper1859,53154
void TFT_eSPI::fillCircle(int32_t x0, int32_t y0, int32_t r, uint32_t color)fillCircle1901,54359
void TFT_eSPI::fillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)fillCircleHelper1941,55471
void TFT_eSPI::drawEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color)drawEllipse1973,56434
void TFT_eSPI::fillEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color)fillEllipse2025,58088
void TFT_eSPI::fillScreen(uint32_t color)fillScreen2070,59410
void TFT_eSPI::drawRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)drawRect2081,59788
void TFT_eSPI::drawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)drawRoundRect2102,60621
void TFT_eSPI::fillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)fillRoundRect2128,61849
void TFT_eSPI::drawTriangle(int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint32_t color)drawTriangle2150,62726
void TFT_eSPI::fillTriangle ( int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t x2, int32_t y2, uint32_t color)fillTriangle2169,63567
void TFT_eSPI::drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color)drawBitmap2249,65922
void TFT_eSPI::drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t fgcolor, uint16_t bgcolor)drawBitmap2273,66795
void TFT_eSPI::drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color)drawXBitmap2296,67734
void TFT_eSPI::drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, uint16_t bgcolor)drawXBitmap2320,68619
void TFT_eSPI::setCursor(int16_t x, int16_t y)setCursor2344,69537
void TFT_eSPI::setCursor(int16_t x, int16_t y, uint8_t font)setCursor2355,69908
int16_t TFT_eSPI::getCursorX(void)getCursorX2367,70302
int16_t TFT_eSPI::getCursorY(void)getCursorY2376,70637
void TFT_eSPI::setTextSize(uint8_t s)setTextSize2386,70972
void TFT_eSPI::setTextColor(uint16_t c)setTextColor2397,71478
void TFT_eSPI::setTextColor(uint16_t c, uint16_t b)setTextColor2409,71947
void TFT_eSPI::setPivot(int16_t x, int16_t y)setPivot2420,72317
int16_t TFT_eSPI::getPivotX(void)getPivotX2431,72668
int16_t TFT_eSPI::getPivotY(void)getPivotY2441,72995
void TFT_eSPI::setBitmapColor(uint16_t c, uint16_t b)setBitmapColor2451,73354
void TFT_eSPI::setTextWrap(bool wrapX, bool wrapY)setTextWrap2463,73758
void TFT_eSPI::setTextDatum(uint8_t d)setTextDatum2474,74142
void TFT_eSPI::setTextPadding(uint16_t x_width)setTextPadding2484,74510
uint16_t TFT_eSPI::getTextPadding(void)getTextPadding2493,74887
uint8_t TFT_eSPI::getRotation(void)getRotation2502,75246
uint8_t TFT_eSPI::getTextDatum(void)getTextDatum2511,75609
int16_t TFT_eSPI::width(void)width2522,76026
int16_t TFT_eSPI::height(void)height2533,76410
int16_t TFT_eSPI::textWidth(const String& string)textWidth2544,76797
int16_t TFT_eSPI::textWidth(const String& string, uint8_t font)textWidth2552,76982
int16_t TFT_eSPI::textWidth(const char *string)textWidth2560,77177
int16_t TFT_eSPI::textWidth(const char *string, uint8_t font)textWidth2565,77268
uint16_t TFT_eSPI::fontsLoaded(void)fontsLoaded2639,79747
int16_t TFT_eSPI::fontHeight(int16_t font)fontHeight2649,80111
int16_t TFT_eSPI::fontHeight(void)fontHeight2665,80428
void TFT_eSPI::drawChar(int32_t x, int32_t y, uint16_t c, uint32_t color, uint32_t bg, uint8_t size)drawChar2674,80792
void TFT_eSPI::setAddrWindow(int32_t x0, int32_t y0, int32_t w, int32_t h)setAddrWindow2825,85409
void TFT_eSPI::setWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)setWindow2840,85954
void TFT_eSPI::readAddrWindow(int32_t xs, int32_t ys, int32_t w, int32_t h)readAddrWindow2900,87425
void TFT_eSPI::drawPixel(int32_t x, int32_t y, uint32_t color)drawPixel2942,88490
void TFT_eSPI::pushColor(uint16_t color)pushColor3025,90502
void TFT_eSPI::pushColor(uint16_t color, uint32_t len)pushColor3039,90895
void TFT_eSPI::startWrite(void)startWrite3052,91323
void TFT_eSPI::endWrite(void)endWrite3062,91677
void TFT_eSPI::writeColor(uint16_t color, uint32_t len)writeColor3073,92183
void TFT_eSPI::pushColors(uint8_t *data, uint32_t len)pushColors3084,92664
void TFT_eSPI::pushColors(uint16_t *data, uint32_t len, bool swap)pushColors3098,93083
void TFT_eSPI::drawLine(int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t color)drawLine3116,93755
void TFT_eSPI::drawFastVLine(int32_t x, int32_t y, int32_t h, uint32_t color)drawFastVLine3183,95439
void TFT_eSPI::drawFastHLine(int32_t x, int32_t y, int32_t w, uint32_t color)drawFastHLine3213,96123
void TFT_eSPI::fillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)fillRect3243,96803
uint16_t TFT_eSPI::color565(uint8_t r, uint8_t g, uint8_t b)color5653284,98173
uint8_t TFT_eSPI::color16to8(uint16_t c)color16to83294,98599
uint16_t TFT_eSPI::color8to16(uint8_t color)color8to163304,99009
uint32_t TFT_eSPI::color16to24(uint16_t color565)color16to243321,99715
uint32_t TFT_eSPI::color24to16(uint32_t color888)color24to163334,100299
void TFT_eSPI::invertDisplay(bool i)invertDisplay3347,100802
void TFT_eSPI::setAttribute(uint8_t attr_id, uint8_t param) {setAttribute3361,101301
uint8_t TFT_eSPI::getAttribute(uint8_t attr_id) {getAttribute3389,102211
#define DECODE_UTF8 DECODE_UTF83409,102956
uint16_t TFT_eSPI::decodeUTF8(uint8_t c)decodeUTF83410,103019
uint16_t TFT_eSPI::decodeUTF8(uint8_t *buf, uint16_t *index, uint16_t remaining)decodeUTF83459,104268
uint16_t TFT_eSPI::alphaBlend(uint8_t alpha, uint16_t fgc, uint16_t bgc)alphaBlend3490,105261
uint16_t TFT_eSPI::alphaBlend(uint8_t alpha, uint16_t fgc, uint16_t bgc, uint8_t dither)alphaBlend3516,106492
uint32_t TFT_eSPI::alphaBlend24(uint8_t alpha, uint32_t fgc, uint32_t bgc, uint8_t dither)alphaBlend243532,107152
size_t TFT_eSPI::write(uint8_t utf8)write3564,108453
int16_t TFT_eSPI::drawChar(uint16_t uniCode, int32_t x, int32_t y)drawChar3693,112520
int16_t TFT_eSPI::drawChar(uint16_t uniCode, int32_t x, int32_t y, uint8_t font)drawChar3699,112699
int16_t TFT_eSPI::drawString(const String& string, int32_t poX, int32_t poY)drawString3977,121988
int16_t TFT_eSPI::drawString(const String& string, int32_t poX, int32_t poY, uint8_t font)drawString3985,122230
int16_t TFT_eSPI::drawString(const char *string, int32_t poX, int32_t poY)drawString3994,122518
int16_t TFT_eSPI::drawString(const char *string, int32_t poX, int32_t poY, uint8_t font)drawString4000,122728
int16_t TFT_eSPI::drawCentreString(const String& string, int32_t dX, int32_t poY, uint8_t font)drawCentreString4230,129374
int16_t TFT_eSPI::drawCentreString(const char *string, int32_t dX, int32_t poY, uint8_t font)drawCentreString4238,129617
int16_t TFT_eSPI::drawRightString(const String& string, int32_t dX, int32_t poY, uint8_t font)drawRightString4253,130195
int16_t TFT_eSPI::drawRightString(const char *string, int32_t dX, int32_t poY, uint8_t font)drawRightString4261,130436
int16_t TFT_eSPI::drawNumber(long long_num, int32_t poX, int32_t poY)drawNumber4276,130961
int16_t TFT_eSPI::drawNumber(long long_num, int32_t poX, int32_t poY, uint8_t font)drawNumber4284,131184
int16_t TFT_eSPI::drawFloat(float floatNumber, uint8_t dp, int32_t poX, int32_t poY)drawFloat4299,131867
int16_t TFT_eSPI::drawFloat(float floatNumber, uint8_t dp, int32_t poX, int32_t poY, uint8_t font)drawFloat4304,132014
void TFT_eSPI::setFreeFont(const GFXfont *f)setFreeFont4374,134588
void TFT_eSPI::setTextFont(uint8_t f)setTextFont4403,135547
void TFT_eSPI::setFreeFont(uint8_t font)setFreeFont4418,136024
void TFT_eSPI::setTextFont(uint8_t f)setTextFont4428,136372
SPIClass& TFT_eSPI::getSPIinstance(void)getSPIinstance4440,136792
void TFT_eSPI::getSetup(setup_t &tft_settings)getSetup4450,137157

lib/TFT_eSPI/Processors/TFT_eSPI_ESP32.h,5215
#define _TFT_eSPI_ESP32H__TFT_eSPI_ESP32H_6,210
#define PROCESSOR_ID PROCESSOR_ID9,276
  #define SUPPORT_TRANSACTIONSSUPPORT_TRANSACTIONS17,508
  #define SPI_PORT SPI_PORT22,605
  #define SPI_PORT SPI_PORT24,635
  #define CMD_BITS CMD_BITS28,691
  #define CMD_BITS CMD_BITS30,723
#define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS34,819
    #define TFT_PARALLEL_8_BIT TFT_PARALLEL_8_BIT39,1016
    #define ESP32_PARALLELESP32_PARALLEL46,1214
    #define SET_BUS_WRITE_MODE SET_BUS_WRITE_MODE53,1442
    #define SET_BUS_READ_MODE SET_BUS_READ_MODE54,1517
    #define SET_BUS_WRITE_MODE SET_BUS_WRITE_MODE56,1629
    #define SET_BUS_READ_MODE SET_BUS_READ_MODE57,1686
    #define SET_BUS_WRITE_MODESET_BUS_WRITE_MODE61,1825
    #define SET_BUS_READ_MODESET_BUS_READ_MODE62,1856
  #define ESP32_DMAESP32_DMA67,2053
  #define DMA_BUSY_CHECK DMA_BUSY_CHECK69,2159
  #define DMA_BUSY_CHECKDMA_BUSY_CHECK71,2201
  #define FS_NO_GLOBALSFS_NO_GLOBALS77,2396
  #define FONT_FS_AVAILABLEFONT_FS_AVAILABLE80,2474
  #define DC_C DC_C87,2777
  #define DC_D DC_D88,2838
      #define DC_C DC_C93,3063
      #define DC_D DC_D94,3112
      #define DC_CDC_C96,3171
      #define DC_DDC_D97,3190
        #define DC_C DC_C102,3322
        #define DC_D DC_D104,3451
        #define DC_C DC_C107,3592
        #define DC_D DC_D108,3699
          #define DC_C DC_C114,3975
          #define DC_D DC_D116,4084
          #define DC_C DC_C120,4265
          #define DC_D DC_D121,4318
        #define DC_C DC_C125,4454
        #define DC_D DC_D126,4537
      #define DC_CDC_C129,4643
      #define DC_DDC_D130,4662
  #define TFT_CS TFT_CS139,4952
  #define CS_L CS_L140,4996
  #define CS_H CS_H141,5063
        #define CS_L CS_L145,5192
        #define CS_H CS_H146,5255
        #define CS_L CS_L148,5340
        #define CS_H CS_H149,5391
      #define CS_LCS_L151,5452
      #define CS_HCS_H152,5471
        #define CS_L CS_L157,5603
        #define CS_H CS_H159,5732
        #define CS_L CS_L162,5873
        #define CS_H CS_H163,5979
        #define CS_L CS_L167,6194
        #define CS_H CS_H168,6276
        #define CS_L CS_L170,6370
        #define CS_H CS_H171,6452
      #define CS_LCS_L174,6558
      #define CS_HCS_H175,6577
    #define WR_L WR_L186,6970
    #define WR_H WR_H187,7017
    #define WR_LWR_L189,7072
    #define WR_HWR_H190,7089
  #define WR_LWR_L193,7121
  #define WR_HWR_H194,7136
  #define T_CS_L T_CS_L201,7408
  #define T_CS_H T_CS_H202,7471
  #define T_CS_L T_CS_L204,7592
  #define T_CS_H T_CS_H205,7637
      #define TFT_MISO TFT_MISO216,8030
      #undef TFT_MISOTFT_MISO219,8092
      #define TFT_MISO TFT_MISO220,8114
      #define TFT_MOSI TFT_MOSI224,8173
      #undef TFT_MOSITFT_MOSI227,8235
      #define TFT_MOSI TFT_MOSI228,8257
      #define TFT_SCLK TFT_SCLK232,8316
      #undef TFT_SCLKTFT_SCLK235,8378
      #define TFT_SCLK TFT_SCLK236,8400
      #define TFT_MISO TFT_MISO242,8481
      #undef TFT_MISOTFT_MISO245,8543
      #define TFT_MISO TFT_MISO246,8565
      #define TFT_MOSI TFT_MOSI250,8624
      #undef TFT_MOSITFT_MOSI253,8686
      #define TFT_MOSI TFT_MOSI254,8708
      #define TFT_SCLK TFT_SCLK258,8767
      #undef TFT_SCLKTFT_SCLK261,8829
      #define TFT_SCLK TFT_SCLK262,8851
  #define CONSTRUCTOR_INIT_TFT_DATA_BUS CONSTRUCTOR_INIT_TFT_DATA_BUS276,9360
  #define dir_mask dir_mask291,10102
  #define clr_mask clr_mask294,10313
  #define set_mask(set_mask297,10447
  #define tft_Write_8(tft_Write_8305,10966
    #define tft_Write_16(tft_Write_16310,11129
    #define tft_Write_16S(tft_Write_16S315,11532
    #define tft_Write_16(tft_Write_16320,11658
    #define tft_Write_16S(tft_Write_16S324,11915
  #define tft_Write_32(tft_Write_32329,12170
  #define tft_Write_32C(tft_Write_32C335,12653
  #define tft_Write_32D(tft_Write_32D341,13154
      #define RD_L RD_L349,13642
      #define RD_H RD_H350,13706
      #define RD_L RD_L352,13794
      #define RD_H RD_H354,13890
      #define RD_LRD_L357,13997
      #define RD_HRD_H358,14016
  #define tft_Write_8(tft_Write_8368,14382
  #define tft_Write_16(tft_Write_16371,14484
  #define tft_Write_16S(tft_Write_16S376,14739
  #define tft_Write_32(tft_Write_32381,14961
  #define tft_Write_32C(tft_Write_32C384,15053
  #define tft_Write_32D(tft_Write_32D387,15147
  #define TFT_WRITE_BITS(TFT_WRITE_BITS396,15586
  #define tft_Write_8(tft_Write_8403,15848
  #define tft_Write_16(tft_Write_16406,15964
  #define tft_Write_16S(tft_Write_16S409,16046
  #define tft_Write_32(tft_Write_32412,16115
  #define tft_Write_32C(tft_Write_32C415,16199
  #define tft_Write_32D(tft_Write_32D419,16359
  #define TFT_WRITE_BITS(TFT_WRITE_BITS428,16729
  #define tft_Write_8(tft_Write_8435,16991
  #define tft_Write_16(tft_Write_16438,17101
  #define tft_Write_16S(tft_Write_16S441,17183
  #define tft_Write_32(tft_Write_32444,17252
  #define tft_Write_32C(tft_Write_32C447,17336
  #define tft_Write_32D(tft_Write_32D450,17477
  #define tft_Read_8(tft_Read_8460,17942
#define DAT8TO32(DAT8TO32464,18060

lib/TFT_eSPI/Processors/TFT_eSPI_Generic.c,1010
SPIClass& spi = SPI;spi10,413
uint8_t TFT_eSPI::tft_Read_8(void)tft_Read_820,965
void TFT_eSPI::begin_SDA_Read(void)begin_SDA_Read38,1464
void TFT_eSPI::end_SDA_Read(void)end_SDA_Read48,1840
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len){pushBlock67,2746
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels77,3205
void TFT_eSPI::busDir(uint32_t mask, uint8_t mode)busDir94,3912
void TFT_eSPI::gpioMode(uint8_t gpio, uint8_t mode)gpioMode113,4603
uint8_t TFT_eSPI::readByte(void)readByte122,5015
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len){pushBlock152,6035
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len)pushPixels162,6467
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock178,7273
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels192,7841
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len){pushBlock222,8922
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels231,9307

lib/TFT_eSPI/Processors/TFT_eSPI_Generic.h,2055
#define _TFT_eSPI_GENERICH__TFT_eSPI_GENERICH_9,371
#define PROCESSOR_ID PROCESSOR_ID12,439
#define SET_BUS_WRITE_MODE SET_BUS_WRITE_MODE18,603
#define SET_BUS_READ_MODE SET_BUS_READ_MODE19,642
#define DMA_BUSY_CHECK DMA_BUSY_CHECK22,777
  #define SUPPORT_TRANSACTIONSSUPPORT_TRANSACTIONS26,921
#define INIT_TFT_DATA_BUSINIT_TFT_DATA_BUS30,1023
  #define DC_C DC_C43,1519
  #define DC_D DC_D44,1580
  #define DC_C DC_C46,1647
  #define DC_D DC_D47,1688
  #define CS_L CS_L54,1981
  #define CS_H CS_H55,2042
  #define CS_L CS_L57,2109
  #define CS_H CS_H58,2150
  #define TFT_RD TFT_RD65,2462
  #define WR_L WR_L72,2726
  #define WR_H WR_H73,2767
  #define T_CS_L T_CS_L80,3089
  #define T_CS_H T_CS_H81,3152
  #define T_CS_L T_CS_L83,3221
  #define T_CS_H T_CS_H84,3266
  #define TFT_MISO TFT_MISO91,3586
  #define tft_Write_8(tft_Write_8100,3940
  #define tft_Write_16(tft_Write_16103,4042
  #define tft_Write_16S(tft_Write_16S108,4297
  #define tft_Write_32(tft_Write_32112,4518
  #define tft_Write_32C(tft_Write_32C115,4636
  #define tft_Write_32D(tft_Write_32D118,4731
    #define tft_Write_8(tft_Write_8125,5124
    #define tft_Write_16(tft_Write_16126,5186
    #define tft_Write_16S(tft_Write_16S127,5279
    #define tft_Write_32(tft_Write_32129,5373
    #define tft_Write_32C(tft_Write_32C133,5488
    #define tft_Write_32D(tft_Write_32D139,5707
      #define tft_Write_8(tft_Write_8147,5997
      #define tft_Write_16(tft_Write_16148,6067
      #define tft_Write_16S(tft_Write_16S149,6160
      #define tft_Write_8(tft_Write_8151,6263
      #define tft_Write_16(tft_Write_16152,6310
      #define tft_Write_16S(tft_Write_16S153,6359
    #define tft_Write_32(tft_Write_32156,6449
    #define tft_Write_32C(tft_Write_32C160,6560
    #define tft_Write_32D(tft_Write_32D164,6663
  #define TFT_eSPI_ENABLE_8_BIT_READ TFT_eSPI_ENABLE_8_BIT_READ175,7135
  #define SCLK_L SCLK_L176,7200
  #define SCLK_H SCLK_H177,7245
  #define tft_Read_8(tft_Read_8180,7325

lib/TFT_eSPI/Processors/TFT_eSPI_ESP8266.h,2540
#define _TFT_eSPI_ESP8266H__TFT_eSPI_ESP8266H_6,218
#define PROCESSOR_ID PROCESSOR_ID9,286
#define SET_BUS_WRITE_MODE SET_BUS_WRITE_MODE15,450
#define SET_BUS_READ_MODE SET_BUS_READ_MODE16,495
#define DMA_BUSY_CHECK DMA_BUSY_CHECK19,636
  #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS23,816
    #define INIT_TFT_DATA_BUSINIT_TFT_DATA_BUS28,961
  #define FS_NO_GLOBALSFS_NO_GLOBALS34,1160
  #define FONT_FS_AVAILABLEFONT_FS_AVAILABLE36,1202
  #undef ESP32_PARALLELESP32_PARALLEL41,1302
  #undef TFT_PARALLEL_8_BITTFT_PARALLEL_8_BIT44,1359
  #define DC_C DC_C51,1662
  #define DC_D DC_D52,1723
    #define DC_C DC_C55,1811
    #define DC_D DC_D56,1854
    #define DC_C DC_C58,1906
    #define DC_D DC_D59,1938
  #define CS_L CS_L67,2230
  #define CS_H CS_H68,2291
    #define CS_L CS_L71,2379
    #define CS_H CS_H72,2422
    #define CS_L CS_L74,2474
    #define CS_H CS_H75,2506
  #define WR_L WR_L83,2791
  #define WR_H WR_H84,2821
  #define T_CS_L T_CS_L91,3108
  #define T_CS_H T_CS_H92,3171
  #define T_CS_L T_CS_L94,3240
  #define T_CS_H T_CS_H95,3285
  #define TFT_MISO TFT_MISO102,3605
  #undef TFT_CSTFT_CS109,3874
  #define SPI1U_WRITE SPI1U_WRITE110,3890
  #define SPI1U_READ SPI1U_READ111,3960
  #define SPI1U_WRITE SPI1U_WRITE113,4049
  #define SPI1U_READ SPI1U_READ114,4092
  #define tft_Write_8(tft_Write_8123,4480
  #define tft_Write_16(tft_Write_16126,4582
  #define tft_Write_16S(tft_Write_16S131,4837
  #define tft_Write_32(tft_Write_32136,5059
  #define tft_Write_32C(tft_Write_32C139,5137
  #define tft_Write_32D(tft_Write_32D142,5224
  #define CMD_BITS CMD_BITS149,5584
  #define TFT_WRITE_BITS(TFT_WRITE_BITS153,5710
  #define tft_Write_8(tft_Write_8159,5848
  #define tft_Write_16(tft_Write_16161,5921
  #define tft_Write_16S(tft_Write_16S163,5987
  #define tft_Write_32(tft_Write_32165,6039
  #define tft_Write_32C(tft_Write_32C167,6091
  #define tft_Write_32D(tft_Write_32D173,6377
  #define CMD_BITS CMD_BITS180,6668
  #define tft_Write_8(tft_Write_8182,6690
  #define tft_Write_16(tft_Write_16188,6877
  #define tft_Write_16S(tft_Write_16S194,7043
  #define tft_Write_32(tft_Write_32200,7194
  #define tft_Write_32C(tft_Write_32C206,7344
  #define tft_Write_32D(tft_Write_32D212,7537
  #define TFT_eSPI_ENABLE_8_BIT_READ TFT_eSPI_ENABLE_8_BIT_READ225,8073
  #define SCLK_L SCLK_L226,8138
  #define SCLK_H SCLK_H227,8172
  #define tft_Read_8(tft_Read_8230,8241
#define DAT8TO32(DAT8TO32234,8359

lib/TFT_eSPI/Processors/TFT_eSPI_ESP8266.c,1073
  SPIClass& spi = SPI;spi8,285
uint8_t   spiBuffer[8] = {0,0,0,0,0,0,0,0};spiBuffer11,377
uint8_t TFT_eSPI::tft_Read_8(void)tft_Read_821,958
void TFT_eSPI::begin_SDA_Read(void)begin_SDA_Read40,1477
void TFT_eSPI::end_SDA_Read(void)end_SDA_Read53,1894
uint8_t TFT_eSPI::readByte(void)readByte70,2552
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock84,3150
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels95,3665
void TFT_eSPI::pushSwapBytePixels(const void* data_in, uint32_t len){pushSwapBytePixels106,4219
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock119,4937
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels183,6291
void TFT_eSPI::pushSwapBytePixels(const void* data_in, uint32_t len){pushSwapBytePixels237,7956
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock258,8997
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels331,10600
void TFT_eSPI::pushSwapBytePixels(const void* data_in, uint32_t len){pushSwapBytePixels392,11980

lib/TFT_eSPI/Processors/TFT_eSPI_STM32.h,17667
#define _TFT_eSPI_STM32H__TFT_eSPI_STM32H_6,210
#define PROCESSOR_ID PROCESSOR_ID9,276
#define SET_BUS_WRITE_MODE SET_BUS_WRITE_MODE17,491
#define SET_BUS_READ_MODE SET_BUS_READ_MODE18,530
  #define SUPPORT_TRANSACTIONSSUPPORT_TRANSACTIONS22,653
      #define WR_TWRL_0 WR_TWRL_052,2097
      #define WR_TWRL_0 WR_TWRL_054,2229
      #define WR_TWRL_1 WR_TWRL_157,2423
      #define WR_TWRL_5WR_TWRL_559,2487
      #define WR_TWRH_0WR_TWRH_064,2634
      #define WR_TWRH_0 WR_TWRH_066,2711
      #define WR_TWRH_1 WR_TWRH_169,2822
      #define WR_TWRH_5WR_TWRH_571,2886
      #define WR_TWRL_0WR_TWRL_078,3074
      #define WR_TWRL_2 WR_TWRL_282,3299
      #define WR_TWRL_3WR_TWRL_390,3655
      #define WR_TWRH_3 WR_TWRH_395,3781
      #define WR_TWRH_0WR_TWRH_0100,3944
      #define WR_TWRH_2WR_TWRH_2104,4073
      #define WR_TWRH_3WR_TWRH_3110,4231
      #define WR_TWRH_3 WR_TWRH_3117,4410
      #define WR_TWRL_0WR_TWRL_0123,4601
      #define WR_TWRH_0WR_TWRH_0124,4625
      #define WR_TWRL_3WR_TWRL_3130,4796
      #define WR_TWRH_5WR_TWRH_5140,5088
    #define TFT_SPI_PORT TFT_SPI_PORT151,5418
    #define STM32_DMA STM32_DMA157,5627
      #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS161,5798
      #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS168,6189
    #define STM32_DMA STM32_DMA177,6575
      #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS179,6667
      #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS182,6819
      #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS188,7053
      #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS190,7138
  #define DMA_BUSY_CHECK DMA_BUSY_CHECK198,7325
  #define DMA_BUSY_CHECKDMA_BUSY_CHECK200,7395
  #define DC_C DC_C214,8001
  #define DC_D DC_D215,8062
  #undef  TFT_DCTFT_DC216,8123
  #define DC_PORT DC_PORT219,8226
  #define DC_PIN_MASK DC_PIN_MASK220,8273
  #define DC_C DC_C222,8355
  #define DC_D DC_D223,8402
  #define CS_L CS_L230,8719
  #define CS_H CS_H231,8780
  #undef  TFT_CSTFT_CS232,8841
  #define CS_PORT CS_PORT235,8944
  #define CS_PIN_MASK CS_PIN_MASK236,8992
  #define CS_L CS_L238,9075
  #define CS_H CS_H239,9122
    #define RD_PORT RD_PORT248,9510
    #define RD_PIN_MASK RD_PIN_MASK249,9560
    #define RD_L RD_L251,9647
    #define RD_H RD_H252,9696
    #define RD_LRD_L254,9749
    #define RD_HRD_H255,9766
  #define TFT_RD TFT_RD258,9798
  #define RD_LRD_L259,9818
  #define RD_HRD_H260,9833
  #define WR_PORT WR_PORT268,10172
  #define WR_PIN_MASK WR_PIN_MASK269,10220
  #define WR_L WR_L271,10303
  #define WR_H WR_H272,10350
  #define T_CS_L T_CS_L279,10675
  #define T_CS_H T_CS_H280,10738
  #define T_CS_L T_CS_L283,10851
  #define T_CS_H T_CS_H284,10896
    #define TFT_MISO TFT_MISO292,11252
  #define dir_mask dir_mask302,11625
  #define CONSTRUCTOR_INIT_TFT_DATA_BUS CONSTRUCTOR_INIT_TFT_DATA_BUS304,11647
  #define INIT_TFT_DATA_BUS INIT_TFT_DATA_BUS306,11696
    #define     WR_TWRLWR_TWRL313,12034
    #define     WR_TWRL WR_TWRL315,12106
    #define     WR_TWRL WR_TWRL317,12184
    #define     WR_TWRL WR_TWRL319,12268
    #define     WR_TWRL WR_TWRL321,12358
    #define     WR_TWRL WR_TWRL323,12454
    #define     WR_TWRH WR_TWRH328,12575
    #define     WR_TWRH WR_TWRH330,12653
    #define     WR_TWRH WR_TWRH332,12739
    #define     WR_TWRH WR_TWRH334,12831
    #define     WR_TWRH WR_TWRH336,12929
    #define     WR_TWRH WR_TWRH338,13033
  #define WR_STB WR_STB341,13103
    #define D0_PIN_NAME D0_PIN_NAME349,13480
    #define D1_PIN_NAME D1_PIN_NAME350,13533
    #define D2_PIN_NAME D2_PIN_NAME351,13586
    #define D3_PIN_NAME D3_PIN_NAME352,13639
    #define D4_PIN_NAME D4_PIN_NAME353,13692
    #define D5_PIN_NAME D5_PIN_NAME354,13745
    #define D6_PIN_NAME D6_PIN_NAME355,13798
    #define D7_PIN_NAME D7_PIN_NAME356,13851
    #define D0_PIN_BIT D0_PIN_BIT359,13959
    #define D1_PIN_BIT D1_PIN_BIT360,14003
    #define D2_PIN_BIT D2_PIN_BIT361,14047
    #define D3_PIN_BIT D3_PIN_BIT362,14091
    #define D4_PIN_BIT D4_PIN_BIT363,14135
    #define D5_PIN_BIT D5_PIN_BIT364,14179
    #define D6_PIN_BIT D6_PIN_BIT365,14223
    #define D7_PIN_BIT D7_PIN_BIT366,14267
    #define D0_PIN_PORT D0_PIN_PORT369,14384
    #define D1_PIN_PORT D1_PIN_PORT370,14414
    #define D2_PIN_PORT D2_PIN_PORT371,14444
    #define D3_PIN_PORT D3_PIN_PORT372,14474
    #define D4_PIN_PORT D4_PIN_PORT373,14504
    #define D5_PIN_PORT D5_PIN_PORT374,14534
    #define D6_PIN_PORT D6_PIN_PORT375,14564
    #define D7_PIN_PORT D7_PIN_PORT376,14594
    #define D0_PIN_MASK D0_PIN_MASK379,14656
    #define D1_PIN_MASK D1_PIN_MASK380,14716
    #define D2_PIN_MASK D2_PIN_MASK381,14776
    #define D3_PIN_MASK D3_PIN_MASK382,14837
    #define D4_PIN_MASK D4_PIN_MASK383,14897
    #define D5_PIN_MASK D5_PIN_MASK384,14957
    #define D6_PIN_MASK D6_PIN_MASK385,15017
    #define D7_PIN_MASK D7_PIN_MASK386,15078
    #define  D0_BSR_MASK(D0_BSR_MASK389,15200
    #define  D1_BSR_MASK(D1_BSR_MASK390,15266
    #define  D2_BSR_MASK(D2_BSR_MASK391,15332
    #define  D3_BSR_MASK(D3_BSR_MASK392,15398
    #define  D4_BSR_MASK(D4_BSR_MASK393,15464
    #define  D5_BSR_MASK(D5_BSR_MASK394,15530
    #define  D6_BSR_MASK(D6_BSR_MASK395,15596
    #define  D7_BSR_MASK(D7_BSR_MASK396,15662
    #define  D8_BSR_MASK(D8_BSR_MASK398,15792
    #define  D9_BSR_MASK(D9_BSR_MASK399,15858
    #define D10_BSR_MASK(D10_BSR_MASK400,15924
    #define D11_BSR_MASK(D11_BSR_MASK401,15990
    #define D12_BSR_MASK(D12_BSR_MASK402,16056
    #define D13_BSR_MASK(D13_BSR_MASK403,16122
    #define D14_BSR_MASK(D14_BSR_MASK404,16188
    #define D15_BSR_MASK(D15_BSR_MASK405,16254
    #define tft_Write_8(tft_Write_8408,16348
    #define tft_Write_16(tft_Write_16417,16794
    #define tft_Write_16S(tft_Write_16S435,18030
    #define tft_Write_16(tft_Write_16440,18157
    #define tft_Write_16S(tft_Write_16S452,18916
    #define tft_Write_32(tft_Write_32464,19617
    #define tft_Write_32C(tft_Write_32C466,19712
    #define tft_Write_32D(tft_Write_32D468,19801
    #define RD_TFT_D0 RD_TFT_D0471,19913
    #define RD_TFT_D1 RD_TFT_D1472,19990
    #define RD_TFT_D2 RD_TFT_D2473,20067
    #define RD_TFT_D3 RD_TFT_D3474,20145
    #define RD_TFT_D4 RD_TFT_D4475,20222
    #define RD_TFT_D5 RD_TFT_D5476,20299
    #define RD_TFT_D6 RD_TFT_D6477,20376
    #define RD_TFT_D7 RD_TFT_D7478,20454
    #define D0_PIN_NAME D0_PIN_NAME487,20904
    #define D1_PIN_NAME D1_PIN_NAME488,20957
    #define D2_PIN_NAME D2_PIN_NAME489,21010
    #define D3_PIN_NAME D3_PIN_NAME490,21063
    #define D4_PIN_NAME D4_PIN_NAME491,21116
    #define D5_PIN_NAME D5_PIN_NAME492,21169
    #define D6_PIN_NAME D6_PIN_NAME493,21222
    #define D7_PIN_NAME D7_PIN_NAME494,21275
    #define D0_PIN_BIT D0_PIN_BIT497,21401
    #define D1_PIN_BIT D1_PIN_BIT498,21445
    #define D2_PIN_BIT D2_PIN_BIT499,21489
    #define D3_PIN_BIT D3_PIN_BIT500,21533
    #define D4_PIN_BIT D4_PIN_BIT501,21577
    #define D5_PIN_BIT D5_PIN_BIT502,21621
    #define D6_PIN_BIT D6_PIN_BIT503,21665
    #define D7_PIN_BIT D7_PIN_BIT504,21709
      #define D0_PIN_PORT D0_PIN_PORT510,21859
      #define D1_PIN_PORT D1_PIN_PORT511,21891
      #define D2_PIN_PORT D2_PIN_PORT512,21923
      #define D3_PIN_PORT D3_PIN_PORT513,21955
      #define D4_PIN_PORT D4_PIN_PORT514,21987
      #define D5_PIN_PORT D5_PIN_PORT515,22019
      #define D6_PIN_PORT D6_PIN_PORT516,22051
      #define D7_PIN_PORT D7_PIN_PORT517,22083
      #define D0_PIN_MASK D0_PIN_MASK520,22149
      #define D1_PIN_MASK D1_PIN_MASK521,22216
      #define D2_PIN_MASK D2_PIN_MASK522,22279
      #define D3_PIN_MASK D3_PIN_MASK523,22347
      #define D4_PIN_MASK D4_PIN_MASK524,22410
      #define D5_PIN_MASK D5_PIN_MASK525,22473
      #define D6_PIN_MASK D6_PIN_MASK526,22536
      #define D7_PIN_MASK D7_PIN_MASK527,22598
      #define  D0_BSR_MASK(D0_BSR_MASK530,22730
      #define  D1_BSR_MASK(D1_BSR_MASK531,22798
      #define  D2_BSR_MASK(D2_BSR_MASK532,22866
      #define  D3_BSR_MASK(D3_BSR_MASK533,22934
      #define  D4_BSR_MASK(D4_BSR_MASK534,23002
      #define  D5_BSR_MASK(D5_BSR_MASK535,23070
      #define  D6_BSR_MASK(D6_BSR_MASK536,23138
      #define  D7_BSR_MASK(D7_BSR_MASK537,23206
      #define  D8_BSR_MASK(D8_BSR_MASK539,23340
      #define  D9_BSR_MASK(D9_BSR_MASK540,23408
      #define D10_BSR_MASK(D10_BSR_MASK541,23476
      #define D11_BSR_MASK(D11_BSR_MASK542,23544
      #define D12_BSR_MASK(D12_BSR_MASK543,23612
      #define D13_BSR_MASK(D13_BSR_MASK544,23680
      #define D14_BSR_MASK(D14_BSR_MASK545,23748
      #define D15_BSR_MASK(D15_BSR_MASK546,23816
      #define tft_Write_8(tft_Write_8550,23915
    #define tft_Write_16(tft_Write_16559,24343
    #define tft_Write_16S(tft_Write_16S577,25579
      #define tft_Write_16(tft_Write_16582,25707
      #define tft_Write_16S(tft_Write_16S594,26459
      #define tft_Write_32(tft_Write_32607,27181
      #define tft_Write_32C(tft_Write_32C609,27278
      #define tft_Write_32D(tft_Write_32D611,27369
      #define RD_TFT_D0 RD_TFT_D0614,27485
      #define RD_TFT_D1 RD_TFT_D1615,27565
      #define RD_TFT_D2 RD_TFT_D2616,27645
      #define RD_TFT_D3 RD_TFT_D3617,27725
      #define RD_TFT_D4 RD_TFT_D4618,27805
      #define RD_TFT_D5 RD_TFT_D5619,27885
      #define RD_TFT_D6 RD_TFT_D6620,27965
      #define RD_TFT_D7 RD_TFT_D7621,28044
      #define D0_PIN_PORT D0_PIN_PORT628,28304
      #define D1_PIN_PORT D1_PIN_PORT629,28336
      #define D2_PIN_PORT D2_PIN_PORT630,28368
      #define D3_PIN_PORT D3_PIN_PORT631,28400
      #define D4_PIN_PORT D4_PIN_PORT632,28432
      #define D5_PIN_PORT D5_PIN_PORT633,28464
      #define D6_PIN_PORT D6_PIN_PORT634,28496
      #define D7_PIN_PORT D7_PIN_PORT635,28528
      #define D0_PIN_MASK D0_PIN_MASK638,28594
      #define D1_PIN_MASK D1_PIN_MASK639,28656
      #define D2_PIN_MASK D2_PIN_MASK640,28719
      #define D3_PIN_MASK D3_PIN_MASK641,28782
      #define D4_PIN_MASK D4_PIN_MASK642,28845
      #define D5_PIN_MASK D5_PIN_MASK643,28908
      #define D6_PIN_MASK D6_PIN_MASK644,28971
      #define D7_PIN_MASK D7_PIN_MASK645,29033
      #define  D0_BSR_MASK(D0_BSR_MASK648,29160
      #define  D1_BSR_MASK(D1_BSR_MASK649,29228
      #define  D2_BSR_MASK(D2_BSR_MASK650,29296
      #define  D3_BSR_MASK(D3_BSR_MASK651,29364
      #define  D4_BSR_MASK(D4_BSR_MASK652,29432
      #define  D5_BSR_MASK(D5_BSR_MASK653,29500
      #define  D6_BSR_MASK(D6_BSR_MASK654,29568
      #define  D7_BSR_MASK(D7_BSR_MASK655,29636
      #define  D8_BSR_MASK(D8_BSR_MASK657,29770
      #define  D9_BSR_MASK(D9_BSR_MASK658,29838
      #define D10_BSR_MASK(D10_BSR_MASK659,29906
      #define D11_BSR_MASK(D11_BSR_MASK660,29974
      #define D12_BSR_MASK(D12_BSR_MASK661,30042
      #define D13_BSR_MASK(D13_BSR_MASK662,30110
      #define D14_BSR_MASK(D14_BSR_MASK663,30178
      #define D15_BSR_MASK(D15_BSR_MASK664,30246
      #define tft_Write_8(tft_Write_8668,30345
      #define tft_Write_16(tft_Write_16676,30773
      #define tft_Write_16S(tft_Write_16S690,31617
      #define tft_Write_32(tft_Write_32703,32421
      #define tft_Write_32C(tft_Write_32C705,32518
      #define tft_Write_32D(tft_Write_32D707,32609
      #define RD_TFT_D0 RD_TFT_D0710,32725
      #define RD_TFT_D1 RD_TFT_D1711,32804
      #define RD_TFT_D2 RD_TFT_D2712,32884
      #define RD_TFT_D3 RD_TFT_D3713,32964
      #define RD_TFT_D4 RD_TFT_D4714,33044
      #define RD_TFT_D5 RD_TFT_D5715,33124
      #define RD_TFT_D6 RD_TFT_D6716,33204
      #define RD_TFT_D7 RD_TFT_D7717,33283
      #define tft_Write_8(tft_Write_8727,33685
    #define tft_Write_16(tft_Write_16732,33849
    #define tft_Write_16S(tft_Write_16S738,34289
      #define tft_Write_16(tft_Write_16743,34417
      #define tft_Write_16S(tft_Write_16S747,34642
      #define tft_Write_32(tft_Write_32751,34835
      #define tft_Write_32C(tft_Write_32C753,34932
      #define tft_Write_32D(tft_Write_32D755,35023
      #define RD_TFT_D0 RD_TFT_D0758,35139
      #define RD_TFT_D1 RD_TFT_D1759,35204
      #define RD_TFT_D2 RD_TFT_D2760,35269
      #define RD_TFT_D3 RD_TFT_D3761,35334
      #define RD_TFT_D4 RD_TFT_D4762,35399
      #define RD_TFT_D5 RD_TFT_D5763,35464
      #define RD_TFT_D6 RD_TFT_D6764,35529
      #define RD_TFT_D7 RD_TFT_D7765,35594
      #define tft_Write_8(tft_Write_8770,35735
    #define tft_Write_16(tft_Write_16775,35899
    #define tft_Write_16S(tft_Write_16S781,36339
      #define tft_Write_16(tft_Write_16786,36467
      #define tft_Write_16S(tft_Write_16S790,36692
      #define tft_Write_32(tft_Write_32794,36885
      #define tft_Write_32C(tft_Write_32C796,36982
      #define tft_Write_32D(tft_Write_32D798,37073
      #define RD_TFT_D0 RD_TFT_D0801,37189
      #define RD_TFT_D1 RD_TFT_D1802,37254
      #define RD_TFT_D2 RD_TFT_D2803,37319
      #define RD_TFT_D3 RD_TFT_D3804,37384
      #define RD_TFT_D4 RD_TFT_D4805,37449
      #define RD_TFT_D5 RD_TFT_D5806,37514
      #define RD_TFT_D6 RD_TFT_D6807,37579
      #define RD_TFT_D7 RD_TFT_D7808,37644
      #define D0_PIN_NAME D0_PIN_NAME814,37891
      #define D1_PIN_NAME D1_PIN_NAME815,37946
      #define D2_PIN_NAME D2_PIN_NAME816,38001
      #define D3_PIN_NAME D3_PIN_NAME817,38056
      #define D4_PIN_NAME D4_PIN_NAME818,38111
      #define D5_PIN_NAME D5_PIN_NAME819,38166
      #define D6_PIN_NAME D6_PIN_NAME820,38221
      #define D7_PIN_NAME D7_PIN_NAME821,38276
      #define D0_PIN_BIT D0_PIN_BIT824,38366
      #define D1_PIN_BIT D1_PIN_BIT825,38412
      #define D2_PIN_BIT D2_PIN_BIT826,38458
      #define D3_PIN_BIT D3_PIN_BIT827,38504
      #define D4_PIN_BIT D4_PIN_BIT828,38550
      #define D5_PIN_BIT D5_PIN_BIT829,38596
      #define D6_PIN_BIT D6_PIN_BIT830,38642
      #define D7_PIN_BIT D7_PIN_BIT831,38688
      #define D0_PIN_PORT D0_PIN_PORT834,38753
      #define D1_PIN_PORT D1_PIN_PORT835,38805
      #define D2_PIN_PORT D2_PIN_PORT836,38857
      #define D3_PIN_PORT D3_PIN_PORT837,38909
      #define D4_PIN_PORT D4_PIN_PORT838,38961
      #define D5_PIN_PORT D5_PIN_PORT839,39013
      #define D6_PIN_PORT D6_PIN_PORT840,39065
      #define D7_PIN_PORT D7_PIN_PORT841,39117
      #define D0_PIN_MASK D0_PIN_MASK844,39203
      #define D1_PIN_MASK D1_PIN_MASK845,39258
      #define D2_PIN_MASK D2_PIN_MASK846,39313
      #define D3_PIN_MASK D3_PIN_MASK847,39368
      #define D4_PIN_MASK D4_PIN_MASK848,39423
      #define D5_PIN_MASK D5_PIN_MASK849,39478
      #define D6_PIN_MASK D6_PIN_MASK850,39533
      #define D7_PIN_MASK D7_PIN_MASK851,39588
      #define  D0_BSR_MASK(D0_BSR_MASK854,39707
      #define  D1_BSR_MASK(D1_BSR_MASK855,39775
      #define  D2_BSR_MASK(D2_BSR_MASK856,39843
      #define  D3_BSR_MASK(D3_BSR_MASK857,39911
      #define  D4_BSR_MASK(D4_BSR_MASK858,39979
      #define  D5_BSR_MASK(D5_BSR_MASK859,40047
      #define  D6_BSR_MASK(D6_BSR_MASK860,40115
      #define  D7_BSR_MASK(D7_BSR_MASK861,40183
      #define  D8_BSR_MASK(D8_BSR_MASK863,40317
      #define  D9_BSR_MASK(D9_BSR_MASK864,40385
      #define D10_BSR_MASK(D10_BSR_MASK865,40453
      #define D11_BSR_MASK(D11_BSR_MASK866,40521
      #define D12_BSR_MASK(D12_BSR_MASK867,40589
      #define D13_BSR_MASK(D13_BSR_MASK868,40657
      #define D14_BSR_MASK(D14_BSR_MASK869,40725
      #define D15_BSR_MASK(D15_BSR_MASK870,40793
      #define tft_Write_8(tft_Write_8874,40892
    #define tft_Write_16(tft_Write_16888,41598
    #define tft_Write_16S(tft_Write_16S921,43624
      #define tft_Write_16(tft_Write_16926,43752
      #define tft_Write_16S(tft_Write_16S948,45062
      #define tft_Write_32(tft_Write_32970,46341
      #define tft_Write_32C(tft_Write_32C972,46438
      #define tft_Write_32D(tft_Write_32D974,46529
      #define RD_TFT_D0 RD_TFT_D0977,46645
      #define RD_TFT_D1 RD_TFT_D1978,46734
      #define RD_TFT_D2 RD_TFT_D2979,46823
      #define RD_TFT_D3 RD_TFT_D3980,46912
      #define RD_TFT_D4 RD_TFT_D4981,47001
      #define RD_TFT_D5 RD_TFT_D5982,47090
      #define RD_TFT_D6 RD_TFT_D6983,47179
      #define RD_TFT_D7 RD_TFT_D7984,47268
  #define tft_Write_8(tft_Write_8993,47703
  #define tft_Write_16(tft_Write_16998,47862
  #define tft_Write_16S(tft_Write_16S1003,48119
  #define tft_Write_32(tft_Write_321008,48344
  #define tft_Write_32C(tft_Write_32C1013,48552
  #define tft_Write_32D(tft_Write_32D1018,48749
  #define tft_Write_8(tft_Write_81027,49190
  #define tft_Write_16(tft_Write_161031,49309
  #define tft_Write_16S(tft_Write_16S1035,49434
  #define tft_Write_32(tft_Write_321039,49560
  #define tft_Write_32C(tft_Write_32C1043,49739
  #define tft_Write_32D(tft_Write_32D1047,49914
    #define tft_Write_8(tft_Write_81059,50417
    #define tft_Write_8(tft_Write_81061,50470
  #define tft_Write_16(tft_Write_161066,50607
  #define tft_Write_16S(tft_Write_16S1070,50732
  #define tft_Write_32(tft_Write_321074,50858
  #define tft_Write_32C(tft_Write_32C1078,51031
  #define tft_Write_32D(tft_Write_32D1082,51200
  #define TFT_eSPI_ENABLE_8_BIT_READ TFT_eSPI_ENABLE_8_BIT_READ1093,51713
  #define SCLK_L SCLK_L1094,51774
  #define SCLK_H SCLK_H1095,51819
  #define tft_Read_8(tft_Read_81098,51930

lib/TFT_eSPI/Processors/TFT_eSPI_ESP32.c,2382
    SPIClass spi = SPIClass(HSPI);spi12,491
    SPIClass spi = SPIClass(VSPI);spi15,586
  spi_device_handle_t dmaHAL;dmaHAL21,675
    spi_host_device_t spi_host = HSPI_HOST;spi_host23,728
    spi_host_device_t spi_host = VSPI_HOST;spi_host25,780
  volatile uint32_t* _spi_cmd       = (volatile uint32_t*)(SPI_CMD_REG(SPI_PORT));_spi_cmd31,909
  volatile uint32_t* _spi_user      = (volatile uint32_t*)(SPI_USER_REG(SPI_PORT));_spi_user32,992
           uint32_t* _spi_mosi_dlen =          (uint32_t*)(SPI_MOSI_DLEN_REG(SPI_PORT));_spi_mosi_dlen34,1103
           uint32_t* _spi_w         =          (uint32_t*)(SPI_W0_REG(SPI_PORT));_spi_w35,1192
void TFT_eSPI::begin_SDA_Read(void)begin_SDA_Read46,1807
void TFT_eSPI::end_SDA_Read(void)end_SDA_Read58,2271
uint8_t TFT_eSPI::readByte(void)readByte76,3096
void TFT_eSPI::busDir(uint32_t mask, uint8_t mode)busDir110,4266
void TFT_eSPI::gpioMode(uint8_t gpio, uint8_t mode)gpioMode138,5148
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock162,6489
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len)pushPixels173,7004
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len){pushBlock194,7886
void TFT_eSPI::pushSwapBytePixels(const void* data_in, uint32_t len){pushSwapBytePixels244,9274
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels321,12038
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock375,14230
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels445,16947
void TFT_eSPI::pushSwapBytePixels(const void* data_in, uint32_t len){pushSwapBytePixels457,17585
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len){pushBlock472,18408
void TFT_eSPI::pushSwapBytePixels(const void* data_in, uint32_t len){pushSwapBytePixels489,19084
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels499,19551
bool TFT_eSPI::dmaBusy(void)dmaBusy519,20540
void TFT_eSPI::dmaWait(void)dmaWait542,21242
void TFT_eSPI::pushPixelsDMA(uint16_t* image, uint32_t len)pushPixelsDMA561,21918
void TFT_eSPI::pushImageDMA(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t* image, uint16_t* buffer)pushImageDMA593,22942
void IRAM_ATTR dc_callback(spi_transaction_t *spi_tx)dc_callback674,25412
bool TFT_eSPI::initDMA(bool ctrl_cs)initDMA684,25814
void TFT_eSPI::deInitDMA(void)deInitDMA733,27175

lib/TFT_eSPI/Processors/TFT_eSPI_STM32.c,1837
    SPIClass& spi = SPI;spi14,542
  SPI_HandleTypeDef spiHal;spiHal19,663
  DMA_HandleTypeDef dmaHal;dmaHal24,736
  uint8_t   spiBuffer[8];spiBuffer28,842
uint8_t TFT_eSPI::tft_Read_8(void)tft_Read_838,1445
void TFT_eSPI::begin_SDA_Read(void)begin_SDA_Read57,2006
void TFT_eSPI::end_SDA_Read(void)end_SDA_Read67,2542
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len){pushBlock86,3543
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len){pushPixels131,5662
void TFT_eSPI::busDir(uint32_t mask, uint8_t mode)busDir150,6371
void TFT_eSPI::gpioMode(uint8_t gpio, uint8_t mode)gpioMode197,8505
uint8_t TFT_eSPI::readByte(void)readByte210,9171
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock244,10317
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len)pushPixels254,10749
#define BUF_SIZE BUF_SIZE270,11531
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock271,11554
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len)pushPixels306,12714
#define BUF_SIZE BUF_SIZE340,14037
void TFT_eSPI::pushBlock(uint16_t color, uint32_t len)pushBlock341,14058
void TFT_eSPI::pushPixels(const void* data_in, uint32_t len)pushPixels366,15012
bool TFT_eSPI::dmaBusy(void)dmaBusy405,16934
void TFT_eSPI::dmaWait(void)dmaWait416,17410
void TFT_eSPI::pushPixelsDMA(uint16_t* image, uint32_t len)pushPixelsDMA428,17991
void TFT_eSPI::pushImageDMA(int32_t x, int32_t y, int32_t w, int32_t h, uint16_t* image, uint16_t* buffer)pushImageDMA448,18756
    void DMA2_Stream3_IRQHandler(void)DMA2_Stream3_IRQHandler524,21650
bool TFT_eSPI::initDMA(bool ctrl_cs)initDMA541,22479
    void DMA1_Channel3_IRQHandler(void)DMA1_Channel3_IRQHandler582,24457
bool TFT_eSPI::initDMA(bool ctrl_cs)initDMA597,25009
void TFT_eSPI::deInitDMA(void)deInitDMA634,26722

lib/MPU6050/src/MPU6050.h,23759
#define _MPU6050_H__MPU6050_H_38,1810
#define MPU6050_ADDRESS_AD0_LOW MPU6050_ADDRESS_AD0_LOW56,2237
#define MPU6050_ADDRESS_AD0_HIGH MPU6050_ADDRESS_AD0_HIGH57,2344
#define MPU6050_DEFAULT_ADDRESS MPU6050_DEFAULT_ADDRESS58,2411
#define MPU6050_RA_XG_OFFS_TC MPU6050_RA_XG_OFFS_TC60,2472
#define MPU6050_RA_YG_OFFS_TC MPU6050_RA_YG_OFFS_TC61,2563
#define MPU6050_RA_ZG_OFFS_TC MPU6050_RA_ZG_OFFS_TC62,2654
#define MPU6050_RA_X_FINE_GAIN MPU6050_RA_X_FINE_GAIN63,2745
#define MPU6050_RA_Y_FINE_GAIN MPU6050_RA_Y_FINE_GAIN64,2806
#define MPU6050_RA_Z_FINE_GAIN MPU6050_RA_Z_FINE_GAIN65,2867
#define MPU6050_RA_XA_OFFS_H MPU6050_RA_XA_OFFS_H66,2928
#define MPU6050_RA_XA_OFFS_L_TC MPU6050_RA_XA_OFFS_L_TC67,2986
#define MPU6050_RA_YA_OFFS_H MPU6050_RA_YA_OFFS_H68,3027
#define MPU6050_RA_YA_OFFS_L_TC MPU6050_RA_YA_OFFS_L_TC69,3085
#define MPU6050_RA_ZA_OFFS_H MPU6050_RA_ZA_OFFS_H70,3126
#define MPU6050_RA_ZA_OFFS_L_TC MPU6050_RA_ZA_OFFS_L_TC71,3184
#define MPU6050_RA_SELF_TEST_X MPU6050_RA_SELF_TEST_X72,3225
#define MPU6050_RA_SELF_TEST_Y MPU6050_RA_SELF_TEST_Y73,3307
#define MPU6050_RA_SELF_TEST_Z MPU6050_RA_SELF_TEST_Z74,3389
#define MPU6050_RA_SELF_TEST_A MPU6050_RA_SELF_TEST_A75,3471
#define MPU6050_RA_XG_OFFS_USRH MPU6050_RA_XG_OFFS_USRH76,3573
#define MPU6050_RA_XG_OFFS_USRL MPU6050_RA_XG_OFFS_USRL77,3635
#define MPU6050_RA_YG_OFFS_USRH MPU6050_RA_YG_OFFS_USRH78,3676
#define MPU6050_RA_YG_OFFS_USRL MPU6050_RA_YG_OFFS_USRL79,3738
#define MPU6050_RA_ZG_OFFS_USRH MPU6050_RA_ZG_OFFS_USRH80,3779
#define MPU6050_RA_ZG_OFFS_USRL MPU6050_RA_ZG_OFFS_USRL81,3841
#define MPU6050_RA_SMPLRT_DIV MPU6050_RA_SMPLRT_DIV82,3882
#define MPU6050_RA_CONFIG MPU6050_RA_CONFIG83,3923
#define MPU6050_RA_GYRO_CONFIG MPU6050_RA_GYRO_CONFIG84,3964
#define MPU6050_RA_ACCEL_CONFIG MPU6050_RA_ACCEL_CONFIG85,4005
#define MPU6050_RA_FF_THR MPU6050_RA_FF_THR86,4046
#define MPU6050_RA_FF_DUR MPU6050_RA_FF_DUR87,4087
#define MPU6050_RA_MOT_THR MPU6050_RA_MOT_THR88,4128
#define MPU6050_RA_MOT_DUR MPU6050_RA_MOT_DUR89,4169
#define MPU6050_RA_ZRMOT_THR MPU6050_RA_ZRMOT_THR90,4210
#define MPU6050_RA_ZRMOT_DUR MPU6050_RA_ZRMOT_DUR91,4251
#define MPU6050_RA_FIFO_EN MPU6050_RA_FIFO_EN92,4292
#define MPU6050_RA_I2C_MST_CTRL MPU6050_RA_I2C_MST_CTRL93,4333
#define MPU6050_RA_I2C_SLV0_ADDR MPU6050_RA_I2C_SLV0_ADDR94,4374
#define MPU6050_RA_I2C_SLV0_REG MPU6050_RA_I2C_SLV0_REG95,4415
#define MPU6050_RA_I2C_SLV0_CTRL MPU6050_RA_I2C_SLV0_CTRL96,4456
#define MPU6050_RA_I2C_SLV1_ADDR MPU6050_RA_I2C_SLV1_ADDR97,4497
#define MPU6050_RA_I2C_SLV1_REG MPU6050_RA_I2C_SLV1_REG98,4538
#define MPU6050_RA_I2C_SLV1_CTRL MPU6050_RA_I2C_SLV1_CTRL99,4579
#define MPU6050_RA_I2C_SLV2_ADDR MPU6050_RA_I2C_SLV2_ADDR100,4620
#define MPU6050_RA_I2C_SLV2_REG MPU6050_RA_I2C_SLV2_REG101,4661
#define MPU6050_RA_I2C_SLV2_CTRL MPU6050_RA_I2C_SLV2_CTRL102,4702
#define MPU6050_RA_I2C_SLV3_ADDR MPU6050_RA_I2C_SLV3_ADDR103,4743
#define MPU6050_RA_I2C_SLV3_REG MPU6050_RA_I2C_SLV3_REG104,4784
#define MPU6050_RA_I2C_SLV3_CTRL MPU6050_RA_I2C_SLV3_CTRL105,4825
#define MPU6050_RA_I2C_SLV4_ADDR MPU6050_RA_I2C_SLV4_ADDR106,4866
#define MPU6050_RA_I2C_SLV4_REG MPU6050_RA_I2C_SLV4_REG107,4907
#define MPU6050_RA_I2C_SLV4_DO MPU6050_RA_I2C_SLV4_DO108,4948
#define MPU6050_RA_I2C_SLV4_CTRL MPU6050_RA_I2C_SLV4_CTRL109,4989
#define MPU6050_RA_I2C_SLV4_DI MPU6050_RA_I2C_SLV4_DI110,5030
#define MPU6050_RA_I2C_MST_STATUS MPU6050_RA_I2C_MST_STATUS111,5071
#define MPU6050_RA_INT_PIN_CFG MPU6050_RA_INT_PIN_CFG112,5112
#define MPU6050_RA_INT_ENABLE MPU6050_RA_INT_ENABLE113,5153
#define MPU6050_RA_DMP_INT_STATUS MPU6050_RA_DMP_INT_STATUS114,5194
#define MPU6050_RA_INT_STATUS MPU6050_RA_INT_STATUS115,5235
#define MPU6050_RA_ACCEL_XOUT_H MPU6050_RA_ACCEL_XOUT_H116,5276
#define MPU6050_RA_ACCEL_XOUT_L MPU6050_RA_ACCEL_XOUT_L117,5317
#define MPU6050_RA_ACCEL_YOUT_H MPU6050_RA_ACCEL_YOUT_H118,5358
#define MPU6050_RA_ACCEL_YOUT_L MPU6050_RA_ACCEL_YOUT_L119,5399
#define MPU6050_RA_ACCEL_ZOUT_H MPU6050_RA_ACCEL_ZOUT_H120,5440
#define MPU6050_RA_ACCEL_ZOUT_L MPU6050_RA_ACCEL_ZOUT_L121,5481
#define MPU6050_RA_TEMP_OUT_H MPU6050_RA_TEMP_OUT_H122,5522
#define MPU6050_RA_TEMP_OUT_L MPU6050_RA_TEMP_OUT_L123,5563
#define MPU6050_RA_GYRO_XOUT_H MPU6050_RA_GYRO_XOUT_H124,5604
#define MPU6050_RA_GYRO_XOUT_L MPU6050_RA_GYRO_XOUT_L125,5645
#define MPU6050_RA_GYRO_YOUT_H MPU6050_RA_GYRO_YOUT_H126,5686
#define MPU6050_RA_GYRO_YOUT_L MPU6050_RA_GYRO_YOUT_L127,5727
#define MPU6050_RA_GYRO_ZOUT_H MPU6050_RA_GYRO_ZOUT_H128,5768
#define MPU6050_RA_GYRO_ZOUT_L MPU6050_RA_GYRO_ZOUT_L129,5809
#define MPU6050_RA_EXT_SENS_DATA_00 MPU6050_RA_EXT_SENS_DATA_00130,5850
#define MPU6050_RA_EXT_SENS_DATA_01 MPU6050_RA_EXT_SENS_DATA_01131,5891
#define MPU6050_RA_EXT_SENS_DATA_02 MPU6050_RA_EXT_SENS_DATA_02132,5932
#define MPU6050_RA_EXT_SENS_DATA_03 MPU6050_RA_EXT_SENS_DATA_03133,5973
#define MPU6050_RA_EXT_SENS_DATA_04 MPU6050_RA_EXT_SENS_DATA_04134,6014
#define MPU6050_RA_EXT_SENS_DATA_05 MPU6050_RA_EXT_SENS_DATA_05135,6055
#define MPU6050_RA_EXT_SENS_DATA_06 MPU6050_RA_EXT_SENS_DATA_06136,6096
#define MPU6050_RA_EXT_SENS_DATA_07 MPU6050_RA_EXT_SENS_DATA_07137,6137
#define MPU6050_RA_EXT_SENS_DATA_08 MPU6050_RA_EXT_SENS_DATA_08138,6178
#define MPU6050_RA_EXT_SENS_DATA_09 MPU6050_RA_EXT_SENS_DATA_09139,6219
#define MPU6050_RA_EXT_SENS_DATA_10 MPU6050_RA_EXT_SENS_DATA_10140,6260
#define MPU6050_RA_EXT_SENS_DATA_11 MPU6050_RA_EXT_SENS_DATA_11141,6301
#define MPU6050_RA_EXT_SENS_DATA_12 MPU6050_RA_EXT_SENS_DATA_12142,6342
#define MPU6050_RA_EXT_SENS_DATA_13 MPU6050_RA_EXT_SENS_DATA_13143,6383
#define MPU6050_RA_EXT_SENS_DATA_14 MPU6050_RA_EXT_SENS_DATA_14144,6424
#define MPU6050_RA_EXT_SENS_DATA_15 MPU6050_RA_EXT_SENS_DATA_15145,6465
#define MPU6050_RA_EXT_SENS_DATA_16 MPU6050_RA_EXT_SENS_DATA_16146,6506
#define MPU6050_RA_EXT_SENS_DATA_17 MPU6050_RA_EXT_SENS_DATA_17147,6547
#define MPU6050_RA_EXT_SENS_DATA_18 MPU6050_RA_EXT_SENS_DATA_18148,6588
#define MPU6050_RA_EXT_SENS_DATA_19 MPU6050_RA_EXT_SENS_DATA_19149,6629
#define MPU6050_RA_EXT_SENS_DATA_20 MPU6050_RA_EXT_SENS_DATA_20150,6670
#define MPU6050_RA_EXT_SENS_DATA_21 MPU6050_RA_EXT_SENS_DATA_21151,6711
#define MPU6050_RA_EXT_SENS_DATA_22 MPU6050_RA_EXT_SENS_DATA_22152,6752
#define MPU6050_RA_EXT_SENS_DATA_23 MPU6050_RA_EXT_SENS_DATA_23153,6793
#define MPU6050_RA_MOT_DETECT_STATUS MPU6050_RA_MOT_DETECT_STATUS154,6834
#define MPU6050_RA_I2C_SLV0_DO MPU6050_RA_I2C_SLV0_DO155,6879
#define MPU6050_RA_I2C_SLV1_DO MPU6050_RA_I2C_SLV1_DO156,6920
#define MPU6050_RA_I2C_SLV2_DO MPU6050_RA_I2C_SLV2_DO157,6961
#define MPU6050_RA_I2C_SLV3_DO MPU6050_RA_I2C_SLV3_DO158,7002
#define MPU6050_RA_I2C_MST_DELAY_CTRL MPU6050_RA_I2C_MST_DELAY_CTRL159,7043
#define MPU6050_RA_SIGNAL_PATH_RESET MPU6050_RA_SIGNAL_PATH_RESET160,7088
#define MPU6050_RA_MOT_DETECT_CTRL MPU6050_RA_MOT_DETECT_CTRL161,7133
#define MPU6050_RA_USER_CTRL MPU6050_RA_USER_CTRL162,7178
#define MPU6050_RA_PWR_MGMT_1 MPU6050_RA_PWR_MGMT_1163,7219
#define MPU6050_RA_PWR_MGMT_2 MPU6050_RA_PWR_MGMT_2164,7260
#define MPU6050_RA_BANK_SEL MPU6050_RA_BANK_SEL165,7301
#define MPU6050_RA_MEM_START_ADDR MPU6050_RA_MEM_START_ADDR166,7342
#define MPU6050_RA_MEM_R_W MPU6050_RA_MEM_R_W167,7383
#define MPU6050_RA_DMP_CFG_1 MPU6050_RA_DMP_CFG_1168,7424
#define MPU6050_RA_DMP_CFG_2 MPU6050_RA_DMP_CFG_2169,7465
#define MPU6050_RA_FIFO_COUNTH MPU6050_RA_FIFO_COUNTH170,7506
#define MPU6050_RA_FIFO_COUNTL MPU6050_RA_FIFO_COUNTL171,7547
#define MPU6050_RA_FIFO_R_W MPU6050_RA_FIFO_R_W172,7588
#define MPU6050_RA_WHO_AM_I MPU6050_RA_WHO_AM_I173,7629
#define MPU6050_SELF_TEST_XA_1_BIT MPU6050_SELF_TEST_XA_1_BIT175,7671
#define MPU6050_SELF_TEST_XA_1_LENGTH MPU6050_SELF_TEST_XA_1_LENGTH176,7715
#define MPU6050_SELF_TEST_XA_2_BIT MPU6050_SELF_TEST_XA_2_BIT177,7759
#define MPU6050_SELF_TEST_XA_2_LENGTH MPU6050_SELF_TEST_XA_2_LENGTH178,7803
#define MPU6050_SELF_TEST_YA_1_BIT MPU6050_SELF_TEST_YA_1_BIT179,7847
#define MPU6050_SELF_TEST_YA_1_LENGTH MPU6050_SELF_TEST_YA_1_LENGTH180,7891
#define MPU6050_SELF_TEST_YA_2_BIT MPU6050_SELF_TEST_YA_2_BIT181,7935
#define MPU6050_SELF_TEST_YA_2_LENGTH MPU6050_SELF_TEST_YA_2_LENGTH182,7979
#define MPU6050_SELF_TEST_ZA_1_BIT MPU6050_SELF_TEST_ZA_1_BIT183,8023
#define MPU6050_SELF_TEST_ZA_1_LENGTH MPU6050_SELF_TEST_ZA_1_LENGTH184,8067
#define MPU6050_SELF_TEST_ZA_2_BIT MPU6050_SELF_TEST_ZA_2_BIT185,8111
#define MPU6050_SELF_TEST_ZA_2_LENGTH MPU6050_SELF_TEST_ZA_2_LENGTH186,8155
#define MPU6050_SELF_TEST_XG_1_BIT MPU6050_SELF_TEST_XG_1_BIT188,8200
#define MPU6050_SELF_TEST_XG_1_LENGTH MPU6050_SELF_TEST_XG_1_LENGTH189,8244
#define MPU6050_SELF_TEST_YG_1_BIT MPU6050_SELF_TEST_YG_1_BIT190,8288
#define MPU6050_SELF_TEST_YG_1_LENGTH MPU6050_SELF_TEST_YG_1_LENGTH191,8332
#define MPU6050_SELF_TEST_ZG_1_BIT MPU6050_SELF_TEST_ZG_1_BIT192,8376
#define MPU6050_SELF_TEST_ZG_1_LENGTH MPU6050_SELF_TEST_ZG_1_LENGTH193,8420
#define MPU6050_TC_PWR_MODE_BIT MPU6050_TC_PWR_MODE_BIT195,8465
#define MPU6050_TC_OFFSET_BIT MPU6050_TC_OFFSET_BIT196,8503
#define MPU6050_TC_OFFSET_LENGTH MPU6050_TC_OFFSET_LENGTH197,8541
#define MPU6050_TC_OTP_BNK_VLD_BIT MPU6050_TC_OTP_BNK_VLD_BIT198,8579
#define MPU6050_VDDIO_LEVEL_VLOGIC MPU6050_VDDIO_LEVEL_VLOGIC200,8618
#define MPU6050_VDDIO_LEVEL_VDD MPU6050_VDDIO_LEVEL_VDD201,8656
#define MPU6050_CFG_EXT_SYNC_SET_BIT MPU6050_CFG_EXT_SYNC_SET_BIT203,8695
#define MPU6050_CFG_EXT_SYNC_SET_LENGTH MPU6050_CFG_EXT_SYNC_SET_LENGTH204,8737
#define MPU6050_CFG_DLPF_CFG_BIT MPU6050_CFG_DLPF_CFG_BIT205,8779
#define MPU6050_CFG_DLPF_CFG_LENGTH MPU6050_CFG_DLPF_CFG_LENGTH206,8817
#define MPU6050_EXT_SYNC_DISABLED MPU6050_EXT_SYNC_DISABLED208,8856
#define MPU6050_EXT_SYNC_TEMP_OUT_L MPU6050_EXT_SYNC_TEMP_OUT_L209,8900
#define MPU6050_EXT_SYNC_GYRO_XOUT_L MPU6050_EXT_SYNC_GYRO_XOUT_L210,8944
#define MPU6050_EXT_SYNC_GYRO_YOUT_L MPU6050_EXT_SYNC_GYRO_YOUT_L211,8988
#define MPU6050_EXT_SYNC_GYRO_ZOUT_L MPU6050_EXT_SYNC_GYRO_ZOUT_L212,9032
#define MPU6050_EXT_SYNC_ACCEL_XOUT_L MPU6050_EXT_SYNC_ACCEL_XOUT_L213,9076
#define MPU6050_EXT_SYNC_ACCEL_YOUT_L MPU6050_EXT_SYNC_ACCEL_YOUT_L214,9120
#define MPU6050_EXT_SYNC_ACCEL_ZOUT_L MPU6050_EXT_SYNC_ACCEL_ZOUT_L215,9164
#define MPU6050_DLPF_BW_256 MPU6050_DLPF_BW_256217,9209
#define MPU6050_DLPF_BW_188 MPU6050_DLPF_BW_188218,9250
#define MPU6050_DLPF_BW_98 MPU6050_DLPF_BW_98219,9291
#define MPU6050_DLPF_BW_42 MPU6050_DLPF_BW_42220,9332
#define MPU6050_DLPF_BW_20 MPU6050_DLPF_BW_20221,9373
#define MPU6050_DLPF_BW_10 MPU6050_DLPF_BW_10222,9414
#define MPU6050_DLPF_BW_5 MPU6050_DLPF_BW_5223,9455
#define MPU6050_GCONFIG_FS_SEL_BIT MPU6050_GCONFIG_FS_SEL_BIT225,9497
#define MPU6050_GCONFIG_FS_SEL_LENGTH MPU6050_GCONFIG_FS_SEL_LENGTH226,9539
#define MPU6050_GYRO_FS_250 MPU6050_GYRO_FS_250228,9582
#define MPU6050_GYRO_FS_500 MPU6050_GYRO_FS_500229,9623
#define MPU6050_GYRO_FS_1000 MPU6050_GYRO_FS_1000230,9664
#define MPU6050_GYRO_FS_2000 MPU6050_GYRO_FS_2000231,9705
#define MPU6050_ACONFIG_XA_ST_BIT MPU6050_ACONFIG_XA_ST_BIT233,9747
#define MPU6050_ACONFIG_YA_ST_BIT MPU6050_ACONFIG_YA_ST_BIT234,9793
#define MPU6050_ACONFIG_ZA_ST_BIT MPU6050_ACONFIG_ZA_ST_BIT235,9839
#define MPU6050_ACONFIG_AFS_SEL_BIT MPU6050_ACONFIG_AFS_SEL_BIT236,9885
#define MPU6050_ACONFIG_AFS_SEL_LENGTH MPU6050_ACONFIG_AFS_SEL_LENGTH237,9931
#define MPU6050_ACONFIG_ACCEL_HPF_BIT MPU6050_ACONFIG_ACCEL_HPF_BIT238,9977
#define MPU6050_ACONFIG_ACCEL_HPF_LENGTH MPU6050_ACONFIG_ACCEL_HPF_LENGTH239,10023
#define MPU6050_ACCEL_FS_2 MPU6050_ACCEL_FS_2241,10070
#define MPU6050_ACCEL_FS_4 MPU6050_ACCEL_FS_4242,10111
#define MPU6050_ACCEL_FS_8 MPU6050_ACCEL_FS_8243,10152
#define MPU6050_ACCEL_FS_16 MPU6050_ACCEL_FS_16244,10193
#define MPU6050_DHPF_RESET MPU6050_DHPF_RESET246,10235
#define MPU6050_DHPF_5 MPU6050_DHPF_5247,10276
#define MPU6050_DHPF_2P5 MPU6050_DHPF_2P5248,10317
#define MPU6050_DHPF_1P25 MPU6050_DHPF_1P25249,10358
#define MPU6050_DHPF_0P63 MPU6050_DHPF_0P63250,10399
#define MPU6050_DHPF_HOLD MPU6050_DHPF_HOLD251,10440
#define MPU6050_TEMP_FIFO_EN_BIT MPU6050_TEMP_FIFO_EN_BIT253,10482
#define MPU6050_XG_FIFO_EN_BIT MPU6050_XG_FIFO_EN_BIT254,10520
#define MPU6050_YG_FIFO_EN_BIT MPU6050_YG_FIFO_EN_BIT255,10558
#define MPU6050_ZG_FIFO_EN_BIT MPU6050_ZG_FIFO_EN_BIT256,10596
#define MPU6050_ACCEL_FIFO_EN_BIT MPU6050_ACCEL_FIFO_EN_BIT257,10634
#define MPU6050_SLV2_FIFO_EN_BIT MPU6050_SLV2_FIFO_EN_BIT258,10672
#define MPU6050_SLV1_FIFO_EN_BIT MPU6050_SLV1_FIFO_EN_BIT259,10710
#define MPU6050_SLV0_FIFO_EN_BIT MPU6050_SLV0_FIFO_EN_BIT260,10748
#define MPU6050_MULT_MST_EN_BIT MPU6050_MULT_MST_EN_BIT262,10787
#define MPU6050_WAIT_FOR_ES_BIT MPU6050_WAIT_FOR_ES_BIT263,10825
#define MPU6050_SLV_3_FIFO_EN_BIT MPU6050_SLV_3_FIFO_EN_BIT264,10863
#define MPU6050_I2C_MST_P_NSR_BIT MPU6050_I2C_MST_P_NSR_BIT265,10901
#define MPU6050_I2C_MST_CLK_BIT MPU6050_I2C_MST_CLK_BIT266,10939
#define MPU6050_I2C_MST_CLK_LENGTH MPU6050_I2C_MST_CLK_LENGTH267,10977
#define MPU6050_CLOCK_DIV_348 MPU6050_CLOCK_DIV_348269,11016
#define MPU6050_CLOCK_DIV_333 MPU6050_CLOCK_DIV_333270,11056
#define MPU6050_CLOCK_DIV_320 MPU6050_CLOCK_DIV_320271,11096
#define MPU6050_CLOCK_DIV_308 MPU6050_CLOCK_DIV_308272,11136
#define MPU6050_CLOCK_DIV_296 MPU6050_CLOCK_DIV_296273,11176
#define MPU6050_CLOCK_DIV_286 MPU6050_CLOCK_DIV_286274,11216
#define MPU6050_CLOCK_DIV_276 MPU6050_CLOCK_DIV_276275,11256
#define MPU6050_CLOCK_DIV_267 MPU6050_CLOCK_DIV_267276,11296
#define MPU6050_CLOCK_DIV_258 MPU6050_CLOCK_DIV_258277,11336
#define MPU6050_CLOCK_DIV_500 MPU6050_CLOCK_DIV_500278,11376
#define MPU6050_CLOCK_DIV_471 MPU6050_CLOCK_DIV_471279,11416
#define MPU6050_CLOCK_DIV_444 MPU6050_CLOCK_DIV_444280,11456
#define MPU6050_CLOCK_DIV_421 MPU6050_CLOCK_DIV_421281,11496
#define MPU6050_CLOCK_DIV_400 MPU6050_CLOCK_DIV_400282,11536
#define MPU6050_CLOCK_DIV_381 MPU6050_CLOCK_DIV_381283,11576
#define MPU6050_CLOCK_DIV_364 MPU6050_CLOCK_DIV_364284,11616
#define MPU6050_I2C_SLV_RW_BIT MPU6050_I2C_SLV_RW_BIT286,11657
#define MPU6050_I2C_SLV_ADDR_BIT MPU6050_I2C_SLV_ADDR_BIT287,11695
#define MPU6050_I2C_SLV_ADDR_LENGTH MPU6050_I2C_SLV_ADDR_LENGTH288,11733
#define MPU6050_I2C_SLV_EN_BIT MPU6050_I2C_SLV_EN_BIT289,11771
#define MPU6050_I2C_SLV_BYTE_SW_BIT MPU6050_I2C_SLV_BYTE_SW_BIT290,11809
#define MPU6050_I2C_SLV_REG_DIS_BIT MPU6050_I2C_SLV_REG_DIS_BIT291,11847
#define MPU6050_I2C_SLV_GRP_BIT MPU6050_I2C_SLV_GRP_BIT292,11885
#define MPU6050_I2C_SLV_LEN_BIT MPU6050_I2C_SLV_LEN_BIT293,11923
#define MPU6050_I2C_SLV_LEN_LENGTH MPU6050_I2C_SLV_LEN_LENGTH294,11961
#define MPU6050_I2C_SLV4_RW_BIT MPU6050_I2C_SLV4_RW_BIT296,12000
#define MPU6050_I2C_SLV4_ADDR_BIT MPU6050_I2C_SLV4_ADDR_BIT297,12042
#define MPU6050_I2C_SLV4_ADDR_LENGTH MPU6050_I2C_SLV4_ADDR_LENGTH298,12084
#define MPU6050_I2C_SLV4_EN_BIT MPU6050_I2C_SLV4_EN_BIT299,12126
#define MPU6050_I2C_SLV4_INT_EN_BIT MPU6050_I2C_SLV4_INT_EN_BIT300,12168
#define MPU6050_I2C_SLV4_REG_DIS_BIT MPU6050_I2C_SLV4_REG_DIS_BIT301,12210
#define MPU6050_I2C_SLV4_MST_DLY_BIT MPU6050_I2C_SLV4_MST_DLY_BIT302,12252
#define MPU6050_I2C_SLV4_MST_DLY_LENGTH MPU6050_I2C_SLV4_MST_DLY_LENGTH303,12294
#define MPU6050_MST_PASS_THROUGH_BIT MPU6050_MST_PASS_THROUGH_BIT305,12337
#define MPU6050_MST_I2C_SLV4_DONE_BIT MPU6050_MST_I2C_SLV4_DONE_BIT306,12379
#define MPU6050_MST_I2C_LOST_ARB_BIT MPU6050_MST_I2C_LOST_ARB_BIT307,12421
#define MPU6050_MST_I2C_SLV4_NACK_BIT MPU6050_MST_I2C_SLV4_NACK_BIT308,12463
#define MPU6050_MST_I2C_SLV3_NACK_BIT MPU6050_MST_I2C_SLV3_NACK_BIT309,12505
#define MPU6050_MST_I2C_SLV2_NACK_BIT MPU6050_MST_I2C_SLV2_NACK_BIT310,12547
#define MPU6050_MST_I2C_SLV1_NACK_BIT MPU6050_MST_I2C_SLV1_NACK_BIT311,12589
#define MPU6050_MST_I2C_SLV0_NACK_BIT MPU6050_MST_I2C_SLV0_NACK_BIT312,12631
#define MPU6050_INTCFG_INT_LEVEL_BIT MPU6050_INTCFG_INT_LEVEL_BIT314,12674
#define MPU6050_INTCFG_INT_OPEN_BIT MPU6050_INTCFG_INT_OPEN_BIT315,12720
#define MPU6050_INTCFG_LATCH_INT_EN_BIT MPU6050_INTCFG_LATCH_INT_EN_BIT316,12766
#define MPU6050_INTCFG_INT_RD_CLEAR_BIT MPU6050_INTCFG_INT_RD_CLEAR_BIT317,12812
#define MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT318,12858
#define MPU6050_INTCFG_FSYNC_INT_EN_BIT MPU6050_INTCFG_FSYNC_INT_EN_BIT319,12904
#define MPU6050_INTCFG_I2C_BYPASS_EN_BIT MPU6050_INTCFG_I2C_BYPASS_EN_BIT320,12950
#define MPU6050_INTCFG_CLKOUT_EN_BIT MPU6050_INTCFG_CLKOUT_EN_BIT321,12996
#define MPU6050_INTMODE_ACTIVEHIGH MPU6050_INTMODE_ACTIVEHIGH323,13043
#define MPU6050_INTMODE_ACTIVELOW MPU6050_INTMODE_ACTIVELOW324,13084
#define MPU6050_INTDRV_PUSHPULL MPU6050_INTDRV_PUSHPULL326,13126
#define MPU6050_INTDRV_OPENDRAIN MPU6050_INTDRV_OPENDRAIN327,13167
#define MPU6050_INTLATCH_50USPULSE MPU6050_INTLATCH_50USPULSE329,13209
#define MPU6050_INTLATCH_WAITCLEAR MPU6050_INTLATCH_WAITCLEAR330,13250
#define MPU6050_INTCLEAR_STATUSREAD MPU6050_INTCLEAR_STATUSREAD332,13292
#define MPU6050_INTCLEAR_ANYREAD MPU6050_INTCLEAR_ANYREAD333,13333
#define MPU6050_INTERRUPT_FF_BIT MPU6050_INTERRUPT_FF_BIT335,13375
#define MPU6050_INTERRUPT_MOT_BIT MPU6050_INTERRUPT_MOT_BIT336,13421
#define MPU6050_INTERRUPT_ZMOT_BIT MPU6050_INTERRUPT_ZMOT_BIT337,13467
#define MPU6050_INTERRUPT_FIFO_OFLOW_BIT MPU6050_INTERRUPT_FIFO_OFLOW_BIT338,13513
#define MPU6050_INTERRUPT_I2C_MST_INT_BIT MPU6050_INTERRUPT_I2C_MST_INT_BIT339,13559
#define MPU6050_INTERRUPT_PLL_RDY_INT_BIT MPU6050_INTERRUPT_PLL_RDY_INT_BIT340,13605
#define MPU6050_INTERRUPT_DMP_INT_BIT MPU6050_INTERRUPT_DMP_INT_BIT341,13651
#define MPU6050_INTERRUPT_DATA_RDY_BIT MPU6050_INTERRUPT_DATA_RDY_BIT342,13697
#define MPU6050_DMPINT_5_BIT MPU6050_DMPINT_5_BIT346,13827
#define MPU6050_DMPINT_4_BIT MPU6050_DMPINT_4_BIT347,13869
#define MPU6050_DMPINT_3_BIT MPU6050_DMPINT_3_BIT348,13911
#define MPU6050_DMPINT_2_BIT MPU6050_DMPINT_2_BIT349,13953
#define MPU6050_DMPINT_1_BIT MPU6050_DMPINT_1_BIT350,13995
#define MPU6050_DMPINT_0_BIT MPU6050_DMPINT_0_BIT351,14037
#define MPU6050_MOTION_MOT_XNEG_BIT MPU6050_MOTION_MOT_XNEG_BIT353,14080
#define MPU6050_MOTION_MOT_XPOS_BIT MPU6050_MOTION_MOT_XPOS_BIT354,14122
#define MPU6050_MOTION_MOT_YNEG_BIT MPU6050_MOTION_MOT_YNEG_BIT355,14164
#define MPU6050_MOTION_MOT_YPOS_BIT MPU6050_MOTION_MOT_YPOS_BIT356,14206
#define MPU6050_MOTION_MOT_ZNEG_BIT MPU6050_MOTION_MOT_ZNEG_BIT357,14248
#define MPU6050_MOTION_MOT_ZPOS_BIT MPU6050_MOTION_MOT_ZPOS_BIT358,14290
#define MPU6050_MOTION_MOT_ZRMOT_BIT MPU6050_MOTION_MOT_ZRMOT_BIT359,14332
#define MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT361,14375
#define MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT362,14425
#define MPU6050_DELAYCTRL_I2C_SLV3_DLY_EN_BIT MPU6050_DELAYCTRL_I2C_SLV3_DLY_EN_BIT363,14475
#define MPU6050_DELAYCTRL_I2C_SLV2_DLY_EN_BIT MPU6050_DELAYCTRL_I2C_SLV2_DLY_EN_BIT364,14525
#define MPU6050_DELAYCTRL_I2C_SLV1_DLY_EN_BIT MPU6050_DELAYCTRL_I2C_SLV1_DLY_EN_BIT365,14575
#define MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT366,14625
#define MPU6050_PATHRESET_GYRO_RESET_BIT MPU6050_PATHRESET_GYRO_RESET_BIT368,14676
#define MPU6050_PATHRESET_ACCEL_RESET_BIT MPU6050_PATHRESET_ACCEL_RESET_BIT369,14722
#define MPU6050_PATHRESET_TEMP_RESET_BIT MPU6050_PATHRESET_TEMP_RESET_BIT370,14768
#define MPU6050_DETECT_ACCEL_ON_DELAY_BIT MPU6050_DETECT_ACCEL_ON_DELAY_BIT372,14815
#define MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH373,14865
#define MPU6050_DETECT_FF_COUNT_BIT MPU6050_DETECT_FF_COUNT_BIT374,14915
#define MPU6050_DETECT_FF_COUNT_LENGTH MPU6050_DETECT_FF_COUNT_LENGTH375,14965
#define MPU6050_DETECT_MOT_COUNT_BIT MPU6050_DETECT_MOT_COUNT_BIT376,15015
#define MPU6050_DETECT_MOT_COUNT_LENGTH MPU6050_DETECT_MOT_COUNT_LENGTH377,15065
#define MPU6050_DETECT_DECREMENT_RESET MPU6050_DETECT_DECREMENT_RESET379,15116
#define MPU6050_DETECT_DECREMENT_1 MPU6050_DETECT_DECREMENT_1380,15160
#define MPU6050_DETECT_DECREMENT_2 MPU6050_DETECT_DECREMENT_2381,15204
#define MPU6050_DETECT_DECREMENT_4 MPU6050_DETECT_DECREMENT_4382,15248
#define MPU6050_USERCTRL_DMP_EN_BIT MPU6050_USERCTRL_DMP_EN_BIT384,15293
#define MPU6050_USERCTRL_FIFO_EN_BIT MPU6050_USERCTRL_FIFO_EN_BIT385,15343
#define MPU6050_USERCTRL_I2C_MST_EN_BIT MPU6050_USERCTRL_I2C_MST_EN_BIT386,15393
#define MPU6050_USERCTRL_I2C_IF_DIS_BIT MPU6050_USERCTRL_I2C_IF_DIS_BIT387,15443
#define MPU6050_USERCTRL_DMP_RESET_BIT MPU6050_USERCTRL_DMP_RESET_BIT388,15493
#define MPU6050_USERCTRL_FIFO_RESET_BIT MPU6050_USERCTRL_FIFO_RESET_BIT389,15543
#define MPU6050_USERCTRL_I2C_MST_RESET_BIT MPU6050_USERCTRL_I2C_MST_RESET_BIT390,15593
#define MPU6050_USERCTRL_SIG_COND_RESET_BIT MPU6050_USERCTRL_SIG_COND_RESET_BIT391,15643
#define MPU6050_PWR1_DEVICE_RESET_BIT MPU6050_PWR1_DEVICE_RESET_BIT393,15694
#define MPU6050_PWR1_SLEEP_BIT MPU6050_PWR1_SLEEP_BIT394,15736
#define MPU6050_PWR1_CYCLE_BIT MPU6050_PWR1_CYCLE_BIT395,15778
#define MPU6050_PWR1_TEMP_DIS_BIT MPU6050_PWR1_TEMP_DIS_BIT396,15820
#define MPU6050_PWR1_CLKSEL_BIT MPU6050_PWR1_CLKSEL_BIT397,15862
#define MPU6050_PWR1_CLKSEL_LENGTH MPU6050_PWR1_CLKSEL_LENGTH398,15904
#define MPU6050_CLOCK_INTERNAL MPU6050_CLOCK_INTERNAL400,15947
#define MPU6050_CLOCK_PLL_XGYRO MPU6050_CLOCK_PLL_XGYRO401,15992
#define MPU6050_CLOCK_PLL_YGYRO MPU6050_CLOCK_PLL_YGYRO402,16037
#define MPU6050_CLOCK_PLL_ZGYRO MPU6050_CLOCK_PLL_ZGYRO403,16082
#define MPU6050_CLOCK_PLL_EXT32K MPU6050_CLOCK_PLL_EXT32K404,16127
#define MPU6050_CLOCK_PLL_EXT19M MPU6050_CLOCK_PLL_EXT19M405,16172
#define MPU6050_CLOCK_KEEP_RESET MPU6050_CLOCK_KEEP_RESET406,16217
#define MPU6050_PWR2_LP_WAKE_CTRL_BIT MPU6050_PWR2_LP_WAKE_CTRL_BIT408,16263
#define MPU6050_PWR2_LP_WAKE_CTRL_LENGTH MPU6050_PWR2_LP_WAKE_CTRL_LENGTH409,16309
#define MPU6050_PWR2_STBY_XA_BIT MPU6050_PWR2_STBY_XA_BIT410,16355
#define MPU6050_PWR2_STBY_YA_BIT MPU6050_PWR2_STBY_YA_BIT411,16401
#define MPU6050_PWR2_STBY_ZA_BIT MPU6050_PWR2_STBY_ZA_BIT412,16447
#define MPU6050_PWR2_STBY_XG_BIT MPU6050_PWR2_STBY_XG_BIT413,16493
#define MPU6050_PWR2_STBY_YG_BIT MPU6050_PWR2_STBY_YG_BIT414,16539
#define MPU6050_PWR2_STBY_ZG_BIT MPU6050_PWR2_STBY_ZG_BIT415,16585
#define MPU6050_WAKE_FREQ_1P25 MPU6050_WAKE_FREQ_1P25417,16632
#define MPU6050_WAKE_FREQ_2P5 MPU6050_WAKE_FREQ_2P5418,16672
#define MPU6050_WAKE_FREQ_5 MPU6050_WAKE_FREQ_5419,16712
#define MPU6050_WAKE_FREQ_10 MPU6050_WAKE_FREQ_10420,16752
#define MPU6050_BANKSEL_PRFTCH_EN_BIT MPU6050_BANKSEL_PRFTCH_EN_BIT422,16793
#define MPU6050_BANKSEL_CFG_USER_BANK_BIT MPU6050_BANKSEL_CFG_USER_BANK_BIT423,16839
#define MPU6050_BANKSEL_MEM_SEL_BIT MPU6050_BANKSEL_MEM_SEL_BIT424,16885
#define MPU6050_BANKSEL_MEM_SEL_LENGTH MPU6050_BANKSEL_MEM_SEL_LENGTH425,16931
#define MPU6050_WHO_AM_I_BIT MPU6050_WHO_AM_I_BIT427,16978
#define MPU6050_WHO_AM_I_LENGTH MPU6050_WHO_AM_I_LENGTH428,17016
#define MPU6050_DMP_MEMORY_BANKS MPU6050_DMP_MEMORY_BANKS430,17055
#define MPU6050_DMP_MEMORY_BANK_SIZE MPU6050_DMP_MEMORY_BANK_SIZE431,17097
#define MPU6050_DMP_MEMORY_CHUNK_SIZE MPU6050_DMP_MEMORY_CHUNK_SIZE432,17141
class MPU6050 {MPU6050436,17248
        uint8_t devAddr;devAddr1023,44153
        uint8_t buffer[14];buffer1024,44178
        uint8_t *dmpPacketBuffer;dmpPacketBuffer1026,44301
        uint16_t dmpPacketSize;dmpPacketSize1027,44335

lib/MPU6050/src/MPU6050_9Axis_MotionApps41.h,4594
#define _MPU6050_9AXIS_MOTIONAPPS41_H__MPU6050_9AXIS_MOTIONAPPS41_H_34,1632
#define MPU6050_INCLUDE_DMP_MOTIONAPPS41MPU6050_INCLUDE_DMP_MOTIONAPPS4140,1801
        #define __PGMSPACE_H_ __PGMSPACE_H_51,2110
        #define PROGMEMPROGMEM54,2173
        #define PGM_P PGM_P55,2197
        #define PSTR(PSTR56,2233
        #define F(F57,2265
        typedef void prog_void;prog_void59,2289
        typedef char prog_char;prog_char60,2321
        typedef int8_t prog_int8_t;prog_int8_t62,2397
        typedef uint8_t prog_uint8_t;prog_uint8_t63,2433
        typedef int16_t prog_int16_t;prog_int16_t64,2471
        typedef uint16_t prog_uint16_t;prog_uint16_t65,2509
        typedef int32_t prog_int32_t;prog_int32_t66,2549
        typedef uint32_t prog_uint32_t;prog_uint32_t67,2587
        #define strcpy_P(strcpy_P69,2636
        #define strcat_P(strcat_P70,2694
        #define strcmp_P(strcmp_P71,2752
        #define pgm_read_byte(pgm_read_byte73,2809
        #define pgm_read_word(pgm_read_word74,2878
        #define pgm_read_dword(pgm_read_dword75,2948
        #define pgm_read_float(pgm_read_float76,3018
        #define pgm_read_byte_near(pgm_read_byte_near78,3089
        #define pgm_read_word_near(pgm_read_word_near79,3150
        #define pgm_read_dword_near(pgm_read_dword_near80,3211
        #define pgm_read_float_near(pgm_read_float_near81,3274
        #define pgm_read_byte_far(pgm_read_byte_far82,3337
        #define pgm_read_word_far(pgm_read_word_far83,3397
        #define pgm_read_dword_far(pgm_read_dword_far84,3457
        #define pgm_read_float_far(pgm_read_float_far85,3519
    #define DEBUG_PRINT(DEBUG_PRINT96,3890
    #define DEBUG_PRINTF(DEBUG_PRINTF97,3933
    #define DEBUG_PRINTLN(DEBUG_PRINTLN98,3983
    #define DEBUG_PRINTLNF(DEBUG_PRINTLNF99,4030
    #define DEBUG_PRINT(DEBUG_PRINT101,4090
    #define DEBUG_PRINTF(DEBUG_PRINTF102,4117
    #define DEBUG_PRINTLN(DEBUG_PRINTLN103,4148
    #define DEBUG_PRINTLNF(DEBUG_PRINTLNF104,4177
#define MPU6050_DMP_CODE_SIZE MPU6050_DMP_CODE_SIZE107,4218
#define MPU6050_DMP_CONFIG_SIZE MPU6050_DMP_CONFIG_SIZE108,4277
#define MPU6050_DMP_UPDATES_SIZE MPU6050_DMP_UPDATES_SIZE109,4336
const unsigned char dmpMemory[MPU6050_DMP_CODE_SIZE] PROGMEM = {PROGMEM124,5484
#define MPU6050_DMP_FIFO_RATE_DIVISOR MPU6050_DMP_FIFO_RATE_DIVISOR266,18094
const unsigned char dmpConfig[MPU6050_DMP_CONFIG_SIZE] PROGMEM = {PROGMEM269,18145
const unsigned char dmpUpdates[MPU6050_DMP_UPDATES_SIZE] PROGMEM = {PROGMEM319,21670
uint8_t MPU6050::dmpInitialize() {dmpInitialize341,22780
bool MPU6050::dmpPacketAvailable() {dmpPacketAvailable657,38626
uint8_t MPU6050::dmpGetAccel(int32_t *data, const uint8_t* packet) {dmpGetAccel684,40160
uint8_t MPU6050::dmpGetAccel(int16_t *data, const uint8_t* packet) {dmpGetAccel692,40742
uint8_t MPU6050::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {dmpGetAccel700,41102
uint8_t MPU6050::dmpGetQuaternion(int32_t *data, const uint8_t* packet) {dmpGetQuaternion708,41460
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {dmpGetQuaternion717,42157
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {dmpGetQuaternion726,42570
uint8_t MPU6050::dmpGetGyro(int32_t *data, const uint8_t* packet) {dmpGetGyro741,43262
uint8_t MPU6050::dmpGetGyro(int16_t *data, const uint8_t* packet) {dmpGetGyro749,43843
uint8_t MPU6050::dmpGetMag(int16_t *data, const uint8_t* packet) {dmpGetMag757,44202
uint8_t MPU6050::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {dmpGetLinearAccel767,44702
uint8_t MPU6050::dmpGetLinearAccelInWorld(VectorInt16 *v, VectorInt16 *vReal, Quaternion *q) {dmpGetLinearAccelInWorld775,45107
uint8_t MPU6050::dmpGetGravity(int16_t *data, const uint8_t* packet) {dmpGetGravity787,45777
uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {dmpGetGravity798,46278
uint8_t MPU6050::dmpGetEuler(float *data, Quaternion *q) {dmpGetEuler809,46848
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {dmpGetYawPitchRoll817,47260
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {dmpGetYawPitchRoll827,47773
uint8_t MPU6050::dmpProcessFIFOPacket(const unsigned char *dmpData) {dmpProcessFIFOPacket848,48551
uint8_t MPU6050::dmpReadAndProcessFIFOPacket(uint8_t numPackets, uint8_t *processed) {dmpReadAndProcessFIFOPacket858,48886
uint16_t MPU6050::dmpGetFIFOPacketSize() {dmpGetFIFOPacketSize883,49782

lib/MPU6050/src/MPU6050_6Axis_MotionApps20.h,4144
#define _MPU6050_6AXIS_MOTIONAPPS20_H__MPU6050_6AXIS_MOTIONAPPS20_H_34,1632
#define MPU6050_INCLUDE_DMP_MOTIONAPPS20MPU6050_INCLUDE_DMP_MOTIONAPPS2040,1803
        #define __PGMSPACE_H_ __PGMSPACE_H_51,2112
        #define PROGMEMPROGMEM54,2175
        #define PGM_P PGM_P55,2199
        #define PSTR(PSTR56,2235
        #define F(F57,2267
        #define strcpy_P(strcpy_P69,2654
        #define strcat_P(strcat_P70,2712
        #define strcmp_P(strcmp_P71,2770
        #define pgm_read_byte(pgm_read_byte73,2827
        #define pgm_read_word(pgm_read_word74,2896
        #define pgm_read_dword(pgm_read_dword75,2966
        #define pgm_read_float(pgm_read_float76,3036
        #define pgm_read_byte_near(pgm_read_byte_near78,3107
        #define pgm_read_word_near(pgm_read_word_near79,3168
        #define pgm_read_dword_near(pgm_read_dword_near80,3229
        #define pgm_read_float_near(pgm_read_float_near81,3292
        #define pgm_read_byte_far(pgm_read_byte_far82,3355
        #define pgm_read_word_far(pgm_read_word_far83,3415
        #define pgm_read_dword_far(pgm_read_dword_far84,3475
        #define pgm_read_float_far(pgm_read_float_far85,3537
    #define DEBUG_PRINT(DEBUG_PRINT105,4291
    #define DEBUG_PRINTF(DEBUG_PRINTF106,4334
    #define DEBUG_PRINTLN(DEBUG_PRINTLN107,4384
    #define DEBUG_PRINTLNF(DEBUG_PRINTLNF108,4431
    #define DEBUG_PRINT(DEBUG_PRINT110,4491
    #define DEBUG_PRINTF(DEBUG_PRINTF111,4518
    #define DEBUG_PRINTLN(DEBUG_PRINTLN112,4549
    #define DEBUG_PRINTLNF(DEBUG_PRINTLNF113,4578
#define MPU6050_DMP_CODE_SIZE MPU6050_DMP_CODE_SIZE116,4619
#define MPU6050_DMP_CONFIG_SIZE MPU6050_DMP_CONFIG_SIZE117,4678
#define MPU6050_DMP_UPDATES_SIZE MPU6050_DMP_UPDATES_SIZE118,4737
const unsigned char dmpMemory[MPU6050_DMP_CODE_SIZE] PROGMEM = {PROGMEM133,5885
#define MPU6050_DMP_FIFO_RATE_DIVISOR MPU6050_DMP_FIFO_RATE_DIVISOR273,18269
const unsigned char dmpConfig[MPU6050_DMP_CONFIG_SIZE] PROGMEM = {PROGMEM277,18378
const unsigned char dmpUpdates[MPU6050_DMP_UPDATES_SIZE] PROGMEM = {PROGMEM319,21566
uint8_t MPU6050::dmpInitialize() {dmpInitialize329,21990
bool MPU6050::dmpPacketAvailable() {dmpPacketAvailable552,31315
uint8_t MPU6050::dmpGetAccel(int32_t *data, const uint8_t* packet) {dmpGetAccel579,32849
uint8_t MPU6050::dmpGetAccel(int16_t *data, const uint8_t* packet) {dmpGetAccel587,33431
uint8_t MPU6050::dmpGetAccel(VectorInt16 *v, const uint8_t* packet) {dmpGetAccel595,33791
uint8_t MPU6050::dmpGetQuaternion(int32_t *data, const uint8_t* packet) {dmpGetQuaternion603,34149
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {dmpGetQuaternion612,34846
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {dmpGetQuaternion621,35259
uint8_t MPU6050::dmpGetGyro(int32_t *data, const uint8_t* packet) {dmpGetGyro636,35951
uint8_t MPU6050::dmpGetGyro(int16_t *data, const uint8_t* packet) {dmpGetGyro644,36532
uint8_t MPU6050::dmpGetGyro(VectorInt16 *v, const uint8_t* packet) {dmpGetGyro652,36891
uint8_t MPU6050::dmpGetLinearAccel(VectorInt16 *v, VectorInt16 *vRaw, VectorFloat *gravity) {dmpGetLinearAccel662,37390
uint8_t MPU6050::dmpGetLinearAccelInWorld(VectorInt16 *v, VectorInt16 *vReal, Quaternion *q) {dmpGetLinearAccelInWorld670,37814
uint8_t MPU6050::dmpGetGravity(int16_t *data, const uint8_t* packet) {dmpGetGravity682,38484
uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {dmpGetGravity693,38985
uint8_t MPU6050::dmpGetEuler(float *data, Quaternion *q) {dmpGetEuler704,39555
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {dmpGetYawPitchRoll712,39967
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {dmpGetYawPitchRoll722,40480
uint8_t MPU6050::dmpProcessFIFOPacket(const unsigned char *dmpData) {dmpProcessFIFOPacket743,41265
uint8_t MPU6050::dmpReadAndProcessFIFOPacket(uint8_t numPackets, uint8_t *processed) {dmpReadAndProcessFIFOPacket753,41600
uint16_t MPU6050::dmpGetFIFOPacketSize() {dmpGetFIFOPacketSize778,42498

lib/MPU6050/src/helper_3dmath.h,1653
#define _HELPER_3DMATH_H__HELPER_3DMATH_H_33,1556
class Quaternion {Quaternion35,1583
        float w;w37,1614
        float x;x38,1631
        float y;y39,1648
        float z;z40,1665
        Quaternion() {Quaternion42,1691
        Quaternion(float nw, float nx, float ny, float nz) {Quaternion49,1821
        Quaternion getProduct(Quaternion q) {getProduct56,1973
        Quaternion getConjugate() {getConjugate69,2588
        float getMagnitude() {getMagnitude73,2689
        void normalize() {normalize77,2787
        Quaternion getNormalized() {getNormalized85,2951
class VectorInt16 {VectorInt1692,3089
        int16_t x;x94,3121
        int16_t y;y95,3140
        int16_t z;z96,3159
        VectorInt16() {VectorInt1698,3179
        VectorInt16(int16_t nx, int16_t ny, int16_t nz) {VectorInt16104,3279
        float getMagnitude() {getMagnitude110,3408
        void normalize() {normalize114,3492
        VectorInt16 getNormalized() {getNormalized121,3636
        void rotate(Quaternion *q) {rotate127,3778
        VectorInt16 getRotated(Quaternion *q) {getRotated152,4988
class VectorFloat {VectorFloat159,5133
        float x;x161,5165
        float y;y162,5182
        float z;z163,5199
        VectorFloat() {VectorFloat165,5217
        VectorFloat(float nx, float ny, float nz) {VectorFloat171,5317
        float getMagnitude() {getMagnitude177,5440
        void normalize() {normalize181,5524
        VectorFloat getNormalized() {getNormalized188,5668
        void rotate(Quaternion *q) {rotate194,5810
        VectorFloat getRotated(Quaternion *q) {getRotated209,6238

lib/MPU6050/src/I2Cdev.h,4314
#define _I2CDEV_H__I2CDEV_H_48,2768
#define I2CDEV_IMPLEMENTATION I2CDEV_IMPLEMENTATION54,3020
#define I2CDEV_IMPLEMENTATION_WARNINGSI2CDEV_IMPLEMENTATION_WARNINGS61,3354
#define I2CDEV_ARDUINO_WIRE I2CDEV_ARDUINO_WIRE66,3596
#define I2CDEV_BUILTIN_NBWIRE I2CDEV_BUILTIN_NBWIRE67,3662
#define I2CDEV_BUILTIN_FASTWIRE I2CDEV_BUILTIN_FASTWIRE69,3858
#define I2CDEV_I2CMASTER_LIBRARY I2CDEV_I2CMASTER_LIBRARY70,3948
#define I2CDEV_BUILTIN_SBWIRE	I2CDEV_BUILTIN_SBWIRE71,4089
    #define ARDUINO ARDUINO97,4923
#define I2CDEV_DEFAULT_READ_TIMEOUT I2CDEV_DEFAULT_READ_TIMEOUT102,5031
class I2Cdev {I2Cdev104,5077
        static uint16_t readTimeout;readTimeout126,6987
    #define TW_START TW_START138,7294
    #define TW_REP_START TW_REP_START139,7335
    #define TW_MT_SLA_ACK TW_MT_SLA_ACK142,7406
    #define TW_MT_SLA_NACK TW_MT_SLA_NACK143,7447
    #define TW_MT_DATA_ACK TW_MT_DATA_ACK144,7488
    #define TW_MT_DATA_NACK TW_MT_DATA_NACK145,7529
    #define TW_MT_ARB_LOST TW_MT_ARB_LOST146,7570
    #define TW_MR_ARB_LOST TW_MR_ARB_LOST149,7638
    #define TW_MR_SLA_ACK TW_MR_SLA_ACK150,7679
    #define TW_MR_SLA_NACK TW_MR_SLA_NACK151,7720
    #define TW_MR_DATA_ACK TW_MR_DATA_ACK152,7761
    #define TW_MR_DATA_NACK TW_MR_DATA_NACK153,7802
    #define TW_OK TW_OK155,7844
    #define TW_ERROR TW_ERROR156,7882
    class Fastwire {Fastwire158,7921
    #define NBWIRE_BUFFER_LENGTH NBWIRE_BUFFER_LENGTH178,8761
    class TwoWire {TwoWire180,8798
            static uint8_t rxBuffer[];rxBuffer182,8835
            static uint8_t rxBufferIndex;rxBufferIndex183,8874
            static uint8_t rxBufferLength;rxBufferLength184,8916
            static uint8_t txAddress;txAddress186,8960
            static uint8_t txBuffer[];txBuffer187,8998
            static uint8_t txBufferIndex;txBufferIndex188,9037
            static uint8_t txBufferLength;txBufferLength189,9079
            static void (*user_onRequest)(void);user_onRequest192,9167
            static void (*user_onReceive)(int);user_onReceive193,9216
    #define TWI_READY TWI_READY219,10184
    #define TWI_MRX TWI_MRX220,10210
    #define TWI_MTX TWI_MTX221,10236
    #define TWI_SRX TWI_SRX222,10262
    #define TWI_STX TWI_STX223,10288
    #define TW_WRITE TW_WRITE225,10315
    #define TW_READ TW_READ226,10341
    #define TW_MT_SLA_NACK TW_MT_SLA_NACK228,10368
    #define TW_MT_DATA_NACK TW_MT_DATA_NACK229,10405
    #define CPU_FREQ CPU_FREQ231,10443
    #define TWI_FREQ TWI_FREQ232,10485
    #define TWI_BUFFER_LENGTH TWI_BUFFER_LENGTH233,10525
    #define TW_STATUS_MASK TW_STATUS_MASK237,10626
    #define TW_STATUS TW_STATUS238,10718
    #define TW_START TW_START239,10782
    #define TW_REP_START TW_REP_START240,10827
    #define TW_MT_SLA_ACK TW_MT_SLA_ACK241,10872
    #define TW_MT_SLA_NACK TW_MT_SLA_NACK242,10917
    #define TW_MT_DATA_ACK TW_MT_DATA_ACK243,10962
    #define TW_MT_DATA_NACK TW_MT_DATA_NACK244,11007
    #define TW_MT_ARB_LOST TW_MT_ARB_LOST245,11052
    #define TW_MR_ARB_LOST TW_MR_ARB_LOST246,11097
    #define TW_MR_SLA_ACK TW_MR_SLA_ACK247,11142
    #define TW_MR_SLA_NACK TW_MR_SLA_NACK248,11187
    #define TW_MR_DATA_ACK TW_MR_DATA_ACK249,11232
    #define TW_MR_DATA_NACK TW_MR_DATA_NACK250,11277
    #define TW_ST_SLA_ACK TW_ST_SLA_ACK251,11322
    #define TW_ST_ARB_LOST_SLA_ACK TW_ST_ARB_LOST_SLA_ACK252,11367
    #define TW_ST_DATA_ACK TW_ST_DATA_ACK253,11412
    #define TW_ST_DATA_NACK TW_ST_DATA_NACK254,11457
    #define TW_ST_LAST_DATA TW_ST_LAST_DATA255,11502
    #define TW_SR_SLA_ACK TW_SR_SLA_ACK256,11547
    #define TW_SR_ARB_LOST_SLA_ACK TW_SR_ARB_LOST_SLA_ACK257,11592
    #define TW_SR_GCALL_ACK TW_SR_GCALL_ACK258,11637
    #define TW_SR_ARB_LOST_GCALL_ACK TW_SR_ARB_LOST_GCALL_ACK259,11682
    #define TW_SR_DATA_ACK TW_SR_DATA_ACK260,11727
    #define TW_SR_DATA_NACK TW_SR_DATA_NACK261,11772
    #define TW_SR_GCALL_DATA_ACK TW_SR_GCALL_DATA_ACK262,11817
    #define TW_SR_GCALL_DATA_NACK TW_SR_GCALL_DATA_NACK263,11862
    #define TW_SR_STOP TW_SR_STOP264,11907
    #define TW_NO_INFO TW_NO_INFO265,11952
    #define TW_BUS_ERROR TW_BUS_ERROR266,11997
        #define sbi(sbi272,12196
        #define cbi(cbi276,12303

lib/MPU6050/src/I2Cdev.cpp,6553
    TwoWire Wire;Wire86,4814
#define BUFFER_LENGTH BUFFER_LENGTH92,4973
I2Cdev::I2Cdev() {I2Cdev97,5035
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {readBit108,5480
int8_t I2Cdev::readBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t *data, uint16_t timeout) {readBitW123,6140
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {readBits139,6933
int8_t I2Cdev::readBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t *data, uint16_t timeout) {readBitsW164,8047
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {readByte188,9027
int8_t I2Cdev::readWord(uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout) {readWord199,9570
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {readBytes211,10153
int8_t I2Cdev::readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t *data, uint16_t timeout) {readWords331,15144
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {writeBit482,21540
bool I2Cdev::writeBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t data) {writeBitW496,22070
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {writeBits511,22675
bool I2Cdev::writeBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t data) {writeBitsW540,23850
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {writeByte567,24965
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {writeWord577,25324
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {writeBytes588,25740
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {writeWords646,28295
uint16_t I2Cdev::readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;readTimeout704,30940
    boolean Fastwire::waitInt() {waitInt725,31488
    void Fastwire::setup(int khz, boolean pullup) {setup731,31623
    byte Fastwire::beginTransmission(byte device) {beginTransmission757,32922
    byte Fastwire::writeBuf(byte device, byte address, byte *data, byte num) {writeBuf777,33642
    byte Fastwire::write(byte value) {write818,35084
    byte Fastwire::readBuf(byte device, byte address, byte *data, byte num) {readBuf829,35391
    void Fastwire::reset() {reset892,37584
    byte Fastwire::stop() {stop896,37638
    uint8_t TwoWire::rxBuffer[NBWIRE_BUFFER_LENGTH];rxBuffer941,39681
    uint8_t TwoWire::rxBufferIndex = 0;rxBufferIndex942,39734
    uint8_t TwoWire::rxBufferLength = 0;rxBufferLength943,39774
    uint8_t TwoWire::txAddress = 0;txAddress945,39820
    uint8_t TwoWire::txBuffer[NBWIRE_BUFFER_LENGTH];txBuffer946,39856
    uint8_t TwoWire::txBufferIndex = 0;txBufferIndex947,39909
    uint8_t TwoWire::txBufferLength = 0;txBufferLength948,39949
    void (*TwoWire::user_onRequest)(void);user_onRequest951,40036
    void (*TwoWire::user_onReceive)(int);user_onReceive952,40079
    static volatile uint8_t twi_transmitting;twi_transmitting954,40126
    static volatile uint8_t twi_state;twi_state955,40172
    static uint8_t twi_slarw;twi_slarw956,40211
    static volatile uint8_t twi_error;twi_error957,40241
    static uint8_t twi_masterBuffer[TWI_BUFFER_LENGTH];twi_masterBuffer958,40280
    static volatile uint8_t twi_masterBufferIndex;twi_masterBufferIndex959,40336
    static uint8_t twi_masterBufferLength;twi_masterBufferLength960,40387
    static uint8_t twi_rxBuffer[TWI_BUFFER_LENGTH];twi_rxBuffer961,40430
    static volatile uint8_t twi_rxBufferIndex;twi_rxBufferIndex962,40482
    static volatile uint8_t twi_Return_Value;twi_Return_Value964,40591
    static volatile uint8_t twi_Done;twi_Done965,40637
    void (*twi_cbendTransmissionDone)(int);twi_cbendTransmissionDone966,40675
    void (*twi_cbreadFromDone)(int);twi_cbreadFromDone967,40719
    void twi_init() {twi_init969,40761
        uint8_t address;address1001,41772
        uint8_t* data;data1002,41797
        uint8_t length;length1003,41820
        uint8_t wait;wait1004,41844
        uint8_t i;i1005,41866
    } twi_Write_Vars;twi_Write_Vars1006,41885
    twi_Write_Vars *ptwv = 0;ptwv1008,41908
    static void (*fNextInterruptFunction)(void) = 0;fNextInterruptFunction1009,41938
    void twi_Finish(byte bRetVal) {twi_Finish1011,41992
    uint8_t twii_WaitForDone(uint16_t timeout) {twii_WaitForDone1021,42212
    void twii_SetState(uint8_t ucState) {twii_SetState1027,42432
    void twii_SetError(uint8_t ucError) {twii_SetError1031,42510
    void twii_InitBuffer(uint8_t ucPos, uint8_t ucLength) {twii_InitBuffer1035,42589
    void twii_CopyToBuf(uint8_t* pData, uint8_t ucLength) {twii_CopyToBuf1040,42734
    void twii_CopyFromBuf(uint8_t *pData, uint8_t ucLength) {twii_CopyFromBuf1047,42915
    void twii_SetSlaRW(uint8_t ucSlaRW) {twii_SetSlaRW1054,43098
    void twii_SetStart() {twii_SetStart1058,43176
    void twi_write01() {twi_write011062,43286
    void twi_write00() {twi_write001078,43888
    void twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait) {twi_writeTo1095,44604
    void twi_read01() {twi_read011106,44982
    void twi_read00() {twi_read001115,45353
    void twi_readFrom(uint8_t address, uint8_t* data, uint8_t length) {twi_readFrom1128,45922
    void twi_reply(uint8_t ack) {twi_reply1139,46257
    void twi_stop(void) {twi_stop1148,46535
    void twi_releaseBus(void) {twi_releaseBus1162,46921
    SIGNAL(TWI_vect) {SIGNAL1170,47114
    TwoWire::TwoWire() { }TwoWire1342,53634
    void TwoWire::begin(void) {begin1344,53666
    void TwoWire::beginTransmission(uint8_t address) {beginTransmission1354,53845
    uint8_t TwoWire::endTransmission(uint16_t timeout) {endTransmission1368,54214
    void TwoWire::nbendTransmission(void (*function)(int)) {nbendTransmission1384,54691
    void TwoWire::send(uint8_t data) {send1390,54886
    uint8_t TwoWire::receive(void) {receive1411,55477
    uint8_t TwoWire::requestFrom(uint8_t address, int quantity, uint16_t timeout) {requestFrom1425,55853
    void TwoWire::nbrequestFrom(uint8_t address, int quantity, void (*function)(int)) {nbrequestFrom1443,56390
    uint8_t TwoWire::available(void) {available1464,57010

lib/MPU6050/src/MPU6050.cpp,20683
MPU6050::MPU6050(uint8_t address):devAddr(address) {MPU605045,2024
void MPU6050::initialize() {initialize55,2502
bool MPU6050::testConnection() {testConnection66,2909
uint8_t MPU6050::getAuxVDDIOLevel() {getAuxVDDIOLevel78,3367
void MPU6050::setAuxVDDIOLevel(uint8_t level) {setAuxVDDIOLevel88,3837
uint8_t MPU6050::getRate() {getRate115,4910
void MPU6050::setRate(uint8_t rate) {setRate124,5155
uint8_t MPU6050::getExternalFrameSync() {getExternalFrameSync157,6327
void MPU6050::setExternalFrameSync(uint8_t sync) {setExternalFrameSync166,6658
uint8_t MPU6050::getDLPFMode() {getDLPFMode197,8099
void MPU6050::setDLPFMode(uint8_t mode) {setDLPFMode209,8516
uint8_t MPU6050::getFullScaleGyroRange() {getFullScaleGyroRange232,9176
void MPU6050::setFullScaleGyroRange(uint8_t range) {setFullScaleGyroRange244,9618
uint8_t MPU6050::getAccelXSelfTestFactoryTrim() {getAccelXSelfTestFactoryTrim254,9958
uint8_t MPU6050::getAccelYSelfTestFactoryTrim() {getAccelYSelfTestFactoryTrim264,10324
uint8_t MPU6050::getAccelZSelfTestFactoryTrim() {getAccelZSelfTestFactoryTrim274,10690
uint8_t MPU6050::getGyroXSelfTestFactoryTrim() {getGyroXSelfTestFactoryTrim283,10978
uint8_t MPU6050::getGyroYSelfTestFactoryTrim() {getGyroYSelfTestFactoryTrim292,11244
uint8_t MPU6050::getGyroZSelfTestFactoryTrim() {getGyroZSelfTestFactoryTrim301,11510
bool MPU6050::getAccelXSelfTest() {getAccelXSelfTest312,11814
void MPU6050::setAccelXSelfTest(bool enabled) {setAccelXSelfTest320,12102
bool MPU6050::getAccelYSelfTest() {getAccelYSelfTest327,12373
void MPU6050::setAccelYSelfTest(bool enabled) {setAccelYSelfTest335,12659
bool MPU6050::getAccelZSelfTest() {getAccelZSelfTest342,12930
void MPU6050::setAccelZSelfTest(bool enabled) {setAccelZSelfTest350,13216
uint8_t MPU6050::getFullScaleAccelRange() {getFullScaleAccelRange370,13802
void MPU6050::setFullScaleAccelRange(uint8_t range) {setFullScaleAccelRange378,14131
uint8_t MPU6050::getDHPFMode() {getDHPFMode416,15602
void MPU6050::setDHPFMode(uint8_t bandwidth) {setDHPFMode426,15972
uint8_t MPU6050::getFreefallDetectionThreshold() {getFreefallDetectionThreshold447,16972
void MPU6050::setFreefallDetectionThreshold(uint8_t threshold) {setFreefallDetectionThreshold456,17298
uint8_t MPU6050::getFreefallDetectionDuration() {getFreefallDetectionDuration479,18248
void MPU6050::setFreefallDetectionDuration(uint8_t duration) {setFreefallDetectionDuration488,18563
uint8_t MPU6050::getMotionDetectionThreshold() {getMotionDetectionThreshold513,19662
void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {setMotionDetectionThreshold522,20000
uint8_t MPU6050::getMotionDetectionDuration() {getMotionDetectionDuration543,20930
void MPU6050::setMotionDetectionDuration(uint8_t duration) {setMotionDetectionDuration552,21257
uint8_t MPU6050::getZeroMotionDetectionThreshold() {getZeroMotionDetectionThreshold583,22752
void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {setZeroMotionDetectionThreshold592,23112
uint8_t MPU6050::getZeroMotionDetectionDuration() {getZeroMotionDetectionDuration614,24122
void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {setZeroMotionDetectionDuration623,24471
bool MPU6050::getTempFIFOEnabled() {getTempFIFOEnabled635,24867
void MPU6050::setTempFIFOEnabled(bool enabled) {setTempFIFOEnabled644,25165
bool MPU6050::getXGyroFIFOEnabled() {getXGyroFIFOEnabled653,25557
void MPU6050::setXGyroFIFOEnabled(bool enabled) {setXGyroFIFOEnabled662,25865
bool MPU6050::getYGyroFIFOEnabled() {getYGyroFIFOEnabled671,26256
void MPU6050::setYGyroFIFOEnabled(bool enabled) {setYGyroFIFOEnabled680,26564
bool MPU6050::getZGyroFIFOEnabled() {getZGyroFIFOEnabled689,26955
void MPU6050::setZGyroFIFOEnabled(bool enabled) {setZGyroFIFOEnabled698,27263
bool MPU6050::getAccelFIFOEnabled() {getAccelFIFOEnabled708,27709
void MPU6050::setAccelFIFOEnabled(bool enabled) {setAccelFIFOEnabled717,28014
bool MPU6050::getSlave2FIFOEnabled() {getSlave2FIFOEnabled726,28409
void MPU6050::setSlave2FIFOEnabled(bool enabled) {setSlave2FIFOEnabled735,28703
bool MPU6050::getSlave1FIFOEnabled() {getSlave1FIFOEnabled744,29098
void MPU6050::setSlave1FIFOEnabled(bool enabled) {setSlave1FIFOEnabled753,29392
bool MPU6050::getSlave0FIFOEnabled() {getSlave0FIFOEnabled762,29787
void MPU6050::setSlave0FIFOEnabled(bool enabled) {setSlave0FIFOEnabled771,30081
bool MPU6050::getMultiMasterEnabled() {getMultiMasterEnabled792,31016
void MPU6050::setMultiMasterEnabled(bool enabled) {setMultiMasterEnabled801,31321
bool MPU6050::getWaitForExternalSensorEnabled() {getWaitForExternalSensorEnabled815,32044
void MPU6050::setWaitForExternalSensorEnabled(bool enabled) {setWaitForExternalSensorEnabled824,32403
bool MPU6050::getSlave3FIFOEnabled() {getSlave3FIFOEnabled833,32814
void MPU6050::setSlave3FIFOEnabled(bool enabled) {setSlave3FIFOEnabled842,33115
bool MPU6050::getSlaveReadWriteTransitionEnabled() {getSlaveReadWriteTransitionEnabled855,33803
void MPU6050::setSlaveReadWriteTransitionEnabled(bool enabled) {setSlaveReadWriteTransitionEnabled864,34166
uint8_t MPU6050::getMasterClockSpeed() {getMasterClockSpeed896,35482
void MPU6050::setMasterClockSpeed(uint8_t speed) {setMasterClockSpeed904,35781
uint8_t MPU6050::getSlaveAddress(uint8_t num) {getSlaveAddress951,38187
void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {setSlaveAddress962,38559
uint8_t MPU6050::getSlaveRegister(uint8_t num) {getSlaveRegister977,39172
void MPU6050::setSlaveRegister(uint8_t num, uint8_t reg) {setSlaveRegister988,39562
bool MPU6050::getSlaveEnabled(uint8_t num) {getSlaveEnabled999,40050
void MPU6050::setSlaveEnabled(uint8_t num, bool enabled) {setSlaveEnabled1010,40451
bool MPU6050::getSlaveWordByteSwap(uint8_t num) {getSlaveWordByteSwap1025,41211
void MPU6050::setSlaveWordByteSwap(uint8_t num, bool enabled) {setSlaveWordByteSwap1036,41665
bool MPU6050::getSlaveWriteMode(uint8_t num) {getSlaveWriteMode1050,42390
void MPU6050::setSlaveWriteMode(uint8_t num, bool mode) {setSlaveWriteMode1061,42832
bool MPU6050::getSlaveWordGroupOffset(uint8_t num) {getSlaveWordGroupOffset1076,43601
void MPU6050::setSlaveWordGroupOffset(uint8_t num, bool enabled) {setSlaveWordGroupOffset1087,44051
uint8_t MPU6050::getSlaveDataLength(uint8_t num) {getSlaveDataLength1098,44593
void MPU6050::setSlaveDataLength(uint8_t num, uint8_t length) {setSlaveDataLength1109,45044
uint8_t MPU6050::getSlave4Address() {getSlave4Address1125,45660
void MPU6050::setSlave4Address(uint8_t address) {setSlave4Address1134,45929
uint8_t MPU6050::getSlave4Register() {getSlave4Register1144,46314
void MPU6050::setSlave4Register(uint8_t reg) {setSlave4Register1153,46601
void MPU6050::setSlave4OutputByte(uint8_t data) {setSlave4OutputByte1162,46965
bool MPU6050::getSlave4Enabled() {getSlave4Enabled1171,47356
void MPU6050::setSlave4Enabled(bool enabled) {setSlave4Enabled1180,47655
bool MPU6050::getSlave4InterruptEnabled() {getSlave4InterruptEnabled1192,48260
void MPU6050::setSlave4InterruptEnabled(bool enabled) {setSlave4InterruptEnabled1201,48628
bool MPU6050::getSlave4WriteMode() {getSlave4WriteMode1213,49253
void MPU6050::setSlave4WriteMode(bool mode) {setSlave4WriteMode1222,49597
uint8_t MPU6050::getSlave4MasterDelay() {getSlave4MasterDelay1240,50406
void MPU6050::setSlave4MasterDelay(uint8_t delay) {setSlave4MasterDelay1249,50751
uint8_t MPU6050::getSlate4InputByte() {getSlate4InputByte1258,51172
bool MPU6050::getPassthroughStatus() {getPassthroughStatus1274,51756
bool MPU6050::getSlave4IsDone() {getSlave4IsDone1286,52307
bool MPU6050::getLostArbitration() {getLostArbitration1297,52818
bool MPU6050::getSlave4Nack() {getSlave4Nack1308,53298
bool MPU6050::getSlave3Nack() {getSlave3Nack1319,53774
bool MPU6050::getSlave2Nack() {getSlave2Nack1330,54250
bool MPU6050::getSlave1Nack() {getSlave1Nack1341,54726
bool MPU6050::getSlave0Nack() {getSlave0Nack1352,55202
bool MPU6050::getInterruptMode() {getInterruptMode1365,55604
void MPU6050::setInterruptMode(bool mode) {setInterruptMode1375,55954
bool MPU6050::getInterruptDrive() {getInterruptDrive1384,56309
void MPU6050::setInterruptDrive(bool drive) {setInterruptDrive1394,56658
bool MPU6050::getInterruptLatch() {getInterruptLatch1403,57038
void MPU6050::setInterruptLatch(bool latch) {setInterruptLatch1413,57399
bool MPU6050::getInterruptLatchClear() {getInterruptLatchClear1422,57795
void MPU6050::setInterruptLatchClear(bool clear) {setInterruptLatchClear1432,58178
bool MPU6050::getFSyncInterruptLevel() {getFSyncInterruptLevel1441,58548
void MPU6050::setFSyncInterruptLevel(bool level) {setFSyncInterruptLevel1451,58933
bool MPU6050::getFSyncInterruptEnabled() {getFSyncInterruptEnabled1460,59295
void MPU6050::setFSyncInterruptEnabled(bool enabled) {setFSyncInterruptEnabled1470,59670
bool MPU6050::getI2CBypassEnabled() {getI2CBypassEnabled1484,60375
void MPU6050::setI2CBypassEnabled(bool enabled) {setI2CBypassEnabled1499,61087
bool MPU6050::getClockOutputEnabled() {getClockOutputEnabled1511,61672
void MPU6050::setClockOutputEnabled(bool enabled) {setClockOutputEnabled1524,62266
uint8_t MPU6050::getIntEnabled() {getIntEnabled1537,62706
void MPU6050::setIntEnabled(uint8_t enabled) {setIntEnabled1549,63131
bool MPU6050::getIntFreefallEnabled() {getIntFreefallEnabled1558,63446
void MPU6050::setIntFreefallEnabled(bool enabled) {setIntFreefallEnabled1568,63788
bool MPU6050::getIntMotionEnabled() {getIntMotionEnabled1577,64141
void MPU6050::setIntMotionEnabled(bool enabled) {setIntMotionEnabled1587,64488
bool MPU6050::getIntZeroMotionEnabled() {getIntZeroMotionEnabled1596,64846
void MPU6050::setIntZeroMotionEnabled(bool enabled) {setIntZeroMotionEnabled1606,65208
bool MPU6050::getIntFIFOBufferOverflowEnabled() {getIntFIFOBufferOverflowEnabled1615,65576
void MPU6050::setIntFIFOBufferOverflowEnabled(bool enabled) {setIntFIFOBufferOverflowEnabled1625,65965
bool MPU6050::getIntI2CMasterEnabled() {getIntI2CMasterEnabled1635,66420
void MPU6050::setIntI2CMasterEnabled(bool enabled) {setIntI2CMasterEnabled1645,66783
bool MPU6050::getIntDataReadyEnabled() {getIntDataReadyEnabled1655,67245
void MPU6050::setIntDataReadyEnabled(bool enabled) {setIntDataReadyEnabled1665,67598
uint8_t MPU6050::getIntStatus() {getIntStatus1678,68083
bool MPU6050::getIntFreefallStatus() {getIntFreefallStatus1689,68482
bool MPU6050::getIntMotionStatus() {getIntMotionStatus1700,68926
bool MPU6050::getIntZeroMotionStatus() {getIntZeroMotionStatus1711,69380
bool MPU6050::getIntFIFOBufferOverflowStatus() {getIntFIFOBufferOverflowStatus1722,69832
bool MPU6050::getIntI2CMasterStatus() {getIntI2CMasterStatus1734,70360
bool MPU6050::getIntDataReadyStatus() {getIntDataReadyStatus1745,70807
void MPU6050::getMotion9(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* mx, int16_t* my, int16_t* mz) {getMotion91768,71869
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {getMotion61784,72736
void MPU6050::getAcceleration(int16_t* x, int16_t* y, int16_t* z) {getAcceleration1829,75018
int16_t MPU6050::getAccelerationX() {getAccelerationX1840,75476
int16_t MPU6050::getAccelerationY() {getAccelerationY1849,75806
int16_t MPU6050::getAccelerationZ() {getAccelerationZ1858,76136
int16_t MPU6050::getTemperature() {getTemperature1869,76457
void MPU6050::getRotation(int16_t* x, int16_t* y, int16_t* z) {getRotation1908,78260
int16_t MPU6050::getRotationX() {getRotationX1919,78704
int16_t MPU6050::getRotationY() {getRotationY1928,79020
int16_t MPU6050::getRotationZ() {getRotationZ1937,79336
uint8_t MPU6050::getExternalSensorByte(int position) {getExternalSensorByte2018,83673
uint16_t MPU6050::getExternalSensorWord(int position) {getExternalSensorWord2027,84007
uint32_t MPU6050::getExternalSensorDWord(int position) {getExternalSensorDWord2036,84392
uint8_t MPU6050::getMotionStatus() {getMotionStatus2047,84830
bool MPU6050::getXNegMotionDetected() {getXNegMotionDetected2056,85131
bool MPU6050::getXPosMotionDetected() {getXPosMotionDetected2065,85463
bool MPU6050::getYNegMotionDetected() {getYNegMotionDetected2074,85795
bool MPU6050::getYPosMotionDetected() {getYPosMotionDetected2083,86127
bool MPU6050::getZNegMotionDetected() {getZNegMotionDetected2092,86459
bool MPU6050::getZPosMotionDetected() {getZPosMotionDetected2101,86791
bool MPU6050::getZeroMotionDetected() {getZeroMotionDetected2110,87113
void MPU6050::setSlaveOutputByte(uint8_t num, uint8_t data) {setSlaveOutputByte2125,87667
bool MPU6050::getExternalShadowDelayEnabled() {getExternalShadowDelayEnabled2140,88259
void MPU6050::setExternalShadowDelayEnabled(bool enabled) {setExternalShadowDelayEnabled2150,88683
bool MPU6050::getSlaveDelayEnabled(uint8_t num) {getSlaveDelayEnabled2171,89585
void MPU6050::setSlaveDelayEnabled(uint8_t num, bool enabled) {setSlaveDelayEnabled2183,90034
void MPU6050::resetGyroscopePath() {resetGyroscopePath2195,90442
void MPU6050::resetAccelerometerPath() {resetAccelerometerPath2204,90821
void MPU6050::resetTemperaturePath() {resetTemperaturePath2213,91209
uint8_t MPU6050::getAccelerometerPowerOnDelay() {getAccelerometerPowerOnDelay2233,92217
void MPU6050::setAccelerometerPowerOnDelay(uint8_t delay) {setAccelerometerPowerOnDelay2243,92644
uint8_t MPU6050::getFreefallDetectionCounterDecrement() {getFreefallDetectionCounterDecrement2272,93859
void MPU6050::setFreefallDetectionCounterDecrement(uint8_t decrement) {setFreefallDetectionCounterDecrement2282,94306
uint8_t MPU6050::getMotionDetectionCounterDecrement() {getMotionDetectionCounterDecrement2308,95410
void MPU6050::setMotionDetectionCounterDecrement(uint8_t decrement) {setMotionDetectionCounterDecrement2318,95853
bool MPU6050::getFIFOEnabled() {getFIFOEnabled2332,96429
void MPU6050::setFIFOEnabled(bool enabled) {setFIFOEnabled2342,96742
bool MPU6050::getI2CMasterModeEnabled() {getI2CMasterModeEnabled2356,97450
void MPU6050::setI2CMasterModeEnabled(bool enabled) {setI2CMasterModeEnabled2366,97809
void MPU6050::switchSPIEnabled(bool enabled) {switchSPIEnabled2373,98124
void MPU6050::resetFIFO() {resetFIFO2382,98508
void MPU6050::resetI2CMaster() {resetI2CMaster2391,98881
void MPU6050::resetSensors() {resetSensors2406,99515
void MPU6050::reset() {reset2417,99843
bool MPU6050::getSleepEnabled() {getSleepEnabled2431,100512
void MPU6050::setSleepEnabled(bool enabled) {setSleepEnabled2441,100821
bool MPU6050::getWakeCycleEnabled() {getWakeCycleEnabled2452,101321
void MPU6050::setWakeCycleEnabled(bool enabled) {setWakeCycleEnabled2462,101646
bool MPU6050::getTempSensorEnabled() {getTempSensorEnabled2476,102249
void MPU6050::setTempSensorEnabled(bool enabled) {setTempSensorEnabled2490,102874
uint8_t MPU6050::getClockSource() {getClockSource2500,103224
void MPU6050::setClockSource(uint8_t source) {setClockSource2534,104662
uint8_t MPU6050::getWakeFrequency() {getWakeFrequency2563,105672
void MPU6050::setWakeFrequency(uint8_t frequency) {setWakeFrequency2571,105987
bool MPU6050::getStandbyXAccelEnabled() {getStandbyXAccelEnabled2581,106415
void MPU6050::setStandbyXAccelEnabled(bool enabled) {setStandbyXAccelEnabled2591,106766
bool MPU6050::getStandbyYAccelEnabled() {getStandbyYAccelEnabled2600,107153
void MPU6050::setStandbyYAccelEnabled(bool enabled) {setStandbyYAccelEnabled2610,107504
bool MPU6050::getStandbyZAccelEnabled() {getStandbyZAccelEnabled2619,107891
void MPU6050::setStandbyZAccelEnabled(bool enabled) {setStandbyZAccelEnabled2629,108242
bool MPU6050::getStandbyXGyroEnabled() {getStandbyXGyroEnabled2638,108625
void MPU6050::setStandbyXGyroEnabled(bool enabled) {setStandbyXGyroEnabled2648,108970
bool MPU6050::getStandbyYGyroEnabled() {getStandbyYGyroEnabled2657,109352
void MPU6050::setStandbyYGyroEnabled(bool enabled) {setStandbyYGyroEnabled2667,109697
bool MPU6050::getStandbyZGyroEnabled() {getStandbyZGyroEnabled2676,110079
void MPU6050::setStandbyZGyroEnabled(bool enabled) {setStandbyZGyroEnabled2686,110424
uint16_t MPU6050::getFIFOCount() {getFIFOCount2699,110979
uint8_t MPU6050::getFIFOByte() {getFIFOByte2731,112457
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {getFIFOBytes2735,112574
void MPU6050::setFIFOByte(uint8_t data) {setFIFOByte2746,112847
uint8_t MPU6050::getDeviceID() {getDeviceID2759,113216
void MPU6050::setDeviceID(uint8_t id) {setDeviceID2772,113649
uint8_t MPU6050::getOTPBankValid() {getOTPBankValid2780,113877
void MPU6050::setOTPBankValid(bool enabled) {setOTPBankValid2784,114027
int8_t MPU6050::getXGyroOffsetTC() {getXGyroOffsetTC2787,114166
void MPU6050::setXGyroOffsetTC(int8_t offset) {setXGyroOffsetTC2791,114338
int8_t MPU6050::getYGyroOffsetTC() {getYGyroOffsetTC2797,114525
void MPU6050::setYGyroOffsetTC(int8_t offset) {setYGyroOffsetTC2801,114697
int8_t MPU6050::getZGyroOffsetTC() {getZGyroOffsetTC2807,114884
void MPU6050::setZGyroOffsetTC(int8_t offset) {setZGyroOffsetTC2811,115056
int8_t MPU6050::getXFineGain() {getXFineGain2817,115244
void MPU6050::setXFineGain(int8_t gain) {setXFineGain2821,115364
int8_t MPU6050::getYFineGain() {getYFineGain2827,115496
void MPU6050::setYFineGain(int8_t gain) {setYFineGain2831,115616
int8_t MPU6050::getZFineGain() {getZFineGain2837,115748
void MPU6050::setZFineGain(int8_t gain) {setZFineGain2841,115868
int16_t MPU6050::getXAccelOffset() {getXAccelOffset2847,115999
void MPU6050::setXAccelOffset(int16_t offset) {setXAccelOffset2851,116155
int16_t MPU6050::getYAccelOffset() {getYAccelOffset2857,116291
void MPU6050::setYAccelOffset(int16_t offset) {setYAccelOffset2861,116447
int16_t MPU6050::getZAccelOffset() {getZAccelOffset2867,116583
void MPU6050::setZAccelOffset(int16_t offset) {setZAccelOffset2871,116739
int16_t MPU6050::getXGyroOffset() {getXGyroOffset2877,116879
void MPU6050::setXGyroOffset(int16_t offset) {setXGyroOffset2881,117037
int16_t MPU6050::getYGyroOffset() {getYGyroOffset2887,117178
void MPU6050::setYGyroOffset(int16_t offset) {setYGyroOffset2891,117336
int16_t MPU6050::getZGyroOffset() {getZGyroOffset2897,117477
void MPU6050::setZGyroOffset(int16_t offset) {setZGyroOffset2901,117635
bool MPU6050::getIntPLLReadyEnabled() {getIntPLLReadyEnabled2907,117790
void MPU6050::setIntPLLReadyEnabled(bool enabled) {setIntPLLReadyEnabled2911,117950
bool MPU6050::getIntDMPEnabled() {getIntDMPEnabled2914,118102
void MPU6050::setIntDMPEnabled(bool enabled) {setIntDMPEnabled2918,118253
bool MPU6050::getDMPInt5Status() {getDMPInt5Status2924,118416
bool MPU6050::getDMPInt4Status() {getDMPInt4Status2928,118562
bool MPU6050::getDMPInt3Status() {getDMPInt3Status2932,118708
bool MPU6050::getDMPInt2Status() {getDMPInt2Status2936,118854
bool MPU6050::getDMPInt1Status() {getDMPInt1Status2940,119000
bool MPU6050::getDMPInt0Status() {getDMPInt0Status2944,119146
bool MPU6050::getIntPLLReadyStatus() {getIntPLLReadyStatus2951,119333
bool MPU6050::getIntDMPStatus() {getIntDMPStatus2955,119492
bool MPU6050::getDMPEnabled() {getDMPEnabled2962,119682
void MPU6050::setDMPEnabled(bool enabled) {setDMPEnabled2966,119827
void MPU6050::resetDMP() {resetDMP2969,119964
void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {setMemoryBank2975,120107
void MPU6050::setMemoryStartAddress(uint8_t address) {setMemoryStartAddress2984,120367
uint8_t MPU6050::readMemoryByte() {readMemoryByte2990,120514
void MPU6050::writeMemoryByte(uint8_t data) {writeMemoryByte2994,120633
void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {readMemoryBlock2997,120739
bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {writeMemoryBlock3028,121873
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {writeProgMemoryBlock3104,124881
bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {writeDMPConfigurationSet3107,125078
bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {writeProgDMPConfigurationSet3183,127968
uint8_t MPU6050::getDMPConfig1() {getDMPConfig13189,128138
void MPU6050::setDMPConfig1(uint8_t config) {setDMPConfig13193,128258
uint8_t MPU6050::getDMPConfig2() {getDMPConfig23199,128392
void MPU6050::setDMPConfig2(uint8_t config) {setDMPConfig23203,128512

src/lv_port_fatfs.c,1558
#define DRIVE_LETTER DRIVE_LETTER15,210
typedef  FIL file_t;file_t21,369
typedef  FF_DIR dir_t;dir_t24,458
void lv_fs_if_init(void)lv_fs_if_init58,1909
static void fs_init(void)fs_init101,3126
static lv_fs_res_t fs_open(lv_fs_drv_t* drv, void* file_p, const char* path, lv_fs_mode_t mode)fs_open122,3775
static lv_fs_res_t fs_close(lv_fs_drv_t* drv, void* file_p)fs_close151,4543
static lv_fs_res_t fs_read(lv_fs_drv_t* drv, void* file_p, void* buf, uint32_t btr, uint32_t* br)fs_read167,5064
static lv_fs_res_t fs_write(lv_fs_drv_t* drv, void* file_p, const void* buf, uint32_t btw, uint32_t* bw)fs_write183,5662
static lv_fs_res_t fs_seek(lv_fs_drv_t* drv, void* file_p, uint32_t pos)fs_seek198,6269
static lv_fs_res_t fs_size(lv_fs_drv_t* drv, void* file_p, uint32_t* size_p)fs_size211,6664
static lv_fs_res_t fs_tell(lv_fs_drv_t* drv, void* file_p, uint32_t* pos_p)fs_tell225,7114
static lv_fs_res_t fs_remove(lv_fs_drv_t* drv, const char* path)fs_remove237,7443
static lv_fs_res_t fs_trunc(lv_fs_drv_t* drv, void* file_p)fs_trunc253,7912
static lv_fs_res_t fs_rename(lv_fs_drv_t* drv, const char* oldname, const char* newname)fs_rename267,8340
static lv_fs_res_t fs_free(lv_fs_drv_t* drv, uint32_t* total_p, uint32_t* free_p)fs_free284,8872
static lv_fs_res_t fs_dir_open(lv_fs_drv_t* drv, void* dir_p, const char* path)fs_dir_open300,9318
static lv_fs_res_t fs_dir_read(lv_fs_drv_t* drv, void* dir_p, char* fn)fs_dir_read315,9868
static lv_fs_res_t fs_dir_close(lv_fs_drv_t* drv, void* dir_p)fs_dir_close344,10506

src/setup_scr_home.c,53
void setup_scr_home(lv_ui* ui)setup_scr_home11,125

src/ambient.cpp,84
void Ambient::init(int mode)init4,23
unsigned int Ambient::getLux()getLux29,484

src/sd_card.cpp,884
void SdCard::init()init4,23
void SdCard::listDir(const char* dirname, uint8_t levels)listDir45,701
void SdCard::createDir(const char* path)createDir84,1379
void SdCard::removeDir(const char* path)removeDir97,1575
void SdCard::readFile(const char* path)readFile110,1771
String SdCard::readFileLine(const char* path, int num = 1)readFileLine129,2082
void SdCard::writeFile(const char* path, const char* message)writeFile164,2595
void SdCard::appendFile(const char* path, const char* message)appendFile185,2955
void SdCard::renameFile(const char* path1, const char* path2)renameFile206,3329
void SdCard::deleteFile(const char* path)deleteFile219,3571
void SdCard::readBinFromSd(const char* path, uint8_t* buf)readBinFromSd232,3772
void SdCard::writeBinToSd(const char* path, uint8_t* buf)writeBinToSd260,4163
void SdCard::fileIO(const char* path)fileIO278,4433

src/lv_font_simsun_12.c,470
#define LV_FONT_SIMSUN_12 LV_FONT_SIMSUN_1210,243
static LV_ATTRIBUTE_LARGE_CONST const uint8_t gylph_bitmap[] = {gylph_bitmap20,392
static const lv_font_fmt_txt_glyph_dsc_t glyph_dsc[] = {glyph_dsc1126,39599
static const uint16_t unicode_list_2[] = {unicode_list_21284,53361
static const lv_font_fmt_txt_cmap_t cmaps[] =cmaps1296,53843
static lv_font_fmt_txt_dsc_t font_dsc = {font_dsc1319,54618
lv_font_t lv_font_simsun_12 = {lv_font_simsun_121337,54975

src/gui_guider.c,39
void setup_ui(lv_ui* ui)setup_ui6,63

src/rgb_led.cpp,154
void Pixel::init()init4,23
Pixel& Pixel::setRGB(int id, int r, int g, int b)setRGB10,148
Pixel& Pixel::setBrightness(float duty)setBrightness18,272

src/network.cpp,132
void Network::init(String ssid, String password)init4,23
unsigned int Network::getBilibiliFans(String uid)getBilibiliFans47,960

src/main.cpp,266
Display screen;screen14,276
IMU mpu;mpu15,292
Pixel rgb;rgb16,301
SdCard tf;tf17,312
Network wifi;wifi18,323
lv_ui guider_ui;guider_ui20,338
void setup()setup22,356
int frame_id = 0;frame_id58,1211
char buf[100];buf59,1229
void loop()loop61,1245

src/events_init.c,45
void events_init(lv_ui *ui)events_init5,63

src/lv_cubic_gui.c,78
lv_obj_t* scr;scr7,111
void lv_holo_cubic_gui(void)lv_holo_cubic_gui9,127

src/imu.cpp,318
void IMU::init()init3,18
void IMU::update(int interval)update11,154
int16_t IMU::getAccelX()getAccelX52,736
int16_t IMU::getAccelY()getAccelY57,778
int16_t IMU::getAccelZ()getAccelZ62,820
int16_t IMU::getGyroX()getGyroX67,862
int16_t IMU::getGyroY()getGyroY72,903
int16_t IMU::getGyroZ()getGyroZ77,944

src/setup_scr_scenes.c,57
void setup_scr_scenes(lv_ui* ui)setup_scr_scenes11,125

src/lv_port_indev.c,405
lv_indev_t* indev_encoder;indev_encoder18,366
int32_t encoder_diff;encoder_diff20,394
lv_indev_state_t encoder_state;encoder_state21,416
void lv_port_indev_init(void)lv_port_indev_init24,450
static void encoder_init(void)encoder_init72,1687
static bool encoder_read(lv_indev_drv_t* indev_drv, lv_indev_data_t* data)encoder_read78,1805
static void encoder_handler(void)encoder_handler90,2136

src/display.cpp,495
TFT_eSPI tft = TFT_eSPI();tft7,140
static lv_disp_buf_t disp_buf;disp_buf9,168
static lv_color_t buf[LV_HOR_RES_MAX * 10];buf10,199
void my_print(lv_log_level_t level, const char* file, uint32_t line, const char* fun, const char* dsc)my_print13,245
void my_disp_flush(lv_disp_drv_t* disp, const lv_area_t* area, lv_color_t* color_p)my_disp_flush20,429
void Display::init()init34,759
void Display::routine()routine58,1330
void Display::setBackLight(float duty)setBackLight63,1379
